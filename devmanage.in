#!/usr/bin/env python3

import json
from pathlib import Path
import re
import shutil
from sys import argv
from tempfile import TemporaryDirectory as tempdir
import urllib.request as request

pgm = Path(argv[0]).name

root_path = Path("@DEVDOCS_INSTALL_DATADIR@")
html_path = root_path / "html"

docs_url = "https://devdocs.io/docs.json"
doc_templ_url = "https://documents.devdocs.io/{}/{}"

opener = request.build_opener()
opener.addheaders = [("User-agent", "Mozilla/5.0")]
request.install_opener(opener)

def download(url, banner):
    def spin():
        while True:
            for c in "||//--\\\\": yield c
    spinner = spin()

    def reporthook(*args):
        print(next(spinner) + "\b", end="", flush=True)

    with tempdir() as dirname:
        path = Path(dirname) / "file.json"

        print(f"{banner:.<40s} ", end="")
        request.urlretrieve(url, path, reporthook)
        with open(path) as fp: content = json.load(fp)
        print("OK")

    return content

def purge(path):
    for child in path.iterdir():
        shutil.rmtree(child) if child.is_dir() else child.unlink()
    path.rmdir()

def save_db(path, db):
    for item, content in db.items():
        item_path = path / (item + ".html")
        item_path.parent.mkdir(parents=True, exist_ok=True)

        content = re.sub('((href=")(?!http)[^"#]+)', "\\1.html", content)
        item_path.write_text(content)

def save_index(path, old_index):
    index = { }
    for e in old_index["entries"]:
        index[e["name"]] = re.sub("^([^#]+)", "\\1.html", e["path"])

    index_path = path / "index.json"
    with open(index_path, "w") as fp: json.dump(index, fp)

def show_online():
    online = download(docs_url, "Online topics")
    for doc in online: print(doc["slug"])

def show_local():
    print("Local topics:")
    local = sorted([ path.name for path in html_path.iterdir() ])
    for doc in local: print(doc)

def update():
    local = sorted([ path.name for path in html_path.iterdir() ])
    install(local, force=False)

def install(names, force):
    online = download(docs_url, "Document index")

    for doc in online:
        name = doc["slug"]
        path = html_path / name

        if name in names:
            mtime_path = path / "mtime"
            old_mtime = mtime_path.read_text() if mtime_path.exists() else ""

            mtime = str(doc["mtime"])
            if mtime != old_mtime or force:
                index = download(doc_templ_url.format(name, "index.json"), name + "-index")
                db = download(doc_templ_url.format(name, "db.json"), name + "-db")

                if path.exists(): purge(path)
                path.mkdir()

                save_db(path, db)
                save_index(path, index)

                mtime_path.write_text(mtime)

def remove(names):
    print("Removing topics:")
    for name in names:
        path = html_path / name
        if path.exists():
            print(name); purge(path)

def usage():
    b = "\033[1m"
    n = "\033[0m"
    print(f"""
Usage: {b}{pgm}{n} -a|--all
   or: {b}{pgm}{n} -l|--local
   or: {b}{pgm}{n} -u|--update
   or: {b}{pgm}{n} -i|--install {b}topic{n} [{b}topic{n}] ...
   or: {b}{pgm}{n} -r|--remove  {b}topic{n} [{b}topic{n}] ...
   or: {b}{pgm}{n} -h|--help
   or: {b}{pgm}{n} -v|--version

Where:
    -a|--all        Show all topics available online.
    -l|--local      Show locally cached topics.
    -u|--update     Update all local topics.

    -i|--install    Cache one or more topics locally.
    -r|--remove     Remove local topic(s).

Share and enjoy.
""")

####################
if len(argv) < 2:
    usage()

elif len(argv) == 2:
    if argv[1] in [ "-a", "--all" ]:
        show_online()

    elif argv[1] in [ "-l", "--local" ]:
        show_local()

    elif argv[1] in [ "-u", "--update" ]:
        update()

    elif argv[1] in [ "-h", "--help" ]:
        usage()

    elif argv[1] in [ "-v", "--version" ]:
        print(pgm + " version @PROJECT_VERSION@")

    else: usage()

else:
    if argv[1] in [ "-i", "--install" ]:
        install(argv[2:], force=True)

    elif argv[1] in [ "-r", "--remove" ]:
        remove(argv[2:])

    else: usage()
