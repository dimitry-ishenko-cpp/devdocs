{"hs": "hs.html", "hs.accessibilityState()": "hs.html#accessibilityState", "hs.accessibilityStateCallback": "hs.html#accessibilityStateCallback", "hs.alert": "hs.alert.html", "hs.alert.closeAll()": "hs.alert.html#closeAll", "hs.alert.closeSpecific()": "hs.alert.html#closeSpecific", "hs.alert.defaultStyle": "hs.alert.html#defaultStyle", "hs.alert.show()": "hs.alert.html#show", "hs.alert.showWithImage()": "hs.alert.html#showWithImage", "hs.allowAppleScript()": "hs.html#allowAppleScript", "hs.appfinder": "hs.appfinder.html", "hs.appfinder.appFromName()": "hs.appfinder.html#appFromName", "hs.appfinder.appFromWindowTitle()": "hs.appfinder.html#appFromWindowTitle", "hs.appfinder.appFromWindowTitlePattern()": "hs.appfinder.html#appFromWindowTitlePattern", "hs.appfinder.windowFromWindowTitle()": "hs.appfinder.html#windowFromWindowTitle", "hs.appfinder.windowFromWindowTitlePattern()": "hs.appfinder.html#windowFromWindowTitlePattern", "hs.applescript": "hs.applescript.html", "hs.application": "hs.application.html", "hs.application.activate()": "hs.application.html#activate", "hs.application.allWindows()": "hs.application.html#allWindows", "hs.application.applicationForPID()": "hs.application.html#applicationForPID", "hs.application.applicationsForBundleID()": "hs.application.html#applicationsForBundleID", "hs.application.bundleID()": "hs.application.html#bundleID", "hs.application.defaultAppForUTI()": "hs.application.html#defaultAppForUTI", "hs.application.enableSpotlightForNameSearches()": "hs.application.html#enableSpotlightForNameSearches", "hs.application.find()": "hs.application.html#find", "hs.application.findMenuItem()": "hs.application.html#findMenuItem", "hs.application.findWindow()": "hs.application.html#findWindow", "hs.application.focusedWindow()": "hs.application.html#focusedWindow", "hs.application.frontmostApplication()": "hs.application.html#frontmostApplication", "hs.application.get()": "hs.application.html#get", "hs.application.getMenuItems()": "hs.application.html#getMenuItems", "hs.application.getWindow()": "hs.application.html#getWindow", "hs.application.hide()": "hs.application.html#hide", "hs.application.infoForBundleID()": "hs.application.html#infoForBundleID", "hs.application.infoForBundlePath()": "hs.application.html#infoForBundlePath", "hs.application.isFrontmost()": "hs.application.html#isFrontmost", "hs.application.isHidden()": "hs.application.html#isHidden", "hs.application.isRunning()": "hs.application.html#isRunning", "hs.application.kill()": "hs.application.html#kill", "hs.application.kill9()": "hs.application.html#kill9", "hs.application.kind()": "hs.application.html#kind", "hs.application.launchOrFocus()": "hs.application.html#launchOrFocus", "hs.application.launchOrFocusByBundleID()": "hs.application.html#launchOrFocusByBundleID", "hs.application.localizationsForBundleID()": "hs.application.html#localizationsForBundleID", "hs.application.localizationsForBundlePath()": "hs.application.html#localizationsForBundlePath", "hs.application.mainWindow()": "hs.application.html#mainWindow", "hs.application.menuGlyphs": "hs.application.html#menuGlyphs", "hs.application.name()": "hs.application.html#name", "hs.application.nameForBundleID()": "hs.application.html#nameForBundleID", "hs.application.open()": "hs.application.html#open", "hs.application.path()": "hs.application.html#path", "hs.application.pathForBundleID()": "hs.application.html#pathForBundleID", "hs.application.pid()": "hs.application.html#pid", "hs.application.preferredLocalizationsForBundleID()": "hs.application.html#preferredLocalizationsForBundleID", "hs.application.preferredLocalizationsForBundlePath()": "hs.application.html#preferredLocalizationsForBundlePath", "hs.application.runningApplications()": "hs.application.html#runningApplications", "hs.application.selectMenuItem()": "hs.application.html#selectMenuItem", "hs.application.setFrontmost()": "hs.application.html#setFrontmost", "hs.application.title()": "hs.application.html#title", "hs.application.unhide()": "hs.application.html#unhide", "hs.application.visibleWindows()": "hs.application.html#visibleWindows", "hs.application.watcher": "hs.application.watcher.html", "hs.application.watcher.activated": "hs.application.watcher.html#activated", "hs.application.watcher.deactivated": "hs.application.watcher.html#deactivated", "hs.application.watcher.hidden": "hs.application.watcher.html#hidden", "hs.application.watcher.launched": "hs.application.watcher.html#launched", "hs.application.watcher.launching": "hs.application.watcher.html#launching", "hs.application.watcher.new()": "hs.application.watcher.html#new", "hs.application.watcher.start()": "hs.application.watcher.html#start", "hs.application.watcher.stop()": "hs.application.watcher.html#stop", "hs.application.watcher.terminated": "hs.application.watcher.html#terminated", "hs.application.watcher.unhidden": "hs.application.watcher.html#unhidden", "hs.audiodevice": "hs.audiodevice.html", "hs.audiodevice.allDevices()": "hs.audiodevice.html#allDevices", "hs.audiodevice.allInputDataSources()": "hs.audiodevice.html#allInputDataSources", "hs.audiodevice.allInputDevices()": "hs.audiodevice.html#allInputDevices", "hs.audiodevice.allOutputDataSources()": "hs.audiodevice.html#allOutputDataSources", "hs.audiodevice.allOutputDevices()": "hs.audiodevice.html#allOutputDevices", "hs.audiodevice.balance()": "hs.audiodevice.html#balance", "hs.audiodevice.current()": "hs.audiodevice.html#current", "hs.audiodevice.currentInputDataSource()": "hs.audiodevice.html#currentInputDataSource", "hs.audiodevice.currentOutputDataSource()": "hs.audiodevice.html#currentOutputDataSource", "hs.audiodevice.datasource": "hs.audiodevice.datasource.html", "hs.audiodevice.datasource.name()": "hs.audiodevice.datasource.html#name", "hs.audiodevice.datasource.setDefault()": "hs.audiodevice.datasource.html#setDefault", "hs.audiodevice.defaultEffectDevice()": "hs.audiodevice.html#defaultEffectDevice", "hs.audiodevice.defaultInputDevice()": "hs.audiodevice.html#defaultInputDevice", "hs.audiodevice.defaultOutputDevice()": "hs.audiodevice.html#defaultOutputDevice", "hs.audiodevice.findDeviceByName()": "hs.audiodevice.html#findDeviceByName", "hs.audiodevice.findDeviceByUID()": "hs.audiodevice.html#findDeviceByUID", "hs.audiodevice.findInputByName()": "hs.audiodevice.html#findInputByName", "hs.audiodevice.findInputByUID()": "hs.audiodevice.html#findInputByUID", "hs.audiodevice.findOutputByName()": "hs.audiodevice.html#findOutputByName", "hs.audiodevice.findOutputByUID()": "hs.audiodevice.html#findOutputByUID", "hs.audiodevice.inputMuted()": "hs.audiodevice.html#inputMuted", "hs.audiodevice.inputVolume()": "hs.audiodevice.html#inputVolume", "hs.audiodevice.inUse()": "hs.audiodevice.html#inUse", "hs.audiodevice.isInputDevice()": "hs.audiodevice.html#isInputDevice", "hs.audiodevice.isOutputDevice()": "hs.audiodevice.html#isOutputDevice", "hs.audiodevice.jackConnected()": "hs.audiodevice.html#jackConnected", "hs.audiodevice.muted()": "hs.audiodevice.html#muted", "hs.audiodevice.name()": "hs.audiodevice.html#name", "hs.audiodevice.outputMuted()": "hs.audiodevice.html#outputMuted", "hs.audiodevice.outputVolume()": "hs.audiodevice.html#outputVolume", "hs.audiodevice.setBalance()": "hs.audiodevice.html#setBalance", "hs.audiodevice.setDefaultEffectDevice()": "hs.audiodevice.html#setDefaultEffectDevice", "hs.audiodevice.setDefaultInputDevice()": "hs.audiodevice.html#setDefaultInputDevice", "hs.audiodevice.setDefaultOutputDevice()": "hs.audiodevice.html#setDefaultOutputDevice", "hs.audiodevice.setInputMuted()": "hs.audiodevice.html#setInputMuted", "hs.audiodevice.setInputVolume()": "hs.audiodevice.html#setInputVolume", "hs.audiodevice.setMuted()": "hs.audiodevice.html#setMuted", "hs.audiodevice.setOutputMuted()": "hs.audiodevice.html#setOutputMuted", "hs.audiodevice.setOutputVolume()": "hs.audiodevice.html#setOutputVolume", "hs.audiodevice.setVolume()": "hs.audiodevice.html#setVolume", "hs.audiodevice.supportsInputDataSources()": "hs.audiodevice.html#supportsInputDataSources", "hs.audiodevice.supportsOutputDataSources()": "hs.audiodevice.html#supportsOutputDataSources", "hs.audiodevice.transportType()": "hs.audiodevice.html#transportType", "hs.audiodevice.uid()": "hs.audiodevice.html#uid", "hs.audiodevice.volume()": "hs.audiodevice.html#volume", "hs.audiodevice.watcher": "hs.audiodevice.watcher.html", "hs.audiodevice.watcher.isRunning()": "hs.audiodevice.watcher.html#isRunning", "hs.audiodevice.watcher.setCallback()": "hs.audiodevice.watcher.html#setCallback", "hs.audiodevice.watcher.start()": "hs.audiodevice.watcher.html#start", "hs.audiodevice.watcher.stop()": "hs.audiodevice.watcher.html#stop", "hs.audiodevice.watcherCallback()": "hs.audiodevice.html#watcherCallback", "hs.audiodevice.watcherIsRunning()": "hs.audiodevice.html#watcherIsRunning", "hs.audiodevice.watcherStart()": "hs.audiodevice.html#watcherStart", "hs.audiodevice.watcherStop()": "hs.audiodevice.html#watcherStop", "hs.autoLaunch()": "hs.html#autoLaunch", "hs.automaticallyCheckForUpdates()": "hs.html#automaticallyCheckForUpdates", "hs.axuielement": "hs.axuielement.html", "hs.axuielement.actionDescription()": "hs.axuielement.html#actionDescription", "hs.axuielement.actionNames()": "hs.axuielement.html#actionNames", "hs.axuielement.actions": "hs.axuielement.html#actions", "hs.axuielement.allAttributeValues()": "hs.axuielement.html#allAttributeValues", "hs.axuielement.allDescendantElements()": "hs.axuielement.html#allDescendantElements", "hs.axuielement.applicationElement()": "hs.axuielement.html#applicationElement", "hs.axuielement.applicationElementForPID()": "hs.axuielement.html#applicationElementForPID", "hs.axuielement.asHSApplication()": "hs.axuielement.html#asHSApplication", "hs.axuielement.asHSWindow()": "hs.axuielement.html#asHSWindow", "hs.axuielement.attributeNames()": "hs.axuielement.html#attributeNames", "hs.axuielement.attributes": "hs.axuielement.html#attributes", "hs.axuielement.attributeValue()": "hs.axuielement.html#attributeValue", "hs.axuielement.attributeValueCount()": "hs.axuielement.html#attributeValueCount", "hs.axuielement.axtextmarker": "hs.axuielement.axtextmarker.html", "hs.axuielement.axtextmarker._functionCheck()": "hs.axuielement.axtextmarker.html#_functionCheck", "hs.axuielement.axtextmarker.bytes()": "hs.axuielement.axtextmarker.html#bytes", "hs.axuielement.axtextmarker.endMarker()": "hs.axuielement.axtextmarker.html#endMarker", "hs.axuielement.axtextmarker.length()": "hs.axuielement.axtextmarker.html#length", "hs.axuielement.axtextmarker.newMarker()": "hs.axuielement.axtextmarker.html#newMarker", "hs.axuielement.axtextmarker.newRange()": "hs.axuielement.axtextmarker.html#newRange", "hs.axuielement.axtextmarker.startMarker()": "hs.axuielement.axtextmarker.html#startMarker", "hs.axuielement.buildTree()": "hs.axuielement.html#buildTree", "hs.axuielement.childrenWithRole()": "hs.axuielement.html#childrenWithRole", "hs.axuielement.copy()": "hs.axuielement.html#copy", "hs.axuielement.elementAtPosition()": "hs.axuielement.html#elementAtPosition", "hs.axuielement.elementSearch()": "hs.axuielement.html#elementSearch", "hs.axuielement.isAttributeSettable()": "hs.axuielement.html#isAttributeSettable", "hs.axuielement.isValid()": "hs.axuielement.html#isValid", "hs.axuielement.matchesCriteria()": "hs.axuielement.html#matchesCriteria", "hs.axuielement.observer": "hs.axuielement.observer.html", "hs.axuielement.observer.addWatcher()": "hs.axuielement.observer.html#addWatcher", "hs.axuielement.observer.callback()": "hs.axuielement.observer.html#callback", "hs.axuielement.observer.isRunning()": "hs.axuielement.observer.html#isRunning", "hs.axuielement.observer.new()": "hs.axuielement.observer.html#new", "hs.axuielement.observer.notifications": "hs.axuielement.observer.html#notifications", "hs.axuielement.observer.removeWatcher()": "hs.axuielement.observer.html#removeWatcher", "hs.axuielement.observer.start()": "hs.axuielement.observer.html#start", "hs.axuielement.observer.stop()": "hs.axuielement.observer.html#stop", "hs.axuielement.observer.watching()": "hs.axuielement.observer.html#watching", "hs.axuielement.orientations": "hs.axuielement.html#orientations", "hs.axuielement.parameterizedAttributeNames()": "hs.axuielement.html#parameterizedAttributeNames", "hs.axuielement.parameterizedAttributes": "hs.axuielement.html#parameterizedAttributes", "hs.axuielement.parameterizedAttributeValue()": "hs.axuielement.html#parameterizedAttributeValue", "hs.axuielement.path()": "hs.axuielement.html#path", "hs.axuielement.performAction()": "hs.axuielement.html#performAction", "hs.axuielement.pid()": "hs.axuielement.html#pid", "hs.axuielement.roles": "hs.axuielement.html#roles", "hs.axuielement.rulerMarkers": "hs.axuielement.html#rulerMarkers", "hs.axuielement.searchCriteriaFunction()": "hs.axuielement.html#searchCriteriaFunction", "hs.axuielement.setAttributeValue()": "hs.axuielement.html#setAttributeValue", "hs.axuielement.setTimeout()": "hs.axuielement.html#setTimeout", "hs.axuielement.sortDirections": "hs.axuielement.html#sortDirections", "hs.axuielement.subroles": "hs.axuielement.html#subroles", "hs.axuielement.systemElementAtPosition()": "hs.axuielement.html#systemElementAtPosition", "hs.axuielement.systemWideElement()": "hs.axuielement.html#systemWideElement", "hs.axuielement.units": "hs.axuielement.html#units", "hs.axuielement.windowElement()": "hs.axuielement.html#windowElement", "hs.base64": "hs.base64.html", "hs.base64.decode()": "hs.base64.html#decode", "hs.base64.encode()": "hs.base64.html#encode", "hs.battery": "hs.battery.html", "hs.battery._report()": "hs.battery.html#_report", "hs.battery.adapterSerialNumber()": "hs.battery.html#adapterSerialNumber", "hs.battery.amperage()": "hs.battery.html#amperage", "hs.battery.batterySerialNumber()": "hs.battery.html#batterySerialNumber", "hs.battery.batteryType()": "hs.battery.html#batteryType", "hs.battery.capacity()": "hs.battery.html#capacity", "hs.battery.cycles()": "hs.battery.html#cycles", "hs.battery.designCapacity()": "hs.battery.html#designCapacity", "hs.battery.getAll()": "hs.battery.html#getAll", "hs.battery.health()": "hs.battery.html#health", "hs.battery.healthCondition()": "hs.battery.html#healthCondition", "hs.battery.isCharged()": "hs.battery.html#isCharged", "hs.battery.isCharging()": "hs.battery.html#isCharging", "hs.battery.isFinishingCharge()": "hs.battery.html#isFinishingCharge", "hs.battery.maxCapacity()": "hs.battery.html#maxCapacity", "hs.battery.name()": "hs.battery.html#name", "hs.battery.otherBatteryInfo()": "hs.battery.html#otherBatteryInfo", "hs.battery.percentage()": "hs.battery.html#percentage", "hs.battery.powerSource()": "hs.battery.html#powerSource", "hs.battery.powerSourceType()": "hs.battery.html#powerSourceType", "hs.battery.privateBluetoothBatteryInfo()": "hs.battery.html#privateBluetoothBatteryInfo", "hs.battery.timeRemaining()": "hs.battery.html#timeRemaining", "hs.battery.timeToFullCharge()": "hs.battery.html#timeToFullCharge", "hs.battery.voltage()": "hs.battery.html#voltage", "hs.battery.warningLevel()": "hs.battery.html#warningLevel", "hs.battery.watcher": "hs.battery.watcher.html", "hs.battery.watcher.new()": "hs.battery.watcher.html#new", "hs.battery.watcher.start()": "hs.battery.watcher.html#start", "hs.battery.watcher.stop()": "hs.battery.watcher.html#stop", "hs.battery.watts()": "hs.battery.html#watts", "hs.bonjour": "hs.bonjour.html", "hs.bonjour.findBrowsableDomains()": "hs.bonjour.html#findBrowsableDomains", "hs.bonjour.findRegistrationDomains()": "hs.bonjour.html#findRegistrationDomains", "hs.bonjour.findServices()": "hs.bonjour.html#findServices", "hs.bonjour.includesPeerToPeer()": "hs.bonjour.html#includesPeerToPeer", "hs.bonjour.machineServices()": "hs.bonjour.html#machineServices", "hs.bonjour.networkServices()": "hs.bonjour.html#networkServices", "hs.bonjour.new()": "hs.bonjour.html#new", "hs.bonjour.service": "hs.bonjour.service.html", "hs.bonjour.service.addresses()": "hs.bonjour.service.html#addresses", "hs.bonjour.service.domain()": "hs.bonjour.service.html#domain", "hs.bonjour.service.hostname()": "hs.bonjour.service.html#hostname", "hs.bonjour.service.includesPeerToPeer()": "hs.bonjour.service.html#includesPeerToPeer", "hs.bonjour.service.monitor()": "hs.bonjour.service.html#monitor", "hs.bonjour.service.name()": "hs.bonjour.service.html#name", "hs.bonjour.service.new()": "hs.bonjour.service.html#new", "hs.bonjour.service.port()": "hs.bonjour.service.html#port", "hs.bonjour.service.publish()": "hs.bonjour.service.html#publish", "hs.bonjour.service.remote()": "hs.bonjour.service.html#remote", "hs.bonjour.service.resolve()": "hs.bonjour.service.html#resolve", "hs.bonjour.service.serviceTypes": "hs.bonjour.service.html#serviceTypes", "hs.bonjour.service.stop()": "hs.bonjour.service.html#stop", "hs.bonjour.service.stopMonitoring()": "hs.bonjour.service.html#stopMonitoring", "hs.bonjour.service.txtRecord()": "hs.bonjour.service.html#txtRecord", "hs.bonjour.service.type()": "hs.bonjour.service.html#type", "hs.bonjour.stop()": "hs.bonjour.html#stop", "hs.brightness": "hs.brightness.html", "hs.brightness.ambient()": "hs.brightness.html#ambient", "hs.brightness.get()": "hs.brightness.html#get", "hs.brightness.set()": "hs.brightness.html#set", "hs.caffeinate": "hs.caffeinate.html", "hs.caffeinate.currentAssertions()": "hs.caffeinate.html#currentAssertions", "hs.caffeinate.declareUserActivity()": "hs.caffeinate.html#declareUserActivity", "hs.caffeinate.fastUserSwitch()": "hs.caffeinate.html#fastUserSwitch", "hs.caffeinate.get()": "hs.caffeinate.html#get", "hs.caffeinate.lockScreen()": "hs.caffeinate.html#lockScreen", "hs.caffeinate.logOut()": "hs.caffeinate.html#logOut", "hs.caffeinate.restartSystem()": "hs.caffeinate.html#restartSystem", "hs.caffeinate.sessionProperties()": "hs.caffeinate.html#sessionProperties", "hs.caffeinate.set()": "hs.caffeinate.html#set", "hs.caffeinate.shutdownSystem()": "hs.caffeinate.html#shutdownSystem", "hs.caffeinate.startScreensaver()": "hs.caffeinate.html#startScreensaver", "hs.caffeinate.systemSleep()": "hs.caffeinate.html#systemSleep", "hs.caffeinate.toggle()": "hs.caffeinate.html#toggle", "hs.caffeinate.watcher": "hs.caffeinate.watcher.html", "hs.caffeinate.watcher.new()": "hs.caffeinate.watcher.html#new", "hs.caffeinate.watcher.screensaverDidStart": "hs.caffeinate.watcher.html#screensaverDidStart", "hs.caffeinate.watcher.screensaverDidStop": "hs.caffeinate.watcher.html#screensaverDidStop", "hs.caffeinate.watcher.screensaverWillStop": "hs.caffeinate.watcher.html#screensaverWillStop", "hs.caffeinate.watcher.screensDidLock": "hs.caffeinate.watcher.html#screensDidLock", "hs.caffeinate.watcher.screensDidSleep": "hs.caffeinate.watcher.html#screensDidSleep", "hs.caffeinate.watcher.screensDidUnlock": "hs.caffeinate.watcher.html#screensDidUnlock", "hs.caffeinate.watcher.screensDidWake": "hs.caffeinate.watcher.html#screensDidWake", "hs.caffeinate.watcher.sessionDidBecomeActive": "hs.caffeinate.watcher.html#sessionDidBecomeActive", "hs.caffeinate.watcher.sessionDidResignActive": "hs.caffeinate.watcher.html#sessionDidResignActive", "hs.caffeinate.watcher.start()": "hs.caffeinate.watcher.html#start", "hs.caffeinate.watcher.stop()": "hs.caffeinate.watcher.html#stop", "hs.caffeinate.watcher.systemDidWake": "hs.caffeinate.watcher.html#systemDidWake", "hs.caffeinate.watcher.systemWillPowerOff": "hs.caffeinate.watcher.html#systemWillPowerOff", "hs.caffeinate.watcher.systemWillSleep": "hs.caffeinate.watcher.html#systemWillSleep", "hs.camera": "hs.camera.html", "hs.camera.allCameras()": "hs.camera.html#allCameras", "hs.camera.connectionID()": "hs.camera.html#connectionID", "hs.camera.isInUse()": "hs.camera.html#isInUse", "hs.camera.isPropertyWatcherRunning()": "hs.camera.html#isPropertyWatcherRunning", "hs.camera.isWatcherRunning()": "hs.camera.html#isWatcherRunning", "hs.camera.name()": "hs.camera.html#name", "hs.camera.setPropertyWatcherCallback()": "hs.camera.html#setPropertyWatcherCallback", "hs.camera.setWatcherCallback()": "hs.camera.html#setWatcherCallback", "hs.camera.startPropertyWatcher()": "hs.camera.html#startPropertyWatcher", "hs.camera.startWatcher()": "hs.camera.html#startWatcher", "hs.camera.stopPropertyWatcher()": "hs.camera.html#stopPropertyWatcher", "hs.camera.stopWatcher()": "hs.camera.html#stopWatcher", "hs.camera.uid()": "hs.camera.html#uid", "hs.cameraState()": "hs.html#cameraState", "hs.canCheckForUpdates()": "hs.html#canCheckForUpdates", "hs.canvas": "hs.canvas.html", "hs.canvas._accessibilitySubrole()": "hs.canvas.html#_accessibilitySubrole", "hs.canvas.alpha()": "hs.canvas.html#alpha", "hs.canvas.appendElements()": "hs.canvas.html#appendElements", "hs.canvas.assignElement()": "hs.canvas.html#assignElement", "hs.canvas.attributes": "hs.canvas.html#attributes", "hs.canvas.behavior()": "hs.canvas.html#behavior", "hs.canvas.behaviorAsLabels()": "hs.canvas.html#behaviorAsLabels", "hs.canvas.bringToFront()": "hs.canvas.html#bringToFront", "hs.canvas.canvasDefaultFor()": "hs.canvas.html#canvasDefaultFor", "hs.canvas.canvasDefaultKeys()": "hs.canvas.html#canvasDefaultKeys", "hs.canvas.canvasDefaults()": "hs.canvas.html#canvasDefaults", "hs.canvas.canvasElements()": "hs.canvas.html#canvasElements", "hs.canvas.canvasMouseEvents()": "hs.canvas.html#canvasMouseEvents", "hs.canvas.clickActivating()": "hs.canvas.html#clickActivating", "hs.canvas.compositeTypes": "hs.canvas.html#compositeTypes", "hs.canvas.copy()": "hs.canvas.html#copy", "hs.canvas.defaultTextStyle()": "hs.canvas.html#defaultTextStyle", "hs.canvas.delete()": "hs.canvas.html#delete", "hs.canvas.draggingCallback()": "hs.canvas.html#draggingCallback", "hs.canvas.elementAttribute()": "hs.canvas.html#elementAttribute", "hs.canvas.elementBounds()": "hs.canvas.html#elementBounds", "hs.canvas.elementCount()": "hs.canvas.html#elementCount", "hs.canvas.elementKeys()": "hs.canvas.html#elementKeys", "hs.canvas.elementSpec()": "hs.canvas.html#elementSpec", "hs.canvas.frame()": "hs.canvas.html#frame", "hs.canvas.help()": "hs.canvas.html#help", "hs.canvas.hide()": "hs.canvas.html#hide", "hs.canvas.imageFromCanvas()": "hs.canvas.html#imageFromCanvas", "hs.canvas.insertElement()": "hs.canvas.html#insertElement", "hs.canvas.isOccluded()": "hs.canvas.html#isOccluded", "hs.canvas.isShowing()": "hs.canvas.html#isShowing", "hs.canvas.isVisible()": "hs.canvas.html#isVisible", "hs.canvas.level()": "hs.canvas.html#level", "hs.canvas.matrix": "hs.canvas.matrix.html", "hs.canvas.matrix.append()": "hs.canvas.matrix.html#append", "hs.canvas.matrix.identity()": "hs.canvas.matrix.html#identity", "hs.canvas.matrix.invert()": "hs.canvas.matrix.html#invert", "hs.canvas.matrix.prepend()": "hs.canvas.matrix.html#prepend", "hs.canvas.matrix.rotate()": "hs.canvas.matrix.html#rotate", "hs.canvas.matrix.scale()": "hs.canvas.matrix.html#scale", "hs.canvas.matrix.shear()": "hs.canvas.matrix.html#shear", "hs.canvas.matrix.translate()": "hs.canvas.matrix.html#translate", "hs.canvas.minimumTextSize()": "hs.canvas.html#minimumTextSize", "hs.canvas.mouseCallback()": "hs.canvas.html#mouseCallback", "hs.canvas.new()": "hs.canvas.html#new", "hs.canvas.object": "hs.canvas.html#object", "hs.canvas.orderAbove()": "hs.canvas.html#orderAbove", "hs.canvas.orderBelow()": "hs.canvas.html#orderBelow", "hs.canvas.percentages": "hs.canvas.html#percentages", "hs.canvas.removeElement()": "hs.canvas.html#removeElement", "hs.canvas.replaceElements()": "hs.canvas.html#replaceElements", "hs.canvas.rotateElement()": "hs.canvas.html#rotateElement", "hs.canvas.sendToBack()": "hs.canvas.html#sendToBack", "hs.canvas.show()": "hs.canvas.html#show", "hs.canvas.size()": "hs.canvas.html#size", "hs.canvas.topLeft()": "hs.canvas.html#topLeft", "hs.canvas.transformation()": "hs.canvas.html#transformation", "hs.canvas.useCustomAccessibilitySubrole()": "hs.canvas.html#useCustomAccessibilitySubrole", "hs.canvas.wantsLayer()": "hs.canvas.html#wantsLayer", "hs.canvas.windowBehaviors": "hs.canvas.html#windowBehaviors", "hs.canvas.windowLevels": "hs.canvas.html#windowLevels", "hs.checkForUpdates()": "hs.html#checkForUpdates", "hs.chooser": "hs.chooser.html", "hs.chooser.attachedToolbar()": "hs.chooser.html#attachedToolbar", "hs.chooser.bgDark()": "hs.chooser.html#bgDark", "hs.chooser.cancel()": "hs.chooser.html#cancel", "hs.chooser.choices()": "hs.chooser.html#choices", "hs.chooser.delete()": "hs.chooser.html#delete", "hs.chooser.enableDefaultForQuery()": "hs.chooser.html#enableDefaultForQuery", "hs.chooser.fgColor()": "hs.chooser.html#fgColor", "hs.chooser.globalCallback": "hs.chooser.html#globalCallback", "hs.chooser.hide()": "hs.chooser.html#hide", "hs.chooser.hideCallback()": "hs.chooser.html#hideCallback", "hs.chooser.invalidCallback()": "hs.chooser.html#invalidCallback", "hs.chooser.isVisible()": "hs.chooser.html#isVisible", "hs.chooser.new()": "hs.chooser.html#new", "hs.chooser.placeholderText()": "hs.chooser.html#placeholderText", "hs.chooser.query()": "hs.chooser.html#query", "hs.chooser.queryChangedCallback()": "hs.chooser.html#queryChangedCallback", "hs.chooser.refreshChoicesCallback()": "hs.chooser.html#refreshChoicesCallback", "hs.chooser.rightClickCallback()": "hs.chooser.html#rightClickCallback", "hs.chooser.rows()": "hs.chooser.html#rows", "hs.chooser.searchSubText()": "hs.chooser.html#searchSubText", "hs.chooser.select()": "hs.chooser.html#select", "hs.chooser.selectedRow()": "hs.chooser.html#selectedRow", "hs.chooser.selectedRowContents()": "hs.chooser.html#selectedRowContents", "hs.chooser.show()": "hs.chooser.html#show", "hs.chooser.showCallback()": "hs.chooser.html#showCallback", "hs.chooser.subTextColor()": "hs.chooser.html#subTextColor", "hs.chooser.width()": "hs.chooser.html#width", "hs.cleanUTF8forConsole()": "hs.html#cleanUTF8forConsole", "hs.closeConsole()": "hs.html#closeConsole", "hs.closePreferences()": "hs.html#closePreferences", "hs.completionsForInputString": "hs.html#completionsForInputString", "hs.configdir": "hs.html#configdir", "hs.console": "hs.console.html", "hs.console.alpha()": "hs.console.html#alpha", "hs.console.asHSDrawing": "hs.console.html#asHSDrawing", "hs.console.asHSWindow": "hs.console.html#asHSWindow", "hs.console.behavior()": "hs.console.html#behavior", "hs.console.behaviorAsLabels()": "hs.console.html#behaviorAsLabels", "hs.console.clearConsole()": "hs.console.html#clearConsole", "hs.console.consoleCommandColor()": "hs.console.html#consoleCommandColor", "hs.console.consoleFont()": "hs.console.html#consoleFont", "hs.console.consolePrintColor()": "hs.console.html#consolePrintColor", "hs.console.consoleResultColor()": "hs.console.html#consoleResultColor", "hs.console.darkMode()": "hs.console.html#darkMode", "hs.console.defaultToolbar": "hs.console.html#defaultToolbar", "hs.console.getConsole()": "hs.console.html#getConsole", "hs.console.getHistory()": "hs.console.html#getHistory", "hs.console.hswindow()": "hs.console.html#hswindow", "hs.console.inputBackgroundColor()": "hs.console.html#inputBackgroundColor", "hs.console.level()": "hs.console.html#level", "hs.console.maxOutputHistory()": "hs.console.html#maxOutputHistory", "hs.console.outputBackgroundColor()": "hs.console.html#outputBackgroundColor", "hs.console.printStyledtext()": "hs.console.html#printStyledtext", "hs.console.setConsole()": "hs.console.html#setConsole", "hs.console.setHistory()": "hs.console.html#setHistory", "hs.console.smartInsertDeleteEnabled()": "hs.console.html#smartInsertDeleteEnabled", "hs.console.titleVisibility()": "hs.console.html#titleVisibility", "hs.console.toolbar()": "hs.console.html#toolbar", "hs.console.windowBackgroundColor()": "hs.console.html#windowBackgroundColor", "hs.consoleOnTop()": "hs.html#consoleOnTop", "hs.coroutineApplicationYield()": "hs.html#coroutineApplicationYield", "hs.crash": "hs.crash.html", "hs.crash.attemptMemoryRelease()": "hs.crash.html#attemptMemoryRelease", "hs.crash.crash()": "hs.crash.html#crash", "hs.crash.crashKV()": "hs.crash.html#crashKV", "hs.crash.crashLog()": "hs.crash.html#crashLog", "hs.crash.dumpCLIBS()": "hs.crash.html#dumpCLIBS", "hs.crash.residentSize()": "hs.crash.html#residentSize", "hs.crash.throwObjCException()": "hs.crash.html#throwObjCException", "hs.deezer": "hs.deezer.html", "hs.deezer.displayCurrentTrack()": "hs.deezer.html#displayCurrentTrack", "hs.deezer.ff()": "hs.deezer.html#ff", "hs.deezer.getCurrentAlbum()": "hs.deezer.html#getCurrentAlbum", "hs.deezer.getCurrentArtist()": "hs.deezer.html#getCurrentArtist", "hs.deezer.getCurrentTrack()": "hs.deezer.html#getCurrentTrack", "hs.deezer.getPlaybackState()": "hs.deezer.html#getPlaybackState", "hs.deezer.getPosition()": "hs.deezer.html#getPosition", "hs.deezer.getVolume()": "hs.deezer.html#getVolume", "hs.deezer.isPlaying()": "hs.deezer.html#isPlaying", "hs.deezer.isRunning()": "hs.deezer.html#isRunning", "hs.deezer.next()": "hs.deezer.html#next", "hs.deezer.pause()": "hs.deezer.html#pause", "hs.deezer.play()": "hs.deezer.html#play", "hs.deezer.playpause()": "hs.deezer.html#playpause", "hs.deezer.previous()": "hs.deezer.html#previous", "hs.deezer.rw()": "hs.deezer.html#rw", "hs.deezer.setPosition()": "hs.deezer.html#setPosition", "hs.deezer.setVolume()": "hs.deezer.html#setVolume", "hs.deezer.state_paused": "hs.deezer.html#state_paused", "hs.deezer.state_playing": "hs.deezer.html#state_playing", "hs.deezer.state_stopped": "hs.deezer.html#state_stopped", "hs.deezer.volumeDown()": "hs.deezer.html#volumeDown", "hs.deezer.volumeUp()": "hs.deezer.html#volumeUp", "hs.dialog": "hs.dialog.html", "hs.dialog.alert()": "hs.dialog.html#alert", "hs.dialog.blockAlert()": "hs.dialog.html#blockAlert", "hs.dialog.chooseFileOrFolder()": "hs.dialog.html#chooseFileOrFolder", "hs.dialog.color": "hs.dialog.color.html", "hs.dialog.color.alpha()": "hs.dialog.color.html#alpha", "hs.dialog.color.callback()": "hs.dialog.color.html#callback", "hs.dialog.color.color()": "hs.dialog.color.html#color", "hs.dialog.color.continuous()": "hs.dialog.color.html#continuous", "hs.dialog.color.hide()": "hs.dialog.color.html#hide", "hs.dialog.color.mode()": "hs.dialog.color.html#mode", "hs.dialog.color.show()": "hs.dialog.color.html#show", "hs.dialog.color.showsAlpha()": "hs.dialog.color.html#showsAlpha", "hs.dialog.textPrompt()": "hs.dialog.html#textPrompt", "hs.dialog.webviewAlert()": "hs.dialog.html#webviewAlert", "hs.distributednotifications": "hs.distributednotifications.html", "hs.distributednotifications.new()": "hs.distributednotifications.html#new", "hs.distributednotifications.post()": "hs.distributednotifications.html#post", "hs.distributednotifications.start()": "hs.distributednotifications.html#start", "hs.distributednotifications.stop()": "hs.distributednotifications.html#stop", "hs.doc": "hs.doc.html", "hs.doc.builder": "hs.doc.builder.html", "hs.doc.builder.genComments()": "hs.doc.builder.html#genComments", "hs.doc.builder.genJSON()": "hs.doc.builder.html#genJSON", "hs.doc.builder.genSQL()": "hs.doc.builder.html#genSQL", "hs.doc.help()": "hs.doc.html#help", "hs.doc.hsdocs": "hs.doc.hsdocs.html", "hs.doc.hsdocs.browserDarkMode()": "hs.doc.hsdocs.html#browserDarkMode", "hs.doc.hsdocs.browserFrame()": "hs.doc.hsdocs.html#browserFrame", "hs.doc.hsdocs.forceExternalBrowser()": "hs.doc.hsdocs.html#forceExternalBrowser", "hs.doc.hsdocs.help()": "hs.doc.hsdocs.html#help", "hs.doc.hsdocs.interface()": "hs.doc.hsdocs.html#interface", "hs.doc.hsdocs.moduleEntitiesInSidebar()": "hs.doc.hsdocs.html#moduleEntitiesInSidebar", "hs.doc.hsdocs.port()": "hs.doc.hsdocs.html#port", "hs.doc.hsdocs.start()": "hs.doc.hsdocs.html#start", "hs.doc.hsdocs.stop()": "hs.doc.hsdocs.html#stop", "hs.doc.hsdocs.trackBrowserFrame()": "hs.doc.hsdocs.html#trackBrowserFrame", "hs.doc.locateJSONFile()": "hs.doc.html#locateJSONFile", "hs.doc.markdown": "hs.doc.markdown.html", "hs.doc.markdown.convert()": "hs.doc.markdown.html#convert", "hs.doc.preloadSpoonDocs()": "hs.doc.html#preloadSpoonDocs", "hs.doc.registeredFiles()": "hs.doc.html#registeredFiles", "hs.doc.registerJSONFile()": "hs.doc.html#registerJSONFile", "hs.doc.unregisterJSONFile()": "hs.doc.html#unregisterJSONFile", "hs.dockicon": "hs.dockicon.html", "hs.dockIcon()": "hs.html#dockIcon", "hs.dockicon.bounce()": "hs.dockicon.html#bounce", "hs.dockicon.hide()": "hs.dockicon.html#hide", "hs.dockicon.setBadge()": "hs.dockicon.html#setBadge", "hs.dockicon.show()": "hs.dockicon.html#show", "hs.dockicon.tileCanvas()": "hs.dockicon.html#tileCanvas", "hs.dockicon.tileSize()": "hs.dockicon.html#tileSize", "hs.dockicon.tileUpdate()": "hs.dockicon.html#tileUpdate", "hs.dockicon.visible()": "hs.dockicon.html#visible", "hs.dockIconClickCallback": "hs.html#dockIconClickCallback", "hs.docstrings_json_file": "hs.html#docstrings_json_file", "hs.drawing": "hs.drawing.html", "hs.drawing.alpha()": "hs.drawing.html#alpha", "hs.drawing.appImage()": "hs.drawing.html#appImage", "hs.drawing.arc()": "hs.drawing.html#arc", "hs.drawing.behavior()": "hs.drawing.html#behavior", "hs.drawing.behaviorAsLabels()": "hs.drawing.html#behaviorAsLabels", "hs.drawing.bringToFront()": "hs.drawing.html#bringToFront", "hs.drawing.circle()": "hs.drawing.html#circle", "hs.drawing.clickCallbackActivating()": "hs.drawing.html#clickCallbackActivating", "hs.drawing.clippingRectangle()": "hs.drawing.html#clippingRectangle", "hs.drawing.color": "hs.drawing.color.html", "hs.drawing.color.ansiTerminalColors": "hs.drawing.color.html#ansiTerminalColors", "hs.drawing.color.asHSB()": "hs.drawing.color.html#asHSB", "hs.drawing.color.asRGB()": "hs.drawing.color.html#asRGB", "hs.drawing.color.colorsFor()": "hs.drawing.color.html#colorsFor", "hs.drawing.color.definedCollections": "hs.drawing.color.html#definedCollections", "hs.drawing.color.hammerspoon": "hs.drawing.color.html#hammerspoon", "hs.drawing.color.lists()": "hs.drawing.color.html#lists", "hs.drawing.color.x11": "hs.drawing.color.html#x11", "hs.drawing.defaultTextStyle()": "hs.drawing.html#defaultTextStyle", "hs.drawing.delete()": "hs.drawing.html#delete", "hs.drawing.disableScreenUpdates()": "hs.drawing.html#disableScreenUpdates", "hs.drawing.ellipticalArc()": "hs.drawing.html#ellipticalArc", "hs.drawing.enableScreenUpdates()": "hs.drawing.html#enableScreenUpdates", "hs.drawing.frame()": "hs.drawing.html#frame", "hs.drawing.getStyledText()": "hs.drawing.html#getStyledText", "hs.drawing.getTextDrawingSize()": "hs.drawing.html#getTextDrawingSize", "hs.drawing.hide()": "hs.drawing.html#hide", "hs.drawing.image()": "hs.drawing.html#image", "hs.drawing.imageAlignment()": "hs.drawing.html#imageAlignment", "hs.drawing.imageAnimates()": "hs.drawing.html#imageAnimates", "hs.drawing.imageFrame()": "hs.drawing.html#imageFrame", "hs.drawing.imageScaling()": "hs.drawing.html#imageScaling", "hs.drawing.line()": "hs.drawing.html#line", "hs.drawing.orderAbove()": "hs.drawing.html#orderAbove", "hs.drawing.orderBelow()": "hs.drawing.html#orderBelow", "hs.drawing.rectangle()": "hs.drawing.html#rectangle", "hs.drawing.rotateImage()": "hs.drawing.html#rotateImage", "hs.drawing.sendToBack()": "hs.drawing.html#sendToBack", "hs.drawing.setAlpha()": "hs.drawing.html#setAlpha", "hs.drawing.setArcAngles()": "hs.drawing.html#setArcAngles", "hs.drawing.setBehavior()": "hs.drawing.html#setBehavior", "hs.drawing.setBehaviorByLabels()": "hs.drawing.html#setBehaviorByLabels", "hs.drawing.setClickCallback()": "hs.drawing.html#setClickCallback", "hs.drawing.setFill()": "hs.drawing.html#setFill", "hs.drawing.setFillColor()": "hs.drawing.html#setFillColor", "hs.drawing.setFillGradient()": "hs.drawing.html#setFillGradient", "hs.drawing.setFrame()": "hs.drawing.html#setFrame", "hs.drawing.setImage()": "hs.drawing.html#setImage", "hs.drawing.setImageASCII()": "hs.drawing.html#setImageASCII", "hs.drawing.setImageFromPath()": "hs.drawing.html#setImageFromPath", "hs.drawing.setLevel()": "hs.drawing.html#setLevel", "hs.drawing.setRoundedRectRadii()": "hs.drawing.html#setRoundedRectRadii", "hs.drawing.setSize()": "hs.drawing.html#setSize", "hs.drawing.setStroke()": "hs.drawing.html#setStroke", "hs.drawing.setStrokeColor()": "hs.drawing.html#setStrokeColor", "hs.drawing.setStrokeWidth()": "hs.drawing.html#setStrokeWidth", "hs.drawing.setStyledText()": "hs.drawing.html#setStyledText", "hs.drawing.setText()": "hs.drawing.html#setText", "hs.drawing.setTextColor()": "hs.drawing.html#setTextColor", "hs.drawing.setTextFont()": "hs.drawing.html#setTextFont", "hs.drawing.setTextSize()": "hs.drawing.html#setTextSize", "hs.drawing.setTextStyle()": "hs.drawing.html#setTextStyle", "hs.drawing.setTopLeft()": "hs.drawing.html#setTopLeft", "hs.drawing.show()": "hs.drawing.html#show", "hs.drawing.text()": "hs.drawing.html#text", "hs.drawing.windowBehaviors": "hs.drawing.html#windowBehaviors", "hs.drawing.windowLevels": "hs.drawing.html#windowLevels", "hs.eventtap": "hs.eventtap.html", "hs.eventtap.checkKeyboardModifiers()": "hs.eventtap.html#checkKeyboardModifiers", "hs.eventtap.checkMouseButtons()": "hs.eventtap.html#checkMouseButtons", "hs.eventtap.doubleClickInterval()": "hs.eventtap.html#doubleClickInterval", "hs.eventtap.event": "hs.eventtap.event.html", "hs.eventtap.event.asData()": "hs.eventtap.event.html#asData", "hs.eventtap.event.copy()": "hs.eventtap.event.html#copy", "hs.eventtap.event.getButtonState()": "hs.eventtap.event.html#getButtonState", "hs.eventtap.event.getCharacters()": "hs.eventtap.event.html#getCharacters", "hs.eventtap.event.getFlags()": "hs.eventtap.event.html#getFlags", "hs.eventtap.event.getKeyCode()": "hs.eventtap.event.html#getKeyCode", "hs.eventtap.event.getProperty()": "hs.eventtap.event.html#getProperty", "hs.eventtap.event.getRawEventData()": "hs.eventtap.event.html#getRawEventData", "hs.eventtap.event.getTouchDetails()": "hs.eventtap.event.html#getTouchDetails", "hs.eventtap.event.getTouches()": "hs.eventtap.event.html#getTouches", "hs.eventtap.event.getType()": "hs.eventtap.event.html#getType", "hs.eventtap.event.getUnicodeString()": "hs.eventtap.event.html#getUnicodeString", "hs.eventtap.event.location()": "hs.eventtap.event.html#location", "hs.eventtap.event.newEvent()": "hs.eventtap.event.html#newEvent", "hs.eventtap.event.newEventFromData()": "hs.eventtap.event.html#newEventFromData", "hs.eventtap.event.newGesture()": "hs.eventtap.event.html#newGesture", "hs.eventtap.event.newKeyEvent()": "hs.eventtap.event.html#newKeyEvent", "hs.eventtap.event.newKeyEventSequence()": "hs.eventtap.event.html#newKeyEventSequence", "hs.eventtap.event.newMouseEvent()": "hs.eventtap.event.html#newMouseEvent", "hs.eventtap.event.newScrollEvent()": "hs.eventtap.event.html#newScrollEvent", "hs.eventtap.event.newSystemKeyEvent()": "hs.eventtap.event.html#newSystemKeyEvent", "hs.eventtap.event.post()": "hs.eventtap.event.html#post", "hs.eventtap.event.properties": "hs.eventtap.event.html#properties", "hs.eventtap.event.rawFlagMasks": "hs.eventtap.event.html#rawFlagMasks", "hs.eventtap.event.rawFlags()": "hs.eventtap.event.html#rawFlags", "hs.eventtap.event.setFlags()": "hs.eventtap.event.html#setFlags", "hs.eventtap.event.setKeyCode()": "hs.eventtap.event.html#setKeyCode", "hs.eventtap.event.setProperty()": "hs.eventtap.event.html#setProperty", "hs.eventtap.event.setType()": "hs.eventtap.event.html#setType", "hs.eventtap.event.setUnicodeString()": "hs.eventtap.event.html#setUnicodeString", "hs.eventtap.event.systemKey()": "hs.eventtap.event.html#systemKey", "hs.eventtap.event.timestamp()": "hs.eventtap.event.html#timestamp", "hs.eventtap.event.types": "hs.eventtap.event.html#types", "hs.eventtap.isEnabled()": "hs.eventtap.html#isEnabled", "hs.eventtap.isSecureInputEnabled()": "hs.eventtap.html#isSecureInputEnabled", "hs.eventtap.keyRepeatDelay()": "hs.eventtap.html#keyRepeatDelay", "hs.eventtap.keyRepeatInterval()": "hs.eventtap.html#keyRepeatInterval", "hs.eventtap.keyStroke()": "hs.eventtap.html#keyStroke", "hs.eventtap.keyStrokes()": "hs.eventtap.html#keyStrokes", "hs.eventtap.leftClick()": "hs.eventtap.html#leftClick", "hs.eventtap.middleClick()": "hs.eventtap.html#middleClick", "hs.eventtap.new()": "hs.eventtap.html#new", "hs.eventtap.otherClick()": "hs.eventtap.html#otherClick", "hs.eventtap.rightClick()": "hs.eventtap.html#rightClick", "hs.eventtap.scrollWheel()": "hs.eventtap.html#scrollWheel", "hs.eventtap.start()": "hs.eventtap.html#start", "hs.eventtap.stop()": "hs.eventtap.html#stop", "hs.execute()": "hs.html#execute", "hs.expose": "hs.expose.html", "hs.expose.hide()": "hs.expose.html#hide", "hs.expose.new()": "hs.expose.html#new", "hs.expose.show()": "hs.expose.html#show", "hs.expose.toggleShow()": "hs.expose.html#toggleShow", "hs.expose.ui": "hs.expose.html#ui", "hs.fileDroppedToDockIconCallback": "hs.html#fileDroppedToDockIconCallback", "hs.fnutils": "hs.fnutils.html", "hs.fnutils.concat()": "hs.fnutils.html#concat", "hs.fnutils.contains()": "hs.fnutils.html#contains", "hs.fnutils.copy()": "hs.fnutils.html#copy", "hs.fnutils.cycle()": "hs.fnutils.html#cycle", "hs.fnutils.each()": "hs.fnutils.html#each", "hs.fnutils.every()": "hs.fnutils.html#every", "hs.fnutils.filter()": "hs.fnutils.html#filter", "hs.fnutils.find()": "hs.fnutils.html#find", "hs.fnutils.ieach()": "hs.fnutils.html#ieach", "hs.fnutils.ifilter()": "hs.fnutils.html#ifilter", "hs.fnutils.imap()": "hs.fnutils.html#imap", "hs.fnutils.indexOf()": "hs.fnutils.html#indexOf", "hs.fnutils.map()": "hs.fnutils.html#map", "hs.fnutils.mapCat()": "hs.fnutils.html#mapCat", "hs.fnutils.partial()": "hs.fnutils.html#partial", "hs.fnutils.reduce()": "hs.fnutils.html#reduce", "hs.fnutils.sequence()": "hs.fnutils.html#sequence", "hs.fnutils.some()": "hs.fnutils.html#some", "hs.fnutils.sortByKeys()": "hs.fnutils.html#sortByKeys", "hs.fnutils.sortByKeyValues()": "hs.fnutils.html#sortByKeyValues", "hs.fnutils.split()": "hs.fnutils.html#split", "hs.focus()": "hs.html#focus", "hs.fs": "hs.fs.html", "hs.fs.attributes()": "hs.fs.html#attributes", "hs.fs.chdir()": "hs.fs.html#chdir", "hs.fs.currentDir()": "hs.fs.html#currentDir", "hs.fs.dir()": "hs.fs.html#dir", "hs.fs.displayName()": "hs.fs.html#displayName", "hs.fs.fileUTI()": "hs.fs.html#fileUTI", "hs.fs.fileUTIalternate()": "hs.fs.html#fileUTIalternate", "hs.fs.getFinderComments()": "hs.fs.html#getFinderComments", "hs.fs.link()": "hs.fs.html#link", "hs.fs.lock()": "hs.fs.html#lock", "hs.fs.lockDir()": "hs.fs.html#lockDir", "hs.fs.mkdir()": "hs.fs.html#mkdir", "hs.fs.pathFromBookmark()": "hs.fs.html#pathFromBookmark", "hs.fs.pathToAbsolute()": "hs.fs.html#pathToAbsolute", "hs.fs.pathToBookmark()": "hs.fs.html#pathToBookmark", "hs.fs.rmdir()": "hs.fs.html#rmdir", "hs.fs.setFinderComments()": "hs.fs.html#setFinderComments", "hs.fs.symlinkAttributes()": "hs.fs.html#symlinkAttributes", "hs.fs.tagsAdd()": "hs.fs.html#tagsAdd", "hs.fs.tagsGet()": "hs.fs.html#tagsGet", "hs.fs.tagsRemove()": "hs.fs.html#tagsRemove", "hs.fs.tagsSet()": "hs.fs.html#tagsSet", "hs.fs.temporaryDirectory()": "hs.fs.html#temporaryDirectory", "hs.fs.touch()": "hs.fs.html#touch", "hs.fs.unlock()": "hs.fs.html#unlock", "hs.fs.urlFromPath()": "hs.fs.html#urlFromPath", "hs.fs.volume": "hs.fs.volume.html", "hs.fs.volume.allVolumes()": "hs.fs.volume.html#allVolumes", "hs.fs.volume.didMount": "hs.fs.volume.html#didMount", "hs.fs.volume.didRename": "hs.fs.volume.html#didRename", "hs.fs.volume.didUnmount": "hs.fs.volume.html#didUnmount", "hs.fs.volume.eject()": "hs.fs.volume.html#eject", "hs.fs.volume.new()": "hs.fs.volume.html#new", "hs.fs.volume.start()": "hs.fs.volume.html#start", "hs.fs.volume.stop()": "hs.fs.volume.html#stop", "hs.fs.volume.willUnmount": "hs.fs.volume.html#willUnmount", "hs.fs.xattr": "hs.fs.xattr.html", "hs.fs.xattr.get()": "hs.fs.xattr.html#get", "hs.fs.xattr.getHumanReadable()": "hs.fs.xattr.html#getHumanReadable", "hs.fs.xattr.list()": "hs.fs.xattr.html#list", "hs.fs.xattr.remove()": "hs.fs.xattr.html#remove", "hs.fs.xattr.set()": "hs.fs.xattr.html#set", "hs.geometry": "hs.geometry.html", "hs.geometry.angle()": "hs.geometry.html#angle", "hs.geometry.angleTo()": "hs.geometry.html#angleTo", "hs.geometry.area": "hs.geometry.html#area", "hs.geometry.aspect": "hs.geometry.html#aspect", "hs.geometry.bottomright": "hs.geometry.html#bottomright", "hs.geometry.center": "hs.geometry.html#center", "hs.geometry.copy()": "hs.geometry.html#copy", "hs.geometry.distance()": "hs.geometry.html#distance", "hs.geometry.equals()": "hs.geometry.html#equals", "hs.geometry.fit()": "hs.geometry.html#fit", "hs.geometry.floor()": "hs.geometry.html#floor", "hs.geometry.fromUnitRect()": "hs.geometry.html#fromUnitRect", "hs.geometry.h": "hs.geometry.html#h", "hs.geometry.inside()": "hs.geometry.html#inside", "hs.geometry.intersect()": "hs.geometry.html#intersect", "hs.geometry.length": "hs.geometry.html#length", "hs.geometry.move()": "hs.geometry.html#move", "hs.geometry.new()": "hs.geometry.html#new", "hs.geometry.normalize()": "hs.geometry.html#normalize", "hs.geometry.point()": "hs.geometry.html#point", "hs.geometry.rect()": "hs.geometry.html#rect", "hs.geometry.rotateCCW()": "hs.geometry.html#rotateCCW", "hs.geometry.scale()": "hs.geometry.html#scale", "hs.geometry.size()": "hs.geometry.html#size", "hs.geometry.string": "hs.geometry.html#string", "hs.geometry.table": "hs.geometry.html#table", "hs.geometry.topleft": "hs.geometry.html#topleft", "hs.geometry.toUnitRect()": "hs.geometry.html#toUnitRect", "hs.geometry.type()": "hs.geometry.html#type", "hs.geometry.union()": "hs.geometry.html#union", "hs.geometry.vector()": "hs.geometry.html#vector", "hs.geometry.w": "hs.geometry.html#w", "hs.geometry.wh": "hs.geometry.html#wh", "hs.geometry.x": "hs.geometry.html#x", "hs.geometry.x1": "hs.geometry.html#x1", "hs.geometry.x2": "hs.geometry.html#x2", "hs.geometry.x2y2": "hs.geometry.html#x2y2", "hs.geometry.xy": "hs.geometry.html#xy", "hs.geometry.y": "hs.geometry.html#y", "hs.geometry.y1": "hs.geometry.html#y1", "hs.geometry.y2": "hs.geometry.html#y2", "hs.getObjectMetatable()": "hs.html#getObjectMetatable", "hs.grid": "hs.grid.html", "hs.grid.adjustWindow()": "hs.grid.html#adjustWindow", "hs.grid.get()": "hs.grid.html#get", "hs.grid.getCell()": "hs.grid.html#getCell", "hs.grid.getGrid()": "hs.grid.html#getGrid", "hs.grid.getGridFrame()": "hs.grid.html#getGridFrame", "hs.grid.hide()": "hs.grid.html#hide", "hs.grid.HINTS": "hs.grid.html#HINTS", "hs.grid.maximizeWindow()": "hs.grid.html#maximizeWindow", "hs.grid.pushWindowDown()": "hs.grid.html#pushWindowDown", "hs.grid.pushWindowLeft()": "hs.grid.html#pushWindowLeft", "hs.grid.pushWindowRight()": "hs.grid.html#pushWindowRight", "hs.grid.pushWindowUp()": "hs.grid.html#pushWindowUp", "hs.grid.resizeWindowShorter()": "hs.grid.html#resizeWindowShorter", "hs.grid.resizeWindowTaller()": "hs.grid.html#resizeWindowTaller", "hs.grid.resizeWindowThinner()": "hs.grid.html#resizeWindowThinner", "hs.grid.resizeWindowWider()": "hs.grid.html#resizeWindowWider", "hs.grid.set()": "hs.grid.html#set", "hs.grid.setGrid()": "hs.grid.html#setGrid", "hs.grid.setMargins()": "hs.grid.html#setMargins", "hs.grid.show()": "hs.grid.html#show", "hs.grid.snap()": "hs.grid.html#snap", "hs.grid.toggleShow()": "hs.grid.html#toggleShow", "hs.grid.ui": "hs.grid.html#ui", "hs.hash": "hs.hash.html", "hs.hash.bMD5()": "hs.hash.html#bMD5", "hs.hash.bSHA1()": "hs.hash.html#bSHA1", "hs.hash.bSHA256()": "hs.hash.html#bSHA256", "hs.hash.bSHA512()": "hs.hash.html#bSHA512", "hs.hash.hmacMD5()": "hs.hash.html#hmacMD5", "hs.hash.hmacSHA1()": "hs.hash.html#hmacSHA1", "hs.hash.hmacSHA256()": "hs.hash.html#hmacSHA256", "hs.hash.hmacSHA512()": "hs.hash.html#hmacSHA512", "hs.hash.MD5()": "hs.hash.html#MD5", "hs.hash.SHA1()": "hs.hash.html#SHA1", "hs.hash.SHA256()": "hs.hash.html#SHA256", "hs.hash.SHA512()": "hs.hash.html#SHA512", "hs.help()": "hs.html#help", "hs.hid": "hs.hid.html", "hs.hid.get()": "hs.hid.html#get", "hs.hid.led": "hs.hid.led.html", "hs.hid.led.set()": "hs.hid.led.html#set", "hs.hid.set()": "hs.hid.html#set", "hs.hid.toggle()": "hs.hid.html#toggle", "hs.hints": "hs.hints.html", "hs.hints.fontName": "hs.hints.html#fontName", "hs.hints.fontSize": "hs.hints.html#fontSize", "hs.hints.hintChars": "hs.hints.html#hintChars", "hs.hints.iconAlpha": "hs.hints.html#iconAlpha", "hs.hints.showTitleThresh": "hs.hints.html#showTitleThresh", "hs.hints.style": "hs.hints.html#style", "hs.hints.titleMaxSize": "hs.hints.html#titleMaxSize", "hs.hints.windowHints()": "hs.hints.html#windowHints", "hs.host": "hs.host.html", "hs.host.addresses()": "hs.host.html#addresses", "hs.host.cpuUsage()": "hs.host.html#cpuUsage", "hs.host.cpuUsageTicks()": "hs.host.html#cpuUsageTicks", "hs.host.globallyUniqueString()": "hs.host.html#globallyUniqueString", "hs.host.gpuVRAM()": "hs.host.html#gpuVRAM", "hs.host.idleTime()": "hs.host.html#idleTime", "hs.host.interfaceStyle()": "hs.host.html#interfaceStyle", "hs.host.locale": "hs.host.locale.html", "hs.host.locale.availableLocales()": "hs.host.locale.html#availableLocales", "hs.host.locale.current()": "hs.host.locale.html#current", "hs.host.locale.details()": "hs.host.locale.html#details", "hs.host.locale.localizedString()": "hs.host.locale.html#localizedString", "hs.host.locale.preferredLanguages()": "hs.host.locale.html#preferredLanguages", "hs.host.locale.registerCallback()": "hs.host.locale.html#registerCallback", "hs.host.locale.unregisterCallback()": "hs.host.locale.html#unregisterCallback", "hs.host.localizedName()": "hs.host.html#localizedName", "hs.host.names()": "hs.host.html#names", "hs.host.operatingSystemVersion()": "hs.host.html#operatingSystemVersion", "hs.host.operatingSystemVersionString()": "hs.host.html#operatingSystemVersionString", "hs.host.thermalState()": "hs.host.html#thermalState", "hs.host.uuid()": "hs.host.html#uuid", "hs.host.vmStat()": "hs.host.html#vmStat", "hs.host.volumeInformation()": "hs.host.html#volumeInformation", "hs.hotkey": "hs.hotkey.html", "hs.hotkey.alertDuration": "hs.hotkey.html#alertDuration", "hs.hotkey.assignable()": "hs.hotkey.html#assignable", "hs.hotkey.bind()": "hs.hotkey.html#bind", "hs.hotkey.bindSpec()": "hs.hotkey.html#bindSpec", "hs.hotkey.delete()": "hs.hotkey.html#delete", "hs.hotkey.deleteAll()": "hs.hotkey.html#deleteAll", "hs.hotkey.disable()": "hs.hotkey.html#disable", "hs.hotkey.disableAll()": "hs.hotkey.html#disableAll", "hs.hotkey.enable()": "hs.hotkey.html#enable", "hs.hotkey.getHotkeys()": "hs.hotkey.html#getHotkeys", "hs.hotkey.modal": "hs.hotkey.modal.html", "hs.hotkey.modal.bind()": "hs.hotkey.modal.html#bind", "hs.hotkey.modal.delete()": "hs.hotkey.modal.html#delete", "hs.hotkey.modal.enter()": "hs.hotkey.modal.html#enter", "hs.hotkey.modal.entered()": "hs.hotkey.modal.html#entered", "hs.hotkey.modal.exit()": "hs.hotkey.modal.html#exit", "hs.hotkey.modal.exited()": "hs.hotkey.modal.html#exited", "hs.hotkey.modal.new()": "hs.hotkey.modal.html#new", "hs.hotkey.new()": "hs.hotkey.html#new", "hs.hotkey.showHotkeys()": "hs.hotkey.html#showHotkeys", "hs.hotkey.systemAssigned()": "hs.hotkey.html#systemAssigned", "hs.hsdocs()": "hs.html#hsdocs", "hs.http": "hs.http.html", "hs.http.asyncGet()": "hs.http.html#asyncGet", "hs.http.asyncPost()": "hs.http.html#asyncPost", "hs.http.asyncPut()": "hs.http.html#asyncPut", "hs.http.convertHtmlEntities()": "hs.http.html#convertHtmlEntities", "hs.http.doAsyncRequest()": "hs.http.html#doAsyncRequest", "hs.http.doRequest()": "hs.http.html#doRequest", "hs.http.encodeForQuery()": "hs.http.html#encodeForQuery", "hs.http.get()": "hs.http.html#get", "hs.http.htmlEntities": "hs.http.html#htmlEntities", "hs.http.post()": "hs.http.html#post", "hs.http.put()": "hs.http.html#put", "hs.http.registerEntity()": "hs.http.html#registerEntity", "hs.http.urlParts()": "hs.http.html#urlParts", "hs.httpserver": "hs.httpserver.html", "hs.httpserver.getInterface()": "hs.httpserver.html#getInterface", "hs.httpserver.getName()": "hs.httpserver.html#getName", "hs.httpserver.getPort()": "hs.httpserver.html#getPort", "hs.httpserver.hsminweb": "hs.httpserver.hsminweb.html", "hs.httpserver.hsminweb._accessLog": "hs.httpserver.hsminweb.html#_accessLog", "hs.httpserver.hsminweb._errorHandlers": "hs.httpserver.hsminweb.html#_errorHandlers", "hs.httpserver.hsminweb._serverAdmin": "hs.httpserver.hsminweb.html#_serverAdmin", "hs.httpserver.hsminweb._supportMethods": "hs.httpserver.hsminweb.html#_supportMethods", "hs.httpserver.hsminweb.accessList()": "hs.httpserver.hsminweb.html#accessList", "hs.httpserver.hsminweb.allowDirectory()": "hs.httpserver.hsminweb.html#allowDirectory", "hs.httpserver.hsminweb.bonjour()": "hs.httpserver.hsminweb.html#bonjour", "hs.httpserver.hsminweb.cgiEnabled()": "hs.httpserver.hsminweb.html#cgiEnabled", "hs.httpserver.hsminweb.cgiExtensions()": "hs.httpserver.hsminweb.html#cgiExtensions", "hs.httpserver.hsminweb.cgilua": "hs.httpserver.hsminweb.cgilua.html", "hs.httpserver.hsminweb.cgilua.contentheader()": "hs.httpserver.hsminweb.cgilua.html#contentheader", "hs.httpserver.hsminweb.cgilua.doif()": "hs.httpserver.hsminweb.cgilua.html#doif", "hs.httpserver.hsminweb.cgilua.doscript()": "hs.httpserver.hsminweb.cgilua.html#doscript", "hs.httpserver.hsminweb.cgilua.errorlog()": "hs.httpserver.hsminweb.cgilua.html#errorlog", "hs.httpserver.hsminweb.cgilua.header()": "hs.httpserver.hsminweb.cgilua.html#header", "hs.httpserver.hsminweb.cgilua.htmlheader()": "hs.httpserver.hsminweb.cgilua.html#htmlheader", "hs.httpserver.hsminweb.cgilua.lp": "hs.httpserver.hsminweb.cgilua.lp.html", "hs.httpserver.hsminweb.cgilua.lp.compile()": "hs.httpserver.hsminweb.cgilua.lp.html#compile", "hs.httpserver.hsminweb.cgilua.lp.include()": "hs.httpserver.hsminweb.cgilua.lp.html#include", "hs.httpserver.hsminweb.cgilua.lp.translate()": "hs.httpserver.hsminweb.cgilua.lp.html#translate", "hs.httpserver.hsminweb.cgilua.mkabsoluteurl()": "hs.httpserver.hsminweb.cgilua.html#mkabsoluteurl", "hs.httpserver.hsminweb.cgilua.mkurlpath()": "hs.httpserver.hsminweb.cgilua.html#mkurlpath", "hs.httpserver.hsminweb.cgilua.print()": "hs.httpserver.hsminweb.cgilua.html#print", "hs.httpserver.hsminweb.cgilua.put()": "hs.httpserver.hsminweb.cgilua.html#put", "hs.httpserver.hsminweb.cgilua.redirect()": "hs.httpserver.hsminweb.cgilua.html#redirect", "hs.httpserver.hsminweb.cgilua.script_file": "hs.httpserver.hsminweb.cgilua.html#script_file", "hs.httpserver.hsminweb.cgilua.script_path": "hs.httpserver.hsminweb.cgilua.html#script_path", "hs.httpserver.hsminweb.cgilua.script_pdir": "hs.httpserver.hsminweb.cgilua.html#script_pdir", "hs.httpserver.hsminweb.cgilua.script_vdir": "hs.httpserver.hsminweb.cgilua.html#script_vdir", "hs.httpserver.hsminweb.cgilua.script_vpath": "hs.httpserver.hsminweb.cgilua.html#script_vpath", "hs.httpserver.hsminweb.cgilua.servervariable()": "hs.httpserver.hsminweb.cgilua.html#servervariable", "hs.httpserver.hsminweb.cgilua.splitfirst()": "hs.httpserver.hsminweb.cgilua.html#splitfirst", "hs.httpserver.hsminweb.cgilua.splitonlast()": "hs.httpserver.hsminweb.cgilua.html#splitonlast", "hs.httpserver.hsminweb.cgilua.tmp_path": "hs.httpserver.hsminweb.cgilua.html#tmp_path", "hs.httpserver.hsminweb.cgilua.tmpfile()": "hs.httpserver.hsminweb.cgilua.html#tmpfile", "hs.httpserver.hsminweb.cgilua.tmpname()": "hs.httpserver.hsminweb.cgilua.html#tmpname", "hs.httpserver.hsminweb.cgilua.urlcode": "hs.httpserver.hsminweb.cgilua.urlcode.html", "hs.httpserver.hsminweb.cgilua.urlcode.encodetable()": "hs.httpserver.hsminweb.cgilua.urlcode.html#encodetable", "hs.httpserver.hsminweb.cgilua.urlcode.escape()": "hs.httpserver.hsminweb.cgilua.urlcode.html#escape", "hs.httpserver.hsminweb.cgilua.urlcode.insertfield()": "hs.httpserver.hsminweb.cgilua.urlcode.html#insertfield", "hs.httpserver.hsminweb.cgilua.urlcode.parsequery()": "hs.httpserver.hsminweb.cgilua.urlcode.html#parsequery", "hs.httpserver.hsminweb.cgilua.urlcode.unescape()": "hs.httpserver.hsminweb.cgilua.urlcode.html#unescape", "hs.httpserver.hsminweb.cgilua.urlpath": "hs.httpserver.hsminweb.cgilua.html#urlpath", "hs.httpserver.hsminweb.dateFormatString": "hs.httpserver.hsminweb.html#dateFormatString", "hs.httpserver.hsminweb.directoryIndex()": "hs.httpserver.hsminweb.html#directoryIndex", "hs.httpserver.hsminweb.dnsLookup()": "hs.httpserver.hsminweb.html#dnsLookup", "hs.httpserver.hsminweb.documentRoot()": "hs.httpserver.hsminweb.html#documentRoot", "hs.httpserver.hsminweb.formattedDate()": "hs.httpserver.hsminweb.html#formattedDate", "hs.httpserver.hsminweb.interface()": "hs.httpserver.hsminweb.html#interface", "hs.httpserver.hsminweb.log": "hs.httpserver.hsminweb.html#log", "hs.httpserver.hsminweb.luaTemplateExtension()": "hs.httpserver.hsminweb.html#luaTemplateExtension", "hs.httpserver.hsminweb.maxBodySize()": "hs.httpserver.hsminweb.html#maxBodySize", "hs.httpserver.hsminweb.name()": "hs.httpserver.hsminweb.html#name", "hs.httpserver.hsminweb.new()": "hs.httpserver.hsminweb.html#new", "hs.httpserver.hsminweb.password()": "hs.httpserver.hsminweb.html#password", "hs.httpserver.hsminweb.port()": "hs.httpserver.hsminweb.html#port", "hs.httpserver.hsminweb.queryLogging()": "hs.httpserver.hsminweb.html#queryLogging", "hs.httpserver.hsminweb.scriptTimeout()": "hs.httpserver.hsminweb.html#scriptTimeout", "hs.httpserver.hsminweb.ssl()": "hs.httpserver.hsminweb.html#ssl", "hs.httpserver.hsminweb.start()": "hs.httpserver.hsminweb.html#start", "hs.httpserver.hsminweb.statusCodes": "hs.httpserver.hsminweb.html#statusCodes", "hs.httpserver.hsminweb.stop()": "hs.httpserver.hsminweb.html#stop", "hs.httpserver.hsminweb.urlParts()": "hs.httpserver.hsminweb.html#urlParts", "hs.httpserver.maxBodySize()": "hs.httpserver.html#maxBodySize", "hs.httpserver.new()": "hs.httpserver.html#new", "hs.httpserver.send()": "hs.httpserver.html#send", "hs.httpserver.setCallback()": "hs.httpserver.html#setCallback", "hs.httpserver.setInterface()": "hs.httpserver.html#setInterface", "hs.httpserver.setName()": "hs.httpserver.html#setName", "hs.httpserver.setPassword()": "hs.httpserver.html#setPassword", "hs.httpserver.setPort()": "hs.httpserver.html#setPort", "hs.httpserver.start()": "hs.httpserver.html#start", "hs.httpserver.stop()": "hs.httpserver.html#stop", "hs.httpserver.websocket()": "hs.httpserver.html#websocket", "hs.image": "hs.image.html", "hs.image.additionalImageNames": "hs.image.html#additionalImageNames", "hs.image.bitmapRepresentation()": "hs.image.html#bitmapRepresentation", "hs.image.colorAt()": "hs.image.html#colorAt", "hs.image.copy()": "hs.image.html#copy", "hs.image.croppedCopy()": "hs.image.html#croppedCopy", "hs.image.encodeAsURLString()": "hs.image.html#encodeAsURLString", "hs.image.getExifFromPath()": "hs.image.html#getExifFromPath", "hs.image.iconForFile()": "hs.image.html#iconForFile", "hs.image.iconForFileType()": "hs.image.html#iconForFileType", "hs.image.imageFromAppBundle()": "hs.image.html#imageFromAppBundle", "hs.image.imageFromASCII()": "hs.image.html#imageFromASCII", "hs.image.imageFromMediaFile()": "hs.image.html#imageFromMediaFile", "hs.image.imageFromName()": "hs.image.html#imageFromName", "hs.image.imageFromPath()": "hs.image.html#imageFromPath", "hs.image.imageFromURL()": "hs.image.html#imageFromURL", "hs.image.name()": "hs.image.html#name", "hs.image.saveToFile()": "hs.image.html#saveToFile", "hs.image.setName()": "hs.image.html#setName", "hs.image.setSize()": "hs.image.html#setSize", "hs.image.size()": "hs.image.html#size", "hs.image.systemImageNames": "hs.image.html#systemImageNames", "hs.image.template()": "hs.image.html#template", "hs.image.toASCII()": "hs.image.html#toASCII", "hs.inspect": "hs.inspect.html", "hs.inspect.inspect()": "hs.inspect.html#inspect", "hs.ipc": "hs.ipc.html", "hs.ipc.cliColors()": "hs.ipc.html#cliColors", "hs.ipc.cliGetColors": "hs.ipc.html#cliGetColors", "hs.ipc.cliInstall()": "hs.ipc.html#cliInstall", "hs.ipc.cliResetColors": "hs.ipc.html#cliResetColors", "hs.ipc.cliSaveHistory()": "hs.ipc.html#cliSaveHistory", "hs.ipc.cliSaveHistorySize()": "hs.ipc.html#cliSaveHistorySize", "hs.ipc.cliSetColors": "hs.ipc.html#cliSetColors", "hs.ipc.cliStatus()": "hs.ipc.html#cliStatus", "hs.ipc.cliUninstall()": "hs.ipc.html#cliUninstall", "hs.ipc.delete()": "hs.ipc.html#delete", "hs.ipc.isRemote()": "hs.ipc.html#isRemote", "hs.ipc.isValid()": "hs.ipc.html#isValid", "hs.ipc.localPort()": "hs.ipc.html#localPort", "hs.ipc.name()": "hs.ipc.html#name", "hs.ipc.remotePort()": "hs.ipc.html#remotePort", "hs.ipc.sendMessage()": "hs.ipc.html#sendMessage", "hs.itunes": "hs.itunes.html", "hs.itunes.displayCurrentTrack()": "hs.itunes.html#displayCurrentTrack", "hs.itunes.ff()": "hs.itunes.html#ff", "hs.itunes.getCurrentAlbum()": "hs.itunes.html#getCurrentAlbum", "hs.itunes.getCurrentArtist()": "hs.itunes.html#getCurrentArtist", "hs.itunes.getCurrentTrack()": "hs.itunes.html#getCurrentTrack", "hs.itunes.getDuration()": "hs.itunes.html#getDuration", "hs.itunes.getPlaybackState()": "hs.itunes.html#getPlaybackState", "hs.itunes.getPosition()": "hs.itunes.html#getPosition", "hs.itunes.getVolume()": "hs.itunes.html#getVolume", "hs.itunes.isPlaying()": "hs.itunes.html#isPlaying", "hs.itunes.isRunning()": "hs.itunes.html#isRunning", "hs.itunes.next()": "hs.itunes.html#next", "hs.itunes.pause()": "hs.itunes.html#pause", "hs.itunes.play()": "hs.itunes.html#play", "hs.itunes.playpause()": "hs.itunes.html#playpause", "hs.itunes.previous()": "hs.itunes.html#previous", "hs.itunes.rw()": "hs.itunes.html#rw", "hs.itunes.setPosition()": "hs.itunes.html#setPosition", "hs.itunes.setVolume()": "hs.itunes.html#setVolume", "hs.itunes.state_paused": "hs.itunes.html#state_paused", "hs.itunes.state_playing": "hs.itunes.html#state_playing", "hs.itunes.state_stopped": "hs.itunes.html#state_stopped", "hs.itunes.volumeDown()": "hs.itunes.html#volumeDown", "hs.itunes.volumeUp()": "hs.itunes.html#volumeUp", "hs.javascript": "hs.javascript.html", "hs.json": "hs.json.html", "hs.json.decode()": "hs.json.html#decode", "hs.json.encode()": "hs.json.html#encode", "hs.json.read()": "hs.json.html#read", "hs.json.write()": "hs.json.html#write", "hs.keycodes": "hs.keycodes.html", "hs.keycodes.currentLayout()": "hs.keycodes.html#currentLayout", "hs.keycodes.currentLayoutIcon()": "hs.keycodes.html#currentLayoutIcon", "hs.keycodes.currentMethod()": "hs.keycodes.html#currentMethod", "hs.keycodes.currentSourceID()": "hs.keycodes.html#currentSourceID", "hs.keycodes.iconForLayoutOrMethod()": "hs.keycodes.html#iconForLayoutOrMethod", "hs.keycodes.inputSourceChanged()": "hs.keycodes.html#inputSourceChanged", "hs.keycodes.layouts()": "hs.keycodes.html#layouts", "hs.keycodes.map": "hs.keycodes.html#map", "hs.keycodes.methods()": "hs.keycodes.html#methods", "hs.keycodes.setLayout()": "hs.keycodes.html#setLayout", "hs.keycodes.setMethod()": "hs.keycodes.html#setMethod", "hs.layout": "hs.layout.html", "hs.layout.apply()": "hs.layout.html#apply", "hs.layout.left25": "hs.layout.html#left25", "hs.layout.left30": "hs.layout.html#left30", "hs.layout.left50": "hs.layout.html#left50", "hs.layout.left70": "hs.layout.html#left70", "hs.layout.left75": "hs.layout.html#left75", "hs.layout.maximized": "hs.layout.html#maximized", "hs.layout.right25": "hs.layout.html#right25", "hs.layout.right30": "hs.layout.html#right30", "hs.layout.right50": "hs.layout.html#right50", "hs.layout.right70": "hs.layout.html#right70", "hs.layout.right75": "hs.layout.html#right75", "hs.loadSpoon()": "hs.html#loadSpoon", "hs.location": "hs.location.html", "hs.location.addMonitoredRegion()": "hs.location.html#addMonitoredRegion", "hs.location.authorizationStatus()": "hs.location.html#authorizationStatus", "hs.location.callback()": "hs.location.html#callback", "hs.location.currentRegion()": "hs.location.html#currentRegion", "hs.location.distance()": "hs.location.html#distance", "hs.location.distanceFrom()": "hs.location.html#distanceFrom", "hs.location.dstOffset()": "hs.location.html#dstOffset", "hs.location.geocoder": "hs.location.geocoder.html", "hs.location.geocoder.cancel()": "hs.location.geocoder.html#cancel", "hs.location.geocoder.geocoding()": "hs.location.geocoder.html#geocoding", "hs.location.geocoder.lookupAddress()": "hs.location.geocoder.html#lookupAddress", "hs.location.geocoder.lookupAddressNear()": "hs.location.geocoder.html#lookupAddressNear", "hs.location.geocoder.lookupLocation()": "hs.location.geocoder.html#lookupLocation", "hs.location.get()": "hs.location.html#get", "hs.location.location()": "hs.location.html#location", "hs.location.monitoredRegions()": "hs.location.html#monitoredRegions", "hs.location.new()": "hs.location.html#new", "hs.location.register()": "hs.location.html#register", "hs.location.removeMonitoredRegion()": "hs.location.html#removeMonitoredRegion", "hs.location.servicesEnabled()": "hs.location.html#servicesEnabled", "hs.location.start()": "hs.location.html#start", "hs.location.startTracking()": "hs.location.html#startTracking", "hs.location.stop()": "hs.location.html#stop", "hs.location.stopTracking()": "hs.location.html#stopTracking", "hs.location.sunrise()": "hs.location.html#sunrise", "hs.location.sunset()": "hs.location.html#sunset", "hs.location.unregister()": "hs.location.html#unregister", "hs.logger": "hs.logger.html", "hs.logger.d()": "hs.logger.html#d", "hs.logger.defaultLogLevel": "hs.logger.html#defaultLogLevel", "hs.logger.df()": "hs.logger.html#df", "hs.logger.e()": "hs.logger.html#e", "hs.logger.ef()": "hs.logger.html#ef", "hs.logger.f()": "hs.logger.html#f", "hs.logger.getLogLevel()": "hs.logger.html#getLogLevel", "hs.logger.history()": "hs.logger.html#history", "hs.logger.historySize()": "hs.logger.html#historySize", "hs.logger.i()": "hs.logger.html#i", "hs.logger.level": "hs.logger.html#level", "hs.logger.new()": "hs.logger.html#new", "hs.logger.printHistory()": "hs.logger.html#printHistory", "hs.logger.setGlobalLogLevel()": "hs.logger.html#setGlobalLogLevel", "hs.logger.setLogLevel()": "hs.logger.html#setLogLevel", "hs.logger.setModulesLogLevel()": "hs.logger.html#setModulesLogLevel", "hs.logger.v()": "hs.logger.html#v", "hs.logger.vf()": "hs.logger.html#vf", "hs.logger.w()": "hs.logger.html#w", "hs.logger.wf()": "hs.logger.html#wf", "hs.math": "hs.math.html", "hs.math.isFinite()": "hs.math.html#isFinite", "hs.math.isInfinite()": "hs.math.html#isInfinite", "hs.math.isNaN()": "hs.math.html#isNaN", "hs.math.minFloat": "hs.math.html#minFloat", "hs.math.randomFloat()": "hs.math.html#randomFloat", "hs.math.randomFromRange()": "hs.math.html#randomFromRange", "hs.menubar": "hs.menubar.html", "hs.menubar.autosaveName()": "hs.menubar.html#autosaveName", "hs.menubar.delete()": "hs.menubar.html#delete", "hs.menubar.frame()": "hs.menubar.html#frame", "hs.menubar.icon()": "hs.menubar.html#icon", "hs.menubar.imagePosition()": "hs.menubar.html#imagePosition", "hs.menubar.imagePositions": "hs.menubar.html#imagePositions", "hs.menubar.isInMenuBar()": "hs.menubar.html#isInMenuBar", "hs.menubar.new()": "hs.menubar.html#new", "hs.menubar.popupMenu()": "hs.menubar.html#popupMenu", "hs.menubar.removeFromMenuBar()": "hs.menubar.html#removeFromMenuBar", "hs.menubar.returnToMenuBar()": "hs.menubar.html#returnToMenuBar", "hs.menubar.setClickCallback()": "hs.menubar.html#setClickCallback", "hs.menubar.setIcon()": "hs.menubar.html#setIcon", "hs.menubar.setMenu()": "hs.menubar.html#setMenu", "hs.menubar.setTitle()": "hs.menubar.html#setTitle", "hs.menubar.setTooltip()": "hs.menubar.html#setTooltip", "hs.menubar.stateImageSize()": "hs.menubar.html#stateImageSize", "hs.menubar.title()": "hs.menubar.html#title", "hs.menuIcon()": "hs.html#menuIcon", "hs.messages": "hs.messages.html", "hs.messages.iMessage()": "hs.messages.html#iMessage", "hs.messages.SMS()": "hs.messages.html#SMS", "hs.microphoneState()": "hs.html#microphoneState", "hs.midi": "hs.midi.html", "hs.midi.callback()": "hs.midi.html#callback", "hs.midi.commandTypes": "hs.midi.html#commandTypes", "hs.midi.deviceCallback()": "hs.midi.html#deviceCallback", "hs.midi.devices()": "hs.midi.html#devices", "hs.midi.displayName()": "hs.midi.html#displayName", "hs.midi.identityRequest()": "hs.midi.html#identityRequest", "hs.midi.isOnline()": "hs.midi.html#isOnline", "hs.midi.isVirtual()": "hs.midi.html#isVirtual", "hs.midi.manufacturer()": "hs.midi.html#manufacturer", "hs.midi.model()": "hs.midi.html#model", "hs.midi.name()": "hs.midi.html#name", "hs.midi.new()": "hs.midi.html#new", "hs.midi.newVirtualSource()": "hs.midi.html#newVirtualSource", "hs.midi.sendCommand()": "hs.midi.html#sendCommand", "hs.midi.sendSysex()": "hs.midi.html#sendSysex", "hs.midi.synthesize()": "hs.midi.html#synthesize", "hs.midi.virtualSources()": "hs.midi.html#virtualSources", "hs.milight": "hs.milight.html", "hs.milight.delete()": "hs.milight.html#delete", "hs.milight.disco()": "hs.milight.html#disco", "hs.milight.maxBrightness": "hs.milight.html#maxBrightness", "hs.milight.minBrightness": "hs.milight.html#minBrightness", "hs.milight.new()": "hs.milight.html#new", "hs.milight.send()": "hs.milight.html#send", "hs.milight.zoneBrightness()": "hs.milight.html#zoneBrightness", "hs.milight.zoneColor()": "hs.milight.html#zoneColor", "hs.milight.zoneOff()": "hs.milight.html#zoneOff", "hs.milight.zoneOn()": "hs.milight.html#zoneOn", "hs.milight.zoneWhite()": "hs.milight.html#zoneWhite", "hs.mjomatic": "hs.mjomatic.html", "hs.mjomatic.go()": "hs.mjomatic.html#go", "hs.mouse": "hs.mouse.html", "hs.mouse.absolutePosition()": "hs.mouse.html#absolutePosition", "hs.mouse.count()": "hs.mouse.html#count", "hs.mouse.currentCursorType()": "hs.mouse.html#currentCursorType", "hs.mouse.getButtons()": "hs.mouse.html#getButtons", "hs.mouse.getCurrentScreen()": "hs.mouse.html#getCurrentScreen", "hs.mouse.getRelativePosition()": "hs.mouse.html#getRelativePosition", "hs.mouse.names()": "hs.mouse.html#names", "hs.mouse.scrollDirection()": "hs.mouse.html#scrollDirection", "hs.mouse.setRelativePosition()": "hs.mouse.html#setRelativePosition", "hs.mouse.trackingSpeed()": "hs.mouse.html#trackingSpeed", "hs.network": "hs.network.html", "hs.network.addresses()": "hs.network.html#addresses", "hs.network.configuration": "hs.network.configuration.html", "hs.network.configuration.computerName()": "hs.network.configuration.html#computerName", "hs.network.configuration.consoleUser()": "hs.network.configuration.html#consoleUser", "hs.network.configuration.contents()": "hs.network.configuration.html#contents", "hs.network.configuration.dhcpInfo()": "hs.network.configuration.html#dhcpInfo", "hs.network.configuration.hostname()": "hs.network.configuration.html#hostname", "hs.network.configuration.keys()": "hs.network.configuration.html#keys", "hs.network.configuration.location()": "hs.network.configuration.html#location", "hs.network.configuration.locations()": "hs.network.configuration.html#locations", "hs.network.configuration.monitorKeys()": "hs.network.configuration.html#monitorKeys", "hs.network.configuration.open()": "hs.network.configuration.html#open", "hs.network.configuration.proxies()": "hs.network.configuration.html#proxies", "hs.network.configuration.setCallback()": "hs.network.configuration.html#setCallback", "hs.network.configuration.setLocation()": "hs.network.configuration.html#setLocation", "hs.network.configuration.start()": "hs.network.configuration.html#start", "hs.network.configuration.stop()": "hs.network.configuration.html#stop", "hs.network.host": "hs.network.host.html", "hs.network.host.addressesForHostname()": "hs.network.host.html#addressesForHostname", "hs.network.host.cancel()": "hs.network.host.html#cancel", "hs.network.host.hostnamesForAddress()": "hs.network.host.html#hostnamesForAddress", "hs.network.host.isRunning()": "hs.network.host.html#isRunning", "hs.network.host.reachabilityForAddress()": "hs.network.host.html#reachabilityForAddress", "hs.network.host.reachabilityForHostname()": "hs.network.host.html#reachabilityForHostname", "hs.network.interfaceDetails()": "hs.network.html#interfaceDetails", "hs.network.interfaceName()": "hs.network.html#interfaceName", "hs.network.interfaces()": "hs.network.html#interfaces", "hs.network.ping": "hs.network.ping.html", "hs.network.ping.address()": "hs.network.ping.html#address", "hs.network.ping.cancel()": "hs.network.ping.html#cancel", "hs.network.ping.count()": "hs.network.ping.html#count", "hs.network.ping.echoRequest": "hs.network.ping.echorequest.html", "hs.network.ping.echoRequest.acceptAddressFamily()": "hs.network.ping.echorequest.html#acceptAddressFamily", "hs.network.ping.echoRequest.echoRequest()": "hs.network.ping.echorequest.html#echoRequest", "hs.network.ping.echoRequest.hostAddress()": "hs.network.ping.echorequest.html#hostAddress", "hs.network.ping.echoRequest.hostAddressFamily()": "hs.network.ping.echorequest.html#hostAddressFamily", "hs.network.ping.echoRequest.hostName()": "hs.network.ping.echorequest.html#hostName", "hs.network.ping.echoRequest.identifier()": "hs.network.ping.echorequest.html#identifier", "hs.network.ping.echoRequest.isRunning()": "hs.network.ping.echorequest.html#isRunning", "hs.network.ping.echoRequest.nextSequenceNumber()": "hs.network.ping.echorequest.html#nextSequenceNumber", "hs.network.ping.echoRequest.seeAllUnexpectedPackets()": "hs.network.ping.echorequest.html#seeAllUnexpectedPackets", "hs.network.ping.echoRequest.sendPayload()": "hs.network.ping.echorequest.html#sendPayload", "hs.network.ping.echoRequest.setCallback()": "hs.network.ping.echorequest.html#setCallback", "hs.network.ping.echoRequest.start()": "hs.network.ping.echorequest.html#start", "hs.network.ping.echoRequest.stop()": "hs.network.ping.echorequest.html#stop", "hs.network.ping.isPaused()": "hs.network.ping.html#isPaused", "hs.network.ping.isRunning()": "hs.network.ping.html#isRunning", "hs.network.ping.packets()": "hs.network.ping.html#packets", "hs.network.ping.pause()": "hs.network.ping.html#pause", "hs.network.ping.ping()": "hs.network.ping.html#ping", "hs.network.ping.resume()": "hs.network.ping.html#resume", "hs.network.ping.sent()": "hs.network.ping.html#sent", "hs.network.ping.server()": "hs.network.ping.html#server", "hs.network.ping.setCallback()": "hs.network.ping.html#setCallback", "hs.network.ping.summary()": "hs.network.ping.html#summary", "hs.network.primaryInterfaces()": "hs.network.html#primaryInterfaces", "hs.network.reachability": "hs.network.reachability.html", "hs.network.reachability.flags": "hs.network.reachability.html#flags", "hs.network.reachability.forAddress()": "hs.network.reachability.html#forAddress", "hs.network.reachability.forAddressPair()": "hs.network.reachability.html#forAddressPair", "hs.network.reachability.forHostName()": "hs.network.reachability.html#forHostName", "hs.network.reachability.internet()": "hs.network.reachability.html#internet", "hs.network.reachability.linkLocal()": "hs.network.reachability.html#linkLocal", "hs.network.reachability.setCallback()": "hs.network.reachability.html#setCallback", "hs.network.reachability.start()": "hs.network.reachability.html#start", "hs.network.reachability.status()": "hs.network.reachability.html#status", "hs.network.reachability.statusString()": "hs.network.reachability.html#statusString", "hs.network.reachability.stop()": "hs.network.reachability.html#stop", "hs.noises": "hs.noises.html", "hs.noises.new()": "hs.noises.html#new", "hs.noises.start()": "hs.noises.html#start", "hs.noises.stop()": "hs.noises.html#stop", "hs.notify": "hs.notify.html", "hs.notify.actionButtonTitle()": "hs.notify.html#actionButtonTitle", "hs.notify.activationType()": "hs.notify.html#activationType", "hs.notify.activationTypes": "hs.notify.html#activationTypes", "hs.notify.actualDeliveryDate()": "hs.notify.html#actualDeliveryDate", "hs.notify.additionalActions()": "hs.notify.html#additionalActions", "hs.notify.additionalActivationAction()": "hs.notify.html#additionalActivationAction", "hs.notify.alwaysPresent()": "hs.notify.html#alwaysPresent", "hs.notify.alwaysShowAdditionalActions()": "hs.notify.html#alwaysShowAdditionalActions", "hs.notify.autoWithdraw()": "hs.notify.html#autoWithdraw", "hs.notify.contentImage()": "hs.notify.html#contentImage", "hs.notify.defaultNotificationSound": "hs.notify.html#defaultNotificationSound", "hs.notify.delivered()": "hs.notify.html#delivered", "hs.notify.deliveredNotifications()": "hs.notify.html#deliveredNotifications", "hs.notify.getFunctionTag()": "hs.notify.html#getFunctionTag", "hs.notify.hasActionButton()": "hs.notify.html#hasActionButton", "hs.notify.hasReplyButton()": "hs.notify.html#hasReplyButton", "hs.notify.informativeText()": "hs.notify.html#informativeText", "hs.notify.new()": "hs.notify.html#new", "hs.notify.otherButtonTitle()": "hs.notify.html#otherButtonTitle", "hs.notify.presented()": "hs.notify.html#presented", "hs.notify.register()": "hs.notify.html#register", "hs.notify.registry": "hs.notify.html#registry", "hs.notify.response()": "hs.notify.html#response", "hs.notify.responsePlaceholder()": "hs.notify.html#responsePlaceholder", "hs.notify.schedule()": "hs.notify.html#schedule", "hs.notify.scheduledNotifications()": "hs.notify.html#scheduledNotifications", "hs.notify.send()": "hs.notify.html#send", "hs.notify.setIdImage()": "hs.notify.html#setIdImage", "hs.notify.show()": "hs.notify.html#show", "hs.notify.soundName()": "hs.notify.html#soundName", "hs.notify.subTitle()": "hs.notify.html#subTitle", "hs.notify.title()": "hs.notify.html#title", "hs.notify.unregister()": "hs.notify.html#unregister", "hs.notify.unregisterall()": "hs.notify.html#unregisterall", "hs.notify.warnAboutMissingFunctionTag": "hs.notify.html#warnAboutMissingFunctionTag", "hs.notify.withdraw()": "hs.notify.html#withdraw", "hs.notify.withdrawAfter()": "hs.notify.html#withdrawAfter", "hs.notify.withdrawAll()": "hs.notify.html#withdrawAll", "hs.notify.withdrawAllScheduled()": "hs.notify.html#withdrawAllScheduled", "hs.open()": "hs.html#open", "hs.openAbout()": "hs.html#openAbout", "hs.openConsole()": "hs.html#openConsole", "hs.openConsoleOnDockClick()": "hs.html#openConsoleOnDockClick", "hs.openPreferences()": "hs.html#openPreferences", "hs.osascript": "hs.osascript.html", "hs.osascript._osascript()": "hs.osascript.html#_osascript", "hs.osascript.applescript()": "hs.osascript.html#applescript", "hs.osascript.applescriptFromFile()": "hs.osascript.html#applescriptFromFile", "hs.osascript.javascript()": "hs.osascript.html#javascript", "hs.osascript.javascriptFromFile()": "hs.osascript.html#javascriptFromFile", "hs.pasteboard": "hs.pasteboard.html", "hs.pasteboard.allContentTypes()": "hs.pasteboard.html#allContentTypes", "hs.pasteboard.callbackWhenChanged()": "hs.pasteboard.html#callbackWhenChanged", "hs.pasteboard.changeCount()": "hs.pasteboard.html#changeCount", "hs.pasteboard.clearContents()": "hs.pasteboard.html#clearContents", "hs.pasteboard.contentTypes()": "hs.pasteboard.html#contentTypes", "hs.pasteboard.deletePasteboard()": "hs.pasteboard.html#deletePasteboard", "hs.pasteboard.getContents()": "hs.pasteboard.html#getContents", "hs.pasteboard.pasteboardTypes()": "hs.pasteboard.html#pasteboardTypes", "hs.pasteboard.readAllData()": "hs.pasteboard.html#readAllData", "hs.pasteboard.readArchiverDataForUTI()": "hs.pasteboard.html#readArchiverDataForUTI", "hs.pasteboard.readColor()": "hs.pasteboard.html#readColor", "hs.pasteboard.readDataForUTI()": "hs.pasteboard.html#readDataForUTI", "hs.pasteboard.readImage()": "hs.pasteboard.html#readImage", "hs.pasteboard.readPListForUTI()": "hs.pasteboard.html#readPListForUTI", "hs.pasteboard.readSound()": "hs.pasteboard.html#readSound", "hs.pasteboard.readString()": "hs.pasteboard.html#readString", "hs.pasteboard.readStyledText()": "hs.pasteboard.html#readStyledText", "hs.pasteboard.readURL()": "hs.pasteboard.html#readURL", "hs.pasteboard.setContents()": "hs.pasteboard.html#setContents", "hs.pasteboard.typesAvailable()": "hs.pasteboard.html#typesAvailable", "hs.pasteboard.uniquePasteboard()": "hs.pasteboard.html#uniquePasteboard", "hs.pasteboard.watcher": "hs.pasteboard.watcher.html", "hs.pasteboard.watcher.interval()": "hs.pasteboard.watcher.html#interval", "hs.pasteboard.watcher.new()": "hs.pasteboard.watcher.html#new", "hs.pasteboard.watcher.running()": "hs.pasteboard.watcher.html#running", "hs.pasteboard.watcher.start()": "hs.pasteboard.watcher.html#start", "hs.pasteboard.watcher.stop()": "hs.pasteboard.watcher.html#stop", "hs.pasteboard.writeAllData()": "hs.pasteboard.html#writeAllData", "hs.pasteboard.writeArchiverDataForUTI()": "hs.pasteboard.html#writeArchiverDataForUTI", "hs.pasteboard.writeDataForUTI()": "hs.pasteboard.html#writeDataForUTI", "hs.pasteboard.writeObjects()": "hs.pasteboard.html#writeObjects", "hs.pasteboard.writePListForUTI()": "hs.pasteboard.html#writePListForUTI", "hs.pathwatcher": "hs.pathwatcher.html", "hs.pathwatcher.new()": "hs.pathwatcher.html#new", "hs.pathwatcher.start()": "hs.pathwatcher.html#start", "hs.pathwatcher.stop()": "hs.pathwatcher.html#stop", "hs.plist": "hs.plist.html", "hs.plist.read()": "hs.plist.html#read", "hs.plist.readString()": "hs.plist.html#readString", "hs.plist.write()": "hs.plist.html#write", "hs.plist.writeString()": "hs.plist.html#writeString", "hs.preferencesDarkMode()": "hs.html#preferencesDarkMode", "hs.printf()": "hs.html#printf", "hs.processInfo": "hs.html#processInfo", "hs.rawprint()": "hs.html#rawprint", "hs.razer": "hs.razer.html", "hs.razer.backlightsBreathing()": "hs.razer.html#backlightsBreathing", "hs.razer.backlightsCustom()": "hs.razer.html#backlightsCustom", "hs.razer.backlightsOff()": "hs.razer.html#backlightsOff", "hs.razer.backlightsReactive()": "hs.razer.html#backlightsReactive", "hs.razer.backlightsSpectrum()": "hs.razer.html#backlightsSpectrum", "hs.razer.backlightsStarlight()": "hs.razer.html#backlightsStarlight", "hs.razer.backlightsStatic()": "hs.razer.html#backlightsStatic", "hs.razer.backlightsWave()": "hs.razer.html#backlightsWave", "hs.razer.blueStatusLight()": "hs.razer.html#blueStatusLight", "hs.razer.brightness()": "hs.razer.html#brightness", "hs.razer.callback()": "hs.razer.html#callback", "hs.razer.defaultKeyboardLayout()": "hs.razer.html#defaultKeyboardLayout", "hs.razer.discoveryCallback()": "hs.razer.html#discoveryCallback", "hs.razer.getDevice()": "hs.razer.html#getDevice", "hs.razer.greenStatusLight()": "hs.razer.html#greenStatusLight", "hs.razer.init()": "hs.razer.html#init", "hs.razer.name()": "hs.razer.html#name", "hs.razer.numDevices()": "hs.razer.html#numDevices", "hs.razer.orangeStatusLight()": "hs.razer.html#orangeStatusLight", "hs.razer.unitTests()": "hs.razer.html#unitTests", "hs.redshift": "hs.redshift.html", "hs.redshift.COLORRAMP": "hs.redshift.html#COLORRAMP", "hs.redshift.invertSubscribe()": "hs.redshift.html#invertSubscribe", "hs.redshift.invertUnsubscribe()": "hs.redshift.html#invertUnsubscribe", "hs.redshift.isInverted()": "hs.redshift.html#isInverted", "hs.redshift.requestInvert()": "hs.redshift.html#requestInvert", "hs.redshift.start()": "hs.redshift.html#start", "hs.redshift.stop()": "hs.redshift.html#stop", "hs.redshift.toggle()": "hs.redshift.html#toggle", "hs.redshift.toggleInvert()": "hs.redshift.html#toggleInvert", "hs.relaunch()": "hs.html#relaunch", "hs.reload()": "hs.html#reload", "hs.screen": "hs.screen.html", "hs.screen.absoluteToLocal()": "hs.screen.html#absoluteToLocal", "hs.screen.accessibilitySettings()": "hs.screen.html#accessibilitySettings", "hs.screen.allScreens()": "hs.screen.html#allScreens", "hs.screen.availableModes()": "hs.screen.html#availableModes", "hs.screen.currentMode()": "hs.screen.html#currentMode", "hs.screen.desktopImageURL()": "hs.screen.html#desktopImageURL", "hs.screen.find()": "hs.screen.html#find", "hs.screen.frame()": "hs.screen.html#frame", "hs.screen.fromUnitRect()": "hs.screen.html#fromUnitRect", "hs.screen.fullFrame()": "hs.screen.html#fullFrame", "hs.screen.getBrightness()": "hs.screen.html#getBrightness", "hs.screen.getForceToGray()": "hs.screen.html#getForceToGray", "hs.screen.getGamma()": "hs.screen.html#getGamma", "hs.screen.getInfo()": "hs.screen.html#getInfo", "hs.screen.getInvertedPolarity()": "hs.screen.html#getInvertedPolarity", "hs.screen.getUUID()": "hs.screen.html#getUUID", "hs.screen.id()": "hs.screen.html#id", "hs.screen.localToAbsolute()": "hs.screen.html#localToAbsolute", "hs.screen.mainScreen()": "hs.screen.html#mainScreen", "hs.screen.mirrorOf()": "hs.screen.html#mirrorOf", "hs.screen.mirrorStop()": "hs.screen.html#mirrorStop", "hs.screen.name()": "hs.screen.html#name", "hs.screen.next()": "hs.screen.html#next", "hs.screen.position()": "hs.screen.html#position", "hs.screen.previous()": "hs.screen.html#previous", "hs.screen.primaryScreen()": "hs.screen.html#primaryScreen", "hs.screen.restoreGamma()": "hs.screen.html#restoreGamma", "hs.screen.rotate()": "hs.screen.html#rotate", "hs.screen.screenPositions()": "hs.screen.html#screenPositions", "hs.screen.setBrightness()": "hs.screen.html#setBrightness", "hs.screen.setForceToGray()": "hs.screen.html#setForceToGray", "hs.screen.setGamma()": "hs.screen.html#setGamma", "hs.screen.setInvertedPolarity()": "hs.screen.html#setInvertedPolarity", "hs.screen.setMode()": "hs.screen.html#setMode", "hs.screen.setOrigin()": "hs.screen.html#setOrigin", "hs.screen.setPrimary()": "hs.screen.html#setPrimary", "hs.screen.shotAsJPG()": "hs.screen.html#shotAsJPG", "hs.screen.shotAsPNG()": "hs.screen.html#shotAsPNG", "hs.screen.snapshot()": "hs.screen.html#snapshot", "hs.screen.strictScreenInDirection": "hs.screen.html#strictScreenInDirection", "hs.screen.toEast()": "hs.screen.html#toEast", "hs.screen.toNorth()": "hs.screen.html#toNorth", "hs.screen.toSouth()": "hs.screen.html#toSouth", "hs.screen.toUnitRect()": "hs.screen.html#toUnitRect", "hs.screen.toWest()": "hs.screen.html#toWest", "hs.screen.watcher": "hs.screen.watcher.html", "hs.screen.watcher.new()": "hs.screen.watcher.html#new", "hs.screen.watcher.newWithActiveScreen()": "hs.screen.watcher.html#newWithActiveScreen", "hs.screen.watcher.start()": "hs.screen.watcher.html#start", "hs.screen.watcher.stop()": "hs.screen.watcher.html#stop", "hs.screenRecordingState()": "hs.html#screenRecordingState", "hs.serial": "hs.serial.html", "hs.serial.availablePortDetails()": "hs.serial.html#availablePortDetails", "hs.serial.availablePortNames()": "hs.serial.html#availablePortNames", "hs.serial.availablePortPaths()": "hs.serial.html#availablePortPaths", "hs.serial.baudRate()": "hs.serial.html#baudRate", "hs.serial.callback()": "hs.serial.html#callback", "hs.serial.close()": "hs.serial.html#close", "hs.serial.dataBits()": "hs.serial.html#dataBits", "hs.serial.deviceCallback()": "hs.serial.html#deviceCallback", "hs.serial.dtr()": "hs.serial.html#dtr", "hs.serial.isOpen()": "hs.serial.html#isOpen", "hs.serial.name()": "hs.serial.html#name", "hs.serial.newFromName()": "hs.serial.html#newFromName", "hs.serial.newFromPath()": "hs.serial.html#newFromPath", "hs.serial.open()": "hs.serial.html#open", "hs.serial.parity()": "hs.serial.html#parity", "hs.serial.path()": "hs.serial.html#path", "hs.serial.rts()": "hs.serial.html#rts", "hs.serial.sendData()": "hs.serial.html#sendData", "hs.serial.shouldEchoReceivedData()": "hs.serial.html#shouldEchoReceivedData", "hs.serial.stopBits()": "hs.serial.html#stopBits", "hs.serial.usesDTRDSRFlowControl()": "hs.serial.html#usesDTRDSRFlowControl", "hs.serial.usesRTSCTSFlowControl()": "hs.serial.html#usesRTSCTSFlowControl", "hs.settings": "hs.settings.html", "hs.settings.bundleID": "hs.settings.html#bundleID", "hs.settings.clear()": "hs.settings.html#clear", "hs.settings.dateFormat": "hs.settings.html#dateFormat", "hs.settings.get()": "hs.settings.html#get", "hs.settings.getKeys()": "hs.settings.html#getKeys", "hs.settings.set()": "hs.settings.html#set", "hs.settings.setData()": "hs.settings.html#setData", "hs.settings.setDate()": "hs.settings.html#setDate", "hs.settings.watchKey()": "hs.settings.html#watchKey", "hs.sharing": "hs.sharing.html", "hs.sharing.accountName()": "hs.sharing.html#accountName", "hs.sharing.alternateImage()": "hs.sharing.html#alternateImage", "hs.sharing.attachments()": "hs.sharing.html#attachments", "hs.sharing.builtinSharingServices": "hs.sharing.html#builtinSharingServices", "hs.sharing.callback()": "hs.sharing.html#callback", "hs.sharing.canShareItems()": "hs.sharing.html#canShareItems", "hs.sharing.fileURL()": "hs.sharing.html#fileURL", "hs.sharing.image()": "hs.sharing.html#image", "hs.sharing.messageBody()": "hs.sharing.html#messageBody", "hs.sharing.newShare()": "hs.sharing.html#newShare", "hs.sharing.permanentLink()": "hs.sharing.html#permanentLink", "hs.sharing.recipients()": "hs.sharing.html#recipients", "hs.sharing.serviceName()": "hs.sharing.html#serviceName", "hs.sharing.shareItems()": "hs.sharing.html#shareItems", "hs.sharing.shareTypesFor()": "hs.sharing.html#shareTypesFor", "hs.sharing.subject()": "hs.sharing.html#subject", "hs.sharing.title()": "hs.sharing.html#title", "hs.sharing.URL()": "hs.sharing.html#URL", "hs.shortcuts": "hs.shortcuts.html", "hs.shortcuts.list()": "hs.shortcuts.html#list", "hs.shortcuts.run()": "hs.shortcuts.html#run", "hs.showError()": "hs.html#showError", "hs.shutdownCallback": "hs.html#shutdownCallback", "hs.socket": "hs.socket.html", "hs.socket.connect()": "hs.socket.html#connect", "hs.socket.connected()": "hs.socket.html#connected", "hs.socket.connections()": "hs.socket.html#connections", "hs.socket.disconnect()": "hs.socket.html#disconnect", "hs.socket.info()": "hs.socket.html#info", "hs.socket.listen()": "hs.socket.html#listen", "hs.socket.new()": "hs.socket.html#new", "hs.socket.parseAddress()": "hs.socket.html#parseAddress", "hs.socket.read()": "hs.socket.html#read", "hs.socket.receive()": "hs.socket.html#receive", "hs.socket.send()": "hs.socket.html#send", "hs.socket.server()": "hs.socket.html#server", "hs.socket.setCallback()": "hs.socket.html#setCallback", "hs.socket.setTimeout()": "hs.socket.html#setTimeout", "hs.socket.startTLS()": "hs.socket.html#startTLS", "hs.socket.timeout": "hs.socket.html#timeout", "hs.socket.udp": "hs.socket.udp.html", "hs.socket.udp.broadcast()": "hs.socket.udp.html#broadcast", "hs.socket.udp.close()": "hs.socket.udp.html#close", "hs.socket.udp.closed()": "hs.socket.udp.html#closed", "hs.socket.udp.connect()": "hs.socket.udp.html#connect", "hs.socket.udp.connected()": "hs.socket.udp.html#connected", "hs.socket.udp.enableIPv()": "hs.socket.udp.html#enableIPv", "hs.socket.udp.info()": "hs.socket.udp.html#info", "hs.socket.udp.listen()": "hs.socket.udp.html#listen", "hs.socket.udp.new()": "hs.socket.udp.html#new", "hs.socket.udp.parseAddress()": "hs.socket.udp.html#parseAddress", "hs.socket.udp.pause()": "hs.socket.udp.html#pause", "hs.socket.udp.preferIPv()": "hs.socket.udp.html#preferIPv", "hs.socket.udp.read()": "hs.socket.udp.html#read", "hs.socket.udp.readOne()": "hs.socket.udp.html#readOne", "hs.socket.udp.receive()": "hs.socket.udp.html#receive", "hs.socket.udp.receiveOne()": "hs.socket.udp.html#receiveOne", "hs.socket.udp.reusePort()": "hs.socket.udp.html#reusePort", "hs.socket.udp.send()": "hs.socket.udp.html#send", "hs.socket.udp.server()": "hs.socket.udp.html#server", "hs.socket.udp.setBufferSize()": "hs.socket.udp.html#setBufferSize", "hs.socket.udp.setCallback()": "hs.socket.udp.html#setCallback", "hs.socket.udp.setTimeout()": "hs.socket.udp.html#setTimeout", "hs.socket.udp.timeout": "hs.socket.udp.html#timeout", "hs.socket.udp.write()": "hs.socket.udp.html#write", "hs.socket.write()": "hs.socket.html#write", "hs.sound": "hs.sound.html", "hs.sound.currentTime()": "hs.sound.html#currentTime", "hs.sound.device()": "hs.sound.html#device", "hs.sound.duration()": "hs.sound.html#duration", "hs.sound.getAudioEffectNames()": "hs.sound.html#getAudioEffectNames", "hs.sound.getByFile()": "hs.sound.html#getByFile", "hs.sound.getByName()": "hs.sound.html#getByName", "hs.sound.isPlaying()": "hs.sound.html#isPlaying", "hs.sound.loopSound()": "hs.sound.html#loopSound", "hs.sound.name()": "hs.sound.html#name", "hs.sound.pause()": "hs.sound.html#pause", "hs.sound.play()": "hs.sound.html#play", "hs.sound.resume()": "hs.sound.html#resume", "hs.sound.setCallback()": "hs.sound.html#setCallback", "hs.sound.soundFileTypes()": "hs.sound.html#soundFileTypes", "hs.sound.soundTypes()": "hs.sound.html#soundTypes", "hs.sound.stop()": "hs.sound.html#stop", "hs.sound.stopOnReload()": "hs.sound.html#stopOnReload", "hs.sound.systemSounds()": "hs.sound.html#systemSounds", "hs.sound.volume()": "hs.sound.html#volume", "hs.spaces": "hs.spaces.html", "hs.spaces.activeSpaceOnScreen()": "hs.spaces.html#activeSpaceOnScreen", "hs.spaces.activeSpaces()": "hs.spaces.html#activeSpaces", "hs.spaces.addSpaceToScreen()": "hs.spaces.html#addSpaceToScreen", "hs.spaces.allSpaces()": "hs.spaces.html#allSpaces", "hs.spaces.closeMissionControl()": "hs.spaces.html#closeMissionControl", "hs.spaces.data_managedDisplaySpaces()": "hs.spaces.html#data_managedDisplaySpaces", "hs.spaces.data_missionControlAXUIElementData()": "hs.spaces.html#data_missionControlAXUIElementData", "hs.spaces.focusedSpace()": "hs.spaces.html#focusedSpace", "hs.spaces.gotoSpace()": "hs.spaces.html#gotoSpace", "hs.spaces.MCwaitTime": "hs.spaces.html#MCwaitTime", "hs.spaces.missionControlSpaceNames()": "hs.spaces.html#missionControlSpaceNames", "hs.spaces.moveWindowToSpace()": "hs.spaces.html#moveWindowToSpace", "hs.spaces.openMissionControl()": "hs.spaces.html#openMissionControl", "hs.spaces.removeSpace()": "hs.spaces.html#removeSpace", "hs.spaces.screensHaveSeparateSpaces()": "hs.spaces.html#screensHaveSeparateSpaces", "hs.spaces.setDefaultMCwaitTime()": "hs.spaces.html#setDefaultMCwaitTime", "hs.spaces.spaceDisplay()": "hs.spaces.html#spaceDisplay", "hs.spaces.spacesForScreen()": "hs.spaces.html#spacesForScreen", "hs.spaces.spaceType()": "hs.spaces.html#spaceType", "hs.spaces.toggleAppExpose()": "hs.spaces.html#toggleAppExpose", "hs.spaces.toggleLaunchPad()": "hs.spaces.html#toggleLaunchPad", "hs.spaces.toggleMissionControl()": "hs.spaces.html#toggleMissionControl", "hs.spaces.toggleShowDesktop()": "hs.spaces.html#toggleShowDesktop", "hs.spaces.watcher": "hs.spaces.watcher.html", "hs.spaces.watcher.new()": "hs.spaces.watcher.html#new", "hs.spaces.watcher.start()": "hs.spaces.watcher.html#start", "hs.spaces.watcher.stop()": "hs.spaces.watcher.html#stop", "hs.spaces.windowsForSpace()": "hs.spaces.html#windowsForSpace", "hs.spaces.windowSpaces()": "hs.spaces.html#windowSpaces", "hs.speech": "hs.speech.html", "hs.speech.attributesForVoice()": "hs.speech.html#attributesForVoice", "hs.speech.availableVoices()": "hs.speech.html#availableVoices", "hs.speech.continue()": "hs.speech.html#continue", "hs.speech.defaultVoice()": "hs.speech.html#defaultVoice", "hs.speech.isAnyApplicationSpeaking()": "hs.speech.html#isAnyApplicationSpeaking", "hs.speech.isPaused()": "hs.speech.html#isPaused", "hs.speech.isSpeaking()": "hs.speech.html#isSpeaking", "hs.speech.listener": "hs.speech.listener.html", "hs.speech.listener.blocksOtherRecognizers()": "hs.speech.listener.html#blocksOtherRecognizers", "hs.speech.listener.commands()": "hs.speech.listener.html#commands", "hs.speech.listener.delete()": "hs.speech.listener.html#delete", "hs.speech.listener.foregroundOnly()": "hs.speech.listener.html#foregroundOnly", "hs.speech.listener.isListening()": "hs.speech.listener.html#isListening", "hs.speech.listener.new()": "hs.speech.listener.html#new", "hs.speech.listener.setCallback()": "hs.speech.listener.html#setCallback", "hs.speech.listener.start()": "hs.speech.listener.html#start", "hs.speech.listener.stop()": "hs.speech.listener.html#stop", "hs.speech.listener.title()": "hs.speech.listener.html#title", "hs.speech.modulation()": "hs.speech.html#modulation", "hs.speech.new()": "hs.speech.html#new", "hs.speech.pause()": "hs.speech.html#pause", "hs.speech.phonemes()": "hs.speech.html#phonemes", "hs.speech.phoneticSymbols()": "hs.speech.html#phoneticSymbols", "hs.speech.pitch()": "hs.speech.html#pitch", "hs.speech.rate()": "hs.speech.html#rate", "hs.speech.reset()": "hs.speech.html#reset", "hs.speech.setCallback()": "hs.speech.html#setCallback", "hs.speech.speak()": "hs.speech.html#speak", "hs.speech.speaking()": "hs.speech.html#speaking", "hs.speech.speakToFile()": "hs.speech.html#speakToFile", "hs.speech.stop()": "hs.speech.html#stop", "hs.speech.usesFeedbackWindow()": "hs.speech.html#usesFeedbackWindow", "hs.speech.voice()": "hs.speech.html#voice", "hs.speech.volume()": "hs.speech.html#volume", "hs.spoons": "hs.spoons.html", "hs.spoons.bindHotkeysToSpec()": "hs.spoons.html#bindHotkeysToSpec", "hs.spoons.isInstalled()": "hs.spoons.html#isInstalled", "hs.spoons.isLoaded()": "hs.spoons.html#isLoaded", "hs.spoons.list()": "hs.spoons.html#list", "hs.spoons.newSpoon()": "hs.spoons.html#newSpoon", "hs.spoons.resourcePath()": "hs.spoons.html#resourcePath", "hs.spoons.scriptPath()": "hs.spoons.html#scriptPath", "hs.spoons.use()": "hs.spoons.html#use", "hs.spotify": "hs.spotify.html", "hs.spotify.displayCurrentTrack()": "hs.spotify.html#displayCurrentTrack", "hs.spotify.ff()": "hs.spotify.html#ff", "hs.spotify.getCurrentAlbum()": "hs.spotify.html#getCurrentAlbum", "hs.spotify.getCurrentArtist()": "hs.spotify.html#getCurrentArtist", "hs.spotify.getCurrentTrack()": "hs.spotify.html#getCurrentTrack", "hs.spotify.getCurrentTrackId()": "hs.spotify.html#getCurrentTrackId", "hs.spotify.getDuration()": "hs.spotify.html#getDuration", "hs.spotify.getPlaybackState()": "hs.spotify.html#getPlaybackState", "hs.spotify.getPosition()": "hs.spotify.html#getPosition", "hs.spotify.getVolume()": "hs.spotify.html#getVolume", "hs.spotify.isPlaying()": "hs.spotify.html#isPlaying", "hs.spotify.isRunning()": "hs.spotify.html#isRunning", "hs.spotify.next()": "hs.spotify.html#next", "hs.spotify.pause()": "hs.spotify.html#pause", "hs.spotify.play()": "hs.spotify.html#play", "hs.spotify.playpause()": "hs.spotify.html#playpause", "hs.spotify.playTrack()": "hs.spotify.html#playTrack", "hs.spotify.previous()": "hs.spotify.html#previous", "hs.spotify.rw()": "hs.spotify.html#rw", "hs.spotify.setPosition()": "hs.spotify.html#setPosition", "hs.spotify.setVolume()": "hs.spotify.html#setVolume", "hs.spotify.state_paused": "hs.spotify.html#state_paused", "hs.spotify.state_playing": "hs.spotify.html#state_playing", "hs.spotify.state_stopped": "hs.spotify.html#state_stopped", "hs.spotify.volumeDown()": "hs.spotify.html#volumeDown", "hs.spotify.volumeUp()": "hs.spotify.html#volumeUp", "hs.spotlight": "hs.spotlight.html", "hs.spotlight.callbackMessages()": "hs.spotlight.html#callbackMessages", "hs.spotlight.commonAttributeKeys": "hs.spotlight.html#commonAttributeKeys", "hs.spotlight.count()": "hs.spotlight.html#count", "hs.spotlight.definedSearchScopes": "hs.spotlight.html#definedSearchScopes", "hs.spotlight.group": "hs.spotlight.group.html", "hs.spotlight.group.attribute()": "hs.spotlight.group.html#attribute", "hs.spotlight.group.count()": "hs.spotlight.group.html#count", "hs.spotlight.group.resultAtIndex()": "hs.spotlight.group.html#resultAtIndex", "hs.spotlight.group.subgroups()": "hs.spotlight.group.html#subgroups", "hs.spotlight.group.value()": "hs.spotlight.group.html#value", "hs.spotlight.groupedResults()": "hs.spotlight.html#groupedResults", "hs.spotlight.groupingAttributes()": "hs.spotlight.html#groupingAttributes", "hs.spotlight.isGathering()": "hs.spotlight.html#isGathering", "hs.spotlight.isRunning()": "hs.spotlight.html#isRunning", "hs.spotlight.item": "hs.spotlight.item.html", "hs.spotlight.item.attributes()": "hs.spotlight.item.html#attributes", "hs.spotlight.item.valueForAttribute()": "hs.spotlight.item.html#valueForAttribute", "hs.spotlight.new()": "hs.spotlight.html#new", "hs.spotlight.newWithin()": "hs.spotlight.html#newWithin", "hs.spotlight.queryString()": "hs.spotlight.html#queryString", "hs.spotlight.resultAtIndex()": "hs.spotlight.html#resultAtIndex", "hs.spotlight.searchScopes()": "hs.spotlight.html#searchScopes", "hs.spotlight.setCallback()": "hs.spotlight.html#setCallback", "hs.spotlight.sortDescriptors()": "hs.spotlight.html#sortDescriptors", "hs.spotlight.start()": "hs.spotlight.html#start", "hs.spotlight.stop()": "hs.spotlight.html#stop", "hs.spotlight.updateInterval()": "hs.spotlight.html#updateInterval", "hs.spotlight.valueListAttributes()": "hs.spotlight.html#valueListAttributes", "hs.spotlight.valueLists()": "hs.spotlight.html#valueLists", "hs.sqlite3": "hs.sqlite3.html", "hs.streamdeck": "hs.streamdeck.html", "hs.streamdeck.buttonCallback()": "hs.streamdeck.html#buttonCallback", "hs.streamdeck.buttonLayout()": "hs.streamdeck.html#buttonLayout", "hs.streamdeck.discoveryCallback()": "hs.streamdeck.html#discoveryCallback", "hs.streamdeck.encoderCallback()": "hs.streamdeck.html#encoderCallback", "hs.streamdeck.firmwareVersion()": "hs.streamdeck.html#firmwareVersion", "hs.streamdeck.getDevice()": "hs.streamdeck.html#getDevice", "hs.streamdeck.imageSize()": "hs.streamdeck.html#imageSize", "hs.streamdeck.init()": "hs.streamdeck.html#init", "hs.streamdeck.numDevices()": "hs.streamdeck.html#numDevices", "hs.streamdeck.reset()": "hs.streamdeck.html#reset", "hs.streamdeck.screenCallback()": "hs.streamdeck.html#screenCallback", "hs.streamdeck.serialNumber()": "hs.streamdeck.html#serialNumber", "hs.streamdeck.setBrightness()": "hs.streamdeck.html#setBrightness", "hs.streamdeck.setButtonColor()": "hs.streamdeck.html#setButtonColor", "hs.streamdeck.setButtonImage()": "hs.streamdeck.html#setButtonImage", "hs.streamdeck.setScreenImage()": "hs.streamdeck.html#setScreenImage", "hs.styledtext": "hs.styledtext.html", "hs.styledtext.ansi()": "hs.styledtext.html#ansi", "hs.styledtext.asTable()": "hs.styledtext.html#asTable", "hs.styledtext.byte()": "hs.styledtext.html#byte", "hs.styledtext.convert()": "hs.styledtext.html#convert", "hs.styledtext.convertFont()": "hs.styledtext.html#convertFont", "hs.styledtext.copy()": "hs.styledtext.html#copy", "hs.styledtext.defaultFonts": "hs.styledtext.html#defaultFonts", "hs.styledtext.find()": "hs.styledtext.html#find", "hs.styledtext.fontFamilies()": "hs.styledtext.html#fontFamilies", "hs.styledtext.fontInfo()": "hs.styledtext.html#fontInfo", "hs.styledtext.fontNames()": "hs.styledtext.html#fontNames", "hs.styledtext.fontNamesWithTraits()": "hs.styledtext.html#fontNamesWithTraits", "hs.styledtext.fontPath()": "hs.styledtext.html#fontPath", "hs.styledtext.fontsForFamily()": "hs.styledtext.html#fontsForFamily", "hs.styledtext.fontTraits": "hs.styledtext.html#fontTraits", "hs.styledtext.getString()": "hs.styledtext.html#getString", "hs.styledtext.getStyledTextFromData()": "hs.styledtext.html#getStyledTextFromData", "hs.styledtext.getStyledTextFromFile()": "hs.styledtext.html#getStyledTextFromFile", "hs.styledtext.gmatch()": "hs.styledtext.html#gmatch", "hs.styledtext.isIdentical()": "hs.styledtext.html#isIdentical", "hs.styledtext.len()": "hs.styledtext.html#len", "hs.styledtext.lineAppliesTo": "hs.styledtext.html#lineAppliesTo", "hs.styledtext.linePatterns": "hs.styledtext.html#linePatterns", "hs.styledtext.lineStyles": "hs.styledtext.html#lineStyles", "hs.styledtext.loadFont()": "hs.styledtext.html#loadFont", "hs.styledtext.lower()": "hs.styledtext.html#lower", "hs.styledtext.match()": "hs.styledtext.html#match", "hs.styledtext.new()": "hs.styledtext.html#new", "hs.styledtext.removeStyle()": "hs.styledtext.html#removeStyle", "hs.styledtext.rep()": "hs.styledtext.html#rep", "hs.styledtext.setString()": "hs.styledtext.html#setString", "hs.styledtext.setStyle()": "hs.styledtext.html#setStyle", "hs.styledtext.sub()": "hs.styledtext.html#sub", "hs.styledtext.upper()": "hs.styledtext.html#upper", "hs.styledtext.validFont()": "hs.styledtext.html#validFont", "hs.tabs": "hs.tabs.html", "hs.tabs.enableForApp()": "hs.tabs.html#enableForApp", "hs.tabs.focusTab()": "hs.tabs.html#focusTab", "hs.tabs.tabWindows()": "hs.tabs.html#tabWindows", "hs.tangent": "hs.tangent.html", "hs.tangent.action": "hs.tangent.html#action", "hs.tangent.automaticallySendApplicationDefinition": "hs.tangent.html#automaticallySendApplicationDefinition", "hs.tangent.callback()": "hs.tangent.html#callback", "hs.tangent.connect()": "hs.tangent.html#connect", "hs.tangent.connected()": "hs.tangent.html#connected", "hs.tangent.disconnect()": "hs.tangent.html#disconnect", "hs.tangent.fromHub": "hs.tangent.html#fromHub", "hs.tangent.ipAddress": "hs.tangent.html#ipAddress", "hs.tangent.isTangentHubInstalled()": "hs.tangent.html#isTangentHubInstalled", "hs.tangent.panelType": "hs.tangent.html#panelType", "hs.tangent.parameter": "hs.tangent.html#parameter", "hs.tangent.port": "hs.tangent.html#port", "hs.tangent.send()": "hs.tangent.html#send", "hs.tangent.sendAllChange()": "hs.tangent.html#sendAllChange", "hs.tangent.sendApplicationDefinition()": "hs.tangent.html#sendApplicationDefinition", "hs.tangent.sendDisplayText()": "hs.tangent.html#sendDisplayText", "hs.tangent.sendHighlightControl()": "hs.tangent.html#sendHighlightControl", "hs.tangent.sendIndicateControl()": "hs.tangent.html#sendIndicateControl", "hs.tangent.sendMenuString()": "hs.tangent.html#sendMenuString", "hs.tangent.sendModeValue()": "hs.tangent.html#sendModeValue", "hs.tangent.sendPanelConnectionStatesRequest()": "hs.tangent.html#sendPanelConnectionStatesRequest", "hs.tangent.sendParameterValue()": "hs.tangent.html#sendParameterValue", "hs.tangent.sendRenameControl()": "hs.tangent.html#sendRenameControl", "hs.tangent.sendUnmanagedDisplayWrite()": "hs.tangent.html#sendUnmanagedDisplayWrite", "hs.tangent.sendUnmanagedPanelCapabilitiesRequest()": "hs.tangent.html#sendUnmanagedPanelCapabilitiesRequest", "hs.tangent.setLogLevel()": "hs.tangent.html#setLogLevel", "hs.tangent.toHub": "hs.tangent.html#toHub", "hs.task": "hs.task.html", "hs.task.closeInput()": "hs.task.html#closeInput", "hs.task.environment()": "hs.task.html#environment", "hs.task.interrupt()": "hs.task.html#interrupt", "hs.task.isRunning()": "hs.task.html#isRunning", "hs.task.new()": "hs.task.html#new", "hs.task.pause()": "hs.task.html#pause", "hs.task.pid()": "hs.task.html#pid", "hs.task.resume()": "hs.task.html#resume", "hs.task.setCallback()": "hs.task.html#setCallback", "hs.task.setEnvironment()": "hs.task.html#setEnvironment", "hs.task.setInput()": "hs.task.html#setInput", "hs.task.setStreamingCallback()": "hs.task.html#setStreamingCallback", "hs.task.setWorkingDirectory()": "hs.task.html#setWorkingDirectory", "hs.task.start()": "hs.task.html#start", "hs.task.terminate()": "hs.task.html#terminate", "hs.task.terminationReason()": "hs.task.html#terminationReason", "hs.task.terminationStatus()": "hs.task.html#terminationStatus", "hs.task.waitUntilExit()": "hs.task.html#waitUntilExit", "hs.task.workingDirectory()": "hs.task.html#workingDirectory", "hs.textDroppedToDockIconCallback": "hs.html#textDroppedToDockIconCallback", "hs.timer": "hs.timer.html", "hs.timer.absoluteTime()": "hs.timer.html#absoluteTime", "hs.timer.days()": "hs.timer.html#days", "hs.timer.delayed": "hs.timer.delayed.html", "hs.timer.delayed.new()": "hs.timer.delayed.html#new", "hs.timer.delayed.nextTrigger()": "hs.timer.delayed.html#nextTrigger", "hs.timer.delayed.running()": "hs.timer.delayed.html#running", "hs.timer.delayed.setDelay()": "hs.timer.delayed.html#setDelay", "hs.timer.delayed.start()": "hs.timer.delayed.html#start", "hs.timer.delayed.stop()": "hs.timer.delayed.html#stop", "hs.timer.doAfter()": "hs.timer.html#doAfter", "hs.timer.doAt()": "hs.timer.html#doAt", "hs.timer.doEvery()": "hs.timer.html#doEvery", "hs.timer.doUntil()": "hs.timer.html#doUntil", "hs.timer.doWhile()": "hs.timer.html#doWhile", "hs.timer.fire()": "hs.timer.html#fire", "hs.timer.hours()": "hs.timer.html#hours", "hs.timer.localTime()": "hs.timer.html#localTime", "hs.timer.minutes()": "hs.timer.html#minutes", "hs.timer.new()": "hs.timer.html#new", "hs.timer.nextTrigger()": "hs.timer.html#nextTrigger", "hs.timer.running()": "hs.timer.html#running", "hs.timer.seconds()": "hs.timer.html#seconds", "hs.timer.secondsSinceEpoch()": "hs.timer.html#secondsSinceEpoch", "hs.timer.setNextTrigger()": "hs.timer.html#setNextTrigger", "hs.timer.start()": "hs.timer.html#start", "hs.timer.stop()": "hs.timer.html#stop", "hs.timer.usleep()": "hs.timer.html#usleep", "hs.timer.waitUntil()": "hs.timer.html#waitUntil", "hs.timer.waitWhile()": "hs.timer.html#waitWhile", "hs.timer.weeks()": "hs.timer.html#weeks", "hs.toggleConsole()": "hs.html#toggleConsole", "hs.uielement": "hs.uielement.html", "hs.uielement.focusedElement()": "hs.uielement.html#focusedElement", "hs.uielement.isApplication()": "hs.uielement.html#isApplication", "hs.uielement.isWindow()": "hs.uielement.html#isWindow", "hs.uielement.newWatcher()": "hs.uielement.html#newWatcher", "hs.uielement.role()": "hs.uielement.html#role", "hs.uielement.selectedText()": "hs.uielement.html#selectedText", "hs.uielement.watcher": "hs.uielement.watcher.html", "hs.uielement.watcher.element()": "hs.uielement.watcher.html#element", "hs.uielement.watcher.pid()": "hs.uielement.watcher.html#pid", "hs.uielement.watcher.start()": "hs.uielement.watcher.html#start", "hs.uielement.watcher.stop()": "hs.uielement.watcher.html#stop", "hs.updateAvailable()": "hs.html#updateAvailable", "hs.uploadCrashData()": "hs.html#uploadCrashData", "hs.urlevent": "hs.urlevent.html", "hs.urlevent.bind()": "hs.urlevent.html#bind", "hs.urlevent.getAllHandlersForScheme()": "hs.urlevent.html#getAllHandlersForScheme", "hs.urlevent.getDefaultHandler()": "hs.urlevent.html#getDefaultHandler", "hs.urlevent.httpCallback": "hs.urlevent.html#httpCallback", "hs.urlevent.mailtoCallback": "hs.urlevent.html#mailtoCallback", "hs.urlevent.openURL()": "hs.urlevent.html#openURL", "hs.urlevent.openURLWithBundle()": "hs.urlevent.html#openURLWithBundle", "hs.urlevent.setDefaultHandler()": "hs.urlevent.html#setDefaultHandler", "hs.urlevent.setRestoreHandler()": "hs.urlevent.html#setRestoreHandler", "hs.usb": "hs.usb.html", "hs.usb.attachedDevices()": "hs.usb.html#attachedDevices", "hs.usb.watcher": "hs.usb.watcher.html", "hs.usb.watcher.new()": "hs.usb.watcher.html#new", "hs.usb.watcher.start()": "hs.usb.watcher.html#start", "hs.usb.watcher.stop()": "hs.usb.watcher.html#stop", "hs.utf8": "hs.utf8.html", "hs.utf8.asciiOnly()": "hs.utf8.html#asciiOnly", "hs.utf8.codepointToUTF8()": "hs.utf8.html#codepointToUTF8", "hs.utf8.fixUTF8()": "hs.utf8.html#fixUTF8", "hs.utf8.hexDump()": "hs.utf8.html#hexDump", "hs.utf8.registerCodepoint()": "hs.utf8.html#registerCodepoint", "hs.utf8.registeredKeys": "hs.utf8.html#registeredKeys", "hs.utf8.registeredLabels()": "hs.utf8.html#registeredLabels", "hs.vox": "hs.vox.html", "hs.vox.addurl()": "hs.vox.html#addurl", "hs.vox.backward()": "hs.vox.html#backward", "hs.vox.decreaseVolume()": "hs.vox.html#decreaseVolume", "hs.vox.fastBackward()": "hs.vox.html#fastBackward", "hs.vox.fastForward()": "hs.vox.html#fastForward", "hs.vox.forward()": "hs.vox.html#forward", "hs.vox.getAlbumArtist()": "hs.vox.html#getAlbumArtist", "hs.vox.getCurrentAlbum()": "hs.vox.html#getCurrentAlbum", "hs.vox.getCurrentArtist()": "hs.vox.html#getCurrentArtist", "hs.vox.getPlayerState()": "hs.vox.html#getPlayerState", "hs.vox.getUniqueID()": "hs.vox.html#getUniqueID", "hs.vox.increaseVolume()": "hs.vox.html#increaseVolume", "hs.vox.isRunning()": "hs.vox.html#isRunning", "hs.vox.next()": "hs.vox.html#next", "hs.vox.pause()": "hs.vox.html#pause", "hs.vox.play()": "hs.vox.html#play", "hs.vox.playpause()": "hs.vox.html#playpause", "hs.vox.playurl()": "hs.vox.html#playurl", "hs.vox.previous()": "hs.vox.html#previous", "hs.vox.shuffle()": "hs.vox.html#shuffle", "hs.vox.togglePlaylist()": "hs.vox.html#togglePlaylist", "hs.vox.trackInfo()": "hs.vox.html#trackInfo", "hs.watchable": "hs.watchable.html", "hs.watchable.callback()": "hs.watchable.html#callback", "hs.watchable.change()": "hs.watchable.html#change", "hs.watchable.new()": "hs.watchable.html#new", "hs.watchable.pause()": "hs.watchable.html#pause", "hs.watchable.release()": "hs.watchable.html#release", "hs.watchable.resume()": "hs.watchable.html#resume", "hs.watchable.value()": "hs.watchable.html#value", "hs.watchable.watch()": "hs.watchable.html#watch", "hs.websocket": "hs.websocket.html", "hs.websocket.close()": "hs.websocket.html#close", "hs.websocket.new()": "hs.websocket.html#new", "hs.websocket.send()": "hs.websocket.html#send", "hs.websocket.status()": "hs.websocket.html#status", "hs.webview": "hs.webview.html", "hs.webview.allowGestures()": "hs.webview.html#allowGestures", "hs.webview.allowMagnificationGestures()": "hs.webview.html#allowMagnificationGestures", "hs.webview.allowNavigationGestures()": "hs.webview.html#allowNavigationGestures", "hs.webview.allowNewWindows()": "hs.webview.html#allowNewWindows", "hs.webview.allowTextEntry()": "hs.webview.html#allowTextEntry", "hs.webview.alpha()": "hs.webview.html#alpha", "hs.webview.asHSDrawing": "hs.webview.html#asHSDrawing", "hs.webview.asHSWindow": "hs.webview.html#asHSWindow", "hs.webview.attachedToolbar()": "hs.webview.html#attachedToolbar", "hs.webview.behavior()": "hs.webview.html#behavior", "hs.webview.behaviorAsLabels()": "hs.webview.html#behaviorAsLabels", "hs.webview.bringToFront()": "hs.webview.html#bringToFront", "hs.webview.certificateChain()": "hs.webview.html#certificateChain", "hs.webview.certificateOIDs": "hs.webview.html#certificateOIDs", "hs.webview.children()": "hs.webview.html#children", "hs.webview.closeOnEscape()": "hs.webview.html#closeOnEscape", "hs.webview.darkMode()": "hs.webview.html#darkMode", "hs.webview.datastore": "hs.webview.datastore.html", "hs.webview.datastore.default()": "hs.webview.datastore.html#default", "hs.webview.datastore.fetchRecords()": "hs.webview.datastore.html#fetchRecords", "hs.webview.datastore.fromWebview()": "hs.webview.datastore.html#fromWebview", "hs.webview.datastore.newPrivate()": "hs.webview.datastore.html#newPrivate", "hs.webview.datastore.persistent()": "hs.webview.datastore.html#persistent", "hs.webview.datastore.removeRecordsAfter()": "hs.webview.datastore.html#removeRecordsAfter", "hs.webview.datastore.removeRecordsFor()": "hs.webview.datastore.html#removeRecordsFor", "hs.webview.datastore.websiteDataTypes()": "hs.webview.datastore.html#websiteDataTypes", "hs.webview.delete()": "hs.webview.html#delete", "hs.webview.deleteOnClose()": "hs.webview.html#deleteOnClose", "hs.webview.estimatedProgress()": "hs.webview.html#estimatedProgress", "hs.webview.evaluateJavaScript()": "hs.webview.html#evaluateJavaScript", "hs.webview.examineInvalidCertificates()": "hs.webview.html#examineInvalidCertificates", "hs.webview.frame()": "hs.webview.html#frame", "hs.webview.goBack()": "hs.webview.html#goBack", "hs.webview.goForward()": "hs.webview.html#goForward", "hs.webview.hide()": "hs.webview.html#hide", "hs.webview.historyList()": "hs.webview.html#historyList", "hs.webview.hswindow()": "hs.webview.html#hswindow", "hs.webview.html()": "hs.webview.html#html", "hs.webview.isOnlySecureContent()": "hs.webview.html#isOnlySecureContent", "hs.webview.isVisible()": "hs.webview.html#isVisible", "hs.webview.level()": "hs.webview.html#level", "hs.webview.loading()": "hs.webview.html#loading", "hs.webview.magnification()": "hs.webview.html#magnification", "hs.webview.navigationCallback()": "hs.webview.html#navigationCallback", "hs.webview.navigationID()": "hs.webview.html#navigationID", "hs.webview.new()": "hs.webview.html#new", "hs.webview.newBrowser()": "hs.webview.html#newBrowser", "hs.webview.orderAbove()": "hs.webview.html#orderAbove", "hs.webview.orderBelow()": "hs.webview.html#orderBelow", "hs.webview.parent()": "hs.webview.html#parent", "hs.webview.policyCallback()": "hs.webview.html#policyCallback", "hs.webview.privateBrowsing()": "hs.webview.html#privateBrowsing", "hs.webview.reload()": "hs.webview.html#reload", "hs.webview.sendToBack()": "hs.webview.html#sendToBack", "hs.webview.setLevel": "hs.webview.html#setLevel", "hs.webview.shadow()": "hs.webview.html#shadow", "hs.webview.show()": "hs.webview.html#show", "hs.webview.size()": "hs.webview.html#size", "hs.webview.sslCallback()": "hs.webview.html#sslCallback", "hs.webview.stopLoading()": "hs.webview.html#stopLoading", "hs.webview.title()": "hs.webview.html#title", "hs.webview.titleVisibility()": "hs.webview.html#titleVisibility", "hs.webview.toolbar": "hs.webview.toolbar.html", "hs.webview.toolbar.addItems()": "hs.webview.toolbar.html#addItems", "hs.webview.toolbar.allowedItems()": "hs.webview.toolbar.html#allowedItems", "hs.webview.toolbar.attachToolbar()": "hs.webview.toolbar.html#attachToolbar", "hs.webview.toolbar.autosaves()": "hs.webview.toolbar.html#autosaves", "hs.webview.toolbar.canCustomize()": "hs.webview.toolbar.html#canCustomize", "hs.webview.toolbar.copy()": "hs.webview.toolbar.html#copy", "hs.webview.toolbar.customizePanel()": "hs.webview.toolbar.html#customizePanel", "hs.webview.toolbar.delete()": "hs.webview.toolbar.html#delete", "hs.webview.toolbar.deleteItem()": "hs.webview.toolbar.html#deleteItem", "hs.webview.toolbar.displayMode()": "hs.webview.toolbar.html#displayMode", "hs.webview.toolbar.identifier()": "hs.webview.toolbar.html#identifier", "hs.webview.toolbar.insertItem()": "hs.webview.toolbar.html#insertItem", "hs.webview.toolbar.inTitleBar()": "hs.webview.toolbar.html#inTitleBar", "hs.webview.toolbar.isAttached()": "hs.webview.toolbar.html#isAttached", "hs.webview.toolbar.isCustomizing()": "hs.webview.toolbar.html#isCustomizing", "hs.webview.toolbar.itemDetails()": "hs.webview.toolbar.html#itemDetails", "hs.webview.toolbar.itemPriorities": "hs.webview.toolbar.html#itemPriorities", "hs.webview.toolbar.items()": "hs.webview.toolbar.html#items", "hs.webview.toolbar.modifyItem()": "hs.webview.toolbar.html#modifyItem", "hs.webview.toolbar.new()": "hs.webview.toolbar.html#new", "hs.webview.toolbar.notifyOnChange()": "hs.webview.toolbar.html#notifyOnChange", "hs.webview.toolbar.removeItem()": "hs.webview.toolbar.html#removeItem", "hs.webview.toolbar.savedSettings()": "hs.webview.toolbar.html#savedSettings", "hs.webview.toolbar.selectedItem()": "hs.webview.toolbar.html#selectedItem", "hs.webview.toolbar.selectSearchField()": "hs.webview.toolbar.html#selectSearchField", "hs.webview.toolbar.separator()": "hs.webview.toolbar.html#separator", "hs.webview.toolbar.setCallback()": "hs.webview.toolbar.html#setCallback", "hs.webview.toolbar.sizeMode()": "hs.webview.toolbar.html#sizeMode", "hs.webview.toolbar.systemToolbarItems": "hs.webview.toolbar.html#systemToolbarItems", "hs.webview.toolbar.toolbarStyle()": "hs.webview.toolbar.html#toolbarStyle", "hs.webview.toolbar.uniqueName()": "hs.webview.toolbar.html#uniqueName", "hs.webview.toolbar.visible()": "hs.webview.toolbar.html#visible", "hs.webview.toolbar.visibleItems()": "hs.webview.toolbar.html#visibleItems", "hs.webview.topLeft()": "hs.webview.html#topLeft", "hs.webview.transparent()": "hs.webview.html#transparent", "hs.webview.url()": "hs.webview.html#url", "hs.webview.urlParts()": "hs.webview.html#urlParts", "hs.webview.userAgent()": "hs.webview.html#userAgent", "hs.webview.usercontent": "hs.webview.usercontent.html", "hs.webview.usercontent.injectScript()": "hs.webview.usercontent.html#injectScript", "hs.webview.usercontent.new()": "hs.webview.usercontent.html#new", "hs.webview.usercontent.removeAllScripts()": "hs.webview.usercontent.html#removeAllScripts", "hs.webview.usercontent.setCallback()": "hs.webview.usercontent.html#setCallback", "hs.webview.usercontent.userScripts()": "hs.webview.usercontent.html#userScripts", "hs.webview.windowCallback()": "hs.webview.html#windowCallback", "hs.webview.windowMasks": "hs.webview.html#windowMasks", "hs.webview.windowStyle()": "hs.webview.html#windowStyle", "hs.webview.windowTitle()": "hs.webview.html#windowTitle", "hs.wifi": "hs.wifi.html", "hs.wifi.associate()": "hs.wifi.html#associate", "hs.wifi.availableNetworks()": "hs.wifi.html#availableNetworks", "hs.wifi.backgroundScan()": "hs.wifi.html#backgroundScan", "hs.wifi.currentNetwork()": "hs.wifi.html#currentNetwork", "hs.wifi.disassociate()": "hs.wifi.html#disassociate", "hs.wifi.interfaceDetails()": "hs.wifi.html#interfaceDetails", "hs.wifi.interfaces()": "hs.wifi.html#interfaces", "hs.wifi.isDone()": "hs.wifi.html#isDone", "hs.wifi.setPower()": "hs.wifi.html#setPower", "hs.wifi.watcher": "hs.wifi.watcher.html", "hs.wifi.watcher.eventTypes": "hs.wifi.watcher.html#eventTypes", "hs.wifi.watcher.new()": "hs.wifi.watcher.html#new", "hs.wifi.watcher.start()": "hs.wifi.watcher.html#start", "hs.wifi.watcher.stop()": "hs.wifi.watcher.html#stop", "hs.wifi.watcher.watchingFor()": "hs.wifi.watcher.html#watchingFor", "hs.window": "hs.window.html", "hs.window.allWindows()": "hs.window.html#allWindows", "hs.window.animationDuration": "hs.window.html#animationDuration", "hs.window.application()": "hs.window.html#application", "hs.window.becomeMain()": "hs.window.html#becomeMain", "hs.window.centerOnScreen()": "hs.window.html#centerOnScreen", "hs.window.close()": "hs.window.html#close", "hs.window.desktop()": "hs.window.html#desktop", "hs.window.filter": "hs.window.filter.html", "hs.window.filter.allowApp()": "hs.window.filter.html#allowApp", "hs.window.filter.allowedWindowRoles": "hs.window.filter.html#allowedWindowRoles", "hs.window.filter.copy()": "hs.window.filter.html#copy", "hs.window.filter.default": "hs.window.filter.html#default", "hs.window.filter.defaultCurrentSpace": "hs.window.filter.html#defaultCurrentSpace", "hs.window.filter.focusEast()": "hs.window.filter.html#focusEast", "hs.window.filter.focusNorth()": "hs.window.filter.html#focusNorth", "hs.window.filter.focusSouth()": "hs.window.filter.html#focusSouth", "hs.window.filter.focusWest()": "hs.window.filter.html#focusWest", "hs.window.filter.focusWindowEast()": "hs.window.filter.html#focusWindowEast", "hs.window.filter.focusWindowNorth()": "hs.window.filter.html#focusWindowNorth", "hs.window.filter.focusWindowSouth()": "hs.window.filter.html#focusWindowSouth", "hs.window.filter.focusWindowWest()": "hs.window.filter.html#focusWindowWest", "hs.window.filter.forceRefreshOnSpaceChange": "hs.window.filter.html#forceRefreshOnSpaceChange", "hs.window.filter.getFilters()": "hs.window.filter.html#getFilters", "hs.window.filter.getWindows()": "hs.window.filter.html#getWindows", "hs.window.filter.hasNoWindows": "hs.window.filter.html#hasNoWindows", "hs.window.filter.hasWindow": "hs.window.filter.html#hasWindow", "hs.window.filter.ignoreAlways": "hs.window.filter.html#ignoreAlways", "hs.window.filter.isAppAllowed()": "hs.window.filter.html#isAppAllowed", "hs.window.filter.isGuiApp()": "hs.window.filter.html#isGuiApp", "hs.window.filter.isWindowAllowed()": "hs.window.filter.html#isWindowAllowed", "hs.window.filter.new()": "hs.window.filter.html#new", "hs.window.filter.pause()": "hs.window.filter.html#pause", "hs.window.filter.rejectApp()": "hs.window.filter.html#rejectApp", "hs.window.filter.resume()": "hs.window.filter.html#resume", "hs.window.filter.setAppFilter()": "hs.window.filter.html#setAppFilter", "hs.window.filter.setCurrentSpace()": "hs.window.filter.html#setCurrentSpace", "hs.window.filter.setDefaultFilter()": "hs.window.filter.html#setDefaultFilter", "hs.window.filter.setFilters()": "hs.window.filter.html#setFilters", "hs.window.filter.setOverrideFilter()": "hs.window.filter.html#setOverrideFilter", "hs.window.filter.setRegions()": "hs.window.filter.html#setRegions", "hs.window.filter.setScreens()": "hs.window.filter.html#setScreens", "hs.window.filter.setSortOrder()": "hs.window.filter.html#setSortOrder", "hs.window.filter.sortByCreated": "hs.window.filter.html#sortByCreated", "hs.window.filter.sortByCreatedLast": "hs.window.filter.html#sortByCreatedLast", "hs.window.filter.sortByFocused": "hs.window.filter.html#sortByFocused", "hs.window.filter.sortByFocusedLast": "hs.window.filter.html#sortByFocusedLast", "hs.window.filter.subscribe()": "hs.window.filter.html#subscribe", "hs.window.filter.switchedToSpace()": "hs.window.filter.html#switchedToSpace", "hs.window.filter.unsubscribe()": "hs.window.filter.html#unsubscribe", "hs.window.filter.unsubscribeAll()": "hs.window.filter.html#unsubscribeAll", "hs.window.filter.windowAllowed": "hs.window.filter.html#windowAllowed", "hs.window.filter.windowCreated": "hs.window.filter.html#windowCreated", "hs.window.filter.windowDestroyed": "hs.window.filter.html#windowDestroyed", "hs.window.filter.windowFocused": "hs.window.filter.html#windowFocused", "hs.window.filter.windowFullscreened": "hs.window.filter.html#windowFullscreened", "hs.window.filter.windowHidden": "hs.window.filter.html#windowHidden", "hs.window.filter.windowInCurrentSpace": "hs.window.filter.html#windowInCurrentSpace", "hs.window.filter.windowMinimized": "hs.window.filter.html#windowMinimized", "hs.window.filter.windowMoved": "hs.window.filter.html#windowMoved", "hs.window.filter.windowNotInCurrentSpace": "hs.window.filter.html#windowNotInCurrentSpace", "hs.window.filter.windowNotOnScreen": "hs.window.filter.html#windowNotOnScreen", "hs.window.filter.windowNotVisible": "hs.window.filter.html#windowNotVisible", "hs.window.filter.windowOnScreen": "hs.window.filter.html#windowOnScreen", "hs.window.filter.windowRejected": "hs.window.filter.html#windowRejected", "hs.window.filter.windowsChanged": "hs.window.filter.html#windowsChanged", "hs.window.filter.windowsToEast()": "hs.window.filter.html#windowsToEast", "hs.window.filter.windowsToNorth()": "hs.window.filter.html#windowsToNorth", "hs.window.filter.windowsToSouth()": "hs.window.filter.html#windowsToSouth", "hs.window.filter.windowsToWest()": "hs.window.filter.html#windowsToWest", "hs.window.filter.windowTitleChanged": "hs.window.filter.html#windowTitleChanged", "hs.window.filter.windowUnfocused": "hs.window.filter.html#windowUnfocused", "hs.window.filter.windowUnfullscreened": "hs.window.filter.html#windowUnfullscreened", "hs.window.filter.windowUnhidden": "hs.window.filter.html#windowUnhidden", "hs.window.filter.windowUnminimized": "hs.window.filter.html#windowUnminimized", "hs.window.filter.windowVisible": "hs.window.filter.html#windowVisible", "hs.window.find()": "hs.window.html#find", "hs.window.focus()": "hs.window.html#focus", "hs.window.focusedWindow()": "hs.window.html#focusedWindow", "hs.window.focusTab()": "hs.window.html#focusTab", "hs.window.focusWindowEast()": "hs.window.html#focusWindowEast", "hs.window.focusWindowNorth()": "hs.window.html#focusWindowNorth", "hs.window.focusWindowSouth()": "hs.window.html#focusWindowSouth", "hs.window.focusWindowWest()": "hs.window.html#focusWindowWest", "hs.window.frame()": "hs.window.html#frame", "hs.window.frontmostWindow()": "hs.window.html#frontmostWindow", "hs.window.get()": "hs.window.html#get", "hs.window.highlight": "hs.window.highlight.html", "hs.window.highlight.start()": "hs.window.highlight.html#start", "hs.window.highlight.stop()": "hs.window.highlight.html#stop", "hs.window.highlight.toggleIsolate()": "hs.window.highlight.html#toggleIsolate", "hs.window.highlight.ui": "hs.window.highlight.html#ui", "hs.window.id()": "hs.window.html#id", "hs.window.invisibleWindows()": "hs.window.html#invisibleWindows", "hs.window.isFullScreen()": "hs.window.html#isFullScreen", "hs.window.isMaximizable()": "hs.window.html#isMaximizable", "hs.window.isMinimized()": "hs.window.html#isMinimized", "hs.window.isStandard()": "hs.window.html#isStandard", "hs.window.isVisible()": "hs.window.html#isVisible", "hs.window.layout": "hs.window.layout.html", "hs.window.layout.apply()": "hs.window.layout.html#apply", "hs.window.layout.applyDelay": "hs.window.layout.html#applyDelay", "hs.window.layout.applyLayout()": "hs.window.layout.html#applyLayout", "hs.window.layout.getRules()": "hs.window.layout.html#getRules", "hs.window.layout.new()": "hs.window.layout.html#new", "hs.window.layout.pause()": "hs.window.layout.html#pause", "hs.window.layout.pauseAllInstances()": "hs.window.layout.html#pauseAllInstances", "hs.window.layout.resume()": "hs.window.layout.html#resume", "hs.window.layout.resumeAllInstances()": "hs.window.layout.html#resumeAllInstances", "hs.window.layout.screensChangedDelay": "hs.window.layout.html#screensChangedDelay", "hs.window.layout.setScreenConfiguration()": "hs.window.layout.html#setScreenConfiguration", "hs.window.layout.start()": "hs.window.layout.html#start", "hs.window.layout.stop()": "hs.window.layout.html#stop", "hs.window.list()": "hs.window.html#list", "hs.window.maximize()": "hs.window.html#maximize", "hs.window.minimize()": "hs.window.html#minimize", "hs.window.minimizedWindows()": "hs.window.html#minimizedWindows", "hs.window.move()": "hs.window.html#move", "hs.window.moveOneScreenEast()": "hs.window.html#moveOneScreenEast", "hs.window.moveOneScreenNorth()": "hs.window.html#moveOneScreenNorth", "hs.window.moveOneScreenSouth()": "hs.window.html#moveOneScreenSouth", "hs.window.moveOneScreenWest()": "hs.window.html#moveOneScreenWest", "hs.window.moveToScreen()": "hs.window.html#moveToScreen", "hs.window.moveToUnit()": "hs.window.html#moveToUnit", "hs.window.orderedWindows()": "hs.window.html#orderedWindows", "hs.window.otherWindowsAllScreens()": "hs.window.html#otherWindowsAllScreens", "hs.window.otherWindowsSameScreen()": "hs.window.html#otherWindowsSameScreen", "hs.window.raise()": "hs.window.html#raise", "hs.window.role()": "hs.window.html#role", "hs.window.screen()": "hs.window.html#screen", "hs.window.sendToBack()": "hs.window.html#sendToBack", "hs.window.setFrame()": "hs.window.html#setFrame", "hs.window.setFrameCorrectness": "hs.window.html#setFrameCorrectness", "hs.window.setFrameInScreenBounds()": "hs.window.html#setFrameInScreenBounds", "hs.window.setFrameWithWorkarounds()": "hs.window.html#setFrameWithWorkarounds", "hs.window.setFullScreen()": "hs.window.html#setFullScreen", "hs.window.setShadows()": "hs.window.html#setShadows", "hs.window.setSize()": "hs.window.html#setSize", "hs.window.setTopLeft()": "hs.window.html#setTopLeft", "hs.window.size()": "hs.window.html#size", "hs.window.snapshot()": "hs.window.html#snapshot", "hs.window.snapshotForID()": "hs.window.html#snapshotForID", "hs.window.subrole()": "hs.window.html#subrole", "hs.window.switcher": "hs.window.switcher.html", "hs.window.switcher.new()": "hs.window.switcher.html#new", "hs.window.switcher.next()": "hs.window.switcher.html#next", "hs.window.switcher.nextWindow()": "hs.window.switcher.html#nextWindow", "hs.window.switcher.previous()": "hs.window.switcher.html#previous", "hs.window.switcher.previousWindow()": "hs.window.switcher.html#previousWindow", "hs.window.switcher.ui": "hs.window.switcher.html#ui", "hs.window.tabCount()": "hs.window.html#tabCount", "hs.window.tiling": "hs.window.tiling.html", "hs.window.tiling.tileWindows()": "hs.window.tiling.html#tileWindows", "hs.window.timeout()": "hs.window.html#timeout", "hs.window.title()": "hs.window.html#title", "hs.window.toggleFullScreen()": "hs.window.html#toggleFullScreen", "hs.window.toggleZoom()": "hs.window.html#toggleZoom", "hs.window.topLeft()": "hs.window.html#topLeft", "hs.window.unminimize()": "hs.window.html#unminimize", "hs.window.visibleWindows()": "hs.window.html#visibleWindows", "hs.window.windowsToEast()": "hs.window.html#windowsToEast", "hs.window.windowsToNorth()": "hs.window.html#windowsToNorth", "hs.window.windowsToSouth()": "hs.window.html#windowsToSouth", "hs.window.windowsToWest()": "hs.window.html#windowsToWest", "hs.window.zoomButtonRect()": "hs.window.html#zoomButtonRect"}