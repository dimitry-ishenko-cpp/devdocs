{"&": "clojure.core-api.html#clojure.core/&", "*": "clojure.core-api.html#clojure.core/*", "*'": "clojure.core-api.html#clojure.core/*'", "*1": "clojure.core-api.html#clojure.core/*1", "*2": "clojure.core-api.html#clojure.core/*2", "*3": "clojure.core-api.html#clojure.core/*3", "*agent*": "clojure.core-api.html#clojure.core/*agent*", "*clojure-version*": "clojure.core-api.html#clojure.core/*clojure-version*", "*command-line-args*": "clojure.core-api.html#clojure.core/*command-line-args*", "*compile-files*": "clojure.core-api.html#clojure.core/*compile-files*", "*compile-path*": "clojure.core-api.html#clojure.core/*compile-path*", "*compiler-options*": "clojure.core-api.html#clojure.core/*compiler-options*", "*data-readers*": "clojure.core-api.html#clojure.core/*data-readers*", "*default-data-reader-fn*": "clojure.core-api.html#clojure.core/*default-data-reader-fn*", "*e": "clojure.core-api.html#clojure.core/*e", "*err*": "clojure.core-api.html#clojure.core/*err*", "*file*": "clojure.core-api.html#clojure.core/*file*", "*flush-on-newline*": "clojure.core-api.html#clojure.core/*flush-on-newline*", "*in*": "clojure.core-api.html#clojure.core/*in*", "*load-tests*": "clojure.test-api.html#clojure.test/*load-tests*", "*ns*": "clojure.core-api.html#clojure.core/*ns*", "*out*": "clojure.core-api.html#clojure.core/*out*", "*print-base*": "clojure.pprint-api.html#clojure.pprint/*print-base*", "*print-dup*": "clojure.core-api.html#clojure.core/*print-dup*", "*print-length*": "clojure.core-api.html#clojure.core/*print-length*", "*print-level*": "clojure.core-api.html#clojure.core/*print-level*", "*print-meta*": "clojure.core-api.html#clojure.core/*print-meta*", "*print-miser-width*": "clojure.pprint-api.html#clojure.pprint/*print-miser-width*", "*print-namespace-maps*": "clojure.core-api.html#clojure.core/*print-namespace-maps*", "*print-pprint-dispatch*": "clojure.pprint-api.html#clojure.pprint/*print-pprint-dispatch*", "*print-pretty*": "clojure.pprint-api.html#clojure.pprint/*print-pretty*", "*print-radix*": "clojure.pprint-api.html#clojure.pprint/*print-radix*", "*print-readably*": "clojure.core-api.html#clojure.core/*print-readably*", "*print-right-margin*": "clojure.pprint-api.html#clojure.pprint/*print-right-margin*", "*print-suppress-namespaces*": "clojure.pprint-api.html#clojure.pprint/*print-suppress-namespaces*", "*read-eval*": "clojure.core-api.html#clojure.core/*read-eval*", "*stack-trace-depth*": "clojure.test-api.html#clojure.test/*stack-trace-depth*", "*unchecked-math*": "clojure.core-api.html#clojure.core/*unchecked-math*", "*warn-on-reflection*": "clojure.core-api.html#clojure.core/*warn-on-reflection*", "+": "clojure.core-api.html#clojure.core/+", "+'": "clojure.core-api.html#clojure.core/+'", "-": "clojure.core-api.html#clojure.core/-", "-'": "clojure.core-api.html#clojure.core/-'", "->": "clojure.core-api.html#clojure.core/->", "->>": "clojure.core-api.html#clojure.core/->>", "->ArrayChunk": "clojure.core-api.html#clojure.core/->ArrayChunk", "->AsmReflector": "clojure.reflect-api.html#clojure.reflect/->AsmReflector", "->Cat": "clojure.core-api.html#clojure.core.reducers/->Cat", "->Constructor": "clojure.reflect-api.html#clojure.reflect/->Constructor", "->Eduction": "clojure.core-api.html#clojure.core/->Eduction", "->Field": "clojure.reflect-api.html#clojure.reflect/->Field", "->JavaReflector": "clojure.reflect-api.html#clojure.reflect/->JavaReflector", "->Method": "clojure.reflect-api.html#clojure.reflect/->Method", "->Vec": "clojure.core-api.html#clojure.core/->Vec", "->VecNode": "clojure.core-api.html#clojure.core/->VecNode", "->VecSeq": "clojure.core-api.html#clojure.core/->VecSeq", ".": "clojure.core-api.html#clojure.core/.", "..": "clojure.core-api.html#clojure.core/..", "/": "clojure.core-api.html#clojure.core//", "<": "clojure.core-api.html#clojure.core/<", "<=": "clojure.core-api.html#clojure.core/<=", "=": "clojure.core-api.html#clojure.core/=", "==": "clojure.core-api.html#clojure.core/==", ">": "clojure.core-api.html#clojure.core/>", ">=": "clojure.core-api.html#clojure.core/>=", "abs": "clojure.core-api.html#clojure.core/abs", "accessor": "clojure.core-api.html#clojure.core/accessor", "aclone": "clojure.core-api.html#clojure.core/aclone", "acos": "clojure.math-api.html#clojure.math/acos", "add-classpath": "clojure.core-api.html#clojure.core/add-classpath", "add-exact": "clojure.math-api.html#clojure.math/add-exact", "add-local-javadoc": "clojure.java.javadoc-api.html#clojure.java.javadoc/add-local-javadoc", "add-remote-javadoc": "clojure.java.javadoc-api.html#clojure.java.javadoc/add-remote-javadoc", "add-tap": "clojure.core-api.html#clojure.core/add-tap", "add-watch": "clojure.core-api.html#clojure.core/add-watch", "agent": "clojure.core-api.html#clojure.core/agent", "agent-error": "clojure.core-api.html#clojure.core/agent-error", "agent-errors": "clojure.core-api.html#clojure.core/agent-errors", "aget": "clojure.core-api.html#clojure.core/aget", "alength": "clojure.core-api.html#clojure.core/alength", "alias": "clojure.core-api.html#clojure.core/alias", "all-ns": "clojure.core-api.html#clojure.core/all-ns", "alter": "clojure.core-api.html#clojure.core/alter", "alter-meta!": "clojure.core-api.html#clojure.core/alter-meta!", "alter-var-root": "clojure.core-api.html#clojure.core/alter-var-root", "amap": "clojure.core-api.html#clojure.core/amap", "ancestors": "clojure.core-api.html#clojure.core/ancestors", "and": "clojure.core-api.html#clojure.core/and", "any?": "clojure.core-api.html#clojure.core/any?", "append!": "clojure.core-api.html#clojure.core.reducers/append!", "append-child": "clojure.zip-api.html#clojure.zip/append-child", "apply": "clojure.core-api.html#clojure.core/apply", "apply-template": "clojure.template-api.html#clojure.template/apply-template", "apropos": "clojure.repl-api.html#clojure.repl/apropos", "are": "clojure.test-api.html#clojure.test/are", "areduce": "clojure.core-api.html#clojure.core/areduce", "array-map": "clojure.core-api.html#clojure.core/array-map", "ArrayChunk": "clojure.core-api.html#clojure.core/ArrayChunk", "as->": "clojure.core-api.html#clojure.core/as->", "as-relative-path": "clojure.java.io-api.html#clojure.java.io/as-relative-path", "aset": "clojure.core-api.html#clojure.core/aset", "aset-boolean": "clojure.core-api.html#clojure.core/aset-boolean", "aset-byte": "clojure.core-api.html#clojure.core/aset-byte", "aset-char": "clojure.core-api.html#clojure.core/aset-char", "aset-double": "clojure.core-api.html#clojure.core/aset-double", "aset-float": "clojure.core-api.html#clojure.core/aset-float", "aset-int": "clojure.core-api.html#clojure.core/aset-int", "aset-long": "clojure.core-api.html#clojure.core/aset-long", "aset-short": "clojure.core-api.html#clojure.core/aset-short", "asin": "clojure.math-api.html#clojure.math/asin", "AsmReflector": "clojure.reflect-api.html#clojure.reflect/AsmReflector", "assert": "clojure.core-api.html#clojure.core/assert", "assert-any": "clojure.test-api.html#clojure.test/assert-any", "assert-predicate": "clojure.test-api.html#clojure.test/assert-predicate", "assoc": "clojure.core-api.html#clojure.core/assoc", "assoc!": "clojure.core-api.html#clojure.core/assoc!", "assoc-in": "clojure.core-api.html#clojure.core/assoc-in", "associative?": "clojure.core-api.html#clojure.core/associative?", "atan": "clojure.math-api.html#clojure.math/atan", "atan2": "clojure.math-api.html#clojure.math/atan2", "atom": "clojure.core-api.html#clojure.core/atom", "await": "clojure.core-api.html#clojure.core/await", "await-for": "clojure.core-api.html#clojure.core/await-for", "bases": "clojure.core-api.html#clojure.core/bases", "bean": "clojure.core-api.html#clojure.core/bean", "bigdec": "clojure.core-api.html#clojure.core/bigdec", "bigint": "clojure.core-api.html#clojure.core/bigint", "biginteger": "clojure.core-api.html#clojure.core/biginteger", "binding": "clojure.core-api.html#clojure.core/binding", "bit-and": "clojure.core-api.html#clojure.core/bit-and", "bit-and-not": "clojure.core-api.html#clojure.core/bit-and-not", "bit-clear": "clojure.core-api.html#clojure.core/bit-clear", "bit-flip": "clojure.core-api.html#clojure.core/bit-flip", "bit-not": "clojure.core-api.html#clojure.core/bit-not", "bit-or": "clojure.core-api.html#clojure.core/bit-or", "bit-set": "clojure.core-api.html#clojure.core/bit-set", "bit-shift-left": "clojure.core-api.html#clojure.core/bit-shift-left", "bit-shift-right": "clojure.core-api.html#clojure.core/bit-shift-right", "bit-test": "clojure.core-api.html#clojure.core/bit-test", "bit-xor": "clojure.core-api.html#clojure.core/bit-xor", "blank?": "clojure.string-api.html#clojure.string/blank?", "boolean": "clojure.core-api.html#clojure.core/boolean", "boolean-array": "clojure.core-api.html#clojure.core/boolean-array", "boolean?": "clojure.core-api.html#clojure.core/boolean?", "booleans": "clojure.core-api.html#clojure.core/booleans", "bound-fn": "clojure.core-api.html#clojure.core/bound-fn", "bound-fn*": "clojure.core-api.html#clojure.core/bound-fn*", "bound?": "clojure.core-api.html#clojure.core/bound?", "bounded-count": "clojure.core-api.html#clojure.core/bounded-count", "branch?": "clojure.zip-api.html#clojure.zip/branch?", "browse-url": "clojure.java.browse-api.html#clojure.java.browse/browse-url", "butlast": "clojure.core-api.html#clojure.core/butlast", "byte": "clojure.core-api.html#clojure.core/byte", "byte-array": "clojure.core-api.html#clojure.core/byte-array", "bytes": "clojure.core-api.html#clojure.core/bytes", "bytes?": "clojure.core-api.html#clojure.core/bytes?", "capitalize": "clojure.string-api.html#clojure.string/capitalize", "case": "clojure.core-api.html#clojure.core/case", "cast": "clojure.core-api.html#clojure.core/cast", "cat": "clojure.core-api.html#clojure.core.reducers/cat", "Cat": "clojure.core-api.html#clojure.core.reducers/Cat", "catch": "clojure.core-api.html#clojure.core/catch", "cbrt": "clojure.math-api.html#clojure.math/cbrt", "ceil": "clojure.math-api.html#clojure.math/ceil", "char": "clojure.core-api.html#clojure.core/char", "char-array": "clojure.core-api.html#clojure.core/char-array", "char-escape-string": "clojure.core-api.html#clojure.core/char-escape-string", "char-name-string": "clojure.core-api.html#clojure.core/char-name-string", "char?": "clojure.core-api.html#clojure.core/char?", "chars": "clojure.core-api.html#clojure.core/chars", "children": "clojure.zip-api.html#clojure.zip/children", "cl-format": "clojure.pprint-api.html#clojure.pprint/cl-format", "class": "clojure.core-api.html#clojure.core/class", "class?": "clojure.core-api.html#clojure.core/class?", "ClassResolver": "clojure.reflect-api.html#clojure.reflect/ClassResolver", "clear-agent-errors": "clojure.core-api.html#clojure.core/clear-agent-errors", "clojure-version": "clojure.core-api.html#clojure.core/clojure-version", "clojure.core": "clojure.core-api.html", "clojure.data": "clojure.data-api.html", "clojure.datafy": "clojure.datafy-api.html", "clojure.edn": "clojure.edn-api.html", "clojure.inspector": "clojure.inspector-api.html", "clojure.instant": "clojure.instant-api.html", "clojure.java.browse": "clojure.java.browse-api.html", "clojure.java.io": "clojure.java.io-api.html", "clojure.java.javadoc": "clojure.java.javadoc-api.html", "clojure.java.shell": "clojure.java.shell-api.html", "clojure.main": "clojure.main-api.html", "clojure.math": "clojure.math-api.html", "clojure.pprint": "clojure.pprint-api.html", "clojure.reflect": "clojure.reflect-api.html", "clojure.repl": "clojure.repl-api.html", "clojure.set": "clojure.set-api.html", "clojure.stacktrace": "clojure.stacktrace-api.html", "clojure.string": "clojure.string-api.html", "clojure.template": "clojure.template-api.html", "clojure.test": "clojure.test-api.html", "clojure.walk": "clojure.walk-api.html", "clojure.xml": "clojure.xml-api.html", "clojure.zip": "clojure.zip-api.html", "code-dispatch": "clojure.pprint-api.html#clojure.pprint/code-dispatch", "Coercions": "clojure.java.io-api.html#clojure.java.io/Coercions", "coll?": "clojure.core-api.html#clojure.core/coll?", "CollReduce": "clojure.core-api.html#clojure.core.protocols/CollReduce", "comment": "clojure.core-api.html#clojure.core/comment", "commute": "clojure.core-api.html#clojure.core/commute", "comp": "clojure.core-api.html#clojure.core/comp", "comparator": "clojure.core-api.html#clojure.core/comparator", "compare": "clojure.core-api.html#clojure.core/compare", "compare-and-set!": "clojure.core-api.html#clojure.core/compare-and-set!", "compile": "clojure.core-api.html#clojure.core/compile", "complement": "clojure.core-api.html#clojure.core/complement", "completing": "clojure.core-api.html#clojure.core/completing", "compose-fixtures": "clojure.test-api.html#clojure.test/compose-fixtures", "concat": "clojure.core-api.html#clojure.core/concat", "cond": "clojure.core-api.html#clojure.core/cond", "cond->": "clojure.core-api.html#clojure.core/cond->", "cond->>": "clojure.core-api.html#clojure.core/cond->>", "condp": "clojure.core-api.html#clojure.core/condp", "conj": "clojure.core-api.html#clojure.core/conj", "conj!": "clojure.core-api.html#clojure.core/conj!", "cons": "clojure.core-api.html#clojure.core/cons", "constantly": "clojure.core-api.html#clojure.core/constantly", "construct-proxy": "clojure.core-api.html#clojure.core/construct-proxy", "Constructor": "clojure.reflect-api.html#clojure.reflect/Constructor", "contains?": "clojure.core-api.html#clojure.core/contains?", "copy": "clojure.java.io-api.html#clojure.java.io/copy", "copy-sign": "clojure.math-api.html#clojure.math/copy-sign", "cos": "clojure.math-api.html#clojure.math/cos", "cosh": "clojure.math-api.html#clojure.math/cosh", "count": "clojure.core-api.html#clojure.core/count", "counted?": "clojure.core-api.html#clojure.core/counted?", "create-ns": "clojure.core-api.html#clojure.core/create-ns", "create-struct": "clojure.core-api.html#clojure.core/create-struct", "cycle": "clojure.core-api.html#clojure.core/cycle", "Datafiable": "clojure.core-api.html#clojure.core.protocols/Datafiable", "datafy": "clojure.datafy-api.html#clojure.datafy/datafy", "dec": "clojure.core-api.html#clojure.core/dec", "dec'": "clojure.core-api.html#clojure.core/dec'", "decimal?": "clojure.core-api.html#clojure.core/decimal?", "declare": "clojure.core-api.html#clojure.core/declare", "decrement-exact": "clojure.math-api.html#clojure.math/decrement-exact", "dedupe": "clojure.core-api.html#clojure.core/dedupe", "def": "clojure.core-api.html#clojure.core/def", "default-data-readers": "clojure.core-api.html#clojure.core/default-data-readers", "definline": "clojure.core-api.html#clojure.core/definline", "definterface": "clojure.core-api.html#clojure.core/definterface", "defmacro": "clojure.core-api.html#clojure.core/defmacro", "defmethod": "clojure.core-api.html#clojure.core/defmethod", "defmulti": "clojure.core-api.html#clojure.core/defmulti", "defn": "clojure.core-api.html#clojure.core/defn", "defn-": "clojure.core-api.html#clojure.core/defn-", "defonce": "clojure.core-api.html#clojure.core/defonce", "defprotocol": "clojure.core-api.html#clojure.core/defprotocol", "defrecord": "clojure.core-api.html#clojure.core/defrecord", "defstruct": "clojure.core-api.html#clojure.core/defstruct", "deftest": "clojure.test-api.html#clojure.test/deftest", "deftest-": "clojure.test-api.html#clojure.test/deftest-", "deftype": "clojure.core-api.html#clojure.core/deftype", "delay": "clojure.core-api.html#clojure.core/delay", "delay?": "clojure.core-api.html#clojure.core/delay?", "delete-file": "clojure.java.io-api.html#clojure.java.io/delete-file", "deliver": "clojure.core-api.html#clojure.core/deliver", "demunge": "clojure.repl-api.html#clojure.repl/demunge", "denominator": "clojure.core-api.html#clojure.core/denominator", "deref": "clojure.core-api.html#clojure.core/deref", "derive": "clojure.core-api.html#clojure.core/derive", "descendants": "clojure.core-api.html#clojure.core/descendants", "Diff": "clojure.data-api.html#clojure.data/Diff", "diff": "clojure.data-api.html#clojure.data/diff", "difference": "clojure.set-api.html#clojure.set/difference", "dir": "clojure.repl-api.html#clojure.repl/dir", "dir-fn": "clojure.repl-api.html#clojure.repl/dir-fn", "disable-external-entities": "clojure.xml-api.html#clojure.xml/disable-external-entities", "disj": "clojure.core-api.html#clojure.core/disj", "disj!": "clojure.core-api.html#clojure.core/disj!", "dissoc": "clojure.core-api.html#clojure.core/dissoc", "dissoc!": "clojure.core-api.html#clojure.core/dissoc!", "distinct": "clojure.core-api.html#clojure.core/distinct", "distinct?": "clojure.core-api.html#clojure.core/distinct?", "do": "clojure.core-api.html#clojure.core/do", "do-report": "clojure.test-api.html#clojure.test/do-report", "do-template": "clojure.template-api.html#clojure.template/do-template", "doall": "clojure.core-api.html#clojure.core/doall", "doc": "clojure.repl-api.html#clojure.repl/doc", "dorun": "clojure.core-api.html#clojure.core/dorun", "doseq": "clojure.core-api.html#clojure.core/doseq", "dosync": "clojure.core-api.html#clojure.core/dosync", "dotimes": "clojure.core-api.html#clojure.core/dotimes", "doto": "clojure.core-api.html#clojure.core/doto", "double": "clojure.core-api.html#clojure.core/double", "double-array": "clojure.core-api.html#clojure.core/double-array", "double?": "clojure.core-api.html#clojure.core/double?", "doubles": "clojure.core-api.html#clojure.core/doubles", "down": "clojure.zip-api.html#clojure.zip/down", "drop": "clojure.core-api.html#clojure.core/drop", "drop-last": "clojure.core-api.html#clojure.core/drop-last", "drop-while": "clojure.core-api.html#clojure.core/drop-while", "e": "clojure.stacktrace-api.html#clojure.stacktrace/e", "E": "clojure.math-api.html#clojure.math/E", "edit": "clojure.zip-api.html#clojure.zip/edit", "Eduction": "clojure.core-api.html#clojure.core/Eduction", "eduction": "clojure.core-api.html#clojure.core/eduction", "empty": "clojure.core-api.html#clojure.core/empty", "empty?": "clojure.core-api.html#clojure.core/empty?", "end?": "clojure.zip-api.html#clojure.zip/end?", "ends-with?": "clojure.string-api.html#clojure.string/ends-with?", "ensure": "clojure.core-api.html#clojure.core/ensure", "ensure-reduced": "clojure.core-api.html#clojure.core/ensure-reduced", "enumeration-seq": "clojure.core-api.html#clojure.core/enumeration-seq", "EqualityPartition": "clojure.data-api.html#clojure.data/EqualityPartition", "err->msg": "clojure.main-api.html#clojure.main/err->msg", "error-handler": "clojure.core-api.html#clojure.core/error-handler", "error-mode": "clojure.core-api.html#clojure.core/error-mode", "escape": "clojure.string-api.html#clojure.string/escape", "eval": "clojure.core-api.html#clojure.core/eval", "even?": "clojure.core-api.html#clojure.core/even?", "every-pred": "clojure.core-api.html#clojure.core/every-pred", "every?": "clojure.core-api.html#clojure.core/every?", "ex-cause": "clojure.core-api.html#clojure.core/ex-cause", "ex-data": "clojure.core-api.html#clojure.core/ex-data", "ex-info": "clojure.core-api.html#clojure.core/ex-info", "ex-message": "clojure.core-api.html#clojure.core/ex-message", "ex-str": "clojure.main-api.html#clojure.main/ex-str", "ex-triage": "clojure.main-api.html#clojure.main/ex-triage", "exp": "clojure.math-api.html#clojure.math/exp", "expm1": "clojure.math-api.html#clojure.math/expm1", "extend": "clojure.core-api.html#clojure.core/extend", "extend-protocol": "clojure.core-api.html#clojure.core/extend-protocol", "extend-type": "clojure.core-api.html#clojure.core/extend-type", "extenders": "clojure.core-api.html#clojure.core/extenders", "extends?": "clojure.core-api.html#clojure.core/extends?", "false?": "clojure.core-api.html#clojure.core/false?", "ffirst": "clojure.core-api.html#clojure.core/ffirst", "Field": "clojure.reflect-api.html#clojure.reflect/Field", "file": "clojure.java.io-api.html#clojure.java.io/file", "file-position": "clojure.test-api.html#clojure.test/file-position", "file-seq": "clojure.core-api.html#clojure.core/file-seq", "filter": "clojure.core-api.html#clojure.core/filter", "filterv": "clojure.core-api.html#clojure.core/filterv", "finally": "clojure.core-api.html#clojure.core/finally", "find": "clojure.core-api.html#clojure.core/find", "find-doc": "clojure.repl-api.html#clojure.repl/find-doc", "find-keyword": "clojure.core-api.html#clojure.core/find-keyword", "find-ns": "clojure.core-api.html#clojure.core/find-ns", "find-var": "clojure.core-api.html#clojure.core/find-var", "first": "clojure.core-api.html#clojure.core/first", "flag-descriptors": "clojure.reflect-api.html#clojure.reflect/flag-descriptors", "flatten": "clojure.core-api.html#clojure.core/flatten", "float": "clojure.core-api.html#clojure.core/float", "float-array": "clojure.core-api.html#clojure.core/float-array", "float?": "clojure.core-api.html#clojure.core/float?", "floats": "clojure.core-api.html#clojure.core/floats", "floor": "clojure.math-api.html#clojure.math/floor", "floor-div": "clojure.math-api.html#clojure.math/floor-div", "floor-mod": "clojure.math-api.html#clojure.math/floor-mod", "flush": "clojure.core-api.html#clojure.core/flush", "fn": "clojure.core-api.html#clojure.core/fn", "fn?": "clojure.core-api.html#clojure.core/fn?", "fnext": "clojure.core-api.html#clojure.core/fnext", "fnil": "clojure.core-api.html#clojure.core/fnil", "fold": "clojure.core-api.html#clojure.core.reducers/fold", "foldcat": "clojure.core-api.html#clojure.core.reducers/foldcat", "folder": "clojure.core-api.html#clojure.core.reducers/folder", "for": "clojure.core-api.html#clojure.core/for", "force": "clojure.core-api.html#clojure.core/force", "format": "clojure.core-api.html#clojure.core/format", "formatter": "clojure.pprint-api.html#clojure.pprint/formatter", "formatter-out": "clojure.pprint-api.html#clojure.pprint/formatter-out", "frequencies": "clojure.core-api.html#clojure.core/frequencies", "fresh-line": "clojure.pprint-api.html#clojure.pprint/fresh-line", "function?": "clojure.test-api.html#clojure.test/function?", "future": "clojure.core-api.html#clojure.core/future", "future-call": "clojure.core-api.html#clojure.core/future-call", "future-cancel": "clojure.core-api.html#clojure.core/future-cancel", "future-cancelled?": "clojure.core-api.html#clojure.core/future-cancelled?", "future-done?": "clojure.core-api.html#clojure.core/future-done?", "future?": "clojure.core-api.html#clojure.core/future?", "gen-class": "clojure.core-api.html#clojure.core/gen-class", "gen-interface": "clojure.core-api.html#clojure.core/gen-interface", "gensym": "clojure.core-api.html#clojure.core/gensym", "get": "clojure.core-api.html#clojure.core/get", "get-exponent": "clojure.math-api.html#clojure.math/get-exponent", "get-in": "clojure.core-api.html#clojure.core/get-in", "get-method": "clojure.core-api.html#clojure.core/get-method", "get-possibly-unbound-var": "clojure.test-api.html#clojure.test/get-possibly-unbound-var", "get-pretty-writer": "clojure.pprint-api.html#clojure.pprint/get-pretty-writer", "get-proxy-class": "clojure.core-api.html#clojure.core/get-proxy-class", "get-thread-bindings": "clojure.core-api.html#clojure.core/get-thread-bindings", "get-validator": "clojure.core-api.html#clojure.core/get-validator", "group-by": "clojure.core-api.html#clojure.core/group-by", "halt-when": "clojure.core-api.html#clojure.core/halt-when", "hash": "clojure.core-api.html#clojure.core/hash", "hash-map": "clojure.core-api.html#clojure.core/hash-map", "hash-ordered-coll": "clojure.core-api.html#clojure.core/hash-ordered-coll", "hash-set": "clojure.core-api.html#clojure.core/hash-set", "hash-unordered-coll": "clojure.core-api.html#clojure.core/hash-unordered-coll", "hypot": "clojure.math-api.html#clojure.math/hypot", "ident?": "clojure.core-api.html#clojure.core/ident?", "identical?": "clojure.core-api.html#clojure.core/identical?", "identity": "clojure.core-api.html#clojure.core/identity", "IEEE-remainder": "clojure.math-api.html#clojure.math/IEEE-remainder", "if": "clojure.core-api.html#clojure.core/if", "if-let": "clojure.core-api.html#clojure.core/if-let", "if-not": "clojure.core-api.html#clojure.core/if-not", "if-some": "clojure.core-api.html#clojure.core/if-some", "ifn?": "clojure.core-api.html#clojure.core/ifn?", "IKVReduce": "clojure.core-api.html#clojure.core.protocols/IKVReduce", "import": "clojure.core-api.html#clojure.core/import", "in-ns": "clojure.core-api.html#clojure.core/in-ns", "inc": "clojure.core-api.html#clojure.core/inc", "inc'": "clojure.core-api.html#clojure.core/inc'", "inc-report-counter": "clojure.test-api.html#clojure.test/inc-report-counter", "includes?": "clojure.string-api.html#clojure.string/includes?", "increment-exact": "clojure.math-api.html#clojure.math/increment-exact", "index": "clojure.set-api.html#clojure.set/index", "index-of": "clojure.string-api.html#clojure.string/index-of", "indexed?": "clojure.core-api.html#clojure.core/indexed?", "infinite?": "clojure.core-api.html#clojure.core/infinite?", "init-proxy": "clojure.core-api.html#clojure.core/init-proxy", "input-stream": "clojure.java.io-api.html#clojure.java.io/input-stream", "insert-child": "clojure.zip-api.html#clojure.zip/insert-child", "insert-left": "clojure.zip-api.html#clojure.zip/insert-left", "insert-right": "clojure.zip-api.html#clojure.zip/insert-right", "inspect": "clojure.inspector-api.html#clojure.inspector/inspect", "inspect-table": "clojure.inspector-api.html#clojure.inspector/inspect-table", "inspect-tree": "clojure.inspector-api.html#clojure.inspector/inspect-tree", "inst-ms": "clojure.core-api.html#clojure.core/inst-ms", "inst?": "clojure.core-api.html#clojure.core/inst?", "instance?": "clojure.core-api.html#clojure.core/instance?", "int": "clojure.core-api.html#clojure.core/int", "int-array": "clojure.core-api.html#clojure.core/int-array", "int?": "clojure.core-api.html#clojure.core/int?", "integer?": "clojure.core-api.html#clojure.core/integer?", "interleave": "clojure.core-api.html#clojure.core/interleave", "intern": "clojure.core-api.html#clojure.core/intern", "InternalReduce": "clojure.core-api.html#clojure.core.protocols/InternalReduce", "interpose": "clojure.core-api.html#clojure.core/interpose", "intersection": "clojure.set-api.html#clojure.set/intersection", "into": "clojure.core-api.html#clojure.core/into", "into-array": "clojure.core-api.html#clojure.core/into-array", "ints": "clojure.core-api.html#clojure.core/ints", "io!": "clojure.core-api.html#clojure.core/io!", "io-prepl": "clojure.core-api.html#clojure.core.server/io-prepl", "IOFactory": "clojure.java.io-api.html#clojure.java.io/IOFactory", "is": "clojure.test-api.html#clojure.test/is", "isa?": "clojure.core-api.html#clojure.core/isa?", "iterate": "clojure.core-api.html#clojure.core/iterate", "iteration": "clojure.core-api.html#clojure.core/iteration", "iterator-seq": "clojure.core-api.html#clojure.core/iterator-seq", "javadoc": "clojure.java.javadoc-api.html#clojure.java.javadoc/javadoc", "JavaReflector": "clojure.reflect-api.html#clojure.reflect/JavaReflector", "join": "clojure.set-api.html#clojure.set/join", "join-fixtures": "clojure.test-api.html#clojure.test/join-fixtures", "juxt": "clojure.core-api.html#clojure.core/juxt", "keep": "clojure.core-api.html#clojure.core/keep", "keep-indexed": "clojure.core-api.html#clojure.core/keep-indexed", "key": "clojure.core-api.html#clojure.core/key", "keys": "clojure.core-api.html#clojure.core/keys", "keyword": "clojure.core-api.html#clojure.core/keyword", "keyword?": "clojure.core-api.html#clojure.core/keyword?", "keywordize-keys": "clojure.walk-api.html#clojure.walk/keywordize-keys", "last": "clojure.core-api.html#clojure.core/last", "last-index-of": "clojure.string-api.html#clojure.string/last-index-of", "lazy-cat": "clojure.core-api.html#clojure.core/lazy-cat", "lazy-seq": "clojure.core-api.html#clojure.core/lazy-seq", "left": "clojure.zip-api.html#clojure.zip/left", "leftmost": "clojure.zip-api.html#clojure.zip/leftmost", "lefts": "clojure.zip-api.html#clojure.zip/lefts", "let": "clojure.core-api.html#clojure.core/let", "letfn": "clojure.core-api.html#clojure.core/letfn", "line-seq": "clojure.core-api.html#clojure.core/line-seq", "list": "clojure.core-api.html#clojure.core/list", "list*": "clojure.core-api.html#clojure.core/list*", "list?": "clojure.core-api.html#clojure.core/list?", "load": "clojure.core-api.html#clojure.core/load", "load-file": "clojure.core-api.html#clojure.core/load-file", "load-reader": "clojure.core-api.html#clojure.core/load-reader", "load-script": "clojure.main-api.html#clojure.main/load-script", "load-string": "clojure.core-api.html#clojure.core/load-string", "loaded-libs": "clojure.core-api.html#clojure.core/loaded-libs", "locking": "clojure.core-api.html#clojure.core/locking", "log": "clojure.math-api.html#clojure.math/log", "log10": "clojure.math-api.html#clojure.math/log10", "log1p": "clojure.math-api.html#clojure.math/log1p", "long": "clojure.core-api.html#clojure.core/long", "long-array": "clojure.core-api.html#clojure.core/long-array", "longs": "clojure.core-api.html#clojure.core/longs", "loop": "clojure.core-api.html#clojure.core/loop", "lower-case": "clojure.string-api.html#clojure.string/lower-case", "macroexpand": "clojure.core-api.html#clojure.core/macroexpand", "macroexpand-1": "clojure.core-api.html#clojure.core/macroexpand-1", "macroexpand-all": "clojure.walk-api.html#clojure.walk/macroexpand-all", "main": "clojure.main-api.html#clojure.main/main", "make-array": "clojure.core-api.html#clojure.core/make-array", "make-hierarchy": "clojure.core-api.html#clojure.core/make-hierarchy", "make-node": "clojure.zip-api.html#clojure.zip/make-node", "make-parents": "clojure.java.io-api.html#clojure.java.io/make-parents", "map": "clojure.core-api.html#clojure.core/map", "map->Constructor": "clojure.reflect-api.html#clojure.reflect/map->Constructor", "map->Field": "clojure.reflect-api.html#clojure.reflect/map->Field", "map->Method": "clojure.reflect-api.html#clojure.reflect/map->Method", "map-entry?": "clojure.core-api.html#clojure.core/map-entry?", "map-indexed": "clojure.core-api.html#clojure.core/map-indexed", "map-invert": "clojure.set-api.html#clojure.set/map-invert", "map?": "clojure.core-api.html#clojure.core/map?", "mapcat": "clojure.core-api.html#clojure.core.reducers/mapcat", "mapv": "clojure.core-api.html#clojure.core/mapv", "max": "clojure.core-api.html#clojure.core/max", "max-key": "clojure.core-api.html#clojure.core/max-key", "memfn": "clojure.core-api.html#clojure.core/memfn", "memoize": "clojure.core-api.html#clojure.core/memoize", "merge": "clojure.core-api.html#clojure.core/merge", "merge-with": "clojure.core-api.html#clojure.core/merge-with", "meta": "clojure.core-api.html#clojure.core/meta", "Method": "clojure.reflect-api.html#clojure.reflect/Method", "methods": "clojure.core-api.html#clojure.core/methods", "min": "clojure.core-api.html#clojure.core/min", "min-key": "clojure.core-api.html#clojure.core/min-key", "mix-collection-hash": "clojure.core-api.html#clojure.core/mix-collection-hash", "mod": "clojure.core-api.html#clojure.core/mod", "monitor-enter": "clojure.core-api.html#clojure.core/monitor-enter", "monitor-exit": "clojure.core-api.html#clojure.core/monitor-exit", "monoid": "clojure.core-api.html#clojure.core.reducers/monoid", "multiply-exact": "clojure.math-api.html#clojure.math/multiply-exact", "name": "clojure.core-api.html#clojure.core/name", "namespace": "clojure.core-api.html#clojure.core/namespace", "namespace-munge": "clojure.core-api.html#clojure.core/namespace-munge", "NaN?": "clojure.core-api.html#clojure.core/NaN?", "nat-int?": "clojure.core-api.html#clojure.core/nat-int?", "nav": "clojure.datafy-api.html#clojure.datafy/nav", "Navigable": "clojure.core-api.html#clojure.core.protocols/Navigable", "neg-int?": "clojure.core-api.html#clojure.core/neg-int?", "neg?": "clojure.core-api.html#clojure.core/neg?", "negate-exact": "clojure.math-api.html#clojure.math/negate-exact", "new": "clojure.core-api.html#clojure.core/new", "newline": "clojure.core-api.html#clojure.core/newline", "next": "clojure.zip-api.html#clojure.zip/next", "next-after": "clojure.math-api.html#clojure.math/next-after", "next-down": "clojure.math-api.html#clojure.math/next-down", "next-up": "clojure.math-api.html#clojure.math/next-up", "nfirst": "clojure.core-api.html#clojure.core/nfirst", "nil?": "clojure.core-api.html#clojure.core/nil?", "nnext": "clojure.core-api.html#clojure.core/nnext", "node": "clojure.zip-api.html#clojure.zip/node", "not": "clojure.core-api.html#clojure.core/not", "not-any?": "clojure.core-api.html#clojure.core/not-any?", "not-empty": "clojure.core-api.html#clojure.core/not-empty", "not-every?": "clojure.core-api.html#clojure.core/not-every?", "not=": "clojure.core-api.html#clojure.core/not=", "ns": "clojure.core-api.html#clojure.core/ns", "ns-aliases": "clojure.core-api.html#clojure.core/ns-aliases", "ns-imports": "clojure.core-api.html#clojure.core/ns-imports", "ns-interns": "clojure.core-api.html#clojure.core/ns-interns", "ns-map": "clojure.core-api.html#clojure.core/ns-map", "ns-name": "clojure.core-api.html#clojure.core/ns-name", "ns-publics": "clojure.core-api.html#clojure.core/ns-publics", "ns-refers": "clojure.core-api.html#clojure.core/ns-refers", "ns-resolve": "clojure.core-api.html#clojure.core/ns-resolve", "ns-unalias": "clojure.core-api.html#clojure.core/ns-unalias", "ns-unmap": "clojure.core-api.html#clojure.core/ns-unmap", "nth": "clojure.core-api.html#clojure.core/nth", "nthnext": "clojure.core-api.html#clojure.core/nthnext", "nthrest": "clojure.core-api.html#clojure.core/nthrest", "num": "clojure.core-api.html#clojure.core/num", "number?": "clojure.core-api.html#clojure.core/number?", "numerator": "clojure.core-api.html#clojure.core/numerator", "object-array": "clojure.core-api.html#clojure.core/object-array", "odd?": "clojure.core-api.html#clojure.core/odd?", "or": "clojure.core-api.html#clojure.core/or", "output-stream": "clojure.java.io-api.html#clojure.java.io/output-stream", "parents": "clojure.core-api.html#clojure.core/parents", "parse": "clojure.xml-api.html#clojure.xml/parse", "parse-boolean": "clojure.core-api.html#clojure.core/parse-boolean", "parse-double": "clojure.core-api.html#clojure.core/parse-double", "parse-long": "clojure.core-api.html#clojure.core/parse-long", "parse-timestamp": "clojure.instant-api.html#clojure.instant/parse-timestamp", "parse-uuid": "clojure.core-api.html#clojure.core/parse-uuid", "partial": "clojure.core-api.html#clojure.core/partial", "partition": "clojure.core-api.html#clojure.core/partition", "partition-all": "clojure.core-api.html#clojure.core/partition-all", "partition-by": "clojure.core-api.html#clojure.core/partition-by", "path": "clojure.zip-api.html#clojure.zip/path", "pcalls": "clojure.core-api.html#clojure.core/pcalls", "peek": "clojure.core-api.html#clojure.core/peek", "persistent!": "clojure.core-api.html#clojure.core/persistent!", "PI": "clojure.math-api.html#clojure.math/PI", "pmap": "clojure.core-api.html#clojure.core/pmap", "pop": "clojure.core-api.html#clojure.core/pop", "pop!": "clojure.core-api.html#clojure.core/pop!", "pop-thread-bindings": "clojure.core-api.html#clojure.core/pop-thread-bindings", "pos-int?": "clojure.core-api.html#clojure.core/pos-int?", "pos?": "clojure.core-api.html#clojure.core/pos?", "postwalk": "clojure.walk-api.html#clojure.walk/postwalk", "postwalk-demo": "clojure.walk-api.html#clojure.walk/postwalk-demo", "postwalk-replace": "clojure.walk-api.html#clojure.walk/postwalk-replace", "pow": "clojure.math-api.html#clojure.math/pow", "pp": "clojure.pprint-api.html#clojure.pprint/pp", "pprint": "clojure.pprint-api.html#clojure.pprint/pprint", "pprint-indent": "clojure.pprint-api.html#clojure.pprint/pprint-indent", "pprint-logical-block": "clojure.pprint-api.html#clojure.pprint/pprint-logical-block", "pprint-newline": "clojure.pprint-api.html#clojure.pprint/pprint-newline", "pprint-tab": "clojure.pprint-api.html#clojure.pprint/pprint-tab", "pr": "clojure.core-api.html#clojure.core/pr", "pr-str": "clojure.core-api.html#clojure.core/pr-str", "prefer-method": "clojure.core-api.html#clojure.core/prefer-method", "prefers": "clojure.core-api.html#clojure.core/prefers", "prepl": "clojure.core-api.html#clojure.core.server/prepl", "prev": "clojure.zip-api.html#clojure.zip/prev", "prewalk": "clojure.walk-api.html#clojure.walk/prewalk", "prewalk-demo": "clojure.walk-api.html#clojure.walk/prewalk-demo", "prewalk-replace": "clojure.walk-api.html#clojure.walk/prewalk-replace", "print": "clojure.core-api.html#clojure.core/print", "print-cause-trace": "clojure.stacktrace-api.html#clojure.stacktrace/print-cause-trace", "print-length-loop": "clojure.pprint-api.html#clojure.pprint/print-length-loop", "print-stack-trace": "clojure.stacktrace-api.html#clojure.stacktrace/print-stack-trace", "print-str": "clojure.core-api.html#clojure.core/print-str", "print-table": "clojure.pprint-api.html#clojure.pprint/print-table", "print-tap-diagnostic": "clojure.test-api.html#clojure.test.tap/print-tap-diagnostic", "print-tap-fail": "clojure.test-api.html#clojure.test.tap/print-tap-fail", "print-tap-pass": "clojure.test-api.html#clojure.test.tap/print-tap-pass", "print-tap-plan": "clojure.test-api.html#clojure.test.tap/print-tap-plan", "print-throwable": "clojure.stacktrace-api.html#clojure.stacktrace/print-throwable", "print-trace-element": "clojure.stacktrace-api.html#clojure.stacktrace/print-trace-element", "printf": "clojure.core-api.html#clojure.core/printf", "println": "clojure.core-api.html#clojure.core/println", "println-str": "clojure.core-api.html#clojure.core/println-str", "PrintWriter-on": "clojure.core-api.html#clojure.core/PrintWriter-on", "prn": "clojure.core-api.html#clojure.core/prn", "prn-str": "clojure.core-api.html#clojure.core/prn-str", "project": "clojure.set-api.html#clojure.set/project", "promise": "clojure.core-api.html#clojure.core/promise", "proxy": "clojure.core-api.html#clojure.core/proxy", "proxy-mappings": "clojure.core-api.html#clojure.core/proxy-mappings", "proxy-super": "clojure.core-api.html#clojure.core/proxy-super", "pst": "clojure.repl-api.html#clojure.repl/pst", "push-thread-bindings": "clojure.core-api.html#clojure.core/push-thread-bindings", "pvalues": "clojure.core-api.html#clojure.core/pvalues", "qualified-ident?": "clojure.core-api.html#clojure.core/qualified-ident?", "qualified-keyword?": "clojure.core-api.html#clojure.core/qualified-keyword?", "qualified-symbol?": "clojure.core-api.html#clojure.core/qualified-symbol?", "quot": "clojure.core-api.html#clojure.core/quot", "quote": "clojure.core-api.html#clojure.core/quote", "rand": "clojure.core-api.html#clojure.core/rand", "rand-int": "clojure.core-api.html#clojure.core/rand-int", "rand-nth": "clojure.core-api.html#clojure.core/rand-nth", "random": "clojure.math-api.html#clojure.math/random", "random-sample": "clojure.core-api.html#clojure.core/random-sample", "random-uuid": "clojure.core-api.html#clojure.core/random-uuid", "range": "clojure.core-api.html#clojure.core/range", "ratio?": "clojure.core-api.html#clojure.core/ratio?", "rational?": "clojure.core-api.html#clojure.core/rational?", "rationalize": "clojure.core-api.html#clojure.core/rationalize", "re-find": "clojure.core-api.html#clojure.core/re-find", "re-groups": "clojure.core-api.html#clojure.core/re-groups", "re-matcher": "clojure.core-api.html#clojure.core/re-matcher", "re-matches": "clojure.core-api.html#clojure.core/re-matches", "re-pattern": "clojure.core-api.html#clojure.core/re-pattern", "re-quote-replacement": "clojure.string-api.html#clojure.string/re-quote-replacement", "re-seq": "clojure.core-api.html#clojure.core/re-seq", "read": "clojure.edn-api.html#clojure.edn/read", "read+string": "clojure.core-api.html#clojure.core/read+string", "read-instant-calendar": "clojure.instant-api.html#clojure.instant/read-instant-calendar", "read-instant-date": "clojure.instant-api.html#clojure.instant/read-instant-date", "read-instant-timestamp": "clojure.instant-api.html#clojure.instant/read-instant-timestamp", "read-line": "clojure.core-api.html#clojure.core/read-line", "read-string": "clojure.edn-api.html#clojure.edn/read-string", "reader": "clojure.java.io-api.html#clojure.java.io/reader", "reader-conditional": "clojure.core-api.html#clojure.core/reader-conditional", "reader-conditional?": "clojure.core-api.html#clojure.core/reader-conditional?", "realized?": "clojure.core-api.html#clojure.core/realized?", "record?": "clojure.core-api.html#clojure.core/record?", "recur": "clojure.core-api.html#clojure.core/recur", "reduce": "clojure.core-api.html#clojure.core/reduce", "reduce-kv": "clojure.core-api.html#clojure.core/reduce-kv", "reduced": "clojure.core-api.html#clojure.core/reduced", "reduced?": "clojure.core-api.html#clojure.core/reduced?", "reducer": "clojure.core-api.html#clojure.core.reducers/reducer", "reductions": "clojure.core-api.html#clojure.core/reductions", "ref": "clojure.core-api.html#clojure.core/ref", "ref-history-count": "clojure.core-api.html#clojure.core/ref-history-count", "ref-max-history": "clojure.core-api.html#clojure.core/ref-max-history", "ref-min-history": "clojure.core-api.html#clojure.core/ref-min-history", "ref-set": "clojure.core-api.html#clojure.core/ref-set", "refer": "clojure.core-api.html#clojure.core/refer", "refer-clojure": "clojure.core-api.html#clojure.core/refer-clojure", "reflect": "clojure.reflect-api.html#clojure.reflect/reflect", "Reflector": "clojure.reflect-api.html#clojure.reflect/Reflector", "reify": "clojure.core-api.html#clojure.core/reify", "release-pending-sends": "clojure.core-api.html#clojure.core/release-pending-sends", "rem": "clojure.core-api.html#clojure.core/rem", "remote-prepl": "clojure.core-api.html#clojure.core.server/remote-prepl", "remove": "clojure.core-api.html#clojure.core/remove", "remove-all-methods": "clojure.core-api.html#clojure.core/remove-all-methods", "remove-method": "clojure.core-api.html#clojure.core/remove-method", "remove-ns": "clojure.core-api.html#clojure.core/remove-ns", "remove-tap": "clojure.core-api.html#clojure.core/remove-tap", "remove-watch": "clojure.core-api.html#clojure.core/remove-watch", "rename": "clojure.set-api.html#clojure.set/rename", "rename-keys": "clojure.set-api.html#clojure.set/rename-keys", "renumbering-read": "clojure.main-api.html#clojure.main/renumbering-read", "repeat": "clojure.core-api.html#clojure.core/repeat", "repeatedly": "clojure.core-api.html#clojure.core/repeatedly", "repl": "clojure.core-api.html#clojure.core.server/repl", "repl-caught": "clojure.main-api.html#clojure.main/repl-caught", "repl-exception": "clojure.main-api.html#clojure.main/repl-exception", "repl-init": "clojure.core-api.html#clojure.core.server/repl-init", "repl-prompt": "clojure.main-api.html#clojure.main/repl-prompt", "repl-read": "clojure.main-api.html#clojure.main/repl-read", "repl-requires": "clojure.main-api.html#clojure.main/repl-requires", "replace": "clojure.zip-api.html#clojure.zip/replace", "replace-first": "clojure.string-api.html#clojure.string/replace-first", "replicate": "clojure.core-api.html#clojure.core/replicate", "report": "clojure.test-api.html#clojure.test/report", "report-error": "clojure.main-api.html#clojure.main/report-error", "require": "clojure.core-api.html#clojure.core/require", "requiring-resolve": "clojure.core-api.html#clojure.core/requiring-resolve", "reset!": "clojure.core-api.html#clojure.core/reset!", "reset-meta!": "clojure.core-api.html#clojure.core/reset-meta!", "reset-vals!": "clojure.core-api.html#clojure.core/reset-vals!", "resolve": "clojure.core-api.html#clojure.core/resolve", "resource": "clojure.java.io-api.html#clojure.java.io/resource", "rest": "clojure.core-api.html#clojure.core/rest", "restart-agent": "clojure.core-api.html#clojure.core/restart-agent", "resultset-seq": "clojure.core-api.html#clojure.core/resultset-seq", "reverse": "clojure.string-api.html#clojure.string/reverse", "reversible?": "clojure.core-api.html#clojure.core/reversible?", "right": "clojure.zip-api.html#clojure.zip/right", "rightmost": "clojure.zip-api.html#clojure.zip/rightmost", "rights": "clojure.zip-api.html#clojure.zip/rights", "rint": "clojure.math-api.html#clojure.math/rint", "root": "clojure.zip-api.html#clojure.zip/root", "root-cause": "clojure.stacktrace-api.html#clojure.stacktrace/root-cause", "round": "clojure.math-api.html#clojure.math/round", "rseq": "clojure.core-api.html#clojure.core/rseq", "rsubseq": "clojure.core-api.html#clojure.core/rsubseq", "run!": "clojure.core-api.html#clojure.core/run!", "run-all-tests": "clojure.test-api.html#clojure.test/run-all-tests", "run-test": "clojure.test-api.html#clojure.test/run-test", "run-test-var": "clojure.test-api.html#clojure.test/run-test-var", "run-tests": "clojure.test-api.html#clojure.test/run-tests", "satisfies?": "clojure.core-api.html#clojure.core/satisfies?", "sax-parser": "clojure.xml-api.html#clojure.xml/sax-parser", "scalb": "clojure.math-api.html#clojure.math/scalb", "second": "clojure.core-api.html#clojure.core/second", "select": "clojure.set-api.html#clojure.set/select", "select-keys": "clojure.core-api.html#clojure.core/select-keys", "send": "clojure.core-api.html#clojure.core/send", "send-off": "clojure.core-api.html#clojure.core/send-off", "send-via": "clojure.core-api.html#clojure.core/send-via", "seq": "clojure.core-api.html#clojure.core/seq", "seq-to-map-for-destructuring": "clojure.core-api.html#clojure.core/seq-to-map-for-destructuring", "seq-zip": "clojure.zip-api.html#clojure.zip/seq-zip", "seq?": "clojure.core-api.html#clojure.core/seq?", "seqable?": "clojure.core-api.html#clojure.core/seqable?", "seque": "clojure.core-api.html#clojure.core/seque", "sequence": "clojure.core-api.html#clojure.core/sequence", "sequential?": "clojure.core-api.html#clojure.core/sequential?", "set": "clojure.core-api.html#clojure.core/set", "set!": "clojure.core-api.html#clojure.core/set!", "set-agent-send-executor!": "clojure.core-api.html#clojure.core/set-agent-send-executor!", "set-agent-send-off-executor!": "clojure.core-api.html#clojure.core/set-agent-send-off-executor!", "set-break-handler!": "clojure.repl-api.html#clojure.repl/set-break-handler!", "set-error-handler!": "clojure.core-api.html#clojure.core/set-error-handler!", "set-error-mode!": "clojure.core-api.html#clojure.core/set-error-mode!", "set-pprint-dispatch": "clojure.pprint-api.html#clojure.pprint/set-pprint-dispatch", "set-test": "clojure.test-api.html#clojure.test/set-test", "set-validator!": "clojure.core-api.html#clojure.core/set-validator!", "set?": "clojure.core-api.html#clojure.core/set?", "sh": "clojure.java.shell-api.html#clojure.java.shell/sh", "short": "clojure.core-api.html#clojure.core/short", "short-array": "clojure.core-api.html#clojure.core/short-array", "shorts": "clojure.core-api.html#clojure.core/shorts", "shuffle": "clojure.core-api.html#clojure.core/shuffle", "shutdown-agents": "clojure.core-api.html#clojure.core/shutdown-agents", "signum": "clojure.math-api.html#clojure.math/signum", "simple-dispatch": "clojure.pprint-api.html#clojure.pprint/simple-dispatch", "simple-ident?": "clojure.core-api.html#clojure.core/simple-ident?", "simple-keyword?": "clojure.core-api.html#clojure.core/simple-keyword?", "simple-symbol?": "clojure.core-api.html#clojure.core/simple-symbol?", "sin": "clojure.math-api.html#clojure.math/sin", "sinh": "clojure.math-api.html#clojure.math/sinh", "skip-if-eol": "clojure.main-api.html#clojure.main/skip-if-eol", "skip-whitespace": "clojure.main-api.html#clojure.main/skip-whitespace", "slurp": "clojure.core-api.html#clojure.core/slurp", "some": "clojure.core-api.html#clojure.core/some", "some->": "clojure.core-api.html#clojure.core/some->", "some->>": "clojure.core-api.html#clojure.core/some->>", "some-fn": "clojure.core-api.html#clojure.core/some-fn", "some?": "clojure.core-api.html#clojure.core/some?", "sort": "clojure.core-api.html#clojure.core/sort", "sort-by": "clojure.core-api.html#clojure.core/sort-by", "sorted-map": "clojure.core-api.html#clojure.core/sorted-map", "sorted-map-by": "clojure.core-api.html#clojure.core/sorted-map-by", "sorted-set": "clojure.core-api.html#clojure.core/sorted-set", "sorted-set-by": "clojure.core-api.html#clojure.core/sorted-set-by", "sorted?": "clojure.core-api.html#clojure.core/sorted?", "source": "clojure.repl-api.html#clojure.repl/source", "source-fn": "clojure.repl-api.html#clojure.repl/source-fn", "special-symbol?": "clojure.core-api.html#clojure.core/special-symbol?", "spit": "clojure.core-api.html#clojure.core/spit", "split": "clojure.string-api.html#clojure.string/split", "split-at": "clojure.core-api.html#clojure.core/split-at", "split-lines": "clojure.string-api.html#clojure.string/split-lines", "split-with": "clojure.core-api.html#clojure.core/split-with", "sqrt": "clojure.math-api.html#clojure.math/sqrt", "stack-element-str": "clojure.main-api.html#clojure.main/stack-element-str", "StackTraceElement->vec": "clojure.core-api.html#clojure.core/StackTraceElement->vec", "start-server": "clojure.core-api.html#clojure.core.server/start-server", "start-servers": "clojure.core-api.html#clojure.core.server/start-servers", "startparse-sax": "clojure.xml-api.html#clojure.xml/startparse-sax", "startparse-sax-safe": "clojure.xml-api.html#clojure.xml/startparse-sax-safe", "starts-with?": "clojure.string-api.html#clojure.string/starts-with?", "stop-server": "clojure.core-api.html#clojure.core.server/stop-server", "stop-servers": "clojure.core-api.html#clojure.core.server/stop-servers", "str": "clojure.core-api.html#clojure.core/str", "string?": "clojure.core-api.html#clojure.core/string?", "stringify-keys": "clojure.walk-api.html#clojure.walk/stringify-keys", "struct": "clojure.core-api.html#clojure.core/struct", "struct-map": "clojure.core-api.html#clojure.core/struct-map", "subs": "clojure.core-api.html#clojure.core/subs", "subseq": "clojure.core-api.html#clojure.core/subseq", "subset?": "clojure.set-api.html#clojure.set/subset?", "subtract-exact": "clojure.math-api.html#clojure.math/subtract-exact", "subvec": "clojure.core-api.html#clojure.core/subvec", "successful?": "clojure.test-api.html#clojure.test/successful?", "supers": "clojure.core-api.html#clojure.core/supers", "superset?": "clojure.set-api.html#clojure.set/superset?", "swap!": "clojure.core-api.html#clojure.core/swap!", "swap-vals!": "clojure.core-api.html#clojure.core/swap-vals!", "symbol": "clojure.core-api.html#clojure.core/symbol", "symbol?": "clojure.core-api.html#clojure.core/symbol?", "sync": "clojure.core-api.html#clojure.core/sync", "tagged-literal": "clojure.core-api.html#clojure.core/tagged-literal", "tagged-literal?": "clojure.core-api.html#clojure.core/tagged-literal?", "take": "clojure.core-api.html#clojure.core/take", "take-last": "clojure.core-api.html#clojure.core/take-last", "take-nth": "clojure.core-api.html#clojure.core/take-nth", "take-while": "clojure.core-api.html#clojure.core/take-while", "tan": "clojure.math-api.html#clojure.math/tan", "tanh": "clojure.math-api.html#clojure.math/tanh", "tap>": "clojure.core-api.html#clojure.core/tap>", "test": "clojure.core-api.html#clojure.core/test", "test-all-vars": "clojure.test-api.html#clojure.test/test-all-vars", "test-ns": "clojure.test-api.html#clojure.test/test-ns", "test-var": "clojure.test-api.html#clojure.test/test-var", "test-vars": "clojure.test-api.html#clojure.test/test-vars", "testing": "clojure.test-api.html#clojure.test/testing", "testing-contexts-str": "clojure.test-api.html#clojure.test/testing-contexts-str", "testing-vars-str": "clojure.test-api.html#clojure.test/testing-vars-str", "the-ns": "clojure.core-api.html#clojure.core/the-ns", "thread-bound?": "clojure.core-api.html#clojure.core/thread-bound?", "thread-stopper": "clojure.repl-api.html#clojure.repl/thread-stopper", "throw": "clojure.core-api.html#clojure.core/throw", "Throwable->map": "clojure.core-api.html#clojure.core/Throwable->map", "time": "clojure.core-api.html#clojure.core/time", "to-array": "clojure.core-api.html#clojure.core/to-array", "to-array-2d": "clojure.core-api.html#clojure.core/to-array-2d", "to-degrees": "clojure.math-api.html#clojure.math/to-degrees", "to-radians": "clojure.math-api.html#clojure.math/to-radians", "trampoline": "clojure.core-api.html#clojure.core/trampoline", "transduce": "clojure.core-api.html#clojure.core/transduce", "transient": "clojure.core-api.html#clojure.core/transient", "tree-seq": "clojure.core-api.html#clojure.core/tree-seq", "trim": "clojure.string-api.html#clojure.string/trim", "trim-newline": "clojure.string-api.html#clojure.string/trim-newline", "triml": "clojure.string-api.html#clojure.string/triml", "trimr": "clojure.string-api.html#clojure.string/trimr", "true?": "clojure.core-api.html#clojure.core/true?", "try": "clojure.core-api.html#clojure.core/try", "try-expr": "clojure.test-api.html#clojure.test/try-expr", "type": "clojure.core-api.html#clojure.core/type", "type-reflect": "clojure.reflect-api.html#clojure.reflect/type-reflect", "TypeReference": "clojure.reflect-api.html#clojure.reflect/TypeReference", "ulp": "clojure.math-api.html#clojure.math/ulp", "unchecked-add": "clojure.core-api.html#clojure.core/unchecked-add", "unchecked-add-int": "clojure.core-api.html#clojure.core/unchecked-add-int", "unchecked-byte": "clojure.core-api.html#clojure.core/unchecked-byte", "unchecked-char": "clojure.core-api.html#clojure.core/unchecked-char", "unchecked-dec": "clojure.core-api.html#clojure.core/unchecked-dec", "unchecked-dec-int": "clojure.core-api.html#clojure.core/unchecked-dec-int", "unchecked-divide-int": "clojure.core-api.html#clojure.core/unchecked-divide-int", "unchecked-double": "clojure.core-api.html#clojure.core/unchecked-double", "unchecked-float": "clojure.core-api.html#clojure.core/unchecked-float", "unchecked-inc": "clojure.core-api.html#clojure.core/unchecked-inc", "unchecked-inc-int": "clojure.core-api.html#clojure.core/unchecked-inc-int", "unchecked-int": "clojure.core-api.html#clojure.core/unchecked-int", "unchecked-long": "clojure.core-api.html#clojure.core/unchecked-long", "unchecked-multiply": "clojure.core-api.html#clojure.core/unchecked-multiply", "unchecked-multiply-int": "clojure.core-api.html#clojure.core/unchecked-multiply-int", "unchecked-negate": "clojure.core-api.html#clojure.core/unchecked-negate", "unchecked-negate-int": "clojure.core-api.html#clojure.core/unchecked-negate-int", "unchecked-remainder-int": "clojure.core-api.html#clojure.core/unchecked-remainder-int", "unchecked-short": "clojure.core-api.html#clojure.core/unchecked-short", "unchecked-subtract": "clojure.core-api.html#clojure.core/unchecked-subtract", "unchecked-subtract-int": "clojure.core-api.html#clojure.core/unchecked-subtract-int", "underive": "clojure.core-api.html#clojure.core/underive", "union": "clojure.set-api.html#clojure.set/union", "unreduced": "clojure.core-api.html#clojure.core/unreduced", "unsigned-bit-shift-right": "clojure.core-api.html#clojure.core/unsigned-bit-shift-right", "up": "clojure.zip-api.html#clojure.zip/up", "update": "clojure.core-api.html#clojure.core/update", "update-in": "clojure.core-api.html#clojure.core/update-in", "update-keys": "clojure.core-api.html#clojure.core/update-keys", "update-proxy": "clojure.core-api.html#clojure.core/update-proxy", "update-vals": "clojure.core-api.html#clojure.core/update-vals", "upper-case": "clojure.string-api.html#clojure.string/upper-case", "uri?": "clojure.core-api.html#clojure.core/uri?", "use": "clojure.core-api.html#clojure.core/use", "use-fixtures": "clojure.test-api.html#clojure.test/use-fixtures", "uuid?": "clojure.core-api.html#clojure.core/uuid?", "val": "clojure.core-api.html#clojure.core/val", "validated": "clojure.instant-api.html#clojure.instant/validated", "vals": "clojure.core-api.html#clojure.core/vals", "var": "clojure.core-api.html#clojure.core/var", "var-get": "clojure.core-api.html#clojure.core/var-get", "var-set": "clojure.core-api.html#clojure.core/var-set", "var?": "clojure.core-api.html#clojure.core/var?", "vary-meta": "clojure.core-api.html#clojure.core/vary-meta", "vec": "clojure.core-api.html#clojure.core/vec", "Vec": "clojure.core-api.html#clojure.core/Vec", "VecNode": "clojure.core-api.html#clojure.core/VecNode", "VecSeq": "clojure.core-api.html#clojure.core/VecSeq", "vector": "clojure.core-api.html#clojure.core/vector", "vector-of": "clojure.core-api.html#clojure.core/vector-of", "vector-zip": "clojure.zip-api.html#clojure.zip/vector-zip", "vector?": "clojure.core-api.html#clojure.core/vector?", "volatile!": "clojure.core-api.html#clojure.core/volatile!", "volatile?": "clojure.core-api.html#clojure.core/volatile?", "vreset!": "clojure.core-api.html#clojure.core/vreset!", "vswap!": "clojure.core-api.html#clojure.core/vswap!", "walk": "clojure.walk-api.html#clojure.walk/walk", "when": "clojure.core-api.html#clojure.core/when", "when-first": "clojure.core-api.html#clojure.core/when-first", "when-let": "clojure.core-api.html#clojure.core/when-let", "when-not": "clojure.core-api.html#clojure.core/when-not", "when-some": "clojure.core-api.html#clojure.core/when-some", "while": "clojure.core-api.html#clojure.core/while", "with-bindings": "clojure.main-api.html#clojure.main/with-bindings", "with-bindings*": "clojure.core-api.html#clojure.core/with-bindings*", "with-in-str": "clojure.core-api.html#clojure.core/with-in-str", "with-junit-output": "clojure.test-api.html#clojure.test.junit/with-junit-output", "with-local-vars": "clojure.core-api.html#clojure.core/with-local-vars", "with-meta": "clojure.core-api.html#clojure.core/with-meta", "with-open": "clojure.core-api.html#clojure.core/with-open", "with-out-str": "clojure.core-api.html#clojure.core/with-out-str", "with-pprint-dispatch": "clojure.pprint-api.html#clojure.pprint/with-pprint-dispatch", "with-precision": "clojure.core-api.html#clojure.core/with-precision", "with-read-known": "clojure.main-api.html#clojure.main/with-read-known", "with-redefs": "clojure.core-api.html#clojure.core/with-redefs", "with-redefs-fn": "clojure.core-api.html#clojure.core/with-redefs-fn", "with-sh-dir": "clojure.java.shell-api.html#clojure.java.shell/with-sh-dir", "with-sh-env": "clojure.java.shell-api.html#clojure.java.shell/with-sh-env", "with-tap-output": "clojure.test-api.html#clojure.test.tap/with-tap-output", "with-test": "clojure.test-api.html#clojure.test/with-test", "with-test-out": "clojure.test-api.html#clojure.test/with-test-out", "write": "clojure.pprint-api.html#clojure.pprint/write", "write-out": "clojure.pprint-api.html#clojure.pprint/write-out", "writer": "clojure.java.io-api.html#clojure.java.io/writer", "xml-seq": "clojure.core-api.html#clojure.core/xml-seq", "xml-zip": "clojure.zip-api.html#clojure.zip/xml-zip", "zero?": "clojure.core-api.html#clojure.core/zero?", "zipmap": "clojure.core-api.html#clojure.core/zipmap", "zipper": "clojure.zip-api.html#clojure.zip/zipper"}