{"Accessibility": "accessibility.html", "act()": "test-utils.html#act", "Add React to a Website": "add-react-to-a-website.html", "AJAX and APIs": "faq-ajax.html", "Babel, JSX, and Build Steps": "faq-build.html", "Building Your Own Hooks": "hooks-custom.html", "Bundlers": "glossary.html#bundlers", "CDN": "glossary.html#cdn", "CDN Links": "cdn-links.html", "Class.contextType": "context.html#classcontexttype", "cloneElement()": "react-api.html#cloneelement", "Code-Splitting": "code-splitting.html", "Compilers": "glossary.html#compilers", "Component State": "faq-state.html", "componentDidCatch()": "react-component.html#componentdidcatch", "componentDidMount()": "react-component.html#componentdidmount", "componentDidUpdate()": "react-component.html#componentdidupdate", "Components": "glossary.html#components", "Components and Props": "components-and-props.html", "componentWillUnmount()": "react-component.html#componentwillunmount", "Composition vs Inheritance": "composition-vs-inheritance.html", "Conditional Rendering": "conditional-rendering.html", "constructor()": "react-component.html#constructor", "Context": "context.html", "Context.Consumer": "context.html#contextconsumer", "Context.displayName": "context.html#contextdisplayname", "Context.Provider": "context.html#contextprovider", "Controlled vs. Uncontrolled Components": "glossary.html#controlled-vs-uncontrolled-components", "Create a New React App": "create-a-new-react-app.html", "createElement()": "react-api.html#createelement", "createFactory()": "react-api.html#createfactory", "createPortal()": "react-dom.html#createportal", "createRoot()": "react-dom-client.html#createroot", "defaultProps": "react-component.html#defaultprops", "displayName": "react-component.html#displayname", "DOM Elements": "dom-elements.html", "Elements": "glossary.html#elements", "Error Boundaries": "error-boundaries.html", "ES6, ES2015, ES2016, etc": "glossary.html#es6-es2015-es2016-etc", "Event Pooling": "legacy-event-pooling.html", "Events": "glossary.html#events", "File Structure": "faq-structure.html", "findAllInRenderedTree()": "test-utils.html#findallinrenderedtree", "findDOMNode()": "react-dom.html#finddomnode", "findRenderedComponentWithType()": "test-utils.html#findrenderedcomponentwithtype", "findRenderedDOMComponentWithClass()": "test-utils.html#findrendereddomcomponentwithclass", "findRenderedDOMComponentWithTag()": "test-utils.html#findrendereddomcomponentwithtag", "flushSync()": "react-dom.html#flushsync", "forceUpdate()": "react-component.html#forceupdate", "Forms": "forms.html", "Forwarding Refs": "forwarding-refs.html", "Fragments": "fragments.html", "getSnapshotBeforeUpdate()": "react-component.html#getsnapshotbeforeupdate", "Getting Started": "getting-started.html", "Glossary of React Terms": "glossary.html", "Handling Events": "handling-events.html", "Higher-Order Components": "higher-order-components.html", "Hooks API Reference": "hooks-reference.html", "Hooks at a Glance": "hooks-overview.html", "Hooks FAQ": "hooks-faq.html", "hydrate()": "react-dom.html#hydrate", "hydrateRoot()": "react-dom-client.html#hydrateroot", "Integrating with Other Libraries": "integrating-with-other-libraries.html", "Introducing Hooks": "hooks-intro.html", "Introducing JSX": "introducing-jsx.html", "isCompositeComponent()": "test-utils.html#iscompositecomponent", "isCompositeComponentWithType()": "test-utils.html#iscompositecomponentwithtype", "isDOMComponent()": "test-utils.html#isdomcomponent", "isElement()": "test-utils.html#iselement", "isElementOfType()": "test-utils.html#iselementoftype", "isValidElement()": "react-api.html#isvalidelement", "JavaScript Environment Requirements": "javascript-environment-requirements.html", "JSX": "glossary.html#jsx", "JSX In Depth": "jsx-in-depth.html", "Keys": "glossary.html#keys", "Legacy Context": "legacy-context.html", "Lifecycle Methods": "glossary.html#lifecycle-methods", "Lifting State Up": "lifting-state-up.html", "Lists and Keys": "lists-and-keys.html", "mockComponent()": "test-utils.html#mockcomponent", "Optimizing Performance": "optimizing-performance.html", "Package Managers": "glossary.html#package-managers", "Passing Functions to Components": "faq-functions.html", "Portals": "portals.html", "Profiler API": "profiler.html", "props": "react-component.html#props", "props.children": "glossary.html#propschildren", "React Top-Level API": "react-api.html", "React Without ES6": "react-without-es6.html", "React Without JSX": "react-without-jsx.html", "React.Children": "react-api.html#reactchildren", "React.Children.count": "react-api.html#reactchildrencount", "React.Children.forEach": "react-api.html#reactchildrenforeach", "React.Children.map": "react-api.html#reactchildrenmap", "React.Children.only": "react-api.html#reactchildrenonly", "React.Children.toArray": "react-api.html#reactchildrentoarray", "React.Component": "react-component.html", "React.createContext": "context.html#reactcreatecontext", "React.createRef": "react-api.html#reactcreateref", "React.forwardRef": "react-api.html#reactforwardref", "React.Fragment": "react-api.html#reactfragment", "React.lazy": "react-api.html#reactlazy", "React.memo": "react-api.html#reactmemo", "React.PureComponent": "react-api.html#reactpurecomponent", "React.startTransition": "react-api.html#starttransition", "React.Suspense": "react-api.html#reactsuspense-during-hydration", "ReactDOM": "react-dom.html", "ReactDOMClient": "react-dom-client.html", "ReactDOMServer": "react-dom-server.html", "Reconciliation": "reconciliation.html", "Refs": "glossary.html#refs", "Refs and the DOM": "refs-and-the-dom.html", "Release Channels": "release-channels.html", "Render Props": "render-props.html", "render()": "react-component.html#render", "Rendering Elements": "rendering-elements.html", "renderIntoDocument()": "test-utils.html#renderintodocument", "renderToNodeStream()": "react-dom-server.html#rendertonodestream", "renderToPipeableStream()": "react-dom-server.html#rendertopipeablestream", "renderToReadableStream()": "react-dom-server.html#rendertoreadablestream", "renderToStaticMarkup()": "react-dom-server.html#rendertostaticmarkup", "renderToStaticNodeStream()": "react-dom-server.html#rendertostaticnodestream", "renderToString()": "react-dom-server.html#rendertostring", "requestAnimationFrame": "faq-functions.html#requestanimationframe-throttling", "Rules of Hooks": "hooks-rules.html", "scryRenderedComponentsWithType()": "test-utils.html#scryrenderedcomponentswithtype", "scryRenderedDOMComponentsWithClass()": "test-utils.html#scryrendereddomcomponentswithclass", "scryRenderedDOMComponentsWithTag()": "test-utils.html#scryrendereddomcomponentswithtag", "setState()": "react-component.html#setstate", "shouldComponentUpdate()": "react-component.html#shouldcomponentupdate", "Simulate": "test-utils.html#simulate", "Single-page Application": "glossary.html#single-page-application", "state": "react-component.html#state", "State and Lifecycle": "state-and-lifecycle.html", "static getDerivedStateFromError()": "react-component.html#static-getderivedstatefromerror", "static getDerivedStateFromProps()": "react-component.html#static-getderivedstatefromprops", "Static Type Checking": "static-type-checking.html", "Strict Mode": "strict-mode.html", "Styling and CSS": "faq-styling.html", "SyntheticEvent": "events.html", "Test Renderer": "test-renderer.html", "Test Utilities": "test-utils.html", "Testing Environments": "testing-environments.html", "Testing Overview": "testing.html", "Testing Recipes": "testing-recipes.html", "testInstance.children": "test-renderer.html#testinstancechildren", "testInstance.find()": "test-renderer.html#testinstancefind", "testInstance.findAll()": "test-renderer.html#testinstancefindall", "testInstance.findAllByProps()": "test-renderer.html#testinstancefindallbyprops", "testInstance.findAllByType()": "test-renderer.html#testinstancefindallbytype", "testInstance.findByProps()": "test-renderer.html#testinstancefindbyprops", "testInstance.findByType()": "test-renderer.html#testinstancefindbytype", "testInstance.instance": "test-renderer.html#testinstanceinstance", "testInstance.parent": "test-renderer.html#testinstanceparent", "testInstance.props": "test-renderer.html#testinstanceprops", "testInstance.type": "test-renderer.html#testinstancetype", "TestRenderer.act()": "test-renderer.html#testrendereract", "TestRenderer.create()": "test-renderer.html#testrenderercreate", "testRenderer.getInstance()": "test-renderer.html#testrenderergetinstance", "testRenderer.root": "test-renderer.html#testrendererroot", "testRenderer.toJSON()": "test-renderer.html#testrenderertojson", "testRenderer.toTree()": "test-renderer.html#testrenderertotree", "testRenderer.unmount()": "test-renderer.html#testrendererunmount", "testRenderer.update()": "test-renderer.html#testrendererupdate", "Thinking in React": "thinking-in-react.html", "Typechecking With PropTypes": "typechecking-with-proptypes.html", "Uncontrolled Components": "uncontrolled-components.html", "unmountComponentAtNode()": "react-dom.html#unmountcomponentatnode", "UNSAFE_componentWillMount()": "react-component.html#unsafe_componentwillmount", "UNSAFE_componentWillReceiveProps()": "react-component.html#unsafe_componentwillreceiveprops", "UNSAFE_componentWillUpdate()": "react-component.html#unsafe_componentwillupdate", "useCallback": "hooks-reference.html#usecallback", "useContext": "hooks-reference.html#usecontext", "useDebugValue": "hooks-reference.html#usedebugvalue", "useDeferredValue": "hooks-reference.html#usedeferredvalue", "useEffect": "hooks-reference.html#useeffect", "useId": "hooks-reference.html#useid", "useImperativeHandle": "hooks-reference.html#useimperativehandle", "useInsertionEffect": "hooks-reference.html#useinsertioneffect", "useLayoutEffect": "hooks-reference.html#uselayouteffect", "useMemo": "hooks-reference.html#usememo", "useReducer": "hooks-reference.html#usereducer", "useRef": "hooks-reference.html#useref", "useState": "hooks-reference.html#usestate", "useSyncExternalStore": "hooks-reference.html#usesyncexternalstore", "useTransition": "hooks-reference.html#usetransition", "Using the Effect Hook": "hooks-effect.html", "Using the State Hook": "hooks-state.html", "Versioning Policy": "faq-versioning.html", "Virtual DOM and Internals": "faq-internals.html", "Web Components": "web-components.html"}