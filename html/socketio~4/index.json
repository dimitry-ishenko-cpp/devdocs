{"Adapter": "adapter.html", "Admin UI": "admin-ui.html", "Application structure": "server-application-structure.html", "Behind a reverse proxy": "reverse-proxy.html", "Broadcasting events": "broadcasting-events.html", "Client API": "client-api.html", "Client Initialization": "client-initialization.html", "Client Installation": "client-installation.html", "Client options": "client-options.html", "Client usage with bundlers": "client-with-bundlers.html", "client.conn": "server-api.html#clientconn", "client.request": "server-api.html#clientrequest", "Cluster adapter": "cluster-adapter.html", "Custom parser": "custom-parser.html", "Emit cheatsheet": "emit-cheatsheet.html", "Emitting events": "emitting-events.html", "engine.clientsCount": "server-api.html#engineclientscount", "engine.generateId": "server-api.html#enginegenerateid", "engine.handleUpgrade(request, socket, head)": "server-api.html#enginehandleupgraderequest-socket-head", "Event: 'connect'": "client-api.html#event-connect", "Event: 'connect_error'": "client-api.html#event-connect_error", "Event: 'connection'": "server-api.html#event-connection-1", "Event: 'connection_error'": "server-api.html#event-connection_error", "Event: 'disconnect'": "client-api.html#event-disconnect", "Event: 'disconnecting'": "server-api.html#event-disconnecting", "Event: 'error'": "client-api.html#event-error", "Event: 'headers'": "server-api.html#event-headers", "Event: 'initial_headers'": "server-api.html#event-initial_headers", "Event: 'ping'": "client-api.html#event-ping", "Event: 'reconnect'": "client-api.html#event-reconnect", "Event: 'reconnect_attempt'": "client-api.html#event-reconnect_attempt", "Event: 'reconnect_error'": "client-api.html#event-reconnect_error", "Event: 'reconnect_failed'": "client-api.html#event-reconnect_failed", "Event: connect": "server-api.html#event-connect", "Event: connection": "server-api.html#event-connection", "Event: new_namespace": "server-api.html#event-new_namespace", "Flag: 'broadcast'": "server-api.html#flag-broadcast", "Flag: 'local'": "server-api.html#flag-local", "Flag: 'volatile'": "client-api.html#flag-volatile", "Handling CORS": "handling-cors.html", "How it works": "how-it-works.html", "io([url][, options])": "client-api.html#iourl", "io.protocol": "client-api.html#ioprotocol", "Listening to events": "listening-to-events.html", "Load testing": "load-testing.html", "Logging and debugging": "logging-and-debugging.html", "manager.connect([callback])": "client-api.html#managerconnectcallback", "manager.open([callback])": "client-api.html#manageropencallback", "manager.reconnection([value])": "client-api.html#managerreconnectionvalue", "manager.reconnectionAttempts([value])": "client-api.html#managerreconnectionattemptsvalue", "manager.reconnectionDelay([value])": "client-api.html#managerreconnectiondelayvalue", "manager.reconnectionDelayMax([value])": "client-api.html#managerreconnectiondelaymaxvalue", "manager.socket(nsp, options)": "client-api.html#managersocketnsp-options", "manager.timeout([value])": "client-api.html#managertimeoutvalue", "Middlewares": "middlewares.html", "Migrating from 2.x to 3.0": "migrating-from-2-x-to-3-0.html", "Migrating from 3.x to 4.0": "migrating-from-3-x-to-4-0.html", "MongoDB adapter": "mongo-adapter.html", "namespace.adapter": "server-api.html#namespaceadapter", "namespace.allSockets()": "server-api.html#namespaceallsockets", "namespace.disconnectSockets([close])": "server-api.html#namespacedisconnectsocketsclose", "namespace.emit(eventName[, ...args])": "server-api.html#namespaceemiteventname-args", "namespace.except(rooms)": "server-api.html#namespaceexceptrooms", "namespace.fetchSockets()": "server-api.html#namespacefetchsockets", "namespace.in(room)": "server-api.html#namespaceinroom", "namespace.name": "server-api.html#namespacename", "namespace.serverSideEmit(eventName[, ...args][, ack])": "server-api.html#namespaceserversideemiteventname-args", "namespace.sockets": "server-api.html#namespacesockets", "namespace.socketsJoin(rooms)": "server-api.html#namespacesocketsjoinrooms", "namespace.socketsLeave(rooms)": "server-api.html#namespacesocketsleaverooms", "namespace.timeout(value)": "server-api.html#namespacetimeoutvalue", "namespace.to(room)": "server-api.html#namespacetoroom", "namespace.use(fn)": "server-api.html#namespaceusefn", "Namespaces": "namespaces.html", "new Manager(url[, options])": "client-api.html#new-managerurl-options", "new Server(httpServer[, options])": "server-api.html#new-serverhttpserver-options", "new Server(options)": "server-api.html#new-serveroptions", "new Server(port[, options])": "server-api.html#new-serverport-options", "Offline behavior": "client-offline-behavior.html", "Performance tuning": "performance-tuning.html", "Postgres adapter": "postgres-adapter.html", "Redis adapter": "redis-adapter.html", "Rooms": "rooms.html", "Server API": "server-api.html", "Server Initialization": "server-initialization.html", "Server Installation": "server-installation.html", "Server options": "server-options.html", "server.adapter([value])": "server-api.html#serveradaptervalue", "server.attach(httpServer[, options])": "server-api.html#serverattachhttpserver-options", "server.attach(port[, options])": "server-api.html#serverattachport-options", "server.attachApp(app[, options])": "server-api.html#serverattachappapp-options", "server.bind(engine)": "server-api.html#serverbindengine", "server.close([callback])": "server-api.html#serverclosecallback", "server.disconnectSockets([close])": "server-api.html#serverdisconnectsocketsclose", "server.engine": "server-api.html#serverengine", "server.fetchSockets()": "server-api.html#serverfetchsockets", "server.listen(httpServer[, options])": "server-api.html#serverlistenhttpserver-options", "server.listen(port[, options])": "server-api.html#serverlistenport-options", "server.of(nsp)": "server-api.html#serverofnsp", "server.on(eventName, listener)": "server-api.html#serveroneventname-listener", "server.onconnection(socket)": "server-api.html#serveronconnectionsocket", "server.path([value])": "server-api.html#serverpathvalue", "server.serveClient([value])": "server-api.html#serverserveclientvalue", "server.serverSideEmit(eventName[, ...args][, ack])": "server-api.html#serverserversideemiteventname-args", "server.sockets": "server-api.html#serversockets", "server.socketsJoin(rooms)": "server-api.html#serversocketsjoinrooms", "server.socketsLeave(rooms)": "server-api.html#serversocketsleaverooms", "socket.client": "server-api.html#socketclient", "socket.close()": "client-api.html#socketclose", "socket.compress(value)": "client-api.html#socketcompressvalue", "socket.conn": "server-api.html#socketconn", "socket.connect()": "client-api.html#socketconnect", "socket.connected": "client-api.html#socketconnected", "socket.data": "server-api.html#socketdata", "socket.disconnect()": "client-api.html#socketdisconnect", "socket.disconnect(close)": "server-api.html#socketdisconnectclose", "socket.disconnected": "client-api.html#socketdisconnected", "socket.emit(eventName[, ...args][, ack])": "server-api.html#socketemiteventname-args", "socket.eventNames()": "server-api.html#socketeventnames", "socket.except(rooms)": "server-api.html#socketexceptrooms", "socket.handshake": "server-api.html#sockethandshake", "socket.id": "server-api.html#socketid", "socket.in(room)": "server-api.html#socketinroom", "socket.io": "client-api.html#socketio", "socket.join(room)": "server-api.html#socketjoinroom", "socket.leave(room)": "server-api.html#socketleaveroom", "socket.listeners(eventName)": "client-api.html#socketlistenerseventname", "socket.listenersAny()": "client-api.html#socketlistenersany", "socket.listenersAnyOutgoing()": "server-api.html#socketlistenersanyoutgoing", "socket.off([eventName][, listener])": "client-api.html#socketoffeventname", "socket.offAny([listener])": "server-api.html#socketoffanylistener", "socket.offAnyOutgoing([listener])": "server-api.html#socketoffanyoutgoinglistener", "socket.on(eventName, callback)": "client-api.html#socketoneventname-callback", "socket.onAny(callback)": "client-api.html#socketonanycallback", "socket.onAnyOutgoing(callback)": "client-api.html#socketonanyoutgoingcallback", "socket.once(eventName, callback)": "client-api.html#socketonceeventname-callback", "socket.once(eventName, listener)": "server-api.html#socketonceeventname-listener", "socket.open()": "client-api.html#socketopen", "socket.prependAny(callback)": "server-api.html#socketprependanycallback", "socket.prependAnyOutgoing(callback)": "server-api.html#socketprependanyoutgoingcallback", "socket.removeAllListeners([eventName])": "server-api.html#socketremovealllistenerseventname", "socket.removeListener(eventName, listener)": "server-api.html#socketremovelistenereventname-listener", "socket.request": "server-api.html#socketrequest", "socket.rooms": "server-api.html#socketrooms", "socket.send([...args][, ack])": "client-api.html#socketsendargs", "socket.timeout(value)": "client-api.html#sockettimeoutvalue", "socket.to(room)": "server-api.html#sockettoroom", "socket.use(fn)": "server-api.html#socketusefn", "Testing": "testing.html", "The Server instance": "server-instance.html", "The Socket instance (client-side)": "client-socket-instance.html", "The Socket instance (server-side)": "server-socket-instance.html", "Troubleshooting connection issues": "troubleshooting-connection-issues.html", "TypeScript": "typescript.html", "Usage with bundlers": "server-with-bundlers.html", "Usage with PM2": "pm2.html", "Using multiple nodes": "using-multiple-nodes.html"}