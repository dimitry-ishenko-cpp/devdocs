{"Assertions": "assertions.html", "autoRespond": "fake-xhr-and-server.html#boolean-autorespond", "autoRespondAfter()": "fake-xhr-and-server.html#number-autorespondafter-ms", "clock.next()": "fake-timers.html#clocknext--await-clocknextasync", "clock.nextAsync()": "fake-timers.html#clocknext--await-clocknextasync", "clock.restore()": "fake-timers.html#clockrestore", "clock.runAll()": "fake-timers.html#clockrunall--await-clockrunallasync", "clock.runAllAsync()": "fake-timers.html#clockrunall--await-clockrunallasync", "clock.tick()": "fake-timers.html#clockticktime--await-clocktickasynctime", "clock.tickAsync()": "fake-timers.html#clockticktime--await-clocktickasynctime", "expectation.atLeast()": "mocks.html#expectationatleastnumber", "expectation.atMost()": "mocks.html#expectationatmostnumber", "expectation.exactly()": "mocks.html#expectationexactlynumber", "expectation.never()": "mocks.html#expectationnever", "expectation.on()": "mocks.html#expectationonobj", "expectation.once()": "mocks.html#expectationonce", "expectation.thrice()": "mocks.html#expectationthrice", "expectation.twice()": "mocks.html#expectationtwice", "expectation.verify()": "mocks.html#expectationverify", "expectation.withArgs()": "mocks.html#expectationwithargsarg1-arg2-", "expectation.withExactArgs()": "mocks.html#expectationwithexactargsarg1-arg2-", "f.callback": "fakes.html#fcallback", "f.firstArg": "fakes.html#ffirstarg", "f.lastArg": "fakes.html#flastarg", "Fake timers": "fake-timers.html", "Fake XHR and server": "fake-xhr-and-server.html", "fakeHTTPMethods": "fake-xhr-and-server.html#boolean-fakehttpmethods", "Fakes": "fakes.html", "FakeXMLHttpRequest.addFilter()": "fake-xhr-and-server.html#fakexmlhttprequestaddfilterfn", "FakeXMLHttpRequest.useFilters": "fake-xhr-and-server.html#fakexmlhttprequestusefilters", "General setup": "general-setup.html", "JSON-P": "json-p.html", "Matchers": "matchers.html", "mock.expects()": "mocks.html#var-expectation--mockexpectsmethod", "mock.restore()": "mocks.html#mockrestore", "mock.usingPromise()": "mocks.html#mockusingpromisepromiselibrary", "mock.verify()": "mocks.html#mockverify", "Mocks": "mocks.html", "promise.reject()": "promises.html#promiserejectvalue", "promise.rejectedValue": "promises.html#promiserejectedvalue", "promise.resolve()": "promises.html#promiseresolvevalue", "promise.resolvedValue": "promises.html#promiseresolvedvalue", "promise.status": "promises.html#promisestatus", "Promises": "promises.html", "request.async": "fake-xhr-and-server.html#boolean-requestasync", "request.autoRespond": "fake-xhr-and-server.html#boolean-requestautorespond", "request.autoRespondAfter": "fake-xhr-and-server.html#number-requestautorespondafter", "request.error()": "fake-xhr-and-server.html#requesterror", "request.getAllResponseHeaders()": "fake-xhr-and-server.html#object-requestgetallresponseheaders", "request.getResponseHeader()": "fake-xhr-and-server.html#string-requestgetresponseheaderheader", "request.method": "fake-xhr-and-server.html#string-requestmethod", "request.password": "fake-xhr-and-server.html#string-requestpassword", "request.requestBody": "fake-xhr-and-server.html#string-requestrequestbody", "request.requestHeaders": "fake-xhr-and-server.html#object-requestrequestheaders", "request.respond()": "fake-xhr-and-server.html#requestrespondstatus-headers-body", "request.responseXML": "fake-xhr-and-server.html#document-requestresponsexml", "request.setResponseBody()": "fake-xhr-and-server.html#requestsetresponsebodybody", "request.setResponseHeaders()": "fake-xhr-and-server.html#requestsetresponseheadersobject", "request.setStatus()": "fake-xhr-and-server.html#requestsetstatusstatus", "request.status": "fake-xhr-and-server.html#int-requeststatus", "request.statusText": "fake-xhr-and-server.html#string-requeststatustext", "request.url": "fake-xhr-and-server.html#string-requesturl", "request.username": "fake-xhr-and-server.html#string-requestusername", "respondImmediately": "fake-xhr-and-server.html#boolean-respondimmediately", "sandbox.assert()": "sandbox.html#sandboxassert", "sandbox.createStubInstance()": "sandbox.html#sandboxcreatestubinstance", "sandbox.leakThreshold": "sandbox.html#sandboxleakthreshold", "sandbox.mock()": "sandbox.html#sandboxmock", "sandbox.replace()": "sandbox.html#sandboxreplaceobject-property-replacement", "sandbox.replaceGetter()": "sandbox.html#sandboxreplacegetter", "sandbox.replaceSetter()": "sandbox.html#sandboxreplacesetter", "sandbox.reset()": "sandbox.html#sandboxreset", "sandbox.resetBehavior()": "sandbox.html#sandboxresetbehavior", "sandbox.resetHistory()": "sandbox.html#sandboxresethistory", "sandbox.restore()": "sandbox.html#sandboxrestore", "sandbox.spy()": "sandbox.html#sandboxspy", "sandbox.stub()": "sandbox.html#sandboxstub", "sandbox.useFakeServer()": "sandbox.html#sandboxusefakeserver", "sandbox.useFakeTimers()": "sandbox.html#sandboxusefaketimers", "sandbox.useFakeXMLHttpRequest()": "sandbox.html#sandboxusefakexmlhttprequest", "sandbox.usingPromise()": "sandbox.html#sandboxusingpromisepromiselibrary", "sandbox.verify()": "sandbox.html#sandboxverify", "sandbox.verifyAndRestore()": "sandbox.html#sandboxverifyandrestore", "Sandboxes": "sandbox.html", "server.configure()": "fake-xhr-and-server.html#serverconfigureconfig", "server.getHTTPMethod()": "fake-xhr-and-server.html#servergethttpmethodrequest", "server.requests": "fake-xhr-and-server.html#array-serverrequests", "server.respond()": "fake-xhr-and-server.html#serverrespond", "server.respondWith()": "fake-xhr-and-server.html#serverrespondwithresponse", "server.restore()": "fake-xhr-and-server.html#serverrestore", "sinon.addBehavior()": "stubs.html#sinonaddbehaviorname-fn", "sinon.assert.alwaysCalledOn()": "assertions.html#sinonassertalwayscalledonspy-obj", "sinon.assert.alwaysCalledWith()": "assertions.html#sinonassertalwayscalledwithspy-arg1-arg2-", "sinon.assert.alwaysCalledWithExactly()": "assertions.html#sinonassertalwayscalledwithexactlyspy-arg1-arg2-", "sinon.assert.alwaysCalledWithMatch()": "assertions.html#sinonassertalwayscalledwithmatchspy-arg1-arg2-", "sinon.assert.alwaysThrew()": "assertions.html#sinonassertalwaysthrewspy-exception", "sinon.assert.callCount()": "assertions.html#sinonassertcallcountspy-num", "sinon.assert.called()": "assertions.html#sinonassertcalledspy", "sinon.assert.calledOn()": "assertions.html#sinonassertcalledonspyorspycall-obj", "sinon.assert.calledOnce()": "assertions.html#sinonassertcalledoncespy", "sinon.assert.calledOnceWithExactly()": "assertions.html#sinonassertcalledoncewithexactlyspyorspycall-arg1-arg2-", "sinon.assert.calledOnceWithMatch()": "assertions.html#sinonassertcalledoncewithmatchspyorspycall-arg1-arg2-", "sinon.assert.calledThrice()": "assertions.html#sinonassertcalledthricespy", "sinon.assert.calledTwice()": "assertions.html#sinonassertcalledtwicespy", "sinon.assert.calledWith()": "assertions.html#sinonassertcalledwithspyorspycall-arg1-arg2-", "sinon.assert.calledWithExactly()": "assertions.html#sinonassertcalledwithexactlyspyorspycall-arg1-arg2-", "sinon.assert.calledWithMatch()": "assertions.html#sinonassertcalledwithmatchspyorspycall-arg1-arg2-", "sinon.assert.calledWithNew()": "assertions.html#sinonassertcalledwithnewspyorspycall", "sinon.assert.callOrder()": "assertions.html#sinonassertcallorderspy1-spy2-", "sinon.assert.expose()": "assertions.html#sinonassertexposeobject-options", "sinon.assert.fail()": "assertions.html#sinonassertfailmessage", "sinon.assert.failException": "assertions.html#sinonassertfailexception", "sinon.assert.match()": "assertions.html#sinonassertmatchactual-expectation", "sinon.assert.neverCalledWith()": "assertions.html#sinonassertnevercalledwithspy-arg1-arg2-", "sinon.assert.neverCalledWithMatch()": "assertions.html#sinonassertnevercalledwithmatchspy-arg1-arg2-", "sinon.assert.notCalled()": "assertions.html#sinonassertnotcalledspy", "sinon.assert.pass()": "assertions.html#sinonassertpassassertion", "sinon.assert.threw()": "assertions.html#sinonassertthrewspyorspycall-exception", "sinon.createSandbox()": "sandbox.html#var-sandbox--sinoncreatesandbox", "sinon.createStubInstance()": "utils.html#sinoncreatestubinstanceconstructor", "sinon.expectation.create()": "mocks.html#var-expectation--sinonexpectationcreatemethodname", "sinon.fake()": "fakes.html#sinonfakefunc", "sinon.fake.rejects()": "fakes.html#sinonfakerejectsvalue", "sinon.fake.resolves()": "fakes.html#sinonfakeresolvesvalue", "sinon.fake.returns()": "fakes.html#sinonfakereturnsvalue", "sinon.fake.throws()": "fakes.html#sinonfakethrowsvalue", "sinon.fake.yields()": "fakes.html#sinonfakeyieldsvalue1--valuen", "sinon.fake.yieldsAsync()": "fakes.html#sinonfakeyieldsasyncvalue1--valuen", "sinon.fakeServer.create()": "fake-xhr-and-server.html#var-server--sinonfakeservercreateconfig", "sinon.fakeServerWithClock.create()": "fake-xhr-and-server.html#var-server--sinonfakeserverwithclockcreate", "sinon.match()": "matchers.html#sinonmatchnumber", "sinon.match.any": "matchers.html#sinonmatchany", "sinon.match.array": "matchers.html#sinonmatcharray", "sinon.match.array.contains()": "matchers.html#sinonmatcharraycontainsarr", "sinon.match.array.deepEquals()": "matchers.html#sinonmatcharraydeepequalsarr", "sinon.match.array.endsWith()": "matchers.html#sinonmatcharrayendswitharr", "sinon.match.array.startsWith()": "matchers.html#sinonmatcharraystartswitharr", "sinon.match.bool": "matchers.html#sinonmatchbool", "sinon.match.date": "matchers.html#sinonmatchdate", "sinon.match.defined": "matchers.html#sinonmatchdefined", "sinon.match.every()": "matchers.html#sinonmatcheverymatcher", "sinon.match.falsy": "matchers.html#sinonmatchfalsy", "sinon.match.func": "matchers.html#sinonmatchfunc", "sinon.match.has()": "matchers.html#sinonmatchhasproperty-expectation", "sinon.match.hasNested()": "matchers.html#sinonmatchhasnestedpropertypath-expectation", "sinon.match.hasOwn()": "matchers.html#sinonmatchhasownproperty-expectation", "sinon.match.in()": "matchers.html#sinonmatchinarray", "sinon.match.instanceOf()": "matchers.html#sinonmatchinstanceoftype", "sinon.match.map": "matchers.html#sinonmatchmap", "sinon.match.map.contains()": "matchers.html#sinonmatchmapcontainsmap", "sinon.match.map.deepEquals()": "matchers.html#sinonmatchmapdeepequalsmap", "sinon.match.number": "matchers.html#sinonmatchnumber-1", "sinon.match.object": "matchers.html#sinonmatchobject-1", "sinon.match.regexp": "matchers.html#sinonmatchregexp-1", "sinon.match.same()": "matchers.html#sinonmatchsameref", "sinon.match.set": "matchers.html#sinonmatchset", "sinon.match.set.contains()": "matchers.html#sinonmatchsetcontainsset", "sinon.match.set.deepEquals()": "matchers.html#sinonmatchsetdeepequalsset", "sinon.match.some()": "matchers.html#sinonmatchsomematcher", "sinon.match.string": "matchers.html#sinonmatchstring-1", "sinon.match.symbol": "matchers.html#sinonmatchsymbol", "sinon.match.truthy": "matchers.html#sinonmatchtruthy", "sinon.match.typeOf()": "matchers.html#sinonmatchtypeoftype", "sinon.mock()": "mocks.html#var-mock--sinonmockobj", "sinon.stub()": "stubs.html#var-stub--sinonstub", "sinon.useFakeTimers()": "fake-timers.html#var-clock--sinonusefaketimers", "sinon.useFakeXMLHttpRequest()": "fake-xhr-and-server.html#var-xhr--sinonusefakexmlhttprequest", "Spies": "spies.html", "Spy call": "spy-call.html", "spy.alwaysCalledOn()": "spies.html#spyalwayscalledonobj", "spy.alwaysCalledWith()": "spies.html#spyalwayscalledwitharg1-arg2-", "spy.alwaysCalledWithExactly()": "spies.html#spyalwayscalledwithexactlyarg1-arg2-", "spy.alwaysCalledWithMatch()": "spies.html#spyalwayscalledwithmatcharg1-arg2-", "spy.alwaysReturned()": "spies.html#spyalwaysreturnedobj", "spy.alwaysThrew()": "spies.html#spyalwaysthrew", "spy.args": "spies.html#spyargs", "spy.callCount": "spies.html#spycallcount", "spy.called": "spies.html#spycalled", "spy.calledAfter()": "spies.html#spycalledafteranotherspy", "spy.calledBefore()": "spies.html#spycalledbeforeanotherspy", "spy.calledImmediatelyAfter()": "spies.html#spycalledimmediatelyafteranotherspy", "spy.calledImmediatelyBefore()": "spies.html#spycalledimmediatelybeforeanotherspy", "spy.calledOn()": "spies.html#spycalledonobj", "spy.calledOnce": "spies.html#spycalledonce", "spy.calledOnceWith()": "spies.html#spycalledoncewitharg1-arg2-", "spy.calledOnceWithExactly()": "spies.html#spycalledoncewithexactlyarg1-arg2-", "spy.calledThrice": "spies.html#spycalledthrice", "spy.calledTwice": "spies.html#spycalledtwice", "spy.calledWith()": "spies.html#spycalledwitharg1-arg2-", "spy.calledWithExactly()": "spies.html#spycalledwithexactlyarg1-arg2-", "spy.calledWithMatch()": "spies.html#spycalledwithmatcharg1-arg2-", "spy.calledWithNew()": "spies.html#spycalledwithnew", "spy.exceptions": "spies.html#spyexceptions", "spy.firstCall": "spies.html#spyfirstcall", "spy.getCall()": "spies.html#var-spycall--spygetcalln", "spy.getCalls()": "spies.html#var-spycalls--spygetcalls", "spy.lastCall": "spies.html#spylastcall", "spy.neverCalledWith()": "spies.html#spynevercalledwitharg1-arg2-", "spy.neverCalledWithMatch()": "spies.html#spynevercalledwithmatcharg1-arg2-", "spy.notCalled": "spies.html#spynotcalled", "spy.printf()": "spies.html#spyprintfformat-string-arg1-arg2-", "spy.resetHistory()": "spies.html#spyresethistory", "spy.restore()": "spies.html#spyrestore", "spy.returned()": "spies.html#spyreturnedobj", "spy.returnValues": "spies.html#spyreturnvalues", "spy.secondCall": "spies.html#spysecondcall", "spy.thirdCall": "spies.html#spythirdcall", "spy.thisValues": "spies.html#spythisvalues", "spy.threw()": "spies.html#spythrew", "spy.withArgs()": "spies.html#spywithargsarg1-arg2-", "spyCall.firstArg": "spy-call.html#spycallfirstarg", "spyCall.lastArg": "spy-call.html#spycalllastarg", "stub.callArg()": "stubs.html#stubcallargargnum", "stub.callArgWith()": "stubs.html#stubcallargwithargnum-arg1-arg2-", "stub.callsArg()": "stubs.html#stubcallsargindex", "stub.callsArgOn()": "stubs.html#stubcallsargonindex-context", "stub.callsArgOnWith()": "stubs.html#stubcallsargonwithindex-context-arg1-arg2-", "stub.callsArgWith()": "stubs.html#stubcallsargwithindex-arg1-arg2-", "stub.callsFake()": "stubs.html#stubcallsfakefakefunction", "stub.callThrough()": "stubs.html#stubcallthrough", "stub.callThroughWithNew()": "stubs.html#stubcallthroughwithnew", "stub.get()": "stubs.html#stubgetgetterfn", "stub.onCall()": "stubs.html#stuboncalln-added-in-v18", "stub.onFirstCall()": "stubs.html#stubonfirstcall", "stub.onSecondCall()": "stubs.html#stubonsecondcall", "stub.onThirdCall()": "stubs.html#stubonthirdcall", "stub.rejects()": "stubs.html#stubrejects", "stub.reset()": "stubs.html#stubreset", "stub.resetBehavior()": "stubs.html#stubresetbehavior", "stub.resetHistory()": "stubs.html#stubresethistory", "stub.resolves()": "stubs.html#stubresolvesvalue", "stub.resolvesArg()": "stubs.html#stubresolvesargindex", "stub.returns()": "stubs.html#stubreturnsobj", "stub.returnsArg()": "stubs.html#stubreturnsargindex", "stub.returnsThis()": "stubs.html#stubreturnsthis", "stub.set()": "stubs.html#stubsetsetterfn", "stub.throws()": "stubs.html#stubthrows", "stub.throwsArg()": "stubs.html#stubthrowsargindex", "stub.usingPromise()": "stubs.html#stubusingpromisepromiselibrary", "stub.value()": "stubs.html#stubvaluenewval", "stub.withArgs()": "stubs.html#stubwithargsarg1-arg2-", "stub.wrappedMethod": "stubs.html#stubwrappedmethod", "stub.yield()": "stubs.html#stubyieldarg1-arg2-", "stub.yields()": "stubs.html#stubyieldsarg1-arg2-", "stub.yieldsOn()": "stubs.html#stubyieldsoncontext-arg1-arg2-", "stub.yieldsRight()": "stubs.html#stubyieldsrightarg1-arg2-", "stub.yieldsTo()": "stubs.html#stubyieldstoproperty-arg1-arg2-", "stub.yieldsToOn()": "stubs.html#stubyieldstoonproperty-context-arg1-arg2-", "stub.yieldTo()": "stubs.html#stubyieldtocallback-arg1-arg2-", "Stubs": "stubs.html", "Utilities": "utils.html", "xhr.onCreate": "fake-xhr-and-server.html#xhroncreate--function-xhr-", "xhr.restore()": "fake-xhr-and-server.html#xhrrestore"}