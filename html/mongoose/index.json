{"Aggregate": "api/aggregate.html", "Aggregate()": "api/aggregate.html#Aggregate()", "Aggregate.prototype.addFields()": "api/aggregate.html#Aggregate.prototype.addFields()", "Aggregate.prototype.allowDiskUse()": "api/aggregate.html#Aggregate.prototype.allowDiskUse()", "Aggregate.prototype.append()": "api/aggregate.html#Aggregate.prototype.append()", "Aggregate.prototype.catch()": "api/aggregate.html#Aggregate.prototype.catch()", "Aggregate.prototype.collation()": "api/aggregate.html#Aggregate.prototype.collation()", "Aggregate.prototype.count()": "api/aggregate.html#Aggregate.prototype.count()", "Aggregate.prototype.cursor()": "api/aggregate.html#Aggregate.prototype.cursor()", "Aggregate.prototype.densify()": "api/aggregate.html#Aggregate.prototype.densify()", "Aggregate.prototype.exec()": "api/aggregate.html#Aggregate.prototype.exec()", "Aggregate.prototype.explain()": "api/aggregate.html#Aggregate.prototype.explain()", "Aggregate.prototype.facet()": "api/aggregate.html#Aggregate.prototype.facet()", "Aggregate.prototype.fill()": "api/aggregate.html#Aggregate.prototype.fill()", "Aggregate.prototype.finally()": "api/aggregate.html#Aggregate.prototype.finally()", "Aggregate.prototype.graphLookup()": "api/aggregate.html#Aggregate.prototype.graphLookup()", "Aggregate.prototype.group()": "api/aggregate.html#Aggregate.prototype.group()", "Aggregate.prototype.hint()": "api/aggregate.html#Aggregate.prototype.hint()", "Aggregate.prototype.limit()": "api/aggregate.html#Aggregate.prototype.limit()", "Aggregate.prototype.lookup()": "api/aggregate.html#Aggregate.prototype.lookup()", "Aggregate.prototype.match()": "api/aggregate.html#Aggregate.prototype.match()", "Aggregate.prototype.model()": "api/aggregate.html#Aggregate.prototype.model()", "Aggregate.prototype.near()": "api/aggregate.html#Aggregate.prototype.near()", "Aggregate.prototype.option()": "api/aggregate.html#Aggregate.prototype.option()", "Aggregate.prototype.options": "api/aggregate.html#Aggregate.prototype.options", "Aggregate.prototype.pipeline()": "api/aggregate.html#Aggregate.prototype.pipeline()", "Aggregate.prototype.project()": "api/aggregate.html#Aggregate.prototype.project()", "Aggregate.prototype.read()": "api/aggregate.html#Aggregate.prototype.read()", "Aggregate.prototype.readConcern()": "api/aggregate.html#Aggregate.prototype.readConcern()", "Aggregate.prototype.redact()": "api/aggregate.html#Aggregate.prototype.redact()", "Aggregate.prototype.replaceRoot()": "api/aggregate.html#Aggregate.prototype.replaceRoot()", "Aggregate.prototype.sample()": "api/aggregate.html#Aggregate.prototype.sample()", "Aggregate.prototype.search()": "api/aggregate.html#Aggregate.prototype.search()", "Aggregate.prototype.session()": "api/aggregate.html#Aggregate.prototype.session()", "Aggregate.prototype.skip()": "api/aggregate.html#Aggregate.prototype.skip()", "Aggregate.prototype.sort()": "api/aggregate.html#Aggregate.prototype.sort()", "Aggregate.prototype.sortByCount()": "api/aggregate.html#Aggregate.prototype.sortByCount()", "Aggregate.prototype.then()": "api/aggregate.html#Aggregate.prototype.then()", "Aggregate.prototype.unionWith()": "api/aggregate.html#Aggregate.prototype.unionWith()", "Aggregate.prototype.unwind()": "api/aggregate.html#Aggregate.prototype.unwind()", "Aggregate.prototype[Symbol.asyncIterator]()": "api/aggregate.html#Aggregate.prototype[Symbol.asyncIterator]()", "AggregationCursor": "api/aggregationcursor.html", "AggregationCursor()": "api/aggregationcursor.html#AggregationCursor()", "AggregationCursor.prototype.addCursorFlag()": "api/aggregationcursor.html#AggregationCursor.prototype.addCursorFlag()", "AggregationCursor.prototype.close()": "api/aggregationcursor.html#AggregationCursor.prototype.close()", "AggregationCursor.prototype.eachAsync()": "api/aggregationcursor.html#AggregationCursor.prototype.eachAsync()", "AggregationCursor.prototype.map()": "api/aggregationcursor.html#AggregationCursor.prototype.map()", "AggregationCursor.prototype.next()": "api/aggregationcursor.html#AggregationCursor.prototype.next()", "AggregationCursor.prototype[Symbol.asyncIterator]()": "api/aggregationcursor.html#AggregationCursor.prototype[Symbol.asyncIterator]()", "Array": "api/array.html", "Arrays": "schematypes.html#arrays", "ArraySubdocument": "api/arraysubdocument.html", "ArraySubdocument.prototype.$parent()": "api/arraysubdocument.html#ArraySubdocument.prototype.$parent()", "ArraySubdocument.prototype.parentArray()": "api/arraysubdocument.html#ArraySubdocument.prototype.parentArray()", "BigInt": "schematypes.html#bigint", "Boolean": "schematypes.html#booleans", "Buffer": "schematypes.html#buffers", "Connection": "api/connection.html", "Connection()": "api/connection.html#Connection()", "Connection.prototype.asPromise()": "api/connection.html#Connection.prototype.asPromise()", "Connection.prototype.client": "api/connection.html#Connection.prototype.client", "Connection.prototype.close()": "api/connection.html#Connection.prototype.close()", "Connection.prototype.collection()": "api/connection.html#Connection.prototype.collection()", "Connection.prototype.collections": "api/connection.html#Connection.prototype.collections", "Connection.prototype.config": "api/connection.html#Connection.prototype.config", "Connection.prototype.createCollection()": "api/connection.html#Connection.prototype.createCollection()", "Connection.prototype.createCollections()": "api/connection.html#Connection.prototype.createCollections()", "Connection.prototype.db": "api/connection.html#Connection.prototype.db", "Connection.prototype.deleteModel()": "api/connection.html#Connection.prototype.deleteModel()", "Connection.prototype.destroy()": "api/connection.html#Connection.prototype.destroy()", "Connection.prototype.dropCollection()": "api/connection.html#Connection.prototype.dropCollection()", "Connection.prototype.dropDatabase()": "api/connection.html#Connection.prototype.dropDatabase()", "Connection.prototype.get()": "api/connection.html#Connection.prototype.get()", "Connection.prototype.getClient()": "api/connection.html#Connection.prototype.getClient()", "Connection.prototype.host": "api/connection.html#Connection.prototype.host", "Connection.prototype.id": "api/connection.html#Connection.prototype.id", "Connection.prototype.model()": "api/connection.html#Connection.prototype.model()", "Connection.prototype.modelNames()": "api/connection.html#Connection.prototype.modelNames()", "Connection.prototype.models": "api/connection.html#Connection.prototype.models", "Connection.prototype.name": "api/connection.html#Connection.prototype.name", "Connection.prototype.openUri()": "api/connection.html#Connection.prototype.openUri()", "Connection.prototype.pass": "api/connection.html#Connection.prototype.pass", "Connection.prototype.plugin()": "api/connection.html#Connection.prototype.plugin()", "Connection.prototype.plugins": "api/connection.html#Connection.prototype.plugins", "Connection.prototype.port": "api/connection.html#Connection.prototype.port", "Connection.prototype.readyState": "api/connection.html#Connection.prototype.readyState", "Connection.prototype.removeDb()": "api/connection.html#Connection.prototype.removeDb()", "Connection.prototype.set()": "api/connection.html#Connection.prototype.set()", "Connection.prototype.setClient()": "api/connection.html#Connection.prototype.setClient()", "Connection.prototype.startSession()": "api/connection.html#Connection.prototype.startSession()", "Connection.prototype.syncIndexes()": "api/connection.html#Connection.prototype.syncIndexes()", "Connection.prototype.transaction()": "api/connection.html#Connection.prototype.transaction()", "Connection.prototype.useDb()": "api/connection.html#Connection.prototype.useDb()", "Connection.prototype.user": "api/connection.html#Connection.prototype.user", "Connection.prototype.watch()": "api/connection.html#Connection.prototype.watch()", "Connections": "4.x/docs/connections.html", "Custom Schema Types": "customschematypes.html", "Dates": "schematypes.html#dates", "Decimal128": "api/decimal128.html", "Decimal128()": "api/decimal128.html#Decimal128()", "Defaults": "defaults.html", "Discriminators": "discriminators.html", "Document": "api/document.html", "Document.prototype.$assertPopulated()": "api/document.html#Document.prototype.$assertPopulated()", "Document.prototype.$clone()": "api/document.html#Document.prototype.$clone()", "Document.prototype.$errors": "api/document.html#Document.prototype.$errors", "Document.prototype.$getAllSubdocs()": "api/document.html#Document.prototype.$getAllSubdocs()", "Document.prototype.$getPopulatedDocs()": "api/document.html#Document.prototype.$getPopulatedDocs()", "Document.prototype.$ignore()": "api/document.html#Document.prototype.$ignore()", "Document.prototype.$inc()": "api/document.html#Document.prototype.$inc()", "Document.prototype.$init()": "api/document.html#Document.prototype.$init()", "Document.prototype.$isDefault()": "api/document.html#Document.prototype.$isDefault()", "Document.prototype.$isDeleted()": "api/document.html#Document.prototype.$isDeleted()", "Document.prototype.$isEmpty()": "api/document.html#Document.prototype.$isEmpty()", "Document.prototype.$isModified()": "api/document.html#Document.prototype.$isModified()", "Document.prototype.$isNew": "api/document.html#Document.prototype.$isNew", "Document.prototype.$locals": "api/document.html#Document.prototype.$locals", "Document.prototype.$markValid()": "api/document.html#Document.prototype.$markValid()", "Document.prototype.$op": "api/document.html#Document.prototype.$op", "Document.prototype.$parent()": "api/document.html#Document.prototype.$parent()", "Document.prototype.$populated()": "api/document.html#Document.prototype.$populated()", "Document.prototype.$session()": "api/document.html#Document.prototype.$session()", "Document.prototype.$set()": "api/document.html#Document.prototype.$set()", "Document.prototype.$timestamps()": "api/document.html#Document.prototype.$timestamps()", "Document.prototype.$validate()": "api/document.html#Document.prototype.$validate()", "Document.prototype.$where": "api/document.html#Document.prototype.$where", "Document.prototype.depopulate()": "api/document.html#Document.prototype.depopulate()", "Document.prototype.directModifiedPaths()": "api/document.html#Document.prototype.directModifiedPaths()", "Document.prototype.equals()": "api/document.html#Document.prototype.equals()", "Document.prototype.errors": "api/document.html#Document.prototype.errors", "Document.prototype.get()": "api/document.html#Document.prototype.get()", "Document.prototype.getChanges()": "api/document.html#Document.prototype.getChanges()", "Document.prototype.id": "api/document.html#Document.prototype.id", "Document.prototype.init()": "api/document.html#Document.prototype.init()", "Document.prototype.inspect()": "api/document.html#Document.prototype.inspect()", "Document.prototype.invalidate()": "api/document.html#Document.prototype.invalidate()", "Document.prototype.isDirectModified()": "api/document.html#Document.prototype.isDirectModified()", "Document.prototype.isDirectSelected()": "api/document.html#Document.prototype.isDirectSelected()", "Document.prototype.isInit()": "api/document.html#Document.prototype.isInit()", "Document.prototype.isModified()": "api/document.html#Document.prototype.isModified()", "Document.prototype.isNew": "api/document.html#Document.prototype.isNew", "Document.prototype.isSelected()": "api/document.html#Document.prototype.isSelected()", "Document.prototype.markModified()": "api/document.html#Document.prototype.markModified()", "Document.prototype.modifiedPaths()": "api/document.html#Document.prototype.modifiedPaths()", "Document.prototype.overwrite()": "api/document.html#Document.prototype.overwrite()", "Document.prototype.parent()": "api/document.html#Document.prototype.parent()", "Document.prototype.populate()": "api/document.html#Document.prototype.populate()", "Document.prototype.populated()": "api/document.html#Document.prototype.populated()", "Document.prototype.replaceOne()": "api/document.html#Document.prototype.replaceOne()", "Document.prototype.save()": "api/document.html#Document.prototype.save()", "Document.prototype.schema": "api/document.html#Document.prototype.schema", "Document.prototype.set()": "api/document.html#Document.prototype.set()", "Document.prototype.toJSON()": "api/document.html#Document.prototype.toJSON()", "Document.prototype.toObject()": "api/document.html#Document.prototype.toObject()", "Document.prototype.toString()": "api/document.html#Document.prototype.toString()", "Document.prototype.unmarkModified()": "api/document.html#Document.prototype.unmarkModified()", "Document.prototype.updateOne()": "api/document.html#Document.prototype.updateOne()", "Document.prototype.validate()": "api/document.html#Document.prototype.validate()", "Document.prototype.validateSync()": "api/document.html#Document.prototype.validateSync()", "DocumentArrayPath": "api/documentarraypath.html", "DocumentArrayPath()": "api/documentarraypath.html#DocumentArrayPath()", "DocumentArrayPath.get()": "api/documentarraypath.html#DocumentArrayPath.get()", "DocumentArrayPath.options": "api/documentarraypath.html#DocumentArrayPath.options", "DocumentArrayPath.prototype.discriminator()": "api/documentarraypath.html#DocumentArrayPath.prototype.discriminator()", "DocumentArrayPath.schemaName": "api/documentarraypath.html#DocumentArrayPath.schemaName", "DocumentArrayPath.set()": "api/documentarraypath.html#DocumentArrayPath.set()", "Documents": "4.x/docs/documents.html", "Error": "api/error.html", "Error()": "api/error.html#Error()", "Error.CastError": "api/error.html#Error.CastError", "Error.DivergentArrayError": "api/error.html#Error.DivergentArrayError", "Error.DocumentNotFoundError": "api/error.html#Error.DocumentNotFoundError", "Error.messages": "api/error.html#Error.messages", "Error.MissingSchemaError": "api/error.html#Error.MissingSchemaError", "Error.MongooseServerSelectionError": "api/error.html#Error.MongooseServerSelectionError", "Error.OverwriteModelError": "api/error.html#Error.OverwriteModelError", "Error.ParallelSaveError": "api/error.html#Error.ParallelSaveError", "Error.prototype.name": "api/error.html#Error.prototype.name", "Error.StrictModeError": "api/error.html#Error.StrictModeError", "Error.StrictPopulateError": "api/error.html#Error.StrictPopulateError", "Error.ValidationError": "api/error.html#Error.ValidationError", "Error.ValidatorError": "api/error.html#Error.ValidatorError", "Error.VersionError": "api/error.html#Error.VersionError", "Example:": "api/schematype.html#example", "Faster Mongoose Queries With Lean": "tutorials/lean.html", "Getters/Setters in Mongoose": "tutorials/getters-setters.html", "Getting Started": "4.x/docs/index.html", "How to Use findOneAndUpdate() in Mongoose": "tutorials/findoneandupdate.html", "Map": "api/map.html", "Maps": "schematypes.html#maps", "Middleware": "4.x/docs/middleware.html", "Migrating from 3.x to 4.x": "4.x/docs/migration.html", "Migrating from 4.x to 5.x": "migrating_to_5.html", "Migrating from 5.x to 6.x": "migrating_to_6.html", "Migrating from 6.x to 7.x": "migrating_to_7.html", "Mixed": "schematypes.html#mixed", "Model": "api/model.html", "Model()": "api/model.html#Model()", "Model.$where()": "api/model.html#Model.$where()", "Model.aggregate()": "api/model.html#Model.aggregate()", "Model.applyDefaults()": "api/model.html#Model.applyDefaults()", "Model.bulkSave()": "api/model.html#Model.bulkSave()", "Model.bulkWrite()": "api/model.html#Model.bulkWrite()", "Model.castObject()": "api/model.html#Model.castObject()", "Model.cleanIndexes()": "api/model.html#Model.cleanIndexes()", "Model.count()": "api/model.html#Model.count()", "Model.countDocuments()": "api/model.html#Model.countDocuments()", "Model.create()": "api/model.html#Model.create()", "Model.createCollection()": "api/model.html#Model.createCollection()", "Model.createIndexes()": "api/model.html#Model.createIndexes()", "Model.db": "api/model.html#Model.db", "Model.deleteMany()": "api/model.html#Model.deleteMany()", "Model.deleteOne()": "api/model.html#Model.deleteOne()", "Model.diffIndexes()": "api/model.html#Model.diffIndexes()", "Model.discriminator()": "api/model.html#Model.discriminator()", "Model.distinct()": "api/model.html#Model.distinct()", "Model.ensureIndexes()": "api/model.html#Model.ensureIndexes()", "Model.estimatedDocumentCount()": "api/model.html#Model.estimatedDocumentCount()", "Model.events": "api/model.html#Model.events", "Model.exists()": "api/model.html#Model.exists()", "Model.find()": "api/model.html#Model.find()", "Model.findById()": "api/model.html#Model.findById()", "Model.findByIdAndDelete()": "api/model.html#Model.findByIdAndDelete()", "Model.findByIdAndRemove()": "api/model.html#Model.findByIdAndRemove()", "Model.findByIdAndUpdate()": "api/model.html#Model.findByIdAndUpdate()", "Model.findOne()": "api/model.html#Model.findOne()", "Model.findOneAndDelete()": "api/model.html#Model.findOneAndDelete()", "Model.findOneAndRemove()": "api/model.html#Model.findOneAndRemove()", "Model.findOneAndReplace()": "api/model.html#Model.findOneAndReplace()", "Model.findOneAndUpdate()": "api/model.html#Model.findOneAndUpdate()", "Model.hydrate()": "api/model.html#Model.hydrate()", "Model.init()": "api/model.html#Model.init()", "Model.insertMany()": "api/model.html#Model.insertMany()", "Model.inspect()": "api/model.html#Model.inspect()", "Model.listIndexes()": "api/model.html#Model.listIndexes()", "Model.populate()": "api/model.html#Model.populate()", "Model.prototype.$model()": "api/model.html#Model.prototype.$model()", "Model.prototype.$where": "api/model.html#Model.prototype.$where", "Model.prototype.base": "api/model.html#Model.prototype.base", "Model.prototype.baseModelName": "api/model.html#Model.prototype.baseModelName", "Model.prototype.collection": "api/model.html#Model.prototype.collection", "Model.prototype.db": "api/model.html#Model.prototype.db", "Model.prototype.deleteOne()": "api/model.html#Model.prototype.deleteOne()", "Model.prototype.discriminators": "api/model.html#Model.prototype.discriminators", "Model.prototype.increment()": "api/model.html#Model.prototype.increment()", "Model.prototype.model()": "api/model.html#Model.prototype.model()", "Model.prototype.modelName": "api/model.html#Model.prototype.modelName", "Model.prototype.save()": "api/model.html#Model.prototype.save()", "Model.replaceOne()": "api/model.html#Model.replaceOne()", "Model.schema": "api/model.html#Model.schema", "Model.startSession()": "api/model.html#Model.startSession()", "Model.syncIndexes()": "api/model.html#Model.syncIndexes()", "Model.translateAliases()": "api/model.html#Model.translateAliases()", "Model.updateMany()": "api/model.html#Model.updateMany()", "Model.updateOne()": "api/model.html#Model.updateOne()", "Model.validate()": "api/model.html#Model.validate()", "Model.watch()": "api/model.html#Model.watch()", "Model.where()": "api/model.html#Model.where()", "Models": "4.x/docs/models.html", "Mongoose": "api/mongoose.html", "Mongoose Virtuals": "tutorials/virtuals.html", "Mongoose()": "api/mongoose.html#Mongoose()", "Mongoose.prototype.Aggregate()": "api/mongoose.html#Mongoose.prototype.Aggregate()", "Mongoose.prototype.CastError()": "api/mongoose.html#Mongoose.prototype.CastError()", "Mongoose.prototype.Collection()": "api/mongoose.html#Mongoose.prototype.Collection()", "Mongoose.prototype.connect()": "api/mongoose.html#Mongoose.prototype.connect()", "Mongoose.prototype.connection": "api/mongoose.html#Mongoose.prototype.connection", "Mongoose.prototype.Connection()": "api/mongoose.html#Mongoose.prototype.Connection()", "Mongoose.prototype.connections": "api/mongoose.html#Mongoose.prototype.connections", "Mongoose.prototype.ConnectionStates": "api/mongoose.html#Mongoose.prototype.ConnectionStates", "Mongoose.prototype.createConnection()": "api/mongoose.html#Mongoose.prototype.createConnection()", "Mongoose.prototype.Date": "api/mongoose.html#Mongoose.prototype.Date", "Mongoose.prototype.Decimal128": "api/mongoose.html#Mongoose.prototype.Decimal128", "Mongoose.prototype.deleteModel()": "api/mongoose.html#Mongoose.prototype.deleteModel()", "Mongoose.prototype.disconnect()": "api/mongoose.html#Mongoose.prototype.disconnect()", "Mongoose.prototype.Document()": "api/mongoose.html#Mongoose.prototype.Document()", "Mongoose.prototype.DocumentProvider()": "api/mongoose.html#Mongoose.prototype.DocumentProvider()", "Mongoose.prototype.driver": "api/mongoose.html#Mongoose.prototype.driver", "Mongoose.prototype.Error()": "api/mongoose.html#Mongoose.prototype.Error()", "Mongoose.prototype.get()": "api/mongoose.html#Mongoose.prototype.get()", "Mongoose.prototype.isObjectIdOrHexString()": "api/mongoose.html#Mongoose.prototype.isObjectIdOrHexString()", "Mongoose.prototype.isValidObjectId()": "api/mongoose.html#Mongoose.prototype.isValidObjectId()", "Mongoose.prototype.Mixed": "api/mongoose.html#Mongoose.prototype.Mixed", "Mongoose.prototype.Model()": "api/mongoose.html#Mongoose.prototype.Model()", "Mongoose.prototype.model()": "api/mongoose.html#Mongoose.prototype.model()", "Mongoose.prototype.modelNames()": "api/mongoose.html#Mongoose.prototype.modelNames()", "Mongoose.prototype.mongo": "api/mongoose.html#Mongoose.prototype.mongo", "Mongoose.prototype.Mongoose()": "api/mongoose.html#Mongoose.prototype.Mongoose()", "Mongoose.prototype.mquery": "api/mongoose.html#Mongoose.prototype.mquery", "Mongoose.prototype.now()": "api/mongoose.html#Mongoose.prototype.now()", "Mongoose.prototype.Number": "api/mongoose.html#Mongoose.prototype.Number", "Mongoose.prototype.ObjectId": "api/mongoose.html#Mongoose.prototype.ObjectId", "Mongoose.prototype.overwriteMiddlewareResult()": "api/mongoose.html#Mongoose.prototype.overwriteMiddlewareResult()", "Mongoose.prototype.plugin()": "api/mongoose.html#Mongoose.prototype.plugin()", "Mongoose.prototype.pluralize()": "api/mongoose.html#Mongoose.prototype.pluralize()", "Mongoose.prototype.Query()": "api/mongoose.html#Mongoose.prototype.Query()", "Mongoose.prototype.sanitizeFilter()": "api/mongoose.html#Mongoose.prototype.sanitizeFilter()", "Mongoose.prototype.Schema()": "api/mongoose.html#Mongoose.prototype.Schema()", "Mongoose.prototype.SchemaType()": "api/mongoose.html#Mongoose.prototype.SchemaType()", "Mongoose.prototype.SchemaTypeOptions()": "api/mongoose.html#Mongoose.prototype.SchemaTypeOptions()", "Mongoose.prototype.SchemaTypes": "api/mongoose.html#Mongoose.prototype.SchemaTypes", "Mongoose.prototype.set()": "api/mongoose.html#Mongoose.prototype.set()", "Mongoose.prototype.setDriver()": "api/mongoose.html#Mongoose.prototype.setDriver()", "Mongoose.prototype.skipMiddlewareFunction()": "api/mongoose.html#Mongoose.prototype.skipMiddlewareFunction()", "Mongoose.prototype.startSession()": "api/mongoose.html#Mongoose.prototype.startSession()", "Mongoose.prototype.STATES": "api/mongoose.html#Mongoose.prototype.STATES", "Mongoose.prototype.syncIndexes()": "api/mongoose.html#Mongoose.prototype.syncIndexes()", "Mongoose.prototype.trusted()": "api/mongoose.html#Mongoose.prototype.trusted()", "Mongoose.prototype.Types": "api/mongoose.html#Mongoose.prototype.Types", "Mongoose.prototype.version": "api/mongoose.html#Mongoose.prototype.version", "Mongoose.prototype.VirtualType()": "api/mongoose.html#Mongoose.prototype.VirtualType()", "MongooseArray.prototype.$pop()": "api/array.html#MongooseArray.prototype.$pop()", "MongooseArray.prototype.$shift()": "api/array.html#MongooseArray.prototype.$shift()", "MongooseArray.prototype.addToSet()": "api/array.html#MongooseArray.prototype.addToSet()", "MongooseArray.prototype.includes()": "api/array.html#MongooseArray.prototype.includes()", "MongooseArray.prototype.indexOf()": "api/array.html#MongooseArray.prototype.indexOf()", "MongooseArray.prototype.inspect()": "api/array.html#MongooseArray.prototype.inspect()", "MongooseArray.prototype.nonAtomicPush()": "api/array.html#MongooseArray.prototype.nonAtomicPush()", "MongooseArray.prototype.pop()": "api/array.html#MongooseArray.prototype.pop()", "MongooseArray.prototype.pull()": "api/array.html#MongooseArray.prototype.pull()", "MongooseArray.prototype.push()": "api/array.html#MongooseArray.prototype.push()", "MongooseArray.prototype.remove()": "api/array.html#MongooseArray.prototype.remove()", "MongooseArray.prototype.set()": "api/array.html#MongooseArray.prototype.set()", "MongooseArray.prototype.shift()": "api/array.html#MongooseArray.prototype.shift()", "MongooseArray.prototype.sort()": "api/array.html#MongooseArray.prototype.sort()", "MongooseArray.prototype.splice()": "api/array.html#MongooseArray.prototype.splice()", "MongooseArray.prototype.toObject()": "api/array.html#MongooseArray.prototype.toObject()", "MongooseArray.prototype.unshift()": "api/array.html#MongooseArray.prototype.unshift()", "MongooseBuffer.mixin.copy()": "api/buffer.html#MongooseBuffer.mixin.copy()", "MongooseBuffer.mixin.equals()": "api/buffer.html#MongooseBuffer.mixin.equals()", "MongooseBuffer.mixin.subtype()": "api/buffer.html#MongooseBuffer.mixin.subtype()", "MongooseBuffer.mixin.toBSON()": "api/buffer.html#MongooseBuffer.mixin.toBSON()", "MongooseBuffer.mixin.toObject()": "api/buffer.html#MongooseBuffer.mixin.toObject()", "MongooseBuffer.mixin.write()": "api/buffer.html#MongooseBuffer.mixin.write()", "MongooseDocumentArray": "api/mongoosedocumentarray.html", "MongooseDocumentArray.prototype.create()": "api/mongoosedocumentarray.html#MongooseDocumentArray.prototype.create()", "MongooseDocumentArray.prototype.id()": "api/mongoosedocumentarray.html#MongooseDocumentArray.prototype.id()", "MongooseDocumentArray.prototype.inspect()": "api/mongoosedocumentarray.html#MongooseDocumentArray.prototype.inspect()", "MongooseDocumentArray.prototype.pull()": "api/mongoosedocumentarray.html#MongooseDocumentArray.prototype.pull()", "MongooseDocumentArray.prototype.push()": "api/mongoosedocumentarray.html#MongooseDocumentArray.prototype.push()", "MongooseDocumentArray.prototype.toObject()": "api/mongoosedocumentarray.html#MongooseDocumentArray.prototype.toObject()", "MongooseMap.prototype.$isMongooseMap": "api/map.html#MongooseMap.prototype.$isMongooseMap", "MongooseMap.prototype.clear()": "api/map.html#MongooseMap.prototype.clear()", "MongooseMap.prototype.delete()": "api/map.html#MongooseMap.prototype.delete()", "MongooseMap.prototype.get()": "api/map.html#MongooseMap.prototype.get()", "MongooseMap.prototype.set()": "api/map.html#MongooseMap.prototype.set()", "MongooseMap.prototype.toBSON()": "api/map.html#MongooseMap.prototype.toBSON()", "MongooseMap.prototype.toJSON()": "api/map.html#MongooseMap.prototype.toJSON()", "Number": "schematypes.html#numbers", "ObjectId()": "api/schemaobjectid.html#ObjectId()", "ObjectId.checkRequired()": "api/schemaobjectid.html#ObjectId.checkRequired()", "ObjectId.get()": "api/schemaobjectid.html#ObjectId.get()", "ObjectId.prototype.auto()": "api/schemaobjectid.html#ObjectId.prototype.auto()", "ObjectId.prototype.checkRequired()": "api/schemaobjectid.html#ObjectId.prototype.checkRequired()", "ObjectId.schemaName": "api/schemaobjectid.html#ObjectId.schemaName", "ObjectId.set()": "api/schemaobjectid.html#ObjectId.set()", "ObjectIds": "schematypes.html#objectids", "Plugins": "4.x/docs/plugins.html", "Populate": "populate.html", "Population": "4.x/docs/populate.html", "Promises": "promises.html", "Queries": "4.x/docs/queries.html", "Query": "api/query.html", "Query Casting": "tutorials/query_casting.html", "Query()": "api/query.html#Query()", "Query.prototype.$where()": "api/query.html#Query.prototype.$where()", "Query.prototype.all()": "api/query.html#Query.prototype.all()", "Query.prototype.allowDiskUse()": "api/query.html#Query.prototype.allowDiskUse()", "Query.prototype.and()": "api/query.html#Query.prototype.and()", "Query.prototype.batchSize()": "api/query.html#Query.prototype.batchSize()", "Query.prototype.box()": "api/query.html#Query.prototype.box()", "Query.prototype.cast()": "api/query.html#Query.prototype.cast()", "Query.prototype.catch()": "api/query.html#Query.prototype.catch()", "Query.prototype.center()": "api/query.html#Query.prototype.center()", "Query.prototype.centerSphere()": "api/query.html#Query.prototype.centerSphere()", "Query.prototype.circle()": "api/query.html#Query.prototype.circle()", "Query.prototype.clone()": "api/query.html#Query.prototype.clone()", "Query.prototype.collation()": "api/query.html#Query.prototype.collation()", "Query.prototype.comment()": "api/query.html#Query.prototype.comment()", "Query.prototype.count()": "api/query.html#Query.prototype.count()", "Query.prototype.countDocuments()": "api/query.html#Query.prototype.countDocuments()", "Query.prototype.cursor()": "api/query.html#Query.prototype.cursor()", "Query.prototype.deleteMany()": "api/query.html#Query.prototype.deleteMany()", "Query.prototype.deleteOne()": "api/query.html#Query.prototype.deleteOne()", "Query.prototype.distinct()": "api/query.html#Query.prototype.distinct()", "Query.prototype.elemMatch()": "api/query.html#Query.prototype.elemMatch()", "Query.prototype.equals()": "api/query.html#Query.prototype.equals()", "Query.prototype.error()": "api/query.html#Query.prototype.error()", "Query.prototype.estimatedDocumentCount()": "api/query.html#Query.prototype.estimatedDocumentCount()", "Query.prototype.exec()": "api/query.html#Query.prototype.exec()", "Query.prototype.exists()": "api/query.html#Query.prototype.exists()", "Query.prototype.explain()": "api/query.html#Query.prototype.explain()", "Query.prototype.finally()": "api/query.html#Query.prototype.finally()", "Query.prototype.find()": "api/query.html#Query.prototype.find()", "Query.prototype.findOne()": "api/query.html#Query.prototype.findOne()", "Query.prototype.findOneAndDelete()": "api/query.html#Query.prototype.findOneAndDelete()", "Query.prototype.findOneAndRemove()": "api/query.html#Query.prototype.findOneAndRemove()", "Query.prototype.findOneAndReplace()": "api/query.html#Query.prototype.findOneAndReplace()", "Query.prototype.findOneAndUpdate()": "api/query.html#Query.prototype.findOneAndUpdate()", "Query.prototype.geometry()": "api/query.html#Query.prototype.geometry()", "Query.prototype.get()": "api/query.html#Query.prototype.get()", "Query.prototype.getFilter()": "api/query.html#Query.prototype.getFilter()", "Query.prototype.getOptions()": "api/query.html#Query.prototype.getOptions()", "Query.prototype.getPopulatedPaths()": "api/query.html#Query.prototype.getPopulatedPaths()", "Query.prototype.getQuery()": "api/query.html#Query.prototype.getQuery()", "Query.prototype.getUpdate()": "api/query.html#Query.prototype.getUpdate()", "Query.prototype.gt()": "api/query.html#Query.prototype.gt()", "Query.prototype.gte()": "api/query.html#Query.prototype.gte()", "Query.prototype.hint()": "api/query.html#Query.prototype.hint()", "Query.prototype.in()": "api/query.html#Query.prototype.in()", "Query.prototype.intersects()": "api/query.html#Query.prototype.intersects()", "Query.prototype.isPathSelectedInclusive()": "api/query.html#Query.prototype.isPathSelectedInclusive()", "Query.prototype.j()": "api/query.html#Query.prototype.j()", "Query.prototype.lean()": "api/query.html#Query.prototype.lean()", "Query.prototype.limit()": "api/query.html#Query.prototype.limit()", "Query.prototype.lt()": "api/query.html#Query.prototype.lt()", "Query.prototype.lte()": "api/query.html#Query.prototype.lte()", "Query.prototype.maxDistance()": "api/query.html#Query.prototype.maxDistance()", "Query.prototype.maxTimeMS()": "api/query.html#Query.prototype.maxTimeMS()", "Query.prototype.merge()": "api/query.html#Query.prototype.merge()", "Query.prototype.mod()": "api/query.html#Query.prototype.mod()", "Query.prototype.model": "api/query.html#Query.prototype.model", "Query.prototype.mongooseOptions()": "api/query.html#Query.prototype.mongooseOptions()", "Query.prototype.ne()": "api/query.html#Query.prototype.ne()", "Query.prototype.near()": "api/query.html#Query.prototype.near()", "Query.prototype.nearSphere()": "api/query.html#Query.prototype.nearSphere()", "Query.prototype.nin()": "api/query.html#Query.prototype.nin()", "Query.prototype.nor()": "api/query.html#Query.prototype.nor()", "Query.prototype.or()": "api/query.html#Query.prototype.or()", "Query.prototype.orFail()": "api/query.html#Query.prototype.orFail()", "Query.prototype.polygon()": "api/query.html#Query.prototype.polygon()", "Query.prototype.populate()": "api/query.html#Query.prototype.populate()", "Query.prototype.post()": "api/query.html#Query.prototype.post()", "Query.prototype.pre()": "api/query.html#Query.prototype.pre()", "Query.prototype.projection()": "api/query.html#Query.prototype.projection()", "Query.prototype.read()": "api/query.html#Query.prototype.read()", "Query.prototype.readConcern()": "api/query.html#Query.prototype.readConcern()", "Query.prototype.regex()": "api/query.html#Query.prototype.regex()", "Query.prototype.replaceOne()": "api/query.html#Query.prototype.replaceOne()", "Query.prototype.select()": "api/query.html#Query.prototype.select()", "Query.prototype.selected()": "api/query.html#Query.prototype.selected()", "Query.prototype.selectedExclusively()": "api/query.html#Query.prototype.selectedExclusively()", "Query.prototype.selectedInclusively()": "api/query.html#Query.prototype.selectedInclusively()", "Query.prototype.session()": "api/query.html#Query.prototype.session()", "Query.prototype.set()": "api/query.html#Query.prototype.set()", "Query.prototype.setOptions()": "api/query.html#Query.prototype.setOptions()", "Query.prototype.setQuery()": "api/query.html#Query.prototype.setQuery()", "Query.prototype.setUpdate()": "api/query.html#Query.prototype.setUpdate()", "Query.prototype.size()": "api/query.html#Query.prototype.size()", "Query.prototype.skip()": "api/query.html#Query.prototype.skip()", "Query.prototype.slice()": "api/query.html#Query.prototype.slice()", "Query.prototype.sort()": "api/query.html#Query.prototype.sort()", "Query.prototype.tailable()": "api/query.html#Query.prototype.tailable()", "Query.prototype.then()": "api/query.html#Query.prototype.then()", "Query.prototype.toConstructor()": "api/query.html#Query.prototype.toConstructor()", "Query.prototype.transform()": "api/query.html#Query.prototype.transform()", "Query.prototype.updateMany()": "api/query.html#Query.prototype.updateMany()", "Query.prototype.updateOne()": "api/query.html#Query.prototype.updateOne()", "Query.prototype.w()": "api/query.html#Query.prototype.w()", "Query.prototype.where()": "api/query.html#Query.prototype.where()", "Query.prototype.within()": "api/query.html#Query.prototype.within()", "Query.prototype.writeConcern()": "api/query.html#Query.prototype.writeConcern()", "Query.prototype.wtimeout()": "api/query.html#Query.prototype.wtimeout()", "Query.prototype[Symbol.asyncIterator]()": "api/query.html#Query.prototype[Symbol.asyncIterator]()", "Query.prototype[Symbol.toStringTag]()": "api/query.html#Query.prototype[Symbol.toStringTag]()", "Query.use$geoWithin": "api/query.html#Query.use$geoWithin", "QueryCursor": "api/querycursor.html", "QueryCursor()": "api/querycursor.html#QueryCursor()", "QueryCursor.prototype.addCursorFlag()": "api/querycursor.html#QueryCursor.prototype.addCursorFlag()", "QueryCursor.prototype.close()": "api/querycursor.html#QueryCursor.prototype.close()", "QueryCursor.prototype.eachAsync()": "api/querycursor.html#QueryCursor.prototype.eachAsync()", "QueryCursor.prototype.map()": "api/querycursor.html#QueryCursor.prototype.map()", "QueryCursor.prototype.next()": "api/querycursor.html#QueryCursor.prototype.next()", "QueryCursor.prototype.options": "api/querycursor.html#QueryCursor.prototype.options", "QueryCursor.prototype.rewind()": "api/querycursor.html#QueryCursor.prototype.rewind()", "QueryCursor.prototype[Symbol.asyncIterator]()": "api/querycursor.html#QueryCursor.prototype[Symbol.asyncIterator]()", "Schema": "api/schema.html", "Schema()": "api/schema.html#Schema()", "Schema.indexTypes": "api/schema.html#Schema.indexTypes", "Schema.prototype.add()": "api/schema.html#Schema.prototype.add()", "Schema.prototype.alias()": "api/schema.html#Schema.prototype.alias()", "Schema.prototype.childSchemas": "api/schema.html#Schema.prototype.childSchemas", "Schema.prototype.clearIndexes()": "api/schema.html#Schema.prototype.clearIndexes()", "Schema.prototype.clone()": "api/schema.html#Schema.prototype.clone()", "Schema.prototype.discriminator()": "api/schema.html#Schema.prototype.discriminator()", "Schema.prototype.eachPath()": "api/schema.html#Schema.prototype.eachPath()", "Schema.prototype.get()": "api/schema.html#Schema.prototype.get()", "Schema.prototype.index()": "api/schema.html#Schema.prototype.index()", "Schema.prototype.indexes()": "api/schema.html#Schema.prototype.indexes()", "Schema.prototype.loadClass()": "api/schema.html#Schema.prototype.loadClass()", "Schema.prototype.method()": "api/schema.html#Schema.prototype.method()", "Schema.prototype.obj": "api/schema.html#Schema.prototype.obj", "Schema.prototype.omit()": "api/schema.html#Schema.prototype.omit()", "Schema.prototype.path()": "api/schema.html#Schema.prototype.path()", "Schema.prototype.paths": "api/schema.html#Schema.prototype.paths", "Schema.prototype.pathType()": "api/schema.html#Schema.prototype.pathType()", "Schema.prototype.pick()": "api/schema.html#Schema.prototype.pick()", "Schema.prototype.plugin()": "api/schema.html#Schema.prototype.plugin()", "Schema.prototype.post()": "api/schema.html#Schema.prototype.post()", "Schema.prototype.pre()": "api/schema.html#Schema.prototype.pre()", "Schema.prototype.queue()": "api/schema.html#Schema.prototype.queue()", "Schema.prototype.remove()": "api/schema.html#Schema.prototype.remove()", "Schema.prototype.removeIndex()": "api/schema.html#Schema.prototype.removeIndex()", "Schema.prototype.removeVirtual()": "api/schema.html#Schema.prototype.removeVirtual()", "Schema.prototype.requiredPaths()": "api/schema.html#Schema.prototype.requiredPaths()", "Schema.prototype.set()": "api/schema.html#Schema.prototype.set()", "Schema.prototype.static()": "api/schema.html#Schema.prototype.static()", "Schema.prototype.virtual()": "api/schema.html#Schema.prototype.virtual()", "Schema.prototype.virtualpath()": "api/schema.html#Schema.prototype.virtualpath()", "Schema.prototype.virtuals": "api/schema.html#Schema.prototype.virtuals", "Schema.reserved": "api/schema.html#Schema.reserved", "Schema.Types": "api/schema.html#Schema.Types", "SchemaArray": "api/schemaarray.html", "SchemaArray()": "api/schemaarray.html#SchemaArray()", "SchemaArray.checkRequired()": "api/schemaarray.html#SchemaArray.checkRequired()", "SchemaArray.get()": "api/schemaarray.html#SchemaArray.get()", "SchemaArray.options": "api/schemaarray.html#SchemaArray.options", "SchemaArray.prototype.checkRequired()": "api/schemaarray.html#SchemaArray.prototype.checkRequired()", "SchemaArray.prototype.enum()": "api/schemaarray.html#SchemaArray.prototype.enum()", "SchemaArray.schemaName": "api/schemaarray.html#SchemaArray.schemaName", "SchemaArray.set()": "api/schemaarray.html#SchemaArray.set()", "SchemaBoolean": "api/schemaboolean.html", "SchemaBoolean()": "api/schemaboolean.html#SchemaBoolean()", "SchemaBoolean.checkRequired()": "api/schemaboolean.html#SchemaBoolean.checkRequired()", "SchemaBoolean.convertToFalse": "api/schemaboolean.html#SchemaBoolean.convertToFalse", "SchemaBoolean.convertToTrue": "api/schemaboolean.html#SchemaBoolean.convertToTrue", "SchemaBoolean.get()": "api/schemaboolean.html#SchemaBoolean.get()", "SchemaBoolean.prototype.checkRequired()": "api/schemaboolean.html#SchemaBoolean.prototype.checkRequired()", "SchemaBoolean.schemaName": "api/schemaboolean.html#SchemaBoolean.schemaName", "SchemaBoolean.set()": "api/schemaboolean.html#SchemaBoolean.set()", "SchemaBuffer": "api/schemabuffer.html", "SchemaBuffer()": "api/schemabuffer.html#SchemaBuffer()", "SchemaBuffer.checkRequired()": "api/schemabuffer.html#SchemaBuffer.checkRequired()", "SchemaBuffer.get()": "api/schemabuffer.html#SchemaBuffer.get()", "SchemaBuffer.prototype.checkRequired()": "api/schemabuffer.html#SchemaBuffer.prototype.checkRequired()", "SchemaBuffer.prototype.subtype()": "api/schemabuffer.html#SchemaBuffer.prototype.subtype()", "SchemaBuffer.schemaName": "api/schemabuffer.html#SchemaBuffer.schemaName", "SchemaBuffer.set()": "api/schemabuffer.html#SchemaBuffer.set()", "SchemaDateOptions": "api/schemadateoptions.html", "SchemaDateOptions()": "api/schemadateoptions.html#SchemaDateOptions()", "SchemaDateOptions.prototype.expires": "api/schemadateoptions.html#SchemaDateOptions.prototype.expires", "SchemaDateOptions.prototype.max": "api/schemadateoptions.html#SchemaDateOptions.prototype.max", "SchemaDateOptions.prototype.min": "api/schemadateoptions.html#SchemaDateOptions.prototype.min", "SchemaNumber": "api/schemanumber.html", "SchemaNumber()": "api/schemanumber.html#SchemaNumber()", "SchemaNumber.checkRequired()": "api/schemanumber.html#SchemaNumber.checkRequired()", "SchemaNumber.get()": "api/schemanumber.html#SchemaNumber.get()", "SchemaNumber.prototype.checkRequired()": "api/schemanumber.html#SchemaNumber.prototype.checkRequired()", "SchemaNumber.prototype.enum()": "api/schemanumber.html#SchemaNumber.prototype.enum()", "SchemaNumber.prototype.max()": "api/schemanumber.html#SchemaNumber.prototype.max()", "SchemaNumber.prototype.min()": "api/schemanumber.html#SchemaNumber.prototype.min()", "SchemaNumber.schemaName": "api/schemanumber.html#SchemaNumber.schemaName", "SchemaNumber.set()": "api/schemanumber.html#SchemaNumber.set()", "SchemaObjectid": "api/schemaobjectid.html", "Schemas": "4.x/docs/guide.html", "SchemaString": "api/schemastring.html", "SchemaString()": "api/schemastring.html#SchemaString()", "SchemaString.checkRequired()": "api/schemastring.html#SchemaString.checkRequired()", "SchemaString.get()": "api/schemastring.html#SchemaString.get()", "SchemaString.prototype.checkRequired()": "api/schemastring.html#SchemaString.prototype.checkRequired()", "SchemaString.prototype.enum()": "api/schemastring.html#SchemaString.prototype.enum()", "SchemaString.prototype.lowercase()": "api/schemastring.html#SchemaString.prototype.lowercase()", "SchemaString.prototype.match()": "api/schemastring.html#SchemaString.prototype.match()", "SchemaString.prototype.maxlength()": "api/schemastring.html#SchemaString.prototype.maxlength()", "SchemaString.prototype.minlength()": "api/schemastring.html#SchemaString.prototype.minlength()", "SchemaString.prototype.trim()": "api/schemastring.html#SchemaString.prototype.trim()", "SchemaString.prototype.uppercase()": "api/schemastring.html#SchemaString.prototype.uppercase()", "SchemaString.schemaName": "api/schemastring.html#SchemaString.schemaName", "SchemaString.set()": "api/schemastring.html#SchemaString.set()", "Schematype": "api/schematype.html", "SchemaType()": "api/schematype.html#SchemaType()", "SchemaType.cast()": "api/schematype.html#SchemaType.cast()", "SchemaType.checkRequired()": "api/schematype.html#SchemaType.checkRequired()", "SchemaType.get()": "api/schematype.html#SchemaType.get()", "SchemaType.prototype.cast()": "api/schematype.html#SchemaType.prototype.cast()", "SchemaType.prototype.castFunction()": "api/schematype.html#SchemaType.prototype.castFunction()", "SchemaType.prototype.default()": "api/schematype.html#SchemaType.prototype.default()", "SchemaType.prototype.doValidate()": "api/schematype.html#SchemaType.prototype.doValidate()", "SchemaType.prototype.get()": "api/schematype.html#SchemaType.prototype.get()", "SchemaType.prototype.immutable()": "api/schematype.html#SchemaType.prototype.immutable()", "SchemaType.prototype.index()": "api/schematype.html#SchemaType.prototype.index()", "SchemaType.prototype.isRequired": "api/schematype.html#SchemaType.prototype.isRequired", "SchemaType.prototype.path": "api/schematype.html#SchemaType.prototype.path", "SchemaType.prototype.ref()": "api/schematype.html#SchemaType.prototype.ref()", "SchemaType.prototype.required()": "api/schematype.html#SchemaType.prototype.required()", "SchemaType.prototype.select()": "api/schematype.html#SchemaType.prototype.select()", "SchemaType.prototype.set()": "api/schematype.html#SchemaType.prototype.set()", "SchemaType.prototype.sparse()": "api/schematype.html#SchemaType.prototype.sparse()", "SchemaType.prototype.text()": "api/schematype.html#SchemaType.prototype.text()", "SchemaType.prototype.transform()": "api/schematype.html#SchemaType.prototype.transform()", "SchemaType.prototype.unique()": "api/schematype.html#SchemaType.prototype.unique()", "SchemaType.prototype.validate()": "api/schematype.html#SchemaType.prototype.validate()", "SchemaType.prototype.validators": "api/schematype.html#SchemaType.prototype.validators", "SchemaType.set()": "api/schematype.html#SchemaType.set()", "SchemaTypeOptions": "api/schematypeoptions.html", "SchemaTypeOptions()": "api/schematypeoptions.html#SchemaTypeOptions()", "SchemaTypeOptions.prototype.cast": "api/schematypeoptions.html#SchemaTypeOptions.prototype.cast", "SchemaTypeOptions.prototype.default": "api/schematypeoptions.html#SchemaTypeOptions.prototype.default", "SchemaTypeOptions.prototype.immutable": "api/schematypeoptions.html#SchemaTypeOptions.prototype.immutable", "SchemaTypeOptions.prototype.index": "api/schematypeoptions.html#SchemaTypeOptions.prototype.index", "SchemaTypeOptions.prototype.ref": "api/schematypeoptions.html#SchemaTypeOptions.prototype.ref", "SchemaTypeOptions.prototype.required": "api/schematypeoptions.html#SchemaTypeOptions.prototype.required", "SchemaTypeOptions.prototype.select": "api/schematypeoptions.html#SchemaTypeOptions.prototype.select", "SchemaTypeOptions.prototype.sparse": "api/schematypeoptions.html#SchemaTypeOptions.prototype.sparse", "SchemaTypeOptions.prototype.text": "api/schematypeoptions.html#SchemaTypeOptions.prototype.text", "SchemaTypeOptions.prototype.transform": "api/schematypeoptions.html#SchemaTypeOptions.prototype.transform", "SchemaTypeOptions.prototype.type": "api/schematypeoptions.html#SchemaTypeOptions.prototype.type", "SchemaTypeOptions.prototype.unique": "api/schematypeoptions.html#SchemaTypeOptions.prototype.unique", "SchemaTypeOptions.prototype.validate": "api/schematypeoptions.html#SchemaTypeOptions.prototype.validate", "SchemaTypes": "4.x/docs/schematypes.html", "String": "schematypes.html#strings", "Sub Docs": "4.x/docs/subdocs.html", "Subdocument": "api/subdocument.html", "Subdocument.prototype.$parent()": "api/subdocument.html#Subdocument.prototype.$parent()", "Subdocument.prototype.deleteOne()": "api/subdocument.html#Subdocument.prototype.deleteOne()", "Subdocument.prototype.inspect()": "api/subdocument.html#Subdocument.prototype.inspect()", "Subdocument.prototype.ownerDocument()": "api/subdocument.html#Subdocument.prototype.ownerDocument()", "Subdocument.prototype.parent()": "api/subdocument.html#Subdocument.prototype.parent()", "SubdocumentPath": "api/subdocumentpath.html", "SubdocumentPath()": "api/subdocumentpath.html#SubdocumentPath()", "SubdocumentPath.get()": "api/subdocumentpath.html#SubdocumentPath.get()", "SubdocumentPath.prototype.discriminator()": "api/subdocumentpath.html#SubdocumentPath.prototype.discriminator()", "SubdocumentPath.set()": "api/subdocumentpath.html#SubdocumentPath.set()", "Subdocuments": "subdocs.html", "Transactions in Mongoose": "transactions.html", "Using Mongoose With AWS Lambda": "lambda.html", "UUID": "schematypes.html#uuid", "Validation": "validation.html", "Version Support": "version-support.html", "Virtualtype": "api/virtualtype.html", "VirtualType()": "api/virtualtype.html#VirtualType()", "VirtualType.prototype.applyGetters()": "api/virtualtype.html#VirtualType.prototype.applyGetters()", "VirtualType.prototype.applySetters()": "api/virtualtype.html#VirtualType.prototype.applySetters()", "VirtualType.prototype.get()": "api/virtualtype.html#VirtualType.prototype.get()", "VirtualType.prototype.set()": "api/virtualtype.html#VirtualType.prototype.set()"}