{"AbstractDecorator (class)": "class-cake.event.decorator.abstractdecorator.html", "AbstractDecorator::$_callable": "class-cake.event.decorator.abstractdecorator.html#$_callable", "AbstractDecorator::$_options": "class-cake.event.decorator.abstractdecorator.html#$_options", "AbstractDecorator::__construct()()": "class-cake.event.decorator.abstractdecorator.html#__construct()", "AbstractDecorator::__invoke()()": "class-cake.event.decorator.abstractdecorator.html#__invoke()", "AbstractDecorator::_call()()": "class-cake.event.decorator.abstractdecorator.html#_call()", "AbstractFormatter (class)": "class-cake.log.formatter.abstractformatter.html", "AbstractFormatter::$_config": "class-cake.log.formatter.abstractformatter.html#$_config", "AbstractFormatter::$_configInitialized": "class-cake.log.formatter.abstractformatter.html#$_configInitialized", "AbstractFormatter::$_defaultConfig": "class-cake.log.formatter.abstractformatter.html#$_defaultConfig", "AbstractFormatter::__construct()()": "class-cake.log.formatter.abstractformatter.html#__construct()", "AbstractFormatter::_configDelete()()": "class-cake.log.formatter.abstractformatter.html#_configDelete()", "AbstractFormatter::_configRead()()": "class-cake.log.formatter.abstractformatter.html#_configRead()", "AbstractFormatter::_configWrite()()": "class-cake.log.formatter.abstractformatter.html#_configWrite()", "AbstractFormatter::configShallow()()": "class-cake.log.formatter.abstractformatter.html#configShallow()", "AbstractFormatter::format()()": "class-cake.log.formatter.abstractformatter.html#format()", "AbstractFormatter::getConfig()()": "class-cake.log.formatter.abstractformatter.html#getConfig()", "AbstractFormatter::getConfigOrFail()()": "class-cake.log.formatter.abstractformatter.html#getConfigOrFail()", "AbstractFormatter::setConfig()()": "class-cake.log.formatter.abstractformatter.html#setConfig()", "AbstractLocator (class)": "class-cake.datasource.locator.abstractlocator.html", "AbstractLocator::$instances": "class-cake.datasource.locator.abstractlocator.html#$instances", "AbstractLocator::$options": "class-cake.datasource.locator.abstractlocator.html#$options", "AbstractLocator::clear()()": "class-cake.datasource.locator.abstractlocator.html#clear()", "AbstractLocator::createInstance()()": "class-cake.datasource.locator.abstractlocator.html#createInstance()", "AbstractLocator::exists()()": "class-cake.datasource.locator.abstractlocator.html#exists()", "AbstractLocator::get()()": "class-cake.datasource.locator.abstractlocator.html#get()", "AbstractLocator::remove()()": "class-cake.datasource.locator.abstractlocator.html#remove()", "AbstractLocator::set()()": "class-cake.datasource.locator.abstractlocator.html#set()", "AbstractPasswordHasher (class)": "class-cake.auth.abstractpasswordhasher.html", "AbstractPasswordHasher::$_config": "class-cake.auth.abstractpasswordhasher.html#$_config", "AbstractPasswordHasher::$_configInitialized": "class-cake.auth.abstractpasswordhasher.html#$_configInitialized", "AbstractPasswordHasher::$_defaultConfig": "class-cake.auth.abstractpasswordhasher.html#$_defaultConfig", "AbstractPasswordHasher::__construct()()": "class-cake.auth.abstractpasswordhasher.html#__construct()", "AbstractPasswordHasher::_configDelete()()": "class-cake.auth.abstractpasswordhasher.html#_configDelete()", "AbstractPasswordHasher::_configRead()()": "class-cake.auth.abstractpasswordhasher.html#_configRead()", "AbstractPasswordHasher::_configWrite()()": "class-cake.auth.abstractpasswordhasher.html#_configWrite()", "AbstractPasswordHasher::check()()": "class-cake.auth.abstractpasswordhasher.html#check()", "AbstractPasswordHasher::configShallow()()": "class-cake.auth.abstractpasswordhasher.html#configShallow()", "AbstractPasswordHasher::getConfig()()": "class-cake.auth.abstractpasswordhasher.html#getConfig()", "AbstractPasswordHasher::getConfigOrFail()()": "class-cake.auth.abstractpasswordhasher.html#getConfigOrFail()", "AbstractPasswordHasher::hash()()": "class-cake.auth.abstractpasswordhasher.html#hash()", "AbstractPasswordHasher::needsRehash()()": "class-cake.auth.abstractpasswordhasher.html#needsRehash()", "AbstractPasswordHasher::setConfig()()": "class-cake.auth.abstractpasswordhasher.html#setConfig()", "AbstractTransport (class)": "class-cake.mailer.abstracttransport.html", "AbstractTransport::$_config": "class-cake.mailer.abstracttransport.html#$_config", "AbstractTransport::$_configInitialized": "class-cake.mailer.abstracttransport.html#$_configInitialized", "AbstractTransport::$_defaultConfig": "class-cake.mailer.abstracttransport.html#$_defaultConfig", "AbstractTransport::__construct()()": "class-cake.mailer.abstracttransport.html#__construct()", "AbstractTransport::_configDelete()()": "class-cake.mailer.abstracttransport.html#_configDelete()", "AbstractTransport::_configRead()()": "class-cake.mailer.abstracttransport.html#_configRead()", "AbstractTransport::_configWrite()()": "class-cake.mailer.abstracttransport.html#_configWrite()", "AbstractTransport::checkRecipient()()": "class-cake.mailer.abstracttransport.html#checkRecipient()", "AbstractTransport::configShallow()()": "class-cake.mailer.abstracttransport.html#configShallow()", "AbstractTransport::getConfig()()": "class-cake.mailer.abstracttransport.html#getConfig()", "AbstractTransport::getConfigOrFail()()": "class-cake.mailer.abstracttransport.html#getConfigOrFail()", "AbstractTransport::send()()": "class-cake.mailer.abstracttransport.html#send()", "AbstractTransport::setConfig()()": "class-cake.mailer.abstracttransport.html#setConfig()", "AdapterInterface (interface)": "interface-cake.http.client.adapterinterface.html", "AggregateExpression (class)": "class-cake.database.expression.aggregateexpression.html", "AggregateExpression::$_conditions": "class-cake.database.expression.aggregateexpression.html#$_conditions", "AggregateExpression::$_conjunction": "class-cake.database.expression.aggregateexpression.html#$_conjunction", "AggregateExpression::$_name": "class-cake.database.expression.aggregateexpression.html#$_name", "AggregateExpression::$_returnType": "class-cake.database.expression.aggregateexpression.html#$_returnType", "AggregateExpression::$_typeMap": "class-cake.database.expression.aggregateexpression.html#$_typeMap", "AggregateExpression::$filter": "class-cake.database.expression.aggregateexpression.html#$filter", "AggregateExpression::$window": "class-cake.database.expression.aggregateexpression.html#$window", "AggregateExpression::__clone()()": "class-cake.database.expression.aggregateexpression.html#__clone()", "AggregateExpression::__construct()()": "class-cake.database.expression.aggregateexpression.html#__construct()", "AggregateExpression::_addConditions()()": "class-cake.database.expression.aggregateexpression.html#_addConditions()", "AggregateExpression::_calculateType()()": "class-cake.database.expression.aggregateexpression.html#_calculateType()", "AggregateExpression::_castToExpression()()": "class-cake.database.expression.aggregateexpression.html#_castToExpression()", "AggregateExpression::_parseCondition()()": "class-cake.database.expression.aggregateexpression.html#_parseCondition()", "AggregateExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.aggregateexpression.html#_requiresToExpressionCasting()", "AggregateExpression::add()()": "class-cake.database.expression.aggregateexpression.html#add()", "AggregateExpression::addCase()()": "class-cake.database.expression.aggregateexpression.html#addCase()", "AggregateExpression::and()()": "class-cake.database.expression.aggregateexpression.html#and()", "AggregateExpression::and_()()": "class-cake.database.expression.aggregateexpression.html#and_()", "AggregateExpression::between()()": "class-cake.database.expression.aggregateexpression.html#between()", "AggregateExpression::case()()": "class-cake.database.expression.aggregateexpression.html#case()", "AggregateExpression::count()()": "class-cake.database.expression.aggregateexpression.html#count()", "AggregateExpression::eq()()": "class-cake.database.expression.aggregateexpression.html#eq()", "AggregateExpression::equalFields()()": "class-cake.database.expression.aggregateexpression.html#equalFields()", "AggregateExpression::excludeCurrent()()": "class-cake.database.expression.aggregateexpression.html#excludeCurrent()", "AggregateExpression::excludeGroup()()": "class-cake.database.expression.aggregateexpression.html#excludeGroup()", "AggregateExpression::excludeTies()()": "class-cake.database.expression.aggregateexpression.html#excludeTies()", "AggregateExpression::exists()()": "class-cake.database.expression.aggregateexpression.html#exists()", "AggregateExpression::filter()()": "class-cake.database.expression.aggregateexpression.html#filter()", "AggregateExpression::frame()()": "class-cake.database.expression.aggregateexpression.html#frame()", "AggregateExpression::getConjunction()()": "class-cake.database.expression.aggregateexpression.html#getConjunction()", "AggregateExpression::getDefaultTypes()()": "class-cake.database.expression.aggregateexpression.html#getDefaultTypes()", "AggregateExpression::getName()()": "class-cake.database.expression.aggregateexpression.html#getName()", "AggregateExpression::getReturnType()()": "class-cake.database.expression.aggregateexpression.html#getReturnType()", "AggregateExpression::getTypeMap()()": "class-cake.database.expression.aggregateexpression.html#getTypeMap()", "AggregateExpression::groups()()": "class-cake.database.expression.aggregateexpression.html#groups()", "AggregateExpression::gt()()": "class-cake.database.expression.aggregateexpression.html#gt()", "AggregateExpression::gte()()": "class-cake.database.expression.aggregateexpression.html#gte()", "AggregateExpression::hasNestedExpression()()": "class-cake.database.expression.aggregateexpression.html#hasNestedExpression()", "AggregateExpression::in()()": "class-cake.database.expression.aggregateexpression.html#in()", "AggregateExpression::isCallable()()": "class-cake.database.expression.aggregateexpression.html#isCallable()", "AggregateExpression::isNotNull()()": "class-cake.database.expression.aggregateexpression.html#isNotNull()", "AggregateExpression::isNull()()": "class-cake.database.expression.aggregateexpression.html#isNull()", "AggregateExpression::iterateParts()()": "class-cake.database.expression.aggregateexpression.html#iterateParts()", "AggregateExpression::like()()": "class-cake.database.expression.aggregateexpression.html#like()", "AggregateExpression::lt()()": "class-cake.database.expression.aggregateexpression.html#lt()", "AggregateExpression::lte()()": "class-cake.database.expression.aggregateexpression.html#lte()", "AggregateExpression::not()()": "class-cake.database.expression.aggregateexpression.html#not()", "AggregateExpression::notEq()()": "class-cake.database.expression.aggregateexpression.html#notEq()", "AggregateExpression::notExists()()": "class-cake.database.expression.aggregateexpression.html#notExists()", "AggregateExpression::notIn()()": "class-cake.database.expression.aggregateexpression.html#notIn()", "AggregateExpression::notInOrNull()()": "class-cake.database.expression.aggregateexpression.html#notInOrNull()", "AggregateExpression::notLike()()": "class-cake.database.expression.aggregateexpression.html#notLike()", "AggregateExpression::or()()": "class-cake.database.expression.aggregateexpression.html#or()", "AggregateExpression::or_()()": "class-cake.database.expression.aggregateexpression.html#or_()", "AggregateExpression::order()()": "class-cake.database.expression.aggregateexpression.html#order()", "AggregateExpression::over()()": "class-cake.database.expression.aggregateexpression.html#over()", "AggregateExpression::partition()()": "class-cake.database.expression.aggregateexpression.html#partition()", "AggregateExpression::range()()": "class-cake.database.expression.aggregateexpression.html#range()", "AggregateExpression::rows()()": "class-cake.database.expression.aggregateexpression.html#rows()", "AggregateExpression::setConjunction()()": "class-cake.database.expression.aggregateexpression.html#setConjunction()", "AggregateExpression::setDefaultTypes()()": "class-cake.database.expression.aggregateexpression.html#setDefaultTypes()", "AggregateExpression::setName()()": "class-cake.database.expression.aggregateexpression.html#setName()", "AggregateExpression::setReturnType()()": "class-cake.database.expression.aggregateexpression.html#setReturnType()", "AggregateExpression::setTypeMap()()": "class-cake.database.expression.aggregateexpression.html#setTypeMap()", "AggregateExpression::sql()()": "class-cake.database.expression.aggregateexpression.html#sql()", "AggregateExpression::traverse()()": "class-cake.database.expression.aggregateexpression.html#traverse()", "AjaxView (class)": "class-cake.view.ajaxview.html", "AjaxView::$_config": "class-cake.view.ajaxview.html#$_config", "AjaxView::$_configInitialized": "class-cake.view.ajaxview.html#$_configInitialized", "AjaxView::$_current": "class-cake.view.ajaxview.html#$_current", "AjaxView::$_currentType": "class-cake.view.ajaxview.html#$_currentType", "AjaxView::$_defaultConfig": "class-cake.view.ajaxview.html#$_defaultConfig", "AjaxView::$_eventClass": "class-cake.view.ajaxview.html#$_eventClass", "AjaxView::$_eventManager": "class-cake.view.ajaxview.html#$_eventManager", "AjaxView::$_ext": "class-cake.view.ajaxview.html#$_ext", "AjaxView::$_helpers": "class-cake.view.ajaxview.html#$_helpers", "AjaxView::$_parents": "class-cake.view.ajaxview.html#$_parents", "AjaxView::$_passedVars": "class-cake.view.ajaxview.html#$_passedVars", "AjaxView::$_paths": "class-cake.view.ajaxview.html#$_paths", "AjaxView::$_pathsForPlugin": "class-cake.view.ajaxview.html#$_pathsForPlugin", "AjaxView::$_stack": "class-cake.view.ajaxview.html#$_stack", "AjaxView::$_viewBlockClass": "class-cake.view.ajaxview.html#$_viewBlockClass", "AjaxView::$autoLayout": "class-cake.view.ajaxview.html#$autoLayout", "AjaxView::$Blocks": "class-cake.view.ajaxview.html#$Blocks", "AjaxView::$Breadcrumbs": "class-cake.view.ajaxview.html#$Breadcrumbs", "AjaxView::$elementCache": "class-cake.view.ajaxview.html#$elementCache", "AjaxView::$Flash": "class-cake.view.ajaxview.html#$Flash", "AjaxView::$Form": "class-cake.view.ajaxview.html#$Form", "AjaxView::$helpers": "class-cake.view.ajaxview.html#$helpers", "AjaxView::$Html": "class-cake.view.ajaxview.html#$Html", "AjaxView::$layout": "class-cake.view.ajaxview.html#$layout", "AjaxView::$layoutPath": "class-cake.view.ajaxview.html#$layoutPath", "AjaxView::$name": "class-cake.view.ajaxview.html#$name", "AjaxView::$Number": "class-cake.view.ajaxview.html#$Number", "AjaxView::$Paginator": "class-cake.view.ajaxview.html#$Paginator", "AjaxView::$plugin": "class-cake.view.ajaxview.html#$plugin", "AjaxView::$request": "class-cake.view.ajaxview.html#$request", "AjaxView::$response": "class-cake.view.ajaxview.html#$response", "AjaxView::$subDir": "class-cake.view.ajaxview.html#$subDir", "AjaxView::$template": "class-cake.view.ajaxview.html#$template", "AjaxView::$templatePath": "class-cake.view.ajaxview.html#$templatePath", "AjaxView::$Text": "class-cake.view.ajaxview.html#$Text", "AjaxView::$theme": "class-cake.view.ajaxview.html#$theme", "AjaxView::$Time": "class-cake.view.ajaxview.html#$Time", "AjaxView::$Url": "class-cake.view.ajaxview.html#$Url", "AjaxView::$viewVars": "class-cake.view.ajaxview.html#$viewVars", "AjaxView::__construct()()": "class-cake.view.ajaxview.html#__construct()", "AjaxView::__get()()": "class-cake.view.ajaxview.html#__get()", "AjaxView::_checkFilePath()()": "class-cake.view.ajaxview.html#_checkFilePath()", "AjaxView::_configDelete()()": "class-cake.view.ajaxview.html#_configDelete()", "AjaxView::_configRead()()": "class-cake.view.ajaxview.html#_configRead()", "AjaxView::_configWrite()()": "class-cake.view.ajaxview.html#_configWrite()", "AjaxView::_createCell()()": "class-cake.view.ajaxview.html#_createCell()", "AjaxView::_elementCache()()": "class-cake.view.ajaxview.html#_elementCache()", "AjaxView::_evaluate()()": "class-cake.view.ajaxview.html#_evaluate()", "AjaxView::_getElementFileName()()": "class-cake.view.ajaxview.html#_getElementFileName()", "AjaxView::_getLayoutFileName()()": "class-cake.view.ajaxview.html#_getLayoutFileName()", "AjaxView::_getSubPaths()()": "class-cake.view.ajaxview.html#_getSubPaths()", "AjaxView::_getTemplateFileName()()": "class-cake.view.ajaxview.html#_getTemplateFileName()", "AjaxView::_inflectTemplateFileName()()": "class-cake.view.ajaxview.html#_inflectTemplateFileName()", "AjaxView::_paths()()": "class-cake.view.ajaxview.html#_paths()", "AjaxView::_render()()": "class-cake.view.ajaxview.html#_render()", "AjaxView::_renderElement()()": "class-cake.view.ajaxview.html#_renderElement()", "AjaxView::append()()": "class-cake.view.ajaxview.html#append()", "AjaxView::assign()()": "class-cake.view.ajaxview.html#assign()", "AjaxView::blocks()()": "class-cake.view.ajaxview.html#blocks()", "AjaxView::cache()()": "class-cake.view.ajaxview.html#cache()", "AjaxView::cell()()": "class-cake.view.ajaxview.html#cell()", "AjaxView::configShallow()()": "class-cake.view.ajaxview.html#configShallow()", "AjaxView::contentType()()": "class-cake.view.ajaxview.html#contentType()", "AjaxView::disableAutoLayout()()": "class-cake.view.ajaxview.html#disableAutoLayout()", "AjaxView::dispatchEvent()()": "class-cake.view.ajaxview.html#dispatchEvent()", "AjaxView::element()()": "class-cake.view.ajaxview.html#element()", "AjaxView::elementExists()()": "class-cake.view.ajaxview.html#elementExists()", "AjaxView::enableAutoLayout()()": "class-cake.view.ajaxview.html#enableAutoLayout()", "AjaxView::end()()": "class-cake.view.ajaxview.html#end()", "AjaxView::exists()()": "class-cake.view.ajaxview.html#exists()", "AjaxView::extend()()": "class-cake.view.ajaxview.html#extend()", "AjaxView::fetch()()": "class-cake.view.ajaxview.html#fetch()", "AjaxView::get()()": "class-cake.view.ajaxview.html#get()", "AjaxView::getConfig()()": "class-cake.view.ajaxview.html#getConfig()", "AjaxView::getConfigOrFail()()": "class-cake.view.ajaxview.html#getConfigOrFail()", "AjaxView::getCurrentType()()": "class-cake.view.ajaxview.html#getCurrentType()", "AjaxView::getElementPaths()()": "class-cake.view.ajaxview.html#getElementPaths()", "AjaxView::getEventManager()()": "class-cake.view.ajaxview.html#getEventManager()", "AjaxView::getLayout()()": "class-cake.view.ajaxview.html#getLayout()", "AjaxView::getLayoutPath()()": "class-cake.view.ajaxview.html#getLayoutPath()", "AjaxView::getLayoutPaths()()": "class-cake.view.ajaxview.html#getLayoutPaths()", "AjaxView::getName()()": "class-cake.view.ajaxview.html#getName()", "AjaxView::getPlugin()()": "class-cake.view.ajaxview.html#getPlugin()", "AjaxView::getRequest()()": "class-cake.view.ajaxview.html#getRequest()", "AjaxView::getResponse()()": "class-cake.view.ajaxview.html#getResponse()", "AjaxView::getSubDir()()": "class-cake.view.ajaxview.html#getSubDir()", "AjaxView::getTemplate()()": "class-cake.view.ajaxview.html#getTemplate()", "AjaxView::getTemplatePath()()": "class-cake.view.ajaxview.html#getTemplatePath()", "AjaxView::getTheme()()": "class-cake.view.ajaxview.html#getTheme()", "AjaxView::getVars()()": "class-cake.view.ajaxview.html#getVars()", "AjaxView::helpers()()": "class-cake.view.ajaxview.html#helpers()", "AjaxView::initialize()()": "class-cake.view.ajaxview.html#initialize()", "AjaxView::isAutoLayoutEnabled()()": "class-cake.view.ajaxview.html#isAutoLayoutEnabled()", "AjaxView::loadHelper()()": "class-cake.view.ajaxview.html#loadHelper()", "AjaxView::loadHelpers()()": "class-cake.view.ajaxview.html#loadHelpers()", "AjaxView::log()()": "class-cake.view.ajaxview.html#log()", "AjaxView::pluginSplit()()": "class-cake.view.ajaxview.html#pluginSplit()", "AjaxView::prepend()()": "class-cake.view.ajaxview.html#prepend()", "AjaxView::render()()": "class-cake.view.ajaxview.html#render()", "AjaxView::renderLayout()()": "class-cake.view.ajaxview.html#renderLayout()", "AjaxView::reset()()": "class-cake.view.ajaxview.html#reset()", "AjaxView::set()()": "class-cake.view.ajaxview.html#set()", "AjaxView::setConfig()()": "class-cake.view.ajaxview.html#setConfig()", "AjaxView::setContentType()()": "class-cake.view.ajaxview.html#setContentType()", "AjaxView::setElementCache()()": "class-cake.view.ajaxview.html#setElementCache()", "AjaxView::setEventManager()()": "class-cake.view.ajaxview.html#setEventManager()", "AjaxView::setLayout()()": "class-cake.view.ajaxview.html#setLayout()", "AjaxView::setLayoutPath()()": "class-cake.view.ajaxview.html#setLayoutPath()", "AjaxView::setPlugin()()": "class-cake.view.ajaxview.html#setPlugin()", "AjaxView::setRequest()()": "class-cake.view.ajaxview.html#setRequest()", "AjaxView::setResponse()()": "class-cake.view.ajaxview.html#setResponse()", "AjaxView::setSubDir()()": "class-cake.view.ajaxview.html#setSubDir()", "AjaxView::setTemplate()()": "class-cake.view.ajaxview.html#setTemplate()", "AjaxView::setTemplatePath()()": "class-cake.view.ajaxview.html#setTemplatePath()", "AjaxView::setTheme()()": "class-cake.view.ajaxview.html#setTheme()", "AjaxView::start()()": "class-cake.view.ajaxview.html#start()", "ApcuEngine (class)": "class-cake.cache.engine.apcuengine.html", "ApcuEngine::$_compiledGroupNames": "class-cake.cache.engine.apcuengine.html#$_compiledGroupNames", "ApcuEngine::$_config": "class-cake.cache.engine.apcuengine.html#$_config", "ApcuEngine::$_configInitialized": "class-cake.cache.engine.apcuengine.html#$_configInitialized", "ApcuEngine::$_defaultConfig": "class-cake.cache.engine.apcuengine.html#$_defaultConfig", "ApcuEngine::$_groupPrefix": "class-cake.cache.engine.apcuengine.html#$_groupPrefix", "ApcuEngine::_configDelete()()": "class-cake.cache.engine.apcuengine.html#_configDelete()", "ApcuEngine::_configRead()()": "class-cake.cache.engine.apcuengine.html#_configRead()", "ApcuEngine::_configWrite()()": "class-cake.cache.engine.apcuengine.html#_configWrite()", "ApcuEngine::_key()()": "class-cake.cache.engine.apcuengine.html#_key()", "ApcuEngine::add()()": "class-cake.cache.engine.apcuengine.html#add()", "ApcuEngine::clear()()": "class-cake.cache.engine.apcuengine.html#clear()", "ApcuEngine::clearGroup()()": "class-cake.cache.engine.apcuengine.html#clearGroup()", "ApcuEngine::configShallow()()": "class-cake.cache.engine.apcuengine.html#configShallow()", "ApcuEngine::decrement()()": "class-cake.cache.engine.apcuengine.html#decrement()", "ApcuEngine::delete()()": "class-cake.cache.engine.apcuengine.html#delete()", "ApcuEngine::deleteMultiple()()": "class-cake.cache.engine.apcuengine.html#deleteMultiple()", "ApcuEngine::duration()()": "class-cake.cache.engine.apcuengine.html#duration()", "ApcuEngine::ensureValidKey()()": "class-cake.cache.engine.apcuengine.html#ensureValidKey()", "ApcuEngine::ensureValidType()()": "class-cake.cache.engine.apcuengine.html#ensureValidType()", "ApcuEngine::get()()": "class-cake.cache.engine.apcuengine.html#get()", "ApcuEngine::getConfig()()": "class-cake.cache.engine.apcuengine.html#getConfig()", "ApcuEngine::getConfigOrFail()()": "class-cake.cache.engine.apcuengine.html#getConfigOrFail()", "ApcuEngine::getMultiple()()": "class-cake.cache.engine.apcuengine.html#getMultiple()", "ApcuEngine::groups()()": "class-cake.cache.engine.apcuengine.html#groups()", "ApcuEngine::has()()": "class-cake.cache.engine.apcuengine.html#has()", "ApcuEngine::increment()()": "class-cake.cache.engine.apcuengine.html#increment()", "ApcuEngine::init()()": "class-cake.cache.engine.apcuengine.html#init()", "ApcuEngine::set()()": "class-cake.cache.engine.apcuengine.html#set()", "ApcuEngine::setConfig()()": "class-cake.cache.engine.apcuengine.html#setConfig()", "ApcuEngine::setMultiple()()": "class-cake.cache.engine.apcuengine.html#setMultiple()", "ApcuEngine::warning()()": "class-cake.cache.engine.apcuengine.html#warning()", "App (class)": "class-cake.core.app.html", "App::_classExistsInBase()()": "class-cake.core.app.html#_classExistsInBase()", "App::className()()": "class-cake.core.app.html#className()", "App::classPath()()": "class-cake.core.app.html#classPath()", "App::core()()": "class-cake.core.app.html#core()", "App::path()()": "class-cake.core.app.html#path()", "App::shortName()()": "class-cake.core.app.html#shortName()", "Arguments (class)": "class-cake.console.arguments.html", "Arguments::$argNames": "class-cake.console.arguments.html#$argNames", "Arguments::$args": "class-cake.console.arguments.html#$args", "Arguments::$options": "class-cake.console.arguments.html#$options", "Arguments::__construct()()": "class-cake.console.arguments.html#__construct()", "Arguments::getArgument()()": "class-cake.console.arguments.html#getArgument()", "Arguments::getArgumentAt()()": "class-cake.console.arguments.html#getArgumentAt()", "Arguments::getArguments()()": "class-cake.console.arguments.html#getArguments()", "Arguments::getOption()()": "class-cake.console.arguments.html#getOption()", "Arguments::getOptions()()": "class-cake.console.arguments.html#getOptions()", "Arguments::hasArgument()()": "class-cake.console.arguments.html#hasArgument()", "Arguments::hasArgumentAt()()": "class-cake.console.arguments.html#hasArgumentAt()", "Arguments::hasOption()()": "class-cake.console.arguments.html#hasOption()", "ArrayContext (class)": "class-cake.view.form.arraycontext.html", "ArrayContext::$_context": "class-cake.view.form.arraycontext.html#$_context", "ArrayContext::__construct()()": "class-cake.view.form.arraycontext.html#__construct()", "ArrayContext::attributes()()": "class-cake.view.form.arraycontext.html#attributes()", "ArrayContext::error()()": "class-cake.view.form.arraycontext.html#error()", "ArrayContext::fieldNames()()": "class-cake.view.form.arraycontext.html#fieldNames()", "ArrayContext::getMaxLength()()": "class-cake.view.form.arraycontext.html#getMaxLength()", "ArrayContext::getPrimaryKey()()": "class-cake.view.form.arraycontext.html#getPrimaryKey()", "ArrayContext::getRequiredMessage()()": "class-cake.view.form.arraycontext.html#getRequiredMessage()", "ArrayContext::hasError()()": "class-cake.view.form.arraycontext.html#hasError()", "ArrayContext::isCreate()()": "class-cake.view.form.arraycontext.html#isCreate()", "ArrayContext::isPrimaryKey()()": "class-cake.view.form.arraycontext.html#isPrimaryKey()", "ArrayContext::isRequired()()": "class-cake.view.form.arraycontext.html#isRequired()", "ArrayContext::primaryKey()()": "class-cake.view.form.arraycontext.html#primaryKey()", "ArrayContext::stripNesting()()": "class-cake.view.form.arraycontext.html#stripNesting()", "ArrayContext::type()()": "class-cake.view.form.arraycontext.html#type()", "ArrayContext::val()()": "class-cake.view.form.arraycontext.html#val()", "ArrayEngine (class)": "class-cake.cache.engine.arrayengine.html", "ArrayEngine::$_config": "class-cake.cache.engine.arrayengine.html#$_config", "ArrayEngine::$_configInitialized": "class-cake.cache.engine.arrayengine.html#$_configInitialized", "ArrayEngine::$_defaultConfig": "class-cake.cache.engine.arrayengine.html#$_defaultConfig", "ArrayEngine::$_groupPrefix": "class-cake.cache.engine.arrayengine.html#$_groupPrefix", "ArrayEngine::$data": "class-cake.cache.engine.arrayengine.html#$data", "ArrayEngine::_configDelete()()": "class-cake.cache.engine.arrayengine.html#_configDelete()", "ArrayEngine::_configRead()()": "class-cake.cache.engine.arrayengine.html#_configRead()", "ArrayEngine::_configWrite()()": "class-cake.cache.engine.arrayengine.html#_configWrite()", "ArrayEngine::_key()()": "class-cake.cache.engine.arrayengine.html#_key()", "ArrayEngine::add()()": "class-cake.cache.engine.arrayengine.html#add()", "ArrayEngine::clear()()": "class-cake.cache.engine.arrayengine.html#clear()", "ArrayEngine::clearGroup()()": "class-cake.cache.engine.arrayengine.html#clearGroup()", "ArrayEngine::configShallow()()": "class-cake.cache.engine.arrayengine.html#configShallow()", "ArrayEngine::decrement()()": "class-cake.cache.engine.arrayengine.html#decrement()", "ArrayEngine::delete()()": "class-cake.cache.engine.arrayengine.html#delete()", "ArrayEngine::deleteMultiple()()": "class-cake.cache.engine.arrayengine.html#deleteMultiple()", "ArrayEngine::duration()()": "class-cake.cache.engine.arrayengine.html#duration()", "ArrayEngine::ensureValidKey()()": "class-cake.cache.engine.arrayengine.html#ensureValidKey()", "ArrayEngine::ensureValidType()()": "class-cake.cache.engine.arrayengine.html#ensureValidType()", "ArrayEngine::get()()": "class-cake.cache.engine.arrayengine.html#get()", "ArrayEngine::getConfig()()": "class-cake.cache.engine.arrayengine.html#getConfig()", "ArrayEngine::getConfigOrFail()()": "class-cake.cache.engine.arrayengine.html#getConfigOrFail()", "ArrayEngine::getMultiple()()": "class-cake.cache.engine.arrayengine.html#getMultiple()", "ArrayEngine::groups()()": "class-cake.cache.engine.arrayengine.html#groups()", "ArrayEngine::has()()": "class-cake.cache.engine.arrayengine.html#has()", "ArrayEngine::increment()()": "class-cake.cache.engine.arrayengine.html#increment()", "ArrayEngine::init()()": "class-cake.cache.engine.arrayengine.html#init()", "ArrayEngine::set()()": "class-cake.cache.engine.arrayengine.html#set()", "ArrayEngine::setConfig()()": "class-cake.cache.engine.arrayengine.html#setConfig()", "ArrayEngine::setMultiple()()": "class-cake.cache.engine.arrayengine.html#setMultiple()", "ArrayEngine::warning()()": "class-cake.cache.engine.arrayengine.html#warning()", "ArrayItemNode (class)": "class-cake.error.debug.arrayitemnode.html", "ArrayItemNode::__construct()()": "class-cake.error.debug.arrayitemnode.html#__construct()", "ArrayItemNode::getChildren()()": "class-cake.error.debug.arrayitemnode.html#getChildren()", "ArrayItemNode::getKey()()": "class-cake.error.debug.arrayitemnode.html#getKey()", "ArrayItemNode::getValue()()": "class-cake.error.debug.arrayitemnode.html#getValue()", "ArrayLog (class)": "class-cake.log.engine.arraylog.html", "ArrayLog::$_config": "class-cake.log.engine.arraylog.html#$_config", "ArrayLog::$_configInitialized": "class-cake.log.engine.arraylog.html#$_configInitialized", "ArrayLog::$_defaultConfig": "class-cake.log.engine.arraylog.html#$_defaultConfig", "ArrayLog::$content": "class-cake.log.engine.arraylog.html#$content", "ArrayLog::$formatter": "class-cake.log.engine.arraylog.html#$formatter", "ArrayLog::__construct()()": "class-cake.log.engine.arraylog.html#__construct()", "ArrayLog::_configDelete()()": "class-cake.log.engine.arraylog.html#_configDelete()", "ArrayLog::_configRead()()": "class-cake.log.engine.arraylog.html#_configRead()", "ArrayLog::_configWrite()()": "class-cake.log.engine.arraylog.html#_configWrite()", "ArrayLog::_format()()": "class-cake.log.engine.arraylog.html#_format()", "ArrayLog::alert()()": "class-cake.log.engine.arraylog.html#alert()", "ArrayLog::clear()()": "class-cake.log.engine.arraylog.html#clear()", "ArrayLog::configShallow()()": "class-cake.log.engine.arraylog.html#configShallow()", "ArrayLog::critical()()": "class-cake.log.engine.arraylog.html#critical()", "ArrayLog::debug()()": "class-cake.log.engine.arraylog.html#debug()", "ArrayLog::emergency()()": "class-cake.log.engine.arraylog.html#emergency()", "ArrayLog::error()()": "class-cake.log.engine.arraylog.html#error()", "ArrayLog::getConfig()()": "class-cake.log.engine.arraylog.html#getConfig()", "ArrayLog::getConfigOrFail()()": "class-cake.log.engine.arraylog.html#getConfigOrFail()", "ArrayLog::info()()": "class-cake.log.engine.arraylog.html#info()", "ArrayLog::interpolate()()": "class-cake.log.engine.arraylog.html#interpolate()", "ArrayLog::levels()()": "class-cake.log.engine.arraylog.html#levels()", "ArrayLog::log()()": "class-cake.log.engine.arraylog.html#log()", "ArrayLog::notice()()": "class-cake.log.engine.arraylog.html#notice()", "ArrayLog::read()()": "class-cake.log.engine.arraylog.html#read()", "ArrayLog::scopes()()": "class-cake.log.engine.arraylog.html#scopes()", "ArrayLog::setConfig()()": "class-cake.log.engine.arraylog.html#setConfig()", "ArrayLog::warning()()": "class-cake.log.engine.arraylog.html#warning()", "ArrayNode (class)": "class-cake.error.debug.arraynode.html", "ArrayNode::__construct()()": "class-cake.error.debug.arraynode.html#__construct()", "ArrayNode::add()()": "class-cake.error.debug.arraynode.html#add()", "ArrayNode::getChildren()()": "class-cake.error.debug.arraynode.html#getChildren()", "ArrayNode::getValue()()": "class-cake.error.debug.arraynode.html#getValue()", "Asset (class)": "class-cake.routing.asset.html", "Asset::$inflectionType": "class-cake.routing.asset.html#$inflectionType", "Asset::assetTimestamp()()": "class-cake.routing.asset.html#assetTimestamp()", "Asset::cssUrl()()": "class-cake.routing.asset.html#cssUrl()", "Asset::encodeUrl()()": "class-cake.routing.asset.html#encodeUrl()", "Asset::imageUrl()()": "class-cake.routing.asset.html#imageUrl()", "Asset::inflectString()()": "class-cake.routing.asset.html#inflectString()", "Asset::pluginSplit()()": "class-cake.routing.asset.html#pluginSplit()", "Asset::requestWebroot()()": "class-cake.routing.asset.html#requestWebroot()", "Asset::scriptUrl()()": "class-cake.routing.asset.html#scriptUrl()", "Asset::setInflectionType()()": "class-cake.routing.asset.html#setInflectionType()", "Asset::url()()": "class-cake.routing.asset.html#url()", "Asset::webroot()()": "class-cake.routing.asset.html#webroot()", "AssetMiddleware (class)": "class-cake.routing.middleware.assetmiddleware.html", "AssetMiddleware::$cacheTime": "class-cake.routing.middleware.assetmiddleware.html#$cacheTime", "AssetMiddleware::__construct()()": "class-cake.routing.middleware.assetmiddleware.html#__construct()", "AssetMiddleware::_getAssetFile()()": "class-cake.routing.middleware.assetmiddleware.html#_getAssetFile()", "AssetMiddleware::deliverAsset()()": "class-cake.routing.middleware.assetmiddleware.html#deliverAsset()", "AssetMiddleware::isNotModified()()": "class-cake.routing.middleware.assetmiddleware.html#isNotModified()", "AssetMiddleware::process()()": "class-cake.routing.middleware.assetmiddleware.html#process()", "Association (class)": "class-cake.orm.association.html", "Association::$_bindingKey": "class-cake.orm.association.html#$_bindingKey", "Association::$_cascadeCallbacks": "class-cake.orm.association.html#$_cascadeCallbacks", "Association::$_className": "class-cake.orm.association.html#$_className", "Association::$_conditions": "class-cake.orm.association.html#$_conditions", "Association::$_dependent": "class-cake.orm.association.html#$_dependent", "Association::$_finder": "class-cake.orm.association.html#$_finder", "Association::$_foreignKey": "class-cake.orm.association.html#$_foreignKey", "Association::$_joinType": "class-cake.orm.association.html#$_joinType", "Association::$_name": "class-cake.orm.association.html#$_name", "Association::$_propertyName": "class-cake.orm.association.html#$_propertyName", "Association::$_sourceTable": "class-cake.orm.association.html#$_sourceTable", "Association::$_strategy": "class-cake.orm.association.html#$_strategy", "Association::$_tableLocator": "class-cake.orm.association.html#$_tableLocator", "Association::$_targetTable": "class-cake.orm.association.html#$_targetTable", "Association::$_validStrategies": "class-cake.orm.association.html#$_validStrategies", "Association::$defaultTable": "class-cake.orm.association.html#$defaultTable", "Association::__call()()": "class-cake.orm.association.html#__call()", "Association::__construct()()": "class-cake.orm.association.html#__construct()", "Association::__get()()": "class-cake.orm.association.html#__get()", "Association::__isset()()": "class-cake.orm.association.html#__isset()", "Association::_appendFields()()": "class-cake.orm.association.html#_appendFields()", "Association::_appendNotMatching()()": "class-cake.orm.association.html#_appendNotMatching()", "Association::_bindNewAssociations()()": "class-cake.orm.association.html#_bindNewAssociations()", "Association::_camelize()()": "class-cake.orm.association.html#_camelize()", "Association::_dispatchBeforeFind()()": "class-cake.orm.association.html#_dispatchBeforeFind()", "Association::_entityName()()": "class-cake.orm.association.html#_entityName()", "Association::_extractFinder()()": "class-cake.orm.association.html#_extractFinder()", "Association::_fixtureName()()": "class-cake.orm.association.html#_fixtureName()", "Association::_formatAssociationResults()()": "class-cake.orm.association.html#_formatAssociationResults()", "Association::_joinCondition()()": "class-cake.orm.association.html#_joinCondition()", "Association::_modelKey()()": "class-cake.orm.association.html#_modelKey()", "Association::_modelNameFromKey()()": "class-cake.orm.association.html#_modelNameFromKey()", "Association::_options()()": "class-cake.orm.association.html#_options()", "Association::_pluginNamespace()()": "class-cake.orm.association.html#_pluginNamespace()", "Association::_pluginPath()()": "class-cake.orm.association.html#_pluginPath()", "Association::_pluralHumanName()()": "class-cake.orm.association.html#_pluralHumanName()", "Association::_propertyName()()": "class-cake.orm.association.html#_propertyName()", "Association::_singularHumanName()()": "class-cake.orm.association.html#_singularHumanName()", "Association::_singularName()()": "class-cake.orm.association.html#_singularName()", "Association::_variableName()()": "class-cake.orm.association.html#_variableName()", "Association::attachTo()()": "class-cake.orm.association.html#attachTo()", "Association::canBeJoined()()": "class-cake.orm.association.html#canBeJoined()", "Association::cascadeDelete()()": "class-cake.orm.association.html#cascadeDelete()", "Association::defaultRowValue()()": "class-cake.orm.association.html#defaultRowValue()", "Association::deleteAll()()": "class-cake.orm.association.html#deleteAll()", "Association::eagerLoader()()": "class-cake.orm.association.html#eagerLoader()", "Association::exists()()": "class-cake.orm.association.html#exists()", "Association::fetchTable()()": "class-cake.orm.association.html#fetchTable()", "Association::find()()": "class-cake.orm.association.html#find()", "Association::getBindingKey()()": "class-cake.orm.association.html#getBindingKey()", "Association::getCascadeCallbacks()()": "class-cake.orm.association.html#getCascadeCallbacks()", "Association::getClassName()()": "class-cake.orm.association.html#getClassName()", "Association::getConditions()()": "class-cake.orm.association.html#getConditions()", "Association::getDependent()()": "class-cake.orm.association.html#getDependent()", "Association::getFinder()()": "class-cake.orm.association.html#getFinder()", "Association::getForeignKey()()": "class-cake.orm.association.html#getForeignKey()", "Association::getJoinType()()": "class-cake.orm.association.html#getJoinType()", "Association::getName()()": "class-cake.orm.association.html#getName()", "Association::getProperty()()": "class-cake.orm.association.html#getProperty()", "Association::getSource()()": "class-cake.orm.association.html#getSource()", "Association::getStrategy()()": "class-cake.orm.association.html#getStrategy()", "Association::getTableLocator()()": "class-cake.orm.association.html#getTableLocator()", "Association::getTarget()()": "class-cake.orm.association.html#getTarget()", "Association::isOwningSide()()": "class-cake.orm.association.html#isOwningSide()", "Association::requiresKeys()()": "class-cake.orm.association.html#requiresKeys()", "Association::saveAssociated()()": "class-cake.orm.association.html#saveAssociated()", "Association::setBindingKey()()": "class-cake.orm.association.html#setBindingKey()", "Association::setCascadeCallbacks()()": "class-cake.orm.association.html#setCascadeCallbacks()", "Association::setClassName()()": "class-cake.orm.association.html#setClassName()", "Association::setConditions()()": "class-cake.orm.association.html#setConditions()", "Association::setDependent()()": "class-cake.orm.association.html#setDependent()", "Association::setFinder()()": "class-cake.orm.association.html#setFinder()", "Association::setForeignKey()()": "class-cake.orm.association.html#setForeignKey()", "Association::setJoinType()()": "class-cake.orm.association.html#setJoinType()", "Association::setName()()": "class-cake.orm.association.html#setName()", "Association::setProperty()()": "class-cake.orm.association.html#setProperty()", "Association::setSource()()": "class-cake.orm.association.html#setSource()", "Association::setStrategy()()": "class-cake.orm.association.html#setStrategy()", "Association::setTableLocator()()": "class-cake.orm.association.html#setTableLocator()", "Association::setTarget()()": "class-cake.orm.association.html#setTarget()", "Association::transformRow()()": "class-cake.orm.association.html#transformRow()", "Association::type()()": "class-cake.orm.association.html#type()", "Association::updateAll()()": "class-cake.orm.association.html#updateAll()", "AssociationCollection (class)": "class-cake.orm.associationcollection.html", "AssociationCollection::$_items": "class-cake.orm.associationcollection.html#$_items", "AssociationCollection::$_tableLocator": "class-cake.orm.associationcollection.html#$_tableLocator", "AssociationCollection::$defaultTable": "class-cake.orm.associationcollection.html#$defaultTable", "AssociationCollection::__construct()()": "class-cake.orm.associationcollection.html#__construct()", "AssociationCollection::_normalizeAssociations()()": "class-cake.orm.associationcollection.html#_normalizeAssociations()", "AssociationCollection::_save()()": "class-cake.orm.associationcollection.html#_save()", "AssociationCollection::_saveAssociations()()": "class-cake.orm.associationcollection.html#_saveAssociations()", "AssociationCollection::add()()": "class-cake.orm.associationcollection.html#add()", "AssociationCollection::cascadeDelete()()": "class-cake.orm.associationcollection.html#cascadeDelete()", "AssociationCollection::fetchTable()()": "class-cake.orm.associationcollection.html#fetchTable()", "AssociationCollection::get()()": "class-cake.orm.associationcollection.html#get()", "AssociationCollection::getByProperty()()": "class-cake.orm.associationcollection.html#getByProperty()", "AssociationCollection::getByType()()": "class-cake.orm.associationcollection.html#getByType()", "AssociationCollection::getIterator()()": "class-cake.orm.associationcollection.html#getIterator()", "AssociationCollection::getTableLocator()()": "class-cake.orm.associationcollection.html#getTableLocator()", "AssociationCollection::has()()": "class-cake.orm.associationcollection.html#has()", "AssociationCollection::keys()()": "class-cake.orm.associationcollection.html#keys()", "AssociationCollection::load()()": "class-cake.orm.associationcollection.html#load()", "AssociationCollection::normalizeKeys()()": "class-cake.orm.associationcollection.html#normalizeKeys()", "AssociationCollection::remove()()": "class-cake.orm.associationcollection.html#remove()", "AssociationCollection::removeAll()()": "class-cake.orm.associationcollection.html#removeAll()", "AssociationCollection::saveChildren()()": "class-cake.orm.associationcollection.html#saveChildren()", "AssociationCollection::saveParents()()": "class-cake.orm.associationcollection.html#saveParents()", "AssociationCollection::setTableLocator()()": "class-cake.orm.associationcollection.html#setTableLocator()", "AssociationsNormalizerTrait (trait)": "trait-cake.orm.associationsnormalizertrait.html", "Auth (namespace)": "namespace-cake.auth.html", "Auth\\Storage (namespace)": "namespace-cake.auth.storage.html", "AuthComponent (class)": "class-cake.controller.component.authcomponent.html", "AuthComponent::$_authenticateObjects": "class-cake.controller.component.authcomponent.html#$_authenticateObjects", "AuthComponent::$_authenticationProvider": "class-cake.controller.component.authcomponent.html#$_authenticationProvider", "AuthComponent::$_authorizationProvider": "class-cake.controller.component.authcomponent.html#$_authorizationProvider", "AuthComponent::$_authorizeObjects": "class-cake.controller.component.authcomponent.html#$_authorizeObjects", "AuthComponent::$_componentMap": "class-cake.controller.component.authcomponent.html#$_componentMap", "AuthComponent::$_config": "class-cake.controller.component.authcomponent.html#$_config", "AuthComponent::$_configInitialized": "class-cake.controller.component.authcomponent.html#$_configInitialized", "AuthComponent::$_defaultConfig": "class-cake.controller.component.authcomponent.html#$_defaultConfig", "AuthComponent::$_eventClass": "class-cake.controller.component.authcomponent.html#$_eventClass", "AuthComponent::$_eventManager": "class-cake.controller.component.authcomponent.html#$_eventManager", "AuthComponent::$_registry": "class-cake.controller.component.authcomponent.html#$_registry", "AuthComponent::$_storage": "class-cake.controller.component.authcomponent.html#$_storage", "AuthComponent::$allowedActions": "class-cake.controller.component.authcomponent.html#$allowedActions", "AuthComponent::$components": "class-cake.controller.component.authcomponent.html#$components", "AuthComponent::$Flash": "class-cake.controller.component.authcomponent.html#$Flash", "AuthComponent::$RequestHandler": "class-cake.controller.component.authcomponent.html#$RequestHandler", "AuthComponent::__construct()()": "class-cake.controller.component.authcomponent.html#__construct()", "AuthComponent::__debugInfo()()": "class-cake.controller.component.authcomponent.html#__debugInfo()", "AuthComponent::__get()()": "class-cake.controller.component.authcomponent.html#__get()", "AuthComponent::__set()()": "class-cake.controller.component.authcomponent.html#__set()", "AuthComponent::_configDelete()()": "class-cake.controller.component.authcomponent.html#_configDelete()", "AuthComponent::_configRead()()": "class-cake.controller.component.authcomponent.html#_configRead()", "AuthComponent::_configWrite()()": "class-cake.controller.component.authcomponent.html#_configWrite()", "AuthComponent::_getUrlToRedirectBackTo()()": "class-cake.controller.component.authcomponent.html#_getUrlToRedirectBackTo()", "AuthComponent::_getUser()()": "class-cake.controller.component.authcomponent.html#_getUser()", "AuthComponent::_isAllowed()()": "class-cake.controller.component.authcomponent.html#_isAllowed()", "AuthComponent::_isLoginAction()()": "class-cake.controller.component.authcomponent.html#_isLoginAction()", "AuthComponent::_loginActionRedirectUrl()()": "class-cake.controller.component.authcomponent.html#_loginActionRedirectUrl()", "AuthComponent::_setDefaults()()": "class-cake.controller.component.authcomponent.html#_setDefaults()", "AuthComponent::_unauthenticated()()": "class-cake.controller.component.authcomponent.html#_unauthenticated()", "AuthComponent::_unauthorized()()": "class-cake.controller.component.authcomponent.html#_unauthorized()", "AuthComponent::allow()()": "class-cake.controller.component.authcomponent.html#allow()", "AuthComponent::authCheck()()": "class-cake.controller.component.authcomponent.html#authCheck()", "AuthComponent::authenticationProvider()()": "class-cake.controller.component.authcomponent.html#authenticationProvider()", "AuthComponent::authorizationProvider()()": "class-cake.controller.component.authcomponent.html#authorizationProvider()", "AuthComponent::configShallow()()": "class-cake.controller.component.authcomponent.html#configShallow()", "AuthComponent::constructAuthenticate()()": "class-cake.controller.component.authcomponent.html#constructAuthenticate()", "AuthComponent::constructAuthorize()()": "class-cake.controller.component.authcomponent.html#constructAuthorize()", "AuthComponent::deny()()": "class-cake.controller.component.authcomponent.html#deny()", "AuthComponent::dispatchEvent()()": "class-cake.controller.component.authcomponent.html#dispatchEvent()", "AuthComponent::flash()()": "class-cake.controller.component.authcomponent.html#flash()", "AuthComponent::getAuthenticate()()": "class-cake.controller.component.authcomponent.html#getAuthenticate()", "AuthComponent::getAuthorize()()": "class-cake.controller.component.authcomponent.html#getAuthorize()", "AuthComponent::getConfig()()": "class-cake.controller.component.authcomponent.html#getConfig()", "AuthComponent::getConfigOrFail()()": "class-cake.controller.component.authcomponent.html#getConfigOrFail()", "AuthComponent::getController()()": "class-cake.controller.component.authcomponent.html#getController()", "AuthComponent::getEventManager()()": "class-cake.controller.component.authcomponent.html#getEventManager()", "AuthComponent::identify()()": "class-cake.controller.component.authcomponent.html#identify()", "AuthComponent::implementedEvents()()": "class-cake.controller.component.authcomponent.html#implementedEvents()", "AuthComponent::initialize()()": "class-cake.controller.component.authcomponent.html#initialize()", "AuthComponent::isAuthorized()()": "class-cake.controller.component.authcomponent.html#isAuthorized()", "AuthComponent::log()()": "class-cake.controller.component.authcomponent.html#log()", "AuthComponent::logout()()": "class-cake.controller.component.authcomponent.html#logout()", "AuthComponent::redirectUrl()()": "class-cake.controller.component.authcomponent.html#redirectUrl()", "AuthComponent::setConfig()()": "class-cake.controller.component.authcomponent.html#setConfig()", "AuthComponent::setEventManager()()": "class-cake.controller.component.authcomponent.html#setEventManager()", "AuthComponent::setUser()()": "class-cake.controller.component.authcomponent.html#setUser()", "AuthComponent::startup()()": "class-cake.controller.component.authcomponent.html#startup()", "AuthComponent::storage()()": "class-cake.controller.component.authcomponent.html#storage()", "AuthComponent::user()()": "class-cake.controller.component.authcomponent.html#user()", "AuthSecurityException (class)": "class-cake.controller.exception.authsecurityexception.html", "BadRequestException (class)": "class-cake.http.exception.badrequestexception.html", "BaseApplication (class)": "class-cake.http.baseapplication.html", "BaseApplication::$_eventClass": "class-cake.http.baseapplication.html#$_eventClass", "BaseApplication::$_eventManager": "class-cake.http.baseapplication.html#$_eventManager", "BaseApplication::$configDir": "class-cake.http.baseapplication.html#$configDir", "BaseApplication::$container": "class-cake.http.baseapplication.html#$container", "BaseApplication::$controllerFactory": "class-cake.http.baseapplication.html#$controllerFactory", "BaseApplication::$plugins": "class-cake.http.baseapplication.html#$plugins", "BaseApplication::__construct()()": "class-cake.http.baseapplication.html#__construct()", "BaseApplication::addOptionalPlugin()()": "class-cake.http.baseapplication.html#addOptionalPlugin()", "BaseApplication::addPlugin()()": "class-cake.http.baseapplication.html#addPlugin()", "BaseApplication::bootstrap()()": "class-cake.http.baseapplication.html#bootstrap()", "BaseApplication::buildContainer()()": "class-cake.http.baseapplication.html#buildContainer()", "BaseApplication::console()()": "class-cake.http.baseapplication.html#console()", "BaseApplication::dispatchEvent()()": "class-cake.http.baseapplication.html#dispatchEvent()", "BaseApplication::getContainer()()": "class-cake.http.baseapplication.html#getContainer()", "BaseApplication::getEventManager()()": "class-cake.http.baseapplication.html#getEventManager()", "BaseApplication::getPlugins()()": "class-cake.http.baseapplication.html#getPlugins()", "BaseApplication::handle()()": "class-cake.http.baseapplication.html#handle()", "BaseApplication::middleware()()": "class-cake.http.baseapplication.html#middleware()", "BaseApplication::pluginBootstrap()()": "class-cake.http.baseapplication.html#pluginBootstrap()", "BaseApplication::pluginConsole()()": "class-cake.http.baseapplication.html#pluginConsole()", "BaseApplication::pluginMiddleware()()": "class-cake.http.baseapplication.html#pluginMiddleware()", "BaseApplication::pluginRoutes()()": "class-cake.http.baseapplication.html#pluginRoutes()", "BaseApplication::routes()()": "class-cake.http.baseapplication.html#routes()", "BaseApplication::services()()": "class-cake.http.baseapplication.html#services()", "BaseApplication::setEventManager()()": "class-cake.http.baseapplication.html#setEventManager()", "BaseAuthenticate (class)": "class-cake.auth.baseauthenticate.html", "BaseAuthenticate::$_config": "class-cake.auth.baseauthenticate.html#$_config", "BaseAuthenticate::$_configInitialized": "class-cake.auth.baseauthenticate.html#$_configInitialized", "BaseAuthenticate::$_defaultConfig": "class-cake.auth.baseauthenticate.html#$_defaultConfig", "BaseAuthenticate::$_needsPasswordRehash": "class-cake.auth.baseauthenticate.html#$_needsPasswordRehash", "BaseAuthenticate::$_passwordHasher": "class-cake.auth.baseauthenticate.html#$_passwordHasher", "BaseAuthenticate::$_registry": "class-cake.auth.baseauthenticate.html#$_registry", "BaseAuthenticate::$_tableLocator": "class-cake.auth.baseauthenticate.html#$_tableLocator", "BaseAuthenticate::$defaultTable": "class-cake.auth.baseauthenticate.html#$defaultTable", "BaseAuthenticate::__construct()()": "class-cake.auth.baseauthenticate.html#__construct()", "BaseAuthenticate::_configDelete()()": "class-cake.auth.baseauthenticate.html#_configDelete()", "BaseAuthenticate::_configRead()()": "class-cake.auth.baseauthenticate.html#_configRead()", "BaseAuthenticate::_configWrite()()": "class-cake.auth.baseauthenticate.html#_configWrite()", "BaseAuthenticate::_findUser()()": "class-cake.auth.baseauthenticate.html#_findUser()", "BaseAuthenticate::_query()()": "class-cake.auth.baseauthenticate.html#_query()", "BaseAuthenticate::authenticate()()": "class-cake.auth.baseauthenticate.html#authenticate()", "BaseAuthenticate::configShallow()()": "class-cake.auth.baseauthenticate.html#configShallow()", "BaseAuthenticate::fetchTable()()": "class-cake.auth.baseauthenticate.html#fetchTable()", "BaseAuthenticate::getConfig()()": "class-cake.auth.baseauthenticate.html#getConfig()", "BaseAuthenticate::getConfigOrFail()()": "class-cake.auth.baseauthenticate.html#getConfigOrFail()", "BaseAuthenticate::getTableLocator()()": "class-cake.auth.baseauthenticate.html#getTableLocator()", "BaseAuthenticate::getUser()()": "class-cake.auth.baseauthenticate.html#getUser()", "BaseAuthenticate::implementedEvents()()": "class-cake.auth.baseauthenticate.html#implementedEvents()", "BaseAuthenticate::needsPasswordRehash()()": "class-cake.auth.baseauthenticate.html#needsPasswordRehash()", "BaseAuthenticate::passwordHasher()()": "class-cake.auth.baseauthenticate.html#passwordHasher()", "BaseAuthenticate::setConfig()()": "class-cake.auth.baseauthenticate.html#setConfig()", "BaseAuthenticate::setTableLocator()()": "class-cake.auth.baseauthenticate.html#setTableLocator()", "BaseAuthenticate::unauthenticated()()": "class-cake.auth.baseauthenticate.html#unauthenticated()", "BaseAuthorize (class)": "class-cake.auth.baseauthorize.html", "BaseAuthorize::$_config": "class-cake.auth.baseauthorize.html#$_config", "BaseAuthorize::$_configInitialized": "class-cake.auth.baseauthorize.html#$_configInitialized", "BaseAuthorize::$_defaultConfig": "class-cake.auth.baseauthorize.html#$_defaultConfig", "BaseAuthorize::$_registry": "class-cake.auth.baseauthorize.html#$_registry", "BaseAuthorize::__construct()()": "class-cake.auth.baseauthorize.html#__construct()", "BaseAuthorize::_configDelete()()": "class-cake.auth.baseauthorize.html#_configDelete()", "BaseAuthorize::_configRead()()": "class-cake.auth.baseauthorize.html#_configRead()", "BaseAuthorize::_configWrite()()": "class-cake.auth.baseauthorize.html#_configWrite()", "BaseAuthorize::authorize()()": "class-cake.auth.baseauthorize.html#authorize()", "BaseAuthorize::configShallow()()": "class-cake.auth.baseauthorize.html#configShallow()", "BaseAuthorize::getConfig()()": "class-cake.auth.baseauthorize.html#getConfig()", "BaseAuthorize::getConfigOrFail()()": "class-cake.auth.baseauthorize.html#getConfigOrFail()", "BaseAuthorize::setConfig()()": "class-cake.auth.baseauthorize.html#setConfig()", "BaseCommand (class)": "class-cake.console.basecommand.html", "BaseCommand::$name": "class-cake.console.basecommand.html#$name", "BaseCommand::abort()()": "class-cake.console.basecommand.html#abort()", "BaseCommand::buildOptionParser()()": "class-cake.console.basecommand.html#buildOptionParser()", "BaseCommand::defaultName()()": "class-cake.console.basecommand.html#defaultName()", "BaseCommand::displayHelp()()": "class-cake.console.basecommand.html#displayHelp()", "BaseCommand::execute()()": "class-cake.console.basecommand.html#execute()", "BaseCommand::executeCommand()()": "class-cake.console.basecommand.html#executeCommand()", "BaseCommand::getDescription()()": "class-cake.console.basecommand.html#getDescription()", "BaseCommand::getName()()": "class-cake.console.basecommand.html#getName()", "BaseCommand::getOptionParser()()": "class-cake.console.basecommand.html#getOptionParser()", "BaseCommand::getRootName()()": "class-cake.console.basecommand.html#getRootName()", "BaseCommand::initialize()()": "class-cake.console.basecommand.html#initialize()", "BaseCommand::run()()": "class-cake.console.basecommand.html#run()", "BaseCommand::setName()()": "class-cake.console.basecommand.html#setName()", "BaseCommand::setOutputLevel()()": "class-cake.console.basecommand.html#setOutputLevel()", "BaseErrorHandler (class)": "class-cake.error.baseerrorhandler.html", "BaseErrorHandler::$_config": "class-cake.error.baseerrorhandler.html#$_config", "BaseErrorHandler::$_configInitialized": "class-cake.error.baseerrorhandler.html#$_configInitialized", "BaseErrorHandler::$_defaultConfig": "class-cake.error.baseerrorhandler.html#$_defaultConfig", "BaseErrorHandler::$_handled": "class-cake.error.baseerrorhandler.html#$_handled", "BaseErrorHandler::$logger": "class-cake.error.baseerrorhandler.html#$logger", "BaseErrorHandler::_configDelete()()": "class-cake.error.baseerrorhandler.html#_configDelete()", "BaseErrorHandler::_configRead()()": "class-cake.error.baseerrorhandler.html#_configRead()", "BaseErrorHandler::_configWrite()()": "class-cake.error.baseerrorhandler.html#_configWrite()", "BaseErrorHandler::_displayError()()": "class-cake.error.baseerrorhandler.html#_displayError()", "BaseErrorHandler::_displayException()()": "class-cake.error.baseerrorhandler.html#_displayException()", "BaseErrorHandler::_logError()()": "class-cake.error.baseerrorhandler.html#_logError()", "BaseErrorHandler::_stop()()": "class-cake.error.baseerrorhandler.html#_stop()", "BaseErrorHandler::configShallow()()": "class-cake.error.baseerrorhandler.html#configShallow()", "BaseErrorHandler::getConfig()()": "class-cake.error.baseerrorhandler.html#getConfig()", "BaseErrorHandler::getConfigOrFail()()": "class-cake.error.baseerrorhandler.html#getConfigOrFail()", "BaseErrorHandler::getLogger()()": "class-cake.error.baseerrorhandler.html#getLogger()", "BaseErrorHandler::handleError()()": "class-cake.error.baseerrorhandler.html#handleError()", "BaseErrorHandler::handleException()()": "class-cake.error.baseerrorhandler.html#handleException()", "BaseErrorHandler::handleFatalError()()": "class-cake.error.baseerrorhandler.html#handleFatalError()", "BaseErrorHandler::increaseMemoryLimit()()": "class-cake.error.baseerrorhandler.html#increaseMemoryLimit()", "BaseErrorHandler::logException()()": "class-cake.error.baseerrorhandler.html#logException()", "BaseErrorHandler::mapErrorCode()()": "class-cake.error.baseerrorhandler.html#mapErrorCode()", "BaseErrorHandler::register()()": "class-cake.error.baseerrorhandler.html#register()", "BaseErrorHandler::setConfig()()": "class-cake.error.baseerrorhandler.html#setConfig()", "BaseErrorHandler::wrapAndHandleException()()": "class-cake.error.baseerrorhandler.html#wrapAndHandleException()", "BaseLog (class)": "class-cake.log.engine.baselog.html", "BaseLog::$_config": "class-cake.log.engine.baselog.html#$_config", "BaseLog::$_configInitialized": "class-cake.log.engine.baselog.html#$_configInitialized", "BaseLog::$_defaultConfig": "class-cake.log.engine.baselog.html#$_defaultConfig", "BaseLog::$formatter": "class-cake.log.engine.baselog.html#$formatter", "BaseLog::__construct()()": "class-cake.log.engine.baselog.html#__construct()", "BaseLog::_configDelete()()": "class-cake.log.engine.baselog.html#_configDelete()", "BaseLog::_configRead()()": "class-cake.log.engine.baselog.html#_configRead()", "BaseLog::_configWrite()()": "class-cake.log.engine.baselog.html#_configWrite()", "BaseLog::_format()()": "class-cake.log.engine.baselog.html#_format()", "BaseLog::alert()()": "class-cake.log.engine.baselog.html#alert()", "BaseLog::configShallow()()": "class-cake.log.engine.baselog.html#configShallow()", "BaseLog::critical()()": "class-cake.log.engine.baselog.html#critical()", "BaseLog::debug()()": "class-cake.log.engine.baselog.html#debug()", "BaseLog::emergency()()": "class-cake.log.engine.baselog.html#emergency()", "BaseLog::error()()": "class-cake.log.engine.baselog.html#error()", "BaseLog::getConfig()()": "class-cake.log.engine.baselog.html#getConfig()", "BaseLog::getConfigOrFail()()": "class-cake.log.engine.baselog.html#getConfigOrFail()", "BaseLog::info()()": "class-cake.log.engine.baselog.html#info()", "BaseLog::interpolate()()": "class-cake.log.engine.baselog.html#interpolate()", "BaseLog::levels()()": "class-cake.log.engine.baselog.html#levels()", "BaseLog::log()()": "class-cake.log.engine.baselog.html#log()", "BaseLog::notice()()": "class-cake.log.engine.baselog.html#notice()", "BaseLog::scopes()()": "class-cake.log.engine.baselog.html#scopes()", "BaseLog::setConfig()()": "class-cake.log.engine.baselog.html#setConfig()", "BaseLog::warning()()": "class-cake.log.engine.baselog.html#warning()", "BasePlugin (class)": "class-cake.core.baseplugin.html", "BasePlugin::$bootstrapEnabled": "class-cake.core.baseplugin.html#$bootstrapEnabled", "BasePlugin::$classPath": "class-cake.core.baseplugin.html#$classPath", "BasePlugin::$configPath": "class-cake.core.baseplugin.html#$configPath", "BasePlugin::$consoleEnabled": "class-cake.core.baseplugin.html#$consoleEnabled", "BasePlugin::$middlewareEnabled": "class-cake.core.baseplugin.html#$middlewareEnabled", "BasePlugin::$name": "class-cake.core.baseplugin.html#$name", "BasePlugin::$path": "class-cake.core.baseplugin.html#$path", "BasePlugin::$routesEnabled": "class-cake.core.baseplugin.html#$routesEnabled", "BasePlugin::$servicesEnabled": "class-cake.core.baseplugin.html#$servicesEnabled", "BasePlugin::$templatePath": "class-cake.core.baseplugin.html#$templatePath", "BasePlugin::__construct()()": "class-cake.core.baseplugin.html#__construct()", "BasePlugin::bootstrap()()": "class-cake.core.baseplugin.html#bootstrap()", "BasePlugin::checkHook()()": "class-cake.core.baseplugin.html#checkHook()", "BasePlugin::console()()": "class-cake.core.baseplugin.html#console()", "BasePlugin::disable()()": "class-cake.core.baseplugin.html#disable()", "BasePlugin::enable()()": "class-cake.core.baseplugin.html#enable()", "BasePlugin::getClassPath()()": "class-cake.core.baseplugin.html#getClassPath()", "BasePlugin::getConfigPath()()": "class-cake.core.baseplugin.html#getConfigPath()", "BasePlugin::getName()()": "class-cake.core.baseplugin.html#getName()", "BasePlugin::getPath()()": "class-cake.core.baseplugin.html#getPath()", "BasePlugin::getTemplatePath()()": "class-cake.core.baseplugin.html#getTemplatePath()", "BasePlugin::initialize()()": "class-cake.core.baseplugin.html#initialize()", "BasePlugin::isEnabled()()": "class-cake.core.baseplugin.html#isEnabled()", "BasePlugin::middleware()()": "class-cake.core.baseplugin.html#middleware()", "BasePlugin::routes()()": "class-cake.core.baseplugin.html#routes()", "BasePlugin::services()()": "class-cake.core.baseplugin.html#services()", "BaseType (class)": "class-cake.database.type.basetype.html", "BaseType::$_name": "class-cake.database.type.basetype.html#$_name", "BaseType::__construct()()": "class-cake.database.type.basetype.html#__construct()", "BaseType::getBaseType()()": "class-cake.database.type.basetype.html#getBaseType()", "BaseType::getName()()": "class-cake.database.type.basetype.html#getName()", "BaseType::marshal()()": "class-cake.database.type.basetype.html#marshal()", "BaseType::newId()()": "class-cake.database.type.basetype.html#newId()", "BaseType::toDatabase()()": "class-cake.database.type.basetype.html#toDatabase()", "BaseType::toPHP()()": "class-cake.database.type.basetype.html#toPHP()", "BaseType::toStatement()()": "class-cake.database.type.basetype.html#toStatement()", "Basic (class)": "class-cake.http.client.auth.basic.html", "Basic::_generateHeader()()": "class-cake.http.client.auth.basic.html#_generateHeader()", "Basic::authentication()()": "class-cake.http.client.auth.basic.html#authentication()", "Basic::proxyAuthentication()()": "class-cake.http.client.auth.basic.html#proxyAuthentication()", "BasicAuthenticate (class)": "class-cake.auth.basicauthenticate.html", "BasicAuthenticate::$_config": "class-cake.auth.basicauthenticate.html#$_config", "BasicAuthenticate::$_configInitialized": "class-cake.auth.basicauthenticate.html#$_configInitialized", "BasicAuthenticate::$_defaultConfig": "class-cake.auth.basicauthenticate.html#$_defaultConfig", "BasicAuthenticate::$_needsPasswordRehash": "class-cake.auth.basicauthenticate.html#$_needsPasswordRehash", "BasicAuthenticate::$_passwordHasher": "class-cake.auth.basicauthenticate.html#$_passwordHasher", "BasicAuthenticate::$_registry": "class-cake.auth.basicauthenticate.html#$_registry", "BasicAuthenticate::$_tableLocator": "class-cake.auth.basicauthenticate.html#$_tableLocator", "BasicAuthenticate::$defaultTable": "class-cake.auth.basicauthenticate.html#$defaultTable", "BasicAuthenticate::__construct()()": "class-cake.auth.basicauthenticate.html#__construct()", "BasicAuthenticate::_configDelete()()": "class-cake.auth.basicauthenticate.html#_configDelete()", "BasicAuthenticate::_configRead()()": "class-cake.auth.basicauthenticate.html#_configRead()", "BasicAuthenticate::_configWrite()()": "class-cake.auth.basicauthenticate.html#_configWrite()", "BasicAuthenticate::_findUser()()": "class-cake.auth.basicauthenticate.html#_findUser()", "BasicAuthenticate::_query()()": "class-cake.auth.basicauthenticate.html#_query()", "BasicAuthenticate::authenticate()()": "class-cake.auth.basicauthenticate.html#authenticate()", "BasicAuthenticate::configShallow()()": "class-cake.auth.basicauthenticate.html#configShallow()", "BasicAuthenticate::fetchTable()()": "class-cake.auth.basicauthenticate.html#fetchTable()", "BasicAuthenticate::getConfig()()": "class-cake.auth.basicauthenticate.html#getConfig()", "BasicAuthenticate::getConfigOrFail()()": "class-cake.auth.basicauthenticate.html#getConfigOrFail()", "BasicAuthenticate::getTableLocator()()": "class-cake.auth.basicauthenticate.html#getTableLocator()", "BasicAuthenticate::getUser()()": "class-cake.auth.basicauthenticate.html#getUser()", "BasicAuthenticate::implementedEvents()()": "class-cake.auth.basicauthenticate.html#implementedEvents()", "BasicAuthenticate::loginHeaders()()": "class-cake.auth.basicauthenticate.html#loginHeaders()", "BasicAuthenticate::needsPasswordRehash()()": "class-cake.auth.basicauthenticate.html#needsPasswordRehash()", "BasicAuthenticate::passwordHasher()()": "class-cake.auth.basicauthenticate.html#passwordHasher()", "BasicAuthenticate::setConfig()()": "class-cake.auth.basicauthenticate.html#setConfig()", "BasicAuthenticate::setTableLocator()()": "class-cake.auth.basicauthenticate.html#setTableLocator()", "BasicAuthenticate::unauthenticated()()": "class-cake.auth.basicauthenticate.html#unauthenticated()", "BasicWidget (class)": "class-cake.view.widget.basicwidget.html", "BasicWidget::$_templates": "class-cake.view.widget.basicwidget.html#$_templates", "BasicWidget::$defaults": "class-cake.view.widget.basicwidget.html#$defaults", "BasicWidget::__construct()()": "class-cake.view.widget.basicwidget.html#__construct()", "BasicWidget::mergeDefaults()()": "class-cake.view.widget.basicwidget.html#mergeDefaults()", "BasicWidget::render()()": "class-cake.view.widget.basicwidget.html#render()", "BasicWidget::secureFields()()": "class-cake.view.widget.basicwidget.html#secureFields()", "BasicWidget::setMaxLength()()": "class-cake.view.widget.basicwidget.html#setMaxLength()", "BasicWidget::setRequired()()": "class-cake.view.widget.basicwidget.html#setRequired()", "BasicWidget::setStep()()": "class-cake.view.widget.basicwidget.html#setStep()", "BatchCastingInterface (interface)": "interface-cake.database.type.batchcastinginterface.html", "Behavior (class)": "class-cake.orm.behavior.html", "Behavior::$_config": "class-cake.orm.behavior.html#$_config", "Behavior::$_configInitialized": "class-cake.orm.behavior.html#$_configInitialized", "Behavior::$_defaultConfig": "class-cake.orm.behavior.html#$_defaultConfig", "Behavior::$_reflectionCache": "class-cake.orm.behavior.html#$_reflectionCache", "Behavior::$_table": "class-cake.orm.behavior.html#$_table", "Behavior::__construct()()": "class-cake.orm.behavior.html#__construct()", "Behavior::_configDelete()()": "class-cake.orm.behavior.html#_configDelete()", "Behavior::_configRead()()": "class-cake.orm.behavior.html#_configRead()", "Behavior::_configWrite()()": "class-cake.orm.behavior.html#_configWrite()", "Behavior::_reflectionCache()()": "class-cake.orm.behavior.html#_reflectionCache()", "Behavior::_resolveMethodAliases()()": "class-cake.orm.behavior.html#_resolveMethodAliases()", "Behavior::configShallow()()": "class-cake.orm.behavior.html#configShallow()", "Behavior::getConfig()()": "class-cake.orm.behavior.html#getConfig()", "Behavior::getConfigOrFail()()": "class-cake.orm.behavior.html#getConfigOrFail()", "Behavior::getTable()()": "class-cake.orm.behavior.html#getTable()", "Behavior::implementedEvents()()": "class-cake.orm.behavior.html#implementedEvents()", "Behavior::implementedFinders()()": "class-cake.orm.behavior.html#implementedFinders()", "Behavior::implementedMethods()()": "class-cake.orm.behavior.html#implementedMethods()", "Behavior::initialize()()": "class-cake.orm.behavior.html#initialize()", "Behavior::setConfig()()": "class-cake.orm.behavior.html#setConfig()", "Behavior::table()()": "class-cake.orm.behavior.html#table()", "Behavior::verifyConfig()()": "class-cake.orm.behavior.html#verifyConfig()", "BehaviorRegistry (class)": "class-cake.orm.behaviorregistry.html", "BehaviorRegistry::$_eventClass": "class-cake.orm.behaviorregistry.html#$_eventClass", "BehaviorRegistry::$_eventManager": "class-cake.orm.behaviorregistry.html#$_eventManager", "BehaviorRegistry::$_finderMap": "class-cake.orm.behaviorregistry.html#$_finderMap", "BehaviorRegistry::$_loaded": "class-cake.orm.behaviorregistry.html#$_loaded", "BehaviorRegistry::$_methodMap": "class-cake.orm.behaviorregistry.html#$_methodMap", "BehaviorRegistry::$_table": "class-cake.orm.behaviorregistry.html#$_table", "BehaviorRegistry::__construct()()": "class-cake.orm.behaviorregistry.html#__construct()", "BehaviorRegistry::__debugInfo()()": "class-cake.orm.behaviorregistry.html#__debugInfo()", "BehaviorRegistry::__get()()": "class-cake.orm.behaviorregistry.html#__get()", "BehaviorRegistry::__isset()()": "class-cake.orm.behaviorregistry.html#__isset()", "BehaviorRegistry::__set()()": "class-cake.orm.behaviorregistry.html#__set()", "BehaviorRegistry::__unset()()": "class-cake.orm.behaviorregistry.html#__unset()", "BehaviorRegistry::_checkDuplicate()()": "class-cake.orm.behaviorregistry.html#_checkDuplicate()", "BehaviorRegistry::_create()()": "class-cake.orm.behaviorregistry.html#_create()", "BehaviorRegistry::_getMethods()()": "class-cake.orm.behaviorregistry.html#_getMethods()", "BehaviorRegistry::_resolveClassName()()": "class-cake.orm.behaviorregistry.html#_resolveClassName()", "BehaviorRegistry::_throwMissingClassError()()": "class-cake.orm.behaviorregistry.html#_throwMissingClassError()", "BehaviorRegistry::call()()": "class-cake.orm.behaviorregistry.html#call()", "BehaviorRegistry::callFinder()()": "class-cake.orm.behaviorregistry.html#callFinder()", "BehaviorRegistry::className()()": "class-cake.orm.behaviorregistry.html#className()", "BehaviorRegistry::count()()": "class-cake.orm.behaviorregistry.html#count()", "BehaviorRegistry::dispatchEvent()()": "class-cake.orm.behaviorregistry.html#dispatchEvent()", "BehaviorRegistry::get()()": "class-cake.orm.behaviorregistry.html#get()", "BehaviorRegistry::getEventManager()()": "class-cake.orm.behaviorregistry.html#getEventManager()", "BehaviorRegistry::getIterator()()": "class-cake.orm.behaviorregistry.html#getIterator()", "BehaviorRegistry::has()()": "class-cake.orm.behaviorregistry.html#has()", "BehaviorRegistry::hasFinder()()": "class-cake.orm.behaviorregistry.html#hasFinder()", "BehaviorRegistry::hasMethod()()": "class-cake.orm.behaviorregistry.html#hasMethod()", "BehaviorRegistry::load()()": "class-cake.orm.behaviorregistry.html#load()", "BehaviorRegistry::loaded()()": "class-cake.orm.behaviorregistry.html#loaded()", "BehaviorRegistry::normalizeArray()()": "class-cake.orm.behaviorregistry.html#normalizeArray()", "BehaviorRegistry::reset()()": "class-cake.orm.behaviorregistry.html#reset()", "BehaviorRegistry::set()()": "class-cake.orm.behaviorregistry.html#set()", "BehaviorRegistry::setEventManager()()": "class-cake.orm.behaviorregistry.html#setEventManager()", "BehaviorRegistry::setTable()()": "class-cake.orm.behaviorregistry.html#setTable()", "BehaviorRegistry::unload()()": "class-cake.orm.behaviorregistry.html#unload()", "BelongsTo (class)": "class-cake.orm.association.belongsto.html", "BelongsTo::$_bindingKey": "class-cake.orm.association.belongsto.html#$_bindingKey", "BelongsTo::$_cascadeCallbacks": "class-cake.orm.association.belongsto.html#$_cascadeCallbacks", "BelongsTo::$_className": "class-cake.orm.association.belongsto.html#$_className", "BelongsTo::$_conditions": "class-cake.orm.association.belongsto.html#$_conditions", "BelongsTo::$_dependent": "class-cake.orm.association.belongsto.html#$_dependent", "BelongsTo::$_finder": "class-cake.orm.association.belongsto.html#$_finder", "BelongsTo::$_foreignKey": "class-cake.orm.association.belongsto.html#$_foreignKey", "BelongsTo::$_joinType": "class-cake.orm.association.belongsto.html#$_joinType", "BelongsTo::$_name": "class-cake.orm.association.belongsto.html#$_name", "BelongsTo::$_propertyName": "class-cake.orm.association.belongsto.html#$_propertyName", "BelongsTo::$_sourceTable": "class-cake.orm.association.belongsto.html#$_sourceTable", "BelongsTo::$_strategy": "class-cake.orm.association.belongsto.html#$_strategy", "BelongsTo::$_tableLocator": "class-cake.orm.association.belongsto.html#$_tableLocator", "BelongsTo::$_targetTable": "class-cake.orm.association.belongsto.html#$_targetTable", "BelongsTo::$_validStrategies": "class-cake.orm.association.belongsto.html#$_validStrategies", "BelongsTo::$defaultTable": "class-cake.orm.association.belongsto.html#$defaultTable", "BelongsTo::__call()()": "class-cake.orm.association.belongsto.html#__call()", "BelongsTo::__construct()()": "class-cake.orm.association.belongsto.html#__construct()", "BelongsTo::__get()()": "class-cake.orm.association.belongsto.html#__get()", "BelongsTo::__isset()()": "class-cake.orm.association.belongsto.html#__isset()", "BelongsTo::_appendFields()()": "class-cake.orm.association.belongsto.html#_appendFields()", "BelongsTo::_appendNotMatching()()": "class-cake.orm.association.belongsto.html#_appendNotMatching()", "BelongsTo::_bindNewAssociations()()": "class-cake.orm.association.belongsto.html#_bindNewAssociations()", "BelongsTo::_camelize()()": "class-cake.orm.association.belongsto.html#_camelize()", "BelongsTo::_dispatchBeforeFind()()": "class-cake.orm.association.belongsto.html#_dispatchBeforeFind()", "BelongsTo::_entityName()()": "class-cake.orm.association.belongsto.html#_entityName()", "BelongsTo::_extractFinder()()": "class-cake.orm.association.belongsto.html#_extractFinder()", "BelongsTo::_fixtureName()()": "class-cake.orm.association.belongsto.html#_fixtureName()", "BelongsTo::_formatAssociationResults()()": "class-cake.orm.association.belongsto.html#_formatAssociationResults()", "BelongsTo::_joinCondition()()": "class-cake.orm.association.belongsto.html#_joinCondition()", "BelongsTo::_modelKey()()": "class-cake.orm.association.belongsto.html#_modelKey()", "BelongsTo::_modelNameFromKey()()": "class-cake.orm.association.belongsto.html#_modelNameFromKey()", "BelongsTo::_options()()": "class-cake.orm.association.belongsto.html#_options()", "BelongsTo::_pluginNamespace()()": "class-cake.orm.association.belongsto.html#_pluginNamespace()", "BelongsTo::_pluginPath()()": "class-cake.orm.association.belongsto.html#_pluginPath()", "BelongsTo::_pluralHumanName()()": "class-cake.orm.association.belongsto.html#_pluralHumanName()", "BelongsTo::_propertyName()()": "class-cake.orm.association.belongsto.html#_propertyName()", "BelongsTo::_singularHumanName()()": "class-cake.orm.association.belongsto.html#_singularHumanName()", "BelongsTo::_singularName()()": "class-cake.orm.association.belongsto.html#_singularName()", "BelongsTo::_variableName()()": "class-cake.orm.association.belongsto.html#_variableName()", "BelongsTo::attachTo()()": "class-cake.orm.association.belongsto.html#attachTo()", "BelongsTo::canBeJoined()()": "class-cake.orm.association.belongsto.html#canBeJoined()", "BelongsTo::cascadeDelete()()": "class-cake.orm.association.belongsto.html#cascadeDelete()", "BelongsTo::defaultRowValue()()": "class-cake.orm.association.belongsto.html#defaultRowValue()", "BelongsTo::deleteAll()()": "class-cake.orm.association.belongsto.html#deleteAll()", "BelongsTo::eagerLoader()()": "class-cake.orm.association.belongsto.html#eagerLoader()", "BelongsTo::exists()()": "class-cake.orm.association.belongsto.html#exists()", "BelongsTo::fetchTable()()": "class-cake.orm.association.belongsto.html#fetchTable()", "BelongsTo::find()()": "class-cake.orm.association.belongsto.html#find()", "BelongsTo::getBindingKey()()": "class-cake.orm.association.belongsto.html#getBindingKey()", "BelongsTo::getCascadeCallbacks()()": "class-cake.orm.association.belongsto.html#getCascadeCallbacks()", "BelongsTo::getClassName()()": "class-cake.orm.association.belongsto.html#getClassName()", "BelongsTo::getConditions()()": "class-cake.orm.association.belongsto.html#getConditions()", "BelongsTo::getDependent()()": "class-cake.orm.association.belongsto.html#getDependent()", "BelongsTo::getFinder()()": "class-cake.orm.association.belongsto.html#getFinder()", "BelongsTo::getForeignKey()()": "class-cake.orm.association.belongsto.html#getForeignKey()", "BelongsTo::getJoinType()()": "class-cake.orm.association.belongsto.html#getJoinType()", "BelongsTo::getName()()": "class-cake.orm.association.belongsto.html#getName()", "BelongsTo::getProperty()()": "class-cake.orm.association.belongsto.html#getProperty()", "BelongsTo::getSource()()": "class-cake.orm.association.belongsto.html#getSource()", "BelongsTo::getStrategy()()": "class-cake.orm.association.belongsto.html#getStrategy()", "BelongsTo::getTableLocator()()": "class-cake.orm.association.belongsto.html#getTableLocator()", "BelongsTo::getTarget()()": "class-cake.orm.association.belongsto.html#getTarget()", "BelongsTo::isOwningSide()()": "class-cake.orm.association.belongsto.html#isOwningSide()", "BelongsTo::requiresKeys()()": "class-cake.orm.association.belongsto.html#requiresKeys()", "BelongsTo::saveAssociated()()": "class-cake.orm.association.belongsto.html#saveAssociated()", "BelongsTo::setBindingKey()()": "class-cake.orm.association.belongsto.html#setBindingKey()", "BelongsTo::setCascadeCallbacks()()": "class-cake.orm.association.belongsto.html#setCascadeCallbacks()", "BelongsTo::setClassName()()": "class-cake.orm.association.belongsto.html#setClassName()", "BelongsTo::setConditions()()": "class-cake.orm.association.belongsto.html#setConditions()", "BelongsTo::setDependent()()": "class-cake.orm.association.belongsto.html#setDependent()", "BelongsTo::setFinder()()": "class-cake.orm.association.belongsto.html#setFinder()", "BelongsTo::setForeignKey()()": "class-cake.orm.association.belongsto.html#setForeignKey()", "BelongsTo::setJoinType()()": "class-cake.orm.association.belongsto.html#setJoinType()", "BelongsTo::setName()()": "class-cake.orm.association.belongsto.html#setName()", "BelongsTo::setProperty()()": "class-cake.orm.association.belongsto.html#setProperty()", "BelongsTo::setSource()()": "class-cake.orm.association.belongsto.html#setSource()", "BelongsTo::setStrategy()()": "class-cake.orm.association.belongsto.html#setStrategy()", "BelongsTo::setTableLocator()()": "class-cake.orm.association.belongsto.html#setTableLocator()", "BelongsTo::setTarget()()": "class-cake.orm.association.belongsto.html#setTarget()", "BelongsTo::transformRow()()": "class-cake.orm.association.belongsto.html#transformRow()", "BelongsTo::type()()": "class-cake.orm.association.belongsto.html#type()", "BelongsTo::updateAll()()": "class-cake.orm.association.belongsto.html#updateAll()", "BelongsToMany (class)": "class-cake.orm.association.belongstomany.html", "BelongsToMany::$_bindingKey": "class-cake.orm.association.belongstomany.html#$_bindingKey", "BelongsToMany::$_cascadeCallbacks": "class-cake.orm.association.belongstomany.html#$_cascadeCallbacks", "BelongsToMany::$_className": "class-cake.orm.association.belongstomany.html#$_className", "BelongsToMany::$_conditions": "class-cake.orm.association.belongstomany.html#$_conditions", "BelongsToMany::$_dependent": "class-cake.orm.association.belongstomany.html#$_dependent", "BelongsToMany::$_finder": "class-cake.orm.association.belongstomany.html#$_finder", "BelongsToMany::$_foreignKey": "class-cake.orm.association.belongstomany.html#$_foreignKey", "BelongsToMany::$_joinType": "class-cake.orm.association.belongstomany.html#$_joinType", "BelongsToMany::$_junctionAssociationName": "class-cake.orm.association.belongstomany.html#$_junctionAssociationName", "BelongsToMany::$_junctionConditions": "class-cake.orm.association.belongstomany.html#$_junctionConditions", "BelongsToMany::$_junctionProperty": "class-cake.orm.association.belongstomany.html#$_junctionProperty", "BelongsToMany::$_junctionTable": "class-cake.orm.association.belongstomany.html#$_junctionTable", "BelongsToMany::$_junctionTableName": "class-cake.orm.association.belongstomany.html#$_junctionTableName", "BelongsToMany::$_name": "class-cake.orm.association.belongstomany.html#$_name", "BelongsToMany::$_propertyName": "class-cake.orm.association.belongstomany.html#$_propertyName", "BelongsToMany::$_saveStrategy": "class-cake.orm.association.belongstomany.html#$_saveStrategy", "BelongsToMany::$_sort": "class-cake.orm.association.belongstomany.html#$_sort", "BelongsToMany::$_sourceTable": "class-cake.orm.association.belongstomany.html#$_sourceTable", "BelongsToMany::$_strategy": "class-cake.orm.association.belongstomany.html#$_strategy", "BelongsToMany::$_tableLocator": "class-cake.orm.association.belongstomany.html#$_tableLocator", "BelongsToMany::$_targetConditions": "class-cake.orm.association.belongstomany.html#$_targetConditions", "BelongsToMany::$_targetForeignKey": "class-cake.orm.association.belongstomany.html#$_targetForeignKey", "BelongsToMany::$_targetTable": "class-cake.orm.association.belongstomany.html#$_targetTable", "BelongsToMany::$_through": "class-cake.orm.association.belongstomany.html#$_through", "BelongsToMany::$_validStrategies": "class-cake.orm.association.belongstomany.html#$_validStrategies", "BelongsToMany::$defaultTable": "class-cake.orm.association.belongstomany.html#$defaultTable", "BelongsToMany::__call()()": "class-cake.orm.association.belongstomany.html#__call()", "BelongsToMany::__construct()()": "class-cake.orm.association.belongstomany.html#__construct()", "BelongsToMany::__get()()": "class-cake.orm.association.belongstomany.html#__get()", "BelongsToMany::__isset()()": "class-cake.orm.association.belongstomany.html#__isset()", "BelongsToMany::_appendFields()()": "class-cake.orm.association.belongstomany.html#_appendFields()", "BelongsToMany::_appendJunctionJoin()()": "class-cake.orm.association.belongstomany.html#_appendJunctionJoin()", "BelongsToMany::_appendNotMatching()()": "class-cake.orm.association.belongstomany.html#_appendNotMatching()", "BelongsToMany::_bindNewAssociations()()": "class-cake.orm.association.belongstomany.html#_bindNewAssociations()", "BelongsToMany::_camelize()()": "class-cake.orm.association.belongstomany.html#_camelize()", "BelongsToMany::_checkPersistenceStatus()()": "class-cake.orm.association.belongstomany.html#_checkPersistenceStatus()", "BelongsToMany::_collectJointEntities()()": "class-cake.orm.association.belongstomany.html#_collectJointEntities()", "BelongsToMany::_diffLinks()()": "class-cake.orm.association.belongstomany.html#_diffLinks()", "BelongsToMany::_dispatchBeforeFind()()": "class-cake.orm.association.belongstomany.html#_dispatchBeforeFind()", "BelongsToMany::_entityName()()": "class-cake.orm.association.belongstomany.html#_entityName()", "BelongsToMany::_extractFinder()()": "class-cake.orm.association.belongstomany.html#_extractFinder()", "BelongsToMany::_fixtureName()()": "class-cake.orm.association.belongstomany.html#_fixtureName()", "BelongsToMany::_formatAssociationResults()()": "class-cake.orm.association.belongstomany.html#_formatAssociationResults()", "BelongsToMany::_generateJunctionAssociations()()": "class-cake.orm.association.belongstomany.html#_generateJunctionAssociations()", "BelongsToMany::_generateSourceAssociations()()": "class-cake.orm.association.belongstomany.html#_generateSourceAssociations()", "BelongsToMany::_generateTargetAssociations()()": "class-cake.orm.association.belongstomany.html#_generateTargetAssociations()", "BelongsToMany::_joinCondition()()": "class-cake.orm.association.belongstomany.html#_joinCondition()", "BelongsToMany::_junctionAssociationName()()": "class-cake.orm.association.belongstomany.html#_junctionAssociationName()", "BelongsToMany::_junctionTableName()()": "class-cake.orm.association.belongstomany.html#_junctionTableName()", "BelongsToMany::_modelKey()()": "class-cake.orm.association.belongstomany.html#_modelKey()", "BelongsToMany::_modelNameFromKey()()": "class-cake.orm.association.belongstomany.html#_modelNameFromKey()", "BelongsToMany::_options()()": "class-cake.orm.association.belongstomany.html#_options()", "BelongsToMany::_pluginNamespace()()": "class-cake.orm.association.belongstomany.html#_pluginNamespace()", "BelongsToMany::_pluginPath()()": "class-cake.orm.association.belongstomany.html#_pluginPath()", "BelongsToMany::_pluralHumanName()()": "class-cake.orm.association.belongstomany.html#_pluralHumanName()", "BelongsToMany::_propertyName()()": "class-cake.orm.association.belongstomany.html#_propertyName()", "BelongsToMany::_saveLinks()()": "class-cake.orm.association.belongstomany.html#_saveLinks()", "BelongsToMany::_saveTarget()()": "class-cake.orm.association.belongstomany.html#_saveTarget()", "BelongsToMany::_singularHumanName()()": "class-cake.orm.association.belongstomany.html#_singularHumanName()", "BelongsToMany::_singularName()()": "class-cake.orm.association.belongstomany.html#_singularName()", "BelongsToMany::_variableName()()": "class-cake.orm.association.belongstomany.html#_variableName()", "BelongsToMany::attachTo()()": "class-cake.orm.association.belongstomany.html#attachTo()", "BelongsToMany::canBeJoined()()": "class-cake.orm.association.belongstomany.html#canBeJoined()", "BelongsToMany::cascadeDelete()()": "class-cake.orm.association.belongstomany.html#cascadeDelete()", "BelongsToMany::defaultRowValue()()": "class-cake.orm.association.belongstomany.html#defaultRowValue()", "BelongsToMany::deleteAll()()": "class-cake.orm.association.belongstomany.html#deleteAll()", "BelongsToMany::eagerLoader()()": "class-cake.orm.association.belongstomany.html#eagerLoader()", "BelongsToMany::exists()()": "class-cake.orm.association.belongstomany.html#exists()", "BelongsToMany::fetchTable()()": "class-cake.orm.association.belongstomany.html#fetchTable()", "BelongsToMany::find()()": "class-cake.orm.association.belongstomany.html#find()", "BelongsToMany::getBindingKey()()": "class-cake.orm.association.belongstomany.html#getBindingKey()", "BelongsToMany::getCascadeCallbacks()()": "class-cake.orm.association.belongstomany.html#getCascadeCallbacks()", "BelongsToMany::getClassName()()": "class-cake.orm.association.belongstomany.html#getClassName()", "BelongsToMany::getConditions()()": "class-cake.orm.association.belongstomany.html#getConditions()", "BelongsToMany::getDependent()()": "class-cake.orm.association.belongstomany.html#getDependent()", "BelongsToMany::getFinder()()": "class-cake.orm.association.belongstomany.html#getFinder()", "BelongsToMany::getForeignKey()()": "class-cake.orm.association.belongstomany.html#getForeignKey()", "BelongsToMany::getJoinType()()": "class-cake.orm.association.belongstomany.html#getJoinType()", "BelongsToMany::getName()()": "class-cake.orm.association.belongstomany.html#getName()", "BelongsToMany::getProperty()()": "class-cake.orm.association.belongstomany.html#getProperty()", "BelongsToMany::getSaveStrategy()()": "class-cake.orm.association.belongstomany.html#getSaveStrategy()", "BelongsToMany::getSort()()": "class-cake.orm.association.belongstomany.html#getSort()", "BelongsToMany::getSource()()": "class-cake.orm.association.belongstomany.html#getSource()", "BelongsToMany::getStrategy()()": "class-cake.orm.association.belongstomany.html#getStrategy()", "BelongsToMany::getTableLocator()()": "class-cake.orm.association.belongstomany.html#getTableLocator()", "BelongsToMany::getTarget()()": "class-cake.orm.association.belongstomany.html#getTarget()", "BelongsToMany::getTargetForeignKey()()": "class-cake.orm.association.belongstomany.html#getTargetForeignKey()", "BelongsToMany::getThrough()()": "class-cake.orm.association.belongstomany.html#getThrough()", "BelongsToMany::isOwningSide()()": "class-cake.orm.association.belongstomany.html#isOwningSide()", "BelongsToMany::junction()()": "class-cake.orm.association.belongstomany.html#junction()", "BelongsToMany::junctionConditions()()": "class-cake.orm.association.belongstomany.html#junctionConditions()", "BelongsToMany::link()()": "class-cake.orm.association.belongstomany.html#link()", "BelongsToMany::replaceLinks()()": "class-cake.orm.association.belongstomany.html#replaceLinks()", "BelongsToMany::requiresKeys()()": "class-cake.orm.association.belongstomany.html#requiresKeys()", "BelongsToMany::saveAssociated()()": "class-cake.orm.association.belongstomany.html#saveAssociated()", "BelongsToMany::setBindingKey()()": "class-cake.orm.association.belongstomany.html#setBindingKey()", "BelongsToMany::setCascadeCallbacks()()": "class-cake.orm.association.belongstomany.html#setCascadeCallbacks()", "BelongsToMany::setClassName()()": "class-cake.orm.association.belongstomany.html#setClassName()", "BelongsToMany::setConditions()()": "class-cake.orm.association.belongstomany.html#setConditions()", "BelongsToMany::setDependent()()": "class-cake.orm.association.belongstomany.html#setDependent()", "BelongsToMany::setFinder()()": "class-cake.orm.association.belongstomany.html#setFinder()", "BelongsToMany::setForeignKey()()": "class-cake.orm.association.belongstomany.html#setForeignKey()", "BelongsToMany::setJoinType()()": "class-cake.orm.association.belongstomany.html#setJoinType()", "BelongsToMany::setName()()": "class-cake.orm.association.belongstomany.html#setName()", "BelongsToMany::setProperty()()": "class-cake.orm.association.belongstomany.html#setProperty()", "BelongsToMany::setSaveStrategy()()": "class-cake.orm.association.belongstomany.html#setSaveStrategy()", "BelongsToMany::setSort()()": "class-cake.orm.association.belongstomany.html#setSort()", "BelongsToMany::setSource()()": "class-cake.orm.association.belongstomany.html#setSource()", "BelongsToMany::setStrategy()()": "class-cake.orm.association.belongstomany.html#setStrategy()", "BelongsToMany::setTableLocator()()": "class-cake.orm.association.belongstomany.html#setTableLocator()", "BelongsToMany::setTarget()()": "class-cake.orm.association.belongstomany.html#setTarget()", "BelongsToMany::setTargetForeignKey()()": "class-cake.orm.association.belongstomany.html#setTargetForeignKey()", "BelongsToMany::setThrough()()": "class-cake.orm.association.belongstomany.html#setThrough()", "BelongsToMany::targetConditions()()": "class-cake.orm.association.belongstomany.html#targetConditions()", "BelongsToMany::transformRow()()": "class-cake.orm.association.belongstomany.html#transformRow()", "BelongsToMany::type()()": "class-cake.orm.association.belongstomany.html#type()", "BelongsToMany::unlink()()": "class-cake.orm.association.belongstomany.html#unlink()", "BelongsToMany::updateAll()()": "class-cake.orm.association.belongstomany.html#updateAll()", "BetweenExpression (class)": "class-cake.database.expression.betweenexpression.html", "BetweenExpression::$_field": "class-cake.database.expression.betweenexpression.html#$_field", "BetweenExpression::$_from": "class-cake.database.expression.betweenexpression.html#$_from", "BetweenExpression::$_to": "class-cake.database.expression.betweenexpression.html#$_to", "BetweenExpression::$_type": "class-cake.database.expression.betweenexpression.html#$_type", "BetweenExpression::__clone()()": "class-cake.database.expression.betweenexpression.html#__clone()", "BetweenExpression::__construct()()": "class-cake.database.expression.betweenexpression.html#__construct()", "BetweenExpression::_bindValue()()": "class-cake.database.expression.betweenexpression.html#_bindValue()", "BetweenExpression::_castToExpression()()": "class-cake.database.expression.betweenexpression.html#_castToExpression()", "BetweenExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.betweenexpression.html#_requiresToExpressionCasting()", "BetweenExpression::getField()()": "class-cake.database.expression.betweenexpression.html#getField()", "BetweenExpression::setField()()": "class-cake.database.expression.betweenexpression.html#setField()", "BetweenExpression::sql()()": "class-cake.database.expression.betweenexpression.html#sql()", "BetweenExpression::traverse()()": "class-cake.database.expression.betweenexpression.html#traverse()", "BinaryType (class)": "class-cake.database.type.binarytype.html", "BinaryType::$_name": "class-cake.database.type.binarytype.html#$_name", "BinaryType::__construct()()": "class-cake.database.type.binarytype.html#__construct()", "BinaryType::getBaseType()()": "class-cake.database.type.binarytype.html#getBaseType()", "BinaryType::getName()()": "class-cake.database.type.binarytype.html#getName()", "BinaryType::marshal()()": "class-cake.database.type.binarytype.html#marshal()", "BinaryType::newId()()": "class-cake.database.type.binarytype.html#newId()", "BinaryType::toDatabase()()": "class-cake.database.type.binarytype.html#toDatabase()", "BinaryType::toPHP()()": "class-cake.database.type.binarytype.html#toPHP()", "BinaryType::toStatement()()": "class-cake.database.type.binarytype.html#toStatement()", "BinaryUuidType (class)": "class-cake.database.type.binaryuuidtype.html", "BinaryUuidType::$_name": "class-cake.database.type.binaryuuidtype.html#$_name", "BinaryUuidType::__construct()()": "class-cake.database.type.binaryuuidtype.html#__construct()", "BinaryUuidType::convertBinaryUuidToString()()": "class-cake.database.type.binaryuuidtype.html#convertBinaryUuidToString()", "BinaryUuidType::convertStringToBinaryUuid()()": "class-cake.database.type.binaryuuidtype.html#convertStringToBinaryUuid()", "BinaryUuidType::getBaseType()()": "class-cake.database.type.binaryuuidtype.html#getBaseType()", "BinaryUuidType::getName()()": "class-cake.database.type.binaryuuidtype.html#getName()", "BinaryUuidType::marshal()()": "class-cake.database.type.binaryuuidtype.html#marshal()", "BinaryUuidType::newId()()": "class-cake.database.type.binaryuuidtype.html#newId()", "BinaryUuidType::toDatabase()()": "class-cake.database.type.binaryuuidtype.html#toDatabase()", "BinaryUuidType::toPHP()()": "class-cake.database.type.binaryuuidtype.html#toPHP()", "BinaryUuidType::toStatement()()": "class-cake.database.type.binaryuuidtype.html#toStatement()", "BodyContains (class)": "class-cake.testsuite.constraint.response.bodycontains.html", "BodyContains::$ignoreCase": "class-cake.testsuite.constraint.response.bodycontains.html#$ignoreCase", "BodyContains::$response": "class-cake.testsuite.constraint.response.bodycontains.html#$response", "BodyContains::__construct()()": "class-cake.testsuite.constraint.response.bodycontains.html#__construct()", "BodyContains::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodycontains.html#_getBodyAsString()", "BodyContains::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodycontains.html#additionalFailureDescription()", "BodyContains::count()()": "class-cake.testsuite.constraint.response.bodycontains.html#count()", "BodyContains::evaluate()()": "class-cake.testsuite.constraint.response.bodycontains.html#evaluate()", "BodyContains::exporter()()": "class-cake.testsuite.constraint.response.bodycontains.html#exporter()", "BodyContains::fail()()": "class-cake.testsuite.constraint.response.bodycontains.html#fail()", "BodyContains::failureDescription()()": "class-cake.testsuite.constraint.response.bodycontains.html#failureDescription()", "BodyContains::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodycontains.html#failureDescriptionInContext()", "BodyContains::matches()()": "class-cake.testsuite.constraint.response.bodycontains.html#matches()", "BodyContains::reduce()()": "class-cake.testsuite.constraint.response.bodycontains.html#reduce()", "BodyContains::toString()()": "class-cake.testsuite.constraint.response.bodycontains.html#toString()", "BodyContains::toStringInContext()()": "class-cake.testsuite.constraint.response.bodycontains.html#toStringInContext()", "BodyEmpty (class)": "class-cake.testsuite.constraint.response.bodyempty.html", "BodyEmpty::$response": "class-cake.testsuite.constraint.response.bodyempty.html#$response", "BodyEmpty::__construct()()": "class-cake.testsuite.constraint.response.bodyempty.html#__construct()", "BodyEmpty::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodyempty.html#_getBodyAsString()", "BodyEmpty::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodyempty.html#additionalFailureDescription()", "BodyEmpty::count()()": "class-cake.testsuite.constraint.response.bodyempty.html#count()", "BodyEmpty::evaluate()()": "class-cake.testsuite.constraint.response.bodyempty.html#evaluate()", "BodyEmpty::exporter()()": "class-cake.testsuite.constraint.response.bodyempty.html#exporter()", "BodyEmpty::fail()()": "class-cake.testsuite.constraint.response.bodyempty.html#fail()", "BodyEmpty::failureDescription()()": "class-cake.testsuite.constraint.response.bodyempty.html#failureDescription()", "BodyEmpty::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodyempty.html#failureDescriptionInContext()", "BodyEmpty::matches()()": "class-cake.testsuite.constraint.response.bodyempty.html#matches()", "BodyEmpty::reduce()()": "class-cake.testsuite.constraint.response.bodyempty.html#reduce()", "BodyEmpty::toString()()": "class-cake.testsuite.constraint.response.bodyempty.html#toString()", "BodyEmpty::toStringInContext()()": "class-cake.testsuite.constraint.response.bodyempty.html#toStringInContext()", "BodyEquals (class)": "class-cake.testsuite.constraint.response.bodyequals.html", "BodyEquals::$response": "class-cake.testsuite.constraint.response.bodyequals.html#$response", "BodyEquals::__construct()()": "class-cake.testsuite.constraint.response.bodyequals.html#__construct()", "BodyEquals::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodyequals.html#_getBodyAsString()", "BodyEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodyequals.html#additionalFailureDescription()", "BodyEquals::count()()": "class-cake.testsuite.constraint.response.bodyequals.html#count()", "BodyEquals::evaluate()()": "class-cake.testsuite.constraint.response.bodyequals.html#evaluate()", "BodyEquals::exporter()()": "class-cake.testsuite.constraint.response.bodyequals.html#exporter()", "BodyEquals::fail()()": "class-cake.testsuite.constraint.response.bodyequals.html#fail()", "BodyEquals::failureDescription()()": "class-cake.testsuite.constraint.response.bodyequals.html#failureDescription()", "BodyEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodyequals.html#failureDescriptionInContext()", "BodyEquals::matches()()": "class-cake.testsuite.constraint.response.bodyequals.html#matches()", "BodyEquals::reduce()()": "class-cake.testsuite.constraint.response.bodyequals.html#reduce()", "BodyEquals::toString()()": "class-cake.testsuite.constraint.response.bodyequals.html#toString()", "BodyEquals::toStringInContext()()": "class-cake.testsuite.constraint.response.bodyequals.html#toStringInContext()", "BodyNotContains (class)": "class-cake.testsuite.constraint.response.bodynotcontains.html", "BodyNotContains::$ignoreCase": "class-cake.testsuite.constraint.response.bodynotcontains.html#$ignoreCase", "BodyNotContains::$response": "class-cake.testsuite.constraint.response.bodynotcontains.html#$response", "BodyNotContains::__construct()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#__construct()", "BodyNotContains::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#_getBodyAsString()", "BodyNotContains::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#additionalFailureDescription()", "BodyNotContains::count()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#count()", "BodyNotContains::evaluate()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#evaluate()", "BodyNotContains::exporter()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#exporter()", "BodyNotContains::fail()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#fail()", "BodyNotContains::failureDescription()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#failureDescription()", "BodyNotContains::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#failureDescriptionInContext()", "BodyNotContains::matches()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#matches()", "BodyNotContains::reduce()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#reduce()", "BodyNotContains::toString()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#toString()", "BodyNotContains::toStringInContext()()": "class-cake.testsuite.constraint.response.bodynotcontains.html#toStringInContext()", "BodyNotEmpty (class)": "class-cake.testsuite.constraint.response.bodynotempty.html", "BodyNotEmpty::$response": "class-cake.testsuite.constraint.response.bodynotempty.html#$response", "BodyNotEmpty::__construct()()": "class-cake.testsuite.constraint.response.bodynotempty.html#__construct()", "BodyNotEmpty::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodynotempty.html#_getBodyAsString()", "BodyNotEmpty::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodynotempty.html#additionalFailureDescription()", "BodyNotEmpty::count()()": "class-cake.testsuite.constraint.response.bodynotempty.html#count()", "BodyNotEmpty::evaluate()()": "class-cake.testsuite.constraint.response.bodynotempty.html#evaluate()", "BodyNotEmpty::exporter()()": "class-cake.testsuite.constraint.response.bodynotempty.html#exporter()", "BodyNotEmpty::fail()()": "class-cake.testsuite.constraint.response.bodynotempty.html#fail()", "BodyNotEmpty::failureDescription()()": "class-cake.testsuite.constraint.response.bodynotempty.html#failureDescription()", "BodyNotEmpty::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodynotempty.html#failureDescriptionInContext()", "BodyNotEmpty::matches()()": "class-cake.testsuite.constraint.response.bodynotempty.html#matches()", "BodyNotEmpty::reduce()()": "class-cake.testsuite.constraint.response.bodynotempty.html#reduce()", "BodyNotEmpty::toString()()": "class-cake.testsuite.constraint.response.bodynotempty.html#toString()", "BodyNotEmpty::toStringInContext()()": "class-cake.testsuite.constraint.response.bodynotempty.html#toStringInContext()", "BodyNotEquals (class)": "class-cake.testsuite.constraint.response.bodynotequals.html", "BodyNotEquals::$response": "class-cake.testsuite.constraint.response.bodynotequals.html#$response", "BodyNotEquals::__construct()()": "class-cake.testsuite.constraint.response.bodynotequals.html#__construct()", "BodyNotEquals::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodynotequals.html#_getBodyAsString()", "BodyNotEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodynotequals.html#additionalFailureDescription()", "BodyNotEquals::count()()": "class-cake.testsuite.constraint.response.bodynotequals.html#count()", "BodyNotEquals::evaluate()()": "class-cake.testsuite.constraint.response.bodynotequals.html#evaluate()", "BodyNotEquals::exporter()()": "class-cake.testsuite.constraint.response.bodynotequals.html#exporter()", "BodyNotEquals::fail()()": "class-cake.testsuite.constraint.response.bodynotequals.html#fail()", "BodyNotEquals::failureDescription()()": "class-cake.testsuite.constraint.response.bodynotequals.html#failureDescription()", "BodyNotEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodynotequals.html#failureDescriptionInContext()", "BodyNotEquals::matches()()": "class-cake.testsuite.constraint.response.bodynotequals.html#matches()", "BodyNotEquals::reduce()()": "class-cake.testsuite.constraint.response.bodynotequals.html#reduce()", "BodyNotEquals::toString()()": "class-cake.testsuite.constraint.response.bodynotequals.html#toString()", "BodyNotEquals::toStringInContext()()": "class-cake.testsuite.constraint.response.bodynotequals.html#toStringInContext()", "BodyNotRegExp (class)": "class-cake.testsuite.constraint.response.bodynotregexp.html", "BodyNotRegExp::$response": "class-cake.testsuite.constraint.response.bodynotregexp.html#$response", "BodyNotRegExp::__construct()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#__construct()", "BodyNotRegExp::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#_getBodyAsString()", "BodyNotRegExp::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#additionalFailureDescription()", "BodyNotRegExp::count()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#count()", "BodyNotRegExp::evaluate()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#evaluate()", "BodyNotRegExp::exporter()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#exporter()", "BodyNotRegExp::fail()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#fail()", "BodyNotRegExp::failureDescription()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#failureDescription()", "BodyNotRegExp::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#failureDescriptionInContext()", "BodyNotRegExp::matches()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#matches()", "BodyNotRegExp::reduce()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#reduce()", "BodyNotRegExp::toString()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#toString()", "BodyNotRegExp::toStringInContext()()": "class-cake.testsuite.constraint.response.bodynotregexp.html#toStringInContext()", "BodyParserMiddleware (class)": "class-cake.http.middleware.bodyparsermiddleware.html", "BodyParserMiddleware::$methods": "class-cake.http.middleware.bodyparsermiddleware.html#$methods", "BodyParserMiddleware::$parsers": "class-cake.http.middleware.bodyparsermiddleware.html#$parsers", "BodyParserMiddleware::__construct()()": "class-cake.http.middleware.bodyparsermiddleware.html#__construct()", "BodyParserMiddleware::addParser()()": "class-cake.http.middleware.bodyparsermiddleware.html#addParser()", "BodyParserMiddleware::decodeJson()()": "class-cake.http.middleware.bodyparsermiddleware.html#decodeJson()", "BodyParserMiddleware::decodeXml()()": "class-cake.http.middleware.bodyparsermiddleware.html#decodeXml()", "BodyParserMiddleware::getMethods()()": "class-cake.http.middleware.bodyparsermiddleware.html#getMethods()", "BodyParserMiddleware::getParsers()()": "class-cake.http.middleware.bodyparsermiddleware.html#getParsers()", "BodyParserMiddleware::process()()": "class-cake.http.middleware.bodyparsermiddleware.html#process()", "BodyParserMiddleware::setMethods()()": "class-cake.http.middleware.bodyparsermiddleware.html#setMethods()", "BodyRegExp (class)": "class-cake.testsuite.constraint.response.bodyregexp.html", "BodyRegExp::$response": "class-cake.testsuite.constraint.response.bodyregexp.html#$response", "BodyRegExp::__construct()()": "class-cake.testsuite.constraint.response.bodyregexp.html#__construct()", "BodyRegExp::_getBodyAsString()()": "class-cake.testsuite.constraint.response.bodyregexp.html#_getBodyAsString()", "BodyRegExp::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.bodyregexp.html#additionalFailureDescription()", "BodyRegExp::count()()": "class-cake.testsuite.constraint.response.bodyregexp.html#count()", "BodyRegExp::evaluate()()": "class-cake.testsuite.constraint.response.bodyregexp.html#evaluate()", "BodyRegExp::exporter()()": "class-cake.testsuite.constraint.response.bodyregexp.html#exporter()", "BodyRegExp::fail()()": "class-cake.testsuite.constraint.response.bodyregexp.html#fail()", "BodyRegExp::failureDescription()()": "class-cake.testsuite.constraint.response.bodyregexp.html#failureDescription()", "BodyRegExp::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.bodyregexp.html#failureDescriptionInContext()", "BodyRegExp::matches()()": "class-cake.testsuite.constraint.response.bodyregexp.html#matches()", "BodyRegExp::reduce()()": "class-cake.testsuite.constraint.response.bodyregexp.html#reduce()", "BodyRegExp::toString()()": "class-cake.testsuite.constraint.response.bodyregexp.html#toString()", "BodyRegExp::toStringInContext()()": "class-cake.testsuite.constraint.response.bodyregexp.html#toStringInContext()", "BoolType (class)": "class-cake.database.type.booltype.html", "BoolType::$_name": "class-cake.database.type.booltype.html#$_name", "BoolType::__construct()()": "class-cake.database.type.booltype.html#__construct()", "BoolType::getBaseType()()": "class-cake.database.type.booltype.html#getBaseType()", "BoolType::getName()()": "class-cake.database.type.booltype.html#getName()", "BoolType::manyToPHP()()": "class-cake.database.type.booltype.html#manyToPHP()", "BoolType::marshal()()": "class-cake.database.type.booltype.html#marshal()", "BoolType::newId()()": "class-cake.database.type.booltype.html#newId()", "BoolType::toDatabase()()": "class-cake.database.type.booltype.html#toDatabase()", "BoolType::toPHP()()": "class-cake.database.type.booltype.html#toPHP()", "BoolType::toStatement()()": "class-cake.database.type.booltype.html#toStatement()", "BreadcrumbsHelper (class)": "class-cake.view.helper.breadcrumbshelper.html", "BreadcrumbsHelper::$_config": "class-cake.view.helper.breadcrumbshelper.html#$_config", "BreadcrumbsHelper::$_configInitialized": "class-cake.view.helper.breadcrumbshelper.html#$_configInitialized", "BreadcrumbsHelper::$_defaultConfig": "class-cake.view.helper.breadcrumbshelper.html#$_defaultConfig", "BreadcrumbsHelper::$_helperMap": "class-cake.view.helper.breadcrumbshelper.html#$_helperMap", "BreadcrumbsHelper::$_templater": "class-cake.view.helper.breadcrumbshelper.html#$_templater", "BreadcrumbsHelper::$_View": "class-cake.view.helper.breadcrumbshelper.html#$_View", "BreadcrumbsHelper::$crumbs": "class-cake.view.helper.breadcrumbshelper.html#$crumbs", "BreadcrumbsHelper::$helpers": "class-cake.view.helper.breadcrumbshelper.html#$helpers", "BreadcrumbsHelper::$Url": "class-cake.view.helper.breadcrumbshelper.html#$Url", "BreadcrumbsHelper::__call()()": "class-cake.view.helper.breadcrumbshelper.html#__call()", "BreadcrumbsHelper::__construct()()": "class-cake.view.helper.breadcrumbshelper.html#__construct()", "BreadcrumbsHelper::__debugInfo()()": "class-cake.view.helper.breadcrumbshelper.html#__debugInfo()", "BreadcrumbsHelper::__get()()": "class-cake.view.helper.breadcrumbshelper.html#__get()", "BreadcrumbsHelper::_configDelete()()": "class-cake.view.helper.breadcrumbshelper.html#_configDelete()", "BreadcrumbsHelper::_configRead()()": "class-cake.view.helper.breadcrumbshelper.html#_configRead()", "BreadcrumbsHelper::_configWrite()()": "class-cake.view.helper.breadcrumbshelper.html#_configWrite()", "BreadcrumbsHelper::_confirm()()": "class-cake.view.helper.breadcrumbshelper.html#_confirm()", "BreadcrumbsHelper::add()()": "class-cake.view.helper.breadcrumbshelper.html#add()", "BreadcrumbsHelper::addClass()()": "class-cake.view.helper.breadcrumbshelper.html#addClass()", "BreadcrumbsHelper::configShallow()()": "class-cake.view.helper.breadcrumbshelper.html#configShallow()", "BreadcrumbsHelper::findCrumb()()": "class-cake.view.helper.breadcrumbshelper.html#findCrumb()", "BreadcrumbsHelper::formatTemplate()()": "class-cake.view.helper.breadcrumbshelper.html#formatTemplate()", "BreadcrumbsHelper::getConfig()()": "class-cake.view.helper.breadcrumbshelper.html#getConfig()", "BreadcrumbsHelper::getConfigOrFail()()": "class-cake.view.helper.breadcrumbshelper.html#getConfigOrFail()", "BreadcrumbsHelper::getCrumbs()()": "class-cake.view.helper.breadcrumbshelper.html#getCrumbs()", "BreadcrumbsHelper::getTemplates()()": "class-cake.view.helper.breadcrumbshelper.html#getTemplates()", "BreadcrumbsHelper::getView()()": "class-cake.view.helper.breadcrumbshelper.html#getView()", "BreadcrumbsHelper::implementedEvents()()": "class-cake.view.helper.breadcrumbshelper.html#implementedEvents()", "BreadcrumbsHelper::initialize()()": "class-cake.view.helper.breadcrumbshelper.html#initialize()", "BreadcrumbsHelper::insertAfter()()": "class-cake.view.helper.breadcrumbshelper.html#insertAfter()", "BreadcrumbsHelper::insertAt()()": "class-cake.view.helper.breadcrumbshelper.html#insertAt()", "BreadcrumbsHelper::insertBefore()()": "class-cake.view.helper.breadcrumbshelper.html#insertBefore()", "BreadcrumbsHelper::prepend()()": "class-cake.view.helper.breadcrumbshelper.html#prepend()", "BreadcrumbsHelper::render()()": "class-cake.view.helper.breadcrumbshelper.html#render()", "BreadcrumbsHelper::reset()()": "class-cake.view.helper.breadcrumbshelper.html#reset()", "BreadcrumbsHelper::setConfig()()": "class-cake.view.helper.breadcrumbshelper.html#setConfig()", "BreadcrumbsHelper::setTemplates()()": "class-cake.view.helper.breadcrumbshelper.html#setTemplates()", "BreadcrumbsHelper::templater()()": "class-cake.view.helper.breadcrumbshelper.html#templater()", "BufferedIterator (class)": "class-cake.collection.iterator.bufferediterator.html", "BufferedIterator::$_buffer": "class-cake.collection.iterator.bufferediterator.html#$_buffer", "BufferedIterator::$_current": "class-cake.collection.iterator.bufferediterator.html#$_current", "BufferedIterator::$_finished": "class-cake.collection.iterator.bufferediterator.html#$_finished", "BufferedIterator::$_index": "class-cake.collection.iterator.bufferediterator.html#$_index", "BufferedIterator::$_key": "class-cake.collection.iterator.bufferediterator.html#$_key", "BufferedIterator::$_started": "class-cake.collection.iterator.bufferediterator.html#$_started", "BufferedIterator::__construct()()": "class-cake.collection.iterator.bufferediterator.html#__construct()", "BufferedIterator::__debugInfo()()": "class-cake.collection.iterator.bufferediterator.html#__debugInfo()", "BufferedIterator::__serialize()()": "class-cake.collection.iterator.bufferediterator.html#__serialize()", "BufferedIterator::__unserialize()()": "class-cake.collection.iterator.bufferediterator.html#__unserialize()", "BufferedIterator::_createMatcherFilter()()": "class-cake.collection.iterator.bufferediterator.html#_createMatcherFilter()", "BufferedIterator::_extract()()": "class-cake.collection.iterator.bufferediterator.html#_extract()", "BufferedIterator::_propertyExtractor()()": "class-cake.collection.iterator.bufferediterator.html#_propertyExtractor()", "BufferedIterator::_simpleExtract()()": "class-cake.collection.iterator.bufferediterator.html#_simpleExtract()", "BufferedIterator::append()()": "class-cake.collection.iterator.bufferediterator.html#append()", "BufferedIterator::appendItem()()": "class-cake.collection.iterator.bufferediterator.html#appendItem()", "BufferedIterator::avg()()": "class-cake.collection.iterator.bufferediterator.html#avg()", "BufferedIterator::buffered()()": "class-cake.collection.iterator.bufferediterator.html#buffered()", "BufferedIterator::cartesianProduct()()": "class-cake.collection.iterator.bufferediterator.html#cartesianProduct()", "BufferedIterator::chunk()()": "class-cake.collection.iterator.bufferediterator.html#chunk()", "BufferedIterator::chunkWithKeys()()": "class-cake.collection.iterator.bufferediterator.html#chunkWithKeys()", "BufferedIterator::combine()()": "class-cake.collection.iterator.bufferediterator.html#combine()", "BufferedIterator::compile()()": "class-cake.collection.iterator.bufferediterator.html#compile()", "BufferedIterator::contains()()": "class-cake.collection.iterator.bufferediterator.html#contains()", "BufferedIterator::count()()": "class-cake.collection.iterator.bufferediterator.html#count()", "BufferedIterator::countBy()()": "class-cake.collection.iterator.bufferediterator.html#countBy()", "BufferedIterator::countKeys()()": "class-cake.collection.iterator.bufferediterator.html#countKeys()", "BufferedIterator::current()()": "class-cake.collection.iterator.bufferediterator.html#current()", "BufferedIterator::each()()": "class-cake.collection.iterator.bufferediterator.html#each()", "BufferedIterator::every()()": "class-cake.collection.iterator.bufferediterator.html#every()", "BufferedIterator::extract()()": "class-cake.collection.iterator.bufferediterator.html#extract()", "BufferedIterator::filter()()": "class-cake.collection.iterator.bufferediterator.html#filter()", "BufferedIterator::first()()": "class-cake.collection.iterator.bufferediterator.html#first()", "BufferedIterator::firstMatch()()": "class-cake.collection.iterator.bufferediterator.html#firstMatch()", "BufferedIterator::groupBy()()": "class-cake.collection.iterator.bufferediterator.html#groupBy()", "BufferedIterator::indexBy()()": "class-cake.collection.iterator.bufferediterator.html#indexBy()", "BufferedIterator::insert()()": "class-cake.collection.iterator.bufferediterator.html#insert()", "BufferedIterator::isEmpty()()": "class-cake.collection.iterator.bufferediterator.html#isEmpty()", "BufferedIterator::jsonSerialize()()": "class-cake.collection.iterator.bufferediterator.html#jsonSerialize()", "BufferedIterator::key()()": "class-cake.collection.iterator.bufferediterator.html#key()", "BufferedIterator::last()()": "class-cake.collection.iterator.bufferediterator.html#last()", "BufferedIterator::lazy()()": "class-cake.collection.iterator.bufferediterator.html#lazy()", "BufferedIterator::listNested()()": "class-cake.collection.iterator.bufferediterator.html#listNested()", "BufferedIterator::map()()": "class-cake.collection.iterator.bufferediterator.html#map()", "BufferedIterator::match()()": "class-cake.collection.iterator.bufferediterator.html#match()", "BufferedIterator::max()()": "class-cake.collection.iterator.bufferediterator.html#max()", "BufferedIterator::median()()": "class-cake.collection.iterator.bufferediterator.html#median()", "BufferedIterator::min()()": "class-cake.collection.iterator.bufferediterator.html#min()", "BufferedIterator::nest()()": "class-cake.collection.iterator.bufferediterator.html#nest()", "BufferedIterator::newCollection()()": "class-cake.collection.iterator.bufferediterator.html#newCollection()", "BufferedIterator::next()()": "class-cake.collection.iterator.bufferediterator.html#next()", "BufferedIterator::optimizeUnwrap()()": "class-cake.collection.iterator.bufferediterator.html#optimizeUnwrap()", "BufferedIterator::prepend()()": "class-cake.collection.iterator.bufferediterator.html#prepend()", "BufferedIterator::prependItem()()": "class-cake.collection.iterator.bufferediterator.html#prependItem()", "BufferedIterator::reduce()()": "class-cake.collection.iterator.bufferediterator.html#reduce()", "BufferedIterator::reject()()": "class-cake.collection.iterator.bufferediterator.html#reject()", "BufferedIterator::rewind()()": "class-cake.collection.iterator.bufferediterator.html#rewind()", "BufferedIterator::sample()()": "class-cake.collection.iterator.bufferediterator.html#sample()", "BufferedIterator::serialize()()": "class-cake.collection.iterator.bufferediterator.html#serialize()", "BufferedIterator::shuffle()()": "class-cake.collection.iterator.bufferediterator.html#shuffle()", "BufferedIterator::skip()()": "class-cake.collection.iterator.bufferediterator.html#skip()", "BufferedIterator::some()()": "class-cake.collection.iterator.bufferediterator.html#some()", "BufferedIterator::sortBy()()": "class-cake.collection.iterator.bufferediterator.html#sortBy()", "BufferedIterator::stopWhen()()": "class-cake.collection.iterator.bufferediterator.html#stopWhen()", "BufferedIterator::sumOf()()": "class-cake.collection.iterator.bufferediterator.html#sumOf()", "BufferedIterator::take()()": "class-cake.collection.iterator.bufferediterator.html#take()", "BufferedIterator::takeLast()()": "class-cake.collection.iterator.bufferediterator.html#takeLast()", "BufferedIterator::through()()": "class-cake.collection.iterator.bufferediterator.html#through()", "BufferedIterator::toArray()()": "class-cake.collection.iterator.bufferediterator.html#toArray()", "BufferedIterator::toList()()": "class-cake.collection.iterator.bufferediterator.html#toList()", "BufferedIterator::transpose()()": "class-cake.collection.iterator.bufferediterator.html#transpose()", "BufferedIterator::unfold()()": "class-cake.collection.iterator.bufferediterator.html#unfold()", "BufferedIterator::unserialize()()": "class-cake.collection.iterator.bufferediterator.html#unserialize()", "BufferedIterator::unwrap()()": "class-cake.collection.iterator.bufferediterator.html#unwrap()", "BufferedIterator::valid()()": "class-cake.collection.iterator.bufferediterator.html#valid()", "BufferedIterator::zip()()": "class-cake.collection.iterator.bufferediterator.html#zip()", "BufferedIterator::zipWith()()": "class-cake.collection.iterator.bufferediterator.html#zipWith()", "BufferedStatement (class)": "class-cake.database.statement.bufferedstatement.html", "BufferedStatement::$_allFetched": "class-cake.database.statement.bufferedstatement.html#$_allFetched", "BufferedStatement::$_driver": "class-cake.database.statement.bufferedstatement.html#$_driver", "BufferedStatement::$_hasExecuted": "class-cake.database.statement.bufferedstatement.html#$_hasExecuted", "BufferedStatement::$buffer": "class-cake.database.statement.bufferedstatement.html#$buffer", "BufferedStatement::$index": "class-cake.database.statement.bufferedstatement.html#$index", "BufferedStatement::$queryString": "class-cake.database.statement.bufferedstatement.html#$queryString", "BufferedStatement::$statement": "class-cake.database.statement.bufferedstatement.html#$statement", "BufferedStatement::__construct()()": "class-cake.database.statement.bufferedstatement.html#__construct()", "BufferedStatement::__get()()": "class-cake.database.statement.bufferedstatement.html#__get()", "BufferedStatement::_reset()()": "class-cake.database.statement.bufferedstatement.html#_reset()", "BufferedStatement::bind()()": "class-cake.database.statement.bufferedstatement.html#bind()", "BufferedStatement::bindValue()()": "class-cake.database.statement.bufferedstatement.html#bindValue()", "BufferedStatement::cast()()": "class-cake.database.statement.bufferedstatement.html#cast()", "BufferedStatement::closeCursor()()": "class-cake.database.statement.bufferedstatement.html#closeCursor()", "BufferedStatement::columnCount()()": "class-cake.database.statement.bufferedstatement.html#columnCount()", "BufferedStatement::count()()": "class-cake.database.statement.bufferedstatement.html#count()", "BufferedStatement::current()()": "class-cake.database.statement.bufferedstatement.html#current()", "BufferedStatement::errorCode()()": "class-cake.database.statement.bufferedstatement.html#errorCode()", "BufferedStatement::errorInfo()()": "class-cake.database.statement.bufferedstatement.html#errorInfo()", "BufferedStatement::execute()()": "class-cake.database.statement.bufferedstatement.html#execute()", "BufferedStatement::fetch()()": "class-cake.database.statement.bufferedstatement.html#fetch()", "BufferedStatement::fetchAll()()": "class-cake.database.statement.bufferedstatement.html#fetchAll()", "BufferedStatement::fetchAssoc()()": "class-cake.database.statement.bufferedstatement.html#fetchAssoc()", "BufferedStatement::fetchColumn()()": "class-cake.database.statement.bufferedstatement.html#fetchColumn()", "BufferedStatement::getInnerStatement()()": "class-cake.database.statement.bufferedstatement.html#getInnerStatement()", "BufferedStatement::key()()": "class-cake.database.statement.bufferedstatement.html#key()", "BufferedStatement::lastInsertId()()": "class-cake.database.statement.bufferedstatement.html#lastInsertId()", "BufferedStatement::matchTypes()()": "class-cake.database.statement.bufferedstatement.html#matchTypes()", "BufferedStatement::next()()": "class-cake.database.statement.bufferedstatement.html#next()", "BufferedStatement::rewind()()": "class-cake.database.statement.bufferedstatement.html#rewind()", "BufferedStatement::rowCount()()": "class-cake.database.statement.bufferedstatement.html#rowCount()", "BufferedStatement::valid()()": "class-cake.database.statement.bufferedstatement.html#valid()", "BufferResultsTrait (trait)": "trait-cake.database.statement.bufferresultstrait.html", "ButtonWidget (class)": "class-cake.view.widget.buttonwidget.html", "ButtonWidget::$_templates": "class-cake.view.widget.buttonwidget.html#$_templates", "ButtonWidget::__construct()()": "class-cake.view.widget.buttonwidget.html#__construct()", "ButtonWidget::render()()": "class-cake.view.widget.buttonwidget.html#render()", "ButtonWidget::secureFields()()": "class-cake.view.widget.buttonwidget.html#secureFields()", "Cache (class)": "class-cake.cache.cache.html", "Cache (namespace)": "namespace-cake.cache.html", "Cache::$_config": "class-cake.cache.cache.html#$_config", "Cache::$_dsnClassMap": "class-cake.cache.cache.html#$_dsnClassMap", "Cache::$_enabled": "class-cake.cache.cache.html#$_enabled", "Cache::$_groups": "class-cake.cache.cache.html#$_groups", "Cache::$_registry": "class-cake.cache.cache.html#$_registry", "Cache::_buildEngine()()": "class-cake.cache.cache.html#_buildEngine()", "Cache::add()()": "class-cake.cache.cache.html#add()", "Cache::clear()()": "class-cake.cache.cache.html#clear()", "Cache::clearAll()()": "class-cake.cache.cache.html#clearAll()", "Cache::clearGroup()()": "class-cake.cache.cache.html#clearGroup()", "Cache::configured()()": "class-cake.cache.cache.html#configured()", "Cache::decrement()()": "class-cake.cache.cache.html#decrement()", "Cache::delete()()": "class-cake.cache.cache.html#delete()", "Cache::deleteMany()()": "class-cake.cache.cache.html#deleteMany()", "Cache::disable()()": "class-cake.cache.cache.html#disable()", "Cache::drop()()": "class-cake.cache.cache.html#drop()", "Cache::enable()()": "class-cake.cache.cache.html#enable()", "Cache::enabled()()": "class-cake.cache.cache.html#enabled()", "Cache::engine()()": "class-cake.cache.cache.html#engine()", "Cache::getConfig()()": "class-cake.cache.cache.html#getConfig()", "Cache::getConfigOrFail()()": "class-cake.cache.cache.html#getConfigOrFail()", "Cache::getDsnClassMap()()": "class-cake.cache.cache.html#getDsnClassMap()", "Cache::getRegistry()()": "class-cake.cache.cache.html#getRegistry()", "Cache::groupConfigs()()": "class-cake.cache.cache.html#groupConfigs()", "Cache::increment()()": "class-cake.cache.cache.html#increment()", "Cache::parseDsn()()": "class-cake.cache.cache.html#parseDsn()", "Cache::pool()()": "class-cake.cache.cache.html#pool()", "Cache::read()()": "class-cake.cache.cache.html#read()", "Cache::readMany()()": "class-cake.cache.cache.html#readMany()", "Cache::remember()()": "class-cake.cache.cache.html#remember()", "Cache::setConfig()()": "class-cake.cache.cache.html#setConfig()", "Cache::setDsnClassMap()()": "class-cake.cache.cache.html#setDsnClassMap()", "Cache::setRegistry()()": "class-cake.cache.cache.html#setRegistry()", "Cache::write()()": "class-cake.cache.cache.html#write()", "Cache::writeMany()()": "class-cake.cache.cache.html#writeMany()", "Cache\\Engine (namespace)": "namespace-cake.cache.engine.html", "CacheClearallCommand (class)": "class-cake.command.cacheclearallcommand.html", "CacheClearallCommand::$_modelFactories": "class-cake.command.cacheclearallcommand.html#$_modelFactories", "CacheClearallCommand::$_modelType": "class-cake.command.cacheclearallcommand.html#$_modelType", "CacheClearallCommand::$_tableLocator": "class-cake.command.cacheclearallcommand.html#$_tableLocator", "CacheClearallCommand::$defaultTable": "class-cake.command.cacheclearallcommand.html#$defaultTable", "CacheClearallCommand::$modelClass": "class-cake.command.cacheclearallcommand.html#$modelClass", "CacheClearallCommand::$name": "class-cake.command.cacheclearallcommand.html#$name", "CacheClearallCommand::__construct()()": "class-cake.command.cacheclearallcommand.html#__construct()", "CacheClearallCommand::_setModelClass()()": "class-cake.command.cacheclearallcommand.html#_setModelClass()", "CacheClearallCommand::abort()()": "class-cake.command.cacheclearallcommand.html#abort()", "CacheClearallCommand::buildOptionParser()()": "class-cake.command.cacheclearallcommand.html#buildOptionParser()", "CacheClearallCommand::defaultName()()": "class-cake.command.cacheclearallcommand.html#defaultName()", "CacheClearallCommand::displayHelp()()": "class-cake.command.cacheclearallcommand.html#displayHelp()", "CacheClearallCommand::execute()()": "class-cake.command.cacheclearallcommand.html#execute()", "CacheClearallCommand::executeCommand()()": "class-cake.command.cacheclearallcommand.html#executeCommand()", "CacheClearallCommand::fetchTable()()": "class-cake.command.cacheclearallcommand.html#fetchTable()", "CacheClearallCommand::getDescription()()": "class-cake.command.cacheclearallcommand.html#getDescription()", "CacheClearallCommand::getModelType()()": "class-cake.command.cacheclearallcommand.html#getModelType()", "CacheClearallCommand::getName()()": "class-cake.command.cacheclearallcommand.html#getName()", "CacheClearallCommand::getOptionParser()()": "class-cake.command.cacheclearallcommand.html#getOptionParser()", "CacheClearallCommand::getRootName()()": "class-cake.command.cacheclearallcommand.html#getRootName()", "CacheClearallCommand::getTableLocator()()": "class-cake.command.cacheclearallcommand.html#getTableLocator()", "CacheClearallCommand::initialize()()": "class-cake.command.cacheclearallcommand.html#initialize()", "CacheClearallCommand::loadModel()()": "class-cake.command.cacheclearallcommand.html#loadModel()", "CacheClearallCommand::log()()": "class-cake.command.cacheclearallcommand.html#log()", "CacheClearallCommand::modelFactory()()": "class-cake.command.cacheclearallcommand.html#modelFactory()", "CacheClearallCommand::run()()": "class-cake.command.cacheclearallcommand.html#run()", "CacheClearallCommand::setModelType()()": "class-cake.command.cacheclearallcommand.html#setModelType()", "CacheClearallCommand::setName()()": "class-cake.command.cacheclearallcommand.html#setName()", "CacheClearallCommand::setOutputLevel()()": "class-cake.command.cacheclearallcommand.html#setOutputLevel()", "CacheClearallCommand::setTableLocator()()": "class-cake.command.cacheclearallcommand.html#setTableLocator()", "CacheClearCommand (class)": "class-cake.command.cacheclearcommand.html", "CacheClearCommand::$_modelFactories": "class-cake.command.cacheclearcommand.html#$_modelFactories", "CacheClearCommand::$_modelType": "class-cake.command.cacheclearcommand.html#$_modelType", "CacheClearCommand::$_tableLocator": "class-cake.command.cacheclearcommand.html#$_tableLocator", "CacheClearCommand::$defaultTable": "class-cake.command.cacheclearcommand.html#$defaultTable", "CacheClearCommand::$modelClass": "class-cake.command.cacheclearcommand.html#$modelClass", "CacheClearCommand::$name": "class-cake.command.cacheclearcommand.html#$name", "CacheClearCommand::__construct()()": "class-cake.command.cacheclearcommand.html#__construct()", "CacheClearCommand::_setModelClass()()": "class-cake.command.cacheclearcommand.html#_setModelClass()", "CacheClearCommand::abort()()": "class-cake.command.cacheclearcommand.html#abort()", "CacheClearCommand::buildOptionParser()()": "class-cake.command.cacheclearcommand.html#buildOptionParser()", "CacheClearCommand::defaultName()()": "class-cake.command.cacheclearcommand.html#defaultName()", "CacheClearCommand::displayHelp()()": "class-cake.command.cacheclearcommand.html#displayHelp()", "CacheClearCommand::execute()()": "class-cake.command.cacheclearcommand.html#execute()", "CacheClearCommand::executeCommand()()": "class-cake.command.cacheclearcommand.html#executeCommand()", "CacheClearCommand::fetchTable()()": "class-cake.command.cacheclearcommand.html#fetchTable()", "CacheClearCommand::getDescription()()": "class-cake.command.cacheclearcommand.html#getDescription()", "CacheClearCommand::getModelType()()": "class-cake.command.cacheclearcommand.html#getModelType()", "CacheClearCommand::getName()()": "class-cake.command.cacheclearcommand.html#getName()", "CacheClearCommand::getOptionParser()()": "class-cake.command.cacheclearcommand.html#getOptionParser()", "CacheClearCommand::getRootName()()": "class-cake.command.cacheclearcommand.html#getRootName()", "CacheClearCommand::getTableLocator()()": "class-cake.command.cacheclearcommand.html#getTableLocator()", "CacheClearCommand::initialize()()": "class-cake.command.cacheclearcommand.html#initialize()", "CacheClearCommand::loadModel()()": "class-cake.command.cacheclearcommand.html#loadModel()", "CacheClearCommand::log()()": "class-cake.command.cacheclearcommand.html#log()", "CacheClearCommand::modelFactory()()": "class-cake.command.cacheclearcommand.html#modelFactory()", "CacheClearCommand::run()()": "class-cake.command.cacheclearcommand.html#run()", "CacheClearCommand::setModelType()()": "class-cake.command.cacheclearcommand.html#setModelType()", "CacheClearCommand::setName()()": "class-cake.command.cacheclearcommand.html#setName()", "CacheClearCommand::setOutputLevel()()": "class-cake.command.cacheclearcommand.html#setOutputLevel()", "CacheClearCommand::setTableLocator()()": "class-cake.command.cacheclearcommand.html#setTableLocator()", "CachedCollection (class)": "class-cake.database.schema.cachedcollection.html", "CachedCollection::$cacher": "class-cake.database.schema.cachedcollection.html#$cacher", "CachedCollection::$collection": "class-cake.database.schema.cachedcollection.html#$collection", "CachedCollection::$prefix": "class-cake.database.schema.cachedcollection.html#$prefix", "CachedCollection::__construct()()": "class-cake.database.schema.cachedcollection.html#__construct()", "CachedCollection::cacheKey()()": "class-cake.database.schema.cachedcollection.html#cacheKey()", "CachedCollection::describe()()": "class-cake.database.schema.cachedcollection.html#describe()", "CachedCollection::getCacher()()": "class-cake.database.schema.cachedcollection.html#getCacher()", "CachedCollection::listTables()()": "class-cake.database.schema.cachedcollection.html#listTables()", "CachedCollection::listTablesWithoutViews()()": "class-cake.database.schema.cachedcollection.html#listTablesWithoutViews()", "CachedCollection::setCacher()()": "class-cake.database.schema.cachedcollection.html#setCacher()", "CacheEngine (class)": "class-cake.cache.cacheengine.html", "CacheEngine::$_config": "class-cake.cache.cacheengine.html#$_config", "CacheEngine::$_configInitialized": "class-cake.cache.cacheengine.html#$_configInitialized", "CacheEngine::$_defaultConfig": "class-cake.cache.cacheengine.html#$_defaultConfig", "CacheEngine::$_groupPrefix": "class-cake.cache.cacheengine.html#$_groupPrefix", "CacheEngine::_configDelete()()": "class-cake.cache.cacheengine.html#_configDelete()", "CacheEngine::_configRead()()": "class-cake.cache.cacheengine.html#_configRead()", "CacheEngine::_configWrite()()": "class-cake.cache.cacheengine.html#_configWrite()", "CacheEngine::_key()()": "class-cake.cache.cacheengine.html#_key()", "CacheEngine::add()()": "class-cake.cache.cacheengine.html#add()", "CacheEngine::clear()()": "class-cake.cache.cacheengine.html#clear()", "CacheEngine::clearGroup()()": "class-cake.cache.cacheengine.html#clearGroup()", "CacheEngine::configShallow()()": "class-cake.cache.cacheengine.html#configShallow()", "CacheEngine::decrement()()": "class-cake.cache.cacheengine.html#decrement()", "CacheEngine::delete()()": "class-cake.cache.cacheengine.html#delete()", "CacheEngine::deleteMultiple()()": "class-cake.cache.cacheengine.html#deleteMultiple()", "CacheEngine::duration()()": "class-cake.cache.cacheengine.html#duration()", "CacheEngine::ensureValidKey()()": "class-cake.cache.cacheengine.html#ensureValidKey()", "CacheEngine::ensureValidType()()": "class-cake.cache.cacheengine.html#ensureValidType()", "CacheEngine::get()()": "class-cake.cache.cacheengine.html#get()", "CacheEngine::getConfig()()": "class-cake.cache.cacheengine.html#getConfig()", "CacheEngine::getConfigOrFail()()": "class-cake.cache.cacheengine.html#getConfigOrFail()", "CacheEngine::getMultiple()()": "class-cake.cache.cacheengine.html#getMultiple()", "CacheEngine::groups()()": "class-cake.cache.cacheengine.html#groups()", "CacheEngine::has()()": "class-cake.cache.cacheengine.html#has()", "CacheEngine::increment()()": "class-cake.cache.cacheengine.html#increment()", "CacheEngine::init()()": "class-cake.cache.cacheengine.html#init()", "CacheEngine::set()()": "class-cake.cache.cacheengine.html#set()", "CacheEngine::setConfig()()": "class-cake.cache.cacheengine.html#setConfig()", "CacheEngine::setMultiple()()": "class-cake.cache.cacheengine.html#setMultiple()", "CacheEngine::warning()()": "class-cake.cache.cacheengine.html#warning()", "CacheEngineInterface (interface)": "interface-cake.cache.cacheengineinterface.html", "CacheListCommand (class)": "class-cake.command.cachelistcommand.html", "CacheListCommand::$_modelFactories": "class-cake.command.cachelistcommand.html#$_modelFactories", "CacheListCommand::$_modelType": "class-cake.command.cachelistcommand.html#$_modelType", "CacheListCommand::$_tableLocator": "class-cake.command.cachelistcommand.html#$_tableLocator", "CacheListCommand::$defaultTable": "class-cake.command.cachelistcommand.html#$defaultTable", "CacheListCommand::$modelClass": "class-cake.command.cachelistcommand.html#$modelClass", "CacheListCommand::$name": "class-cake.command.cachelistcommand.html#$name", "CacheListCommand::__construct()()": "class-cake.command.cachelistcommand.html#__construct()", "CacheListCommand::_setModelClass()()": "class-cake.command.cachelistcommand.html#_setModelClass()", "CacheListCommand::abort()()": "class-cake.command.cachelistcommand.html#abort()", "CacheListCommand::buildOptionParser()()": "class-cake.command.cachelistcommand.html#buildOptionParser()", "CacheListCommand::defaultName()()": "class-cake.command.cachelistcommand.html#defaultName()", "CacheListCommand::displayHelp()()": "class-cake.command.cachelistcommand.html#displayHelp()", "CacheListCommand::execute()()": "class-cake.command.cachelistcommand.html#execute()", "CacheListCommand::executeCommand()()": "class-cake.command.cachelistcommand.html#executeCommand()", "CacheListCommand::fetchTable()()": "class-cake.command.cachelistcommand.html#fetchTable()", "CacheListCommand::getDescription()()": "class-cake.command.cachelistcommand.html#getDescription()", "CacheListCommand::getModelType()()": "class-cake.command.cachelistcommand.html#getModelType()", "CacheListCommand::getName()()": "class-cake.command.cachelistcommand.html#getName()", "CacheListCommand::getOptionParser()()": "class-cake.command.cachelistcommand.html#getOptionParser()", "CacheListCommand::getRootName()()": "class-cake.command.cachelistcommand.html#getRootName()", "CacheListCommand::getTableLocator()()": "class-cake.command.cachelistcommand.html#getTableLocator()", "CacheListCommand::initialize()()": "class-cake.command.cachelistcommand.html#initialize()", "CacheListCommand::loadModel()()": "class-cake.command.cachelistcommand.html#loadModel()", "CacheListCommand::log()()": "class-cake.command.cachelistcommand.html#log()", "CacheListCommand::modelFactory()()": "class-cake.command.cachelistcommand.html#modelFactory()", "CacheListCommand::run()()": "class-cake.command.cachelistcommand.html#run()", "CacheListCommand::setModelType()()": "class-cake.command.cachelistcommand.html#setModelType()", "CacheListCommand::setName()()": "class-cake.command.cachelistcommand.html#setName()", "CacheListCommand::setOutputLevel()()": "class-cake.command.cachelistcommand.html#setOutputLevel()", "CacheListCommand::setTableLocator()()": "class-cake.command.cachelistcommand.html#setTableLocator()", "CacheRegistry (class)": "class-cake.cache.cacheregistry.html", "CacheRegistry::$_loaded": "class-cake.cache.cacheregistry.html#$_loaded", "CacheRegistry::__debugInfo()()": "class-cake.cache.cacheregistry.html#__debugInfo()", "CacheRegistry::__get()()": "class-cake.cache.cacheregistry.html#__get()", "CacheRegistry::__isset()()": "class-cake.cache.cacheregistry.html#__isset()", "CacheRegistry::__set()()": "class-cake.cache.cacheregistry.html#__set()", "CacheRegistry::__unset()()": "class-cake.cache.cacheregistry.html#__unset()", "CacheRegistry::_checkDuplicate()()": "class-cake.cache.cacheregistry.html#_checkDuplicate()", "CacheRegistry::_create()()": "class-cake.cache.cacheregistry.html#_create()", "CacheRegistry::_resolveClassName()()": "class-cake.cache.cacheregistry.html#_resolveClassName()", "CacheRegistry::_throwMissingClassError()()": "class-cake.cache.cacheregistry.html#_throwMissingClassError()", "CacheRegistry::count()()": "class-cake.cache.cacheregistry.html#count()", "CacheRegistry::get()()": "class-cake.cache.cacheregistry.html#get()", "CacheRegistry::getIterator()()": "class-cake.cache.cacheregistry.html#getIterator()", "CacheRegistry::has()()": "class-cake.cache.cacheregistry.html#has()", "CacheRegistry::load()()": "class-cake.cache.cacheregistry.html#load()", "CacheRegistry::loaded()()": "class-cake.cache.cacheregistry.html#loaded()", "CacheRegistry::normalizeArray()()": "class-cake.cache.cacheregistry.html#normalizeArray()", "CacheRegistry::reset()()": "class-cake.cache.cacheregistry.html#reset()", "CacheRegistry::set()()": "class-cake.cache.cacheregistry.html#set()", "CacheRegistry::unload()()": "class-cake.cache.cacheregistry.html#unload()", "CacheSession (class)": "class-cake.http.session.cachesession.html", "CacheSession::$_options": "class-cake.http.session.cachesession.html#$_options", "CacheSession::__construct()()": "class-cake.http.session.cachesession.html#__construct()", "CacheSession::close()()": "class-cake.http.session.cachesession.html#close()", "CacheSession::destroy()()": "class-cake.http.session.cachesession.html#destroy()", "CacheSession::gc()()": "class-cake.http.session.cachesession.html#gc()", "CacheSession::open()()": "class-cake.http.session.cachesession.html#open()", "CacheSession::read()()": "class-cake.http.session.cachesession.html#read()", "CacheSession::write()()": "class-cake.http.session.cachesession.html#write()", "CakeException (class)": "class-cake.core.exception.cakeexception.html", "CallbackStatement (class)": "class-cake.database.statement.callbackstatement.html", "CallbackStatement::$_callback": "class-cake.database.statement.callbackstatement.html#$_callback", "CallbackStatement::$_driver": "class-cake.database.statement.callbackstatement.html#$_driver", "CallbackStatement::$_hasExecuted": "class-cake.database.statement.callbackstatement.html#$_hasExecuted", "CallbackStatement::$_statement": "class-cake.database.statement.callbackstatement.html#$_statement", "CallbackStatement::$queryString": "class-cake.database.statement.callbackstatement.html#$queryString", "CallbackStatement::__construct()()": "class-cake.database.statement.callbackstatement.html#__construct()", "CallbackStatement::__get()()": "class-cake.database.statement.callbackstatement.html#__get()", "CallbackStatement::bind()()": "class-cake.database.statement.callbackstatement.html#bind()", "CallbackStatement::bindValue()()": "class-cake.database.statement.callbackstatement.html#bindValue()", "CallbackStatement::cast()()": "class-cake.database.statement.callbackstatement.html#cast()", "CallbackStatement::closeCursor()()": "class-cake.database.statement.callbackstatement.html#closeCursor()", "CallbackStatement::columnCount()()": "class-cake.database.statement.callbackstatement.html#columnCount()", "CallbackStatement::count()()": "class-cake.database.statement.callbackstatement.html#count()", "CallbackStatement::errorCode()()": "class-cake.database.statement.callbackstatement.html#errorCode()", "CallbackStatement::errorInfo()()": "class-cake.database.statement.callbackstatement.html#errorInfo()", "CallbackStatement::execute()()": "class-cake.database.statement.callbackstatement.html#execute()", "CallbackStatement::fetch()()": "class-cake.database.statement.callbackstatement.html#fetch()", "CallbackStatement::fetchAll()()": "class-cake.database.statement.callbackstatement.html#fetchAll()", "CallbackStatement::fetchAssoc()()": "class-cake.database.statement.callbackstatement.html#fetchAssoc()", "CallbackStatement::fetchColumn()()": "class-cake.database.statement.callbackstatement.html#fetchColumn()", "CallbackStatement::getInnerStatement()()": "class-cake.database.statement.callbackstatement.html#getInnerStatement()", "CallbackStatement::getIterator()()": "class-cake.database.statement.callbackstatement.html#getIterator()", "CallbackStatement::lastInsertId()()": "class-cake.database.statement.callbackstatement.html#lastInsertId()", "CallbackStatement::matchTypes()()": "class-cake.database.statement.callbackstatement.html#matchTypes()", "CallbackStatement::rowCount()()": "class-cake.database.statement.callbackstatement.html#rowCount()", "CallbackStream (class)": "class-cake.http.callbackstream.html", "CallbackStream::$callback": "class-cake.http.callbackstream.html#$callback", "CallbackStream::__construct()()": "class-cake.http.callbackstream.html#__construct()", "CallbackStream::__toString()()": "class-cake.http.callbackstream.html#__toString()", "CallbackStream::attach()()": "class-cake.http.callbackstream.html#attach()", "CallbackStream::close()()": "class-cake.http.callbackstream.html#close()", "CallbackStream::detach()()": "class-cake.http.callbackstream.html#detach()", "CallbackStream::eof()()": "class-cake.http.callbackstream.html#eof()", "CallbackStream::getContents()()": "class-cake.http.callbackstream.html#getContents()", "CallbackStream::getMetadata()()": "class-cake.http.callbackstream.html#getMetadata()", "CallbackStream::getSize()()": "class-cake.http.callbackstream.html#getSize()", "CallbackStream::isReadable()()": "class-cake.http.callbackstream.html#isReadable()", "CallbackStream::isSeekable()()": "class-cake.http.callbackstream.html#isSeekable()", "CallbackStream::isWritable()()": "class-cake.http.callbackstream.html#isWritable()", "CallbackStream::read()()": "class-cake.http.callbackstream.html#read()", "CallbackStream::rewind()()": "class-cake.http.callbackstream.html#rewind()", "CallbackStream::seek()()": "class-cake.http.callbackstream.html#seek()", "CallbackStream::tell()()": "class-cake.http.callbackstream.html#tell()", "CallbackStream::write()()": "class-cake.http.callbackstream.html#write()", "CaseExpression (class)": "class-cake.database.expression.caseexpression.html", "CaseExpression::$_conditions": "class-cake.database.expression.caseexpression.html#$_conditions", "CaseExpression::$_elseValue": "class-cake.database.expression.caseexpression.html#$_elseValue", "CaseExpression::$_values": "class-cake.database.expression.caseexpression.html#$_values", "CaseExpression::__construct()()": "class-cake.database.expression.caseexpression.html#__construct()", "CaseExpression::_addExpressions()()": "class-cake.database.expression.caseexpression.html#_addExpressions()", "CaseExpression::_castToExpression()()": "class-cake.database.expression.caseexpression.html#_castToExpression()", "CaseExpression::_compile()()": "class-cake.database.expression.caseexpression.html#_compile()", "CaseExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.caseexpression.html#_requiresToExpressionCasting()", "CaseExpression::add()()": "class-cake.database.expression.caseexpression.html#add()", "CaseExpression::elseValue()()": "class-cake.database.expression.caseexpression.html#elseValue()", "CaseExpression::sql()()": "class-cake.database.expression.caseexpression.html#sql()", "CaseExpression::traverse()()": "class-cake.database.expression.caseexpression.html#traverse()", "CaseExpressionTrait (trait)": "trait-cake.database.expression.caseexpressiontrait.html", "CaseStatementExpression (class)": "class-cake.database.expression.casestatementexpression.html", "CaseStatementExpression::$_typeMap": "class-cake.database.expression.casestatementexpression.html#$_typeMap", "CaseStatementExpression::$else": "class-cake.database.expression.casestatementexpression.html#$else", "CaseStatementExpression::$elseType": "class-cake.database.expression.casestatementexpression.html#$elseType", "CaseStatementExpression::$isSimpleVariant": "class-cake.database.expression.casestatementexpression.html#$isSimpleVariant", "CaseStatementExpression::$returnType": "class-cake.database.expression.casestatementexpression.html#$returnType", "CaseStatementExpression::$validClauseNames": "class-cake.database.expression.casestatementexpression.html#$validClauseNames", "CaseStatementExpression::$value": "class-cake.database.expression.casestatementexpression.html#$value", "CaseStatementExpression::$valueType": "class-cake.database.expression.casestatementexpression.html#$valueType", "CaseStatementExpression::$when": "class-cake.database.expression.casestatementexpression.html#$when", "CaseStatementExpression::$whenBuffer": "class-cake.database.expression.casestatementexpression.html#$whenBuffer", "CaseStatementExpression::__clone()()": "class-cake.database.expression.casestatementexpression.html#__clone()", "CaseStatementExpression::__construct()()": "class-cake.database.expression.casestatementexpression.html#__construct()", "CaseStatementExpression::_castToExpression()()": "class-cake.database.expression.casestatementexpression.html#_castToExpression()", "CaseStatementExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.casestatementexpression.html#_requiresToExpressionCasting()", "CaseStatementExpression::clause()()": "class-cake.database.expression.casestatementexpression.html#clause()", "CaseStatementExpression::compileNullableValue()()": "class-cake.database.expression.casestatementexpression.html#compileNullableValue()", "CaseStatementExpression::else()()": "class-cake.database.expression.casestatementexpression.html#else()", "CaseStatementExpression::getDefaultTypes()()": "class-cake.database.expression.casestatementexpression.html#getDefaultTypes()", "CaseStatementExpression::getReturnType()()": "class-cake.database.expression.casestatementexpression.html#getReturnType()", "CaseStatementExpression::getTypeMap()()": "class-cake.database.expression.casestatementexpression.html#getTypeMap()", "CaseStatementExpression::inferType()()": "class-cake.database.expression.casestatementexpression.html#inferType()", "CaseStatementExpression::setDefaultTypes()()": "class-cake.database.expression.casestatementexpression.html#setDefaultTypes()", "CaseStatementExpression::setReturnType()()": "class-cake.database.expression.casestatementexpression.html#setReturnType()", "CaseStatementExpression::setTypeMap()()": "class-cake.database.expression.casestatementexpression.html#setTypeMap()", "CaseStatementExpression::sql()()": "class-cake.database.expression.casestatementexpression.html#sql()", "CaseStatementExpression::then()()": "class-cake.database.expression.casestatementexpression.html#then()", "CaseStatementExpression::traverse()()": "class-cake.database.expression.casestatementexpression.html#traverse()", "CaseStatementExpression::when()()": "class-cake.database.expression.casestatementexpression.html#when()", "Cell (class)": "class-cake.view.cell.html", "Cell::$_cache": "class-cake.view.cell.html#$_cache", "Cell::$_eventClass": "class-cake.view.cell.html#$_eventClass", "Cell::$_eventManager": "class-cake.view.cell.html#$_eventManager", "Cell::$_modelFactories": "class-cake.view.cell.html#$_modelFactories", "Cell::$_modelType": "class-cake.view.cell.html#$_modelType", "Cell::$_tableLocator": "class-cake.view.cell.html#$_tableLocator", "Cell::$_validCellOptions": "class-cake.view.cell.html#$_validCellOptions", "Cell::$_viewBuilder": "class-cake.view.cell.html#$_viewBuilder", "Cell::$action": "class-cake.view.cell.html#$action", "Cell::$args": "class-cake.view.cell.html#$args", "Cell::$defaultTable": "class-cake.view.cell.html#$defaultTable", "Cell::$modelClass": "class-cake.view.cell.html#$modelClass", "Cell::$request": "class-cake.view.cell.html#$request", "Cell::$response": "class-cake.view.cell.html#$response", "Cell::$View": "class-cake.view.cell.html#$View", "Cell::__construct()()": "class-cake.view.cell.html#__construct()", "Cell::__debugInfo()()": "class-cake.view.cell.html#__debugInfo()", "Cell::__toString()()": "class-cake.view.cell.html#__toString()", "Cell::_cacheConfig()()": "class-cake.view.cell.html#_cacheConfig()", "Cell::_setModelClass()()": "class-cake.view.cell.html#_setModelClass()", "Cell::createView()()": "class-cake.view.cell.html#createView()", "Cell::dispatchEvent()()": "class-cake.view.cell.html#dispatchEvent()", "Cell::fetchTable()()": "class-cake.view.cell.html#fetchTable()", "Cell::getEventManager()()": "class-cake.view.cell.html#getEventManager()", "Cell::getModelType()()": "class-cake.view.cell.html#getModelType()", "Cell::getTableLocator()()": "class-cake.view.cell.html#getTableLocator()", "Cell::initialize()()": "class-cake.view.cell.html#initialize()", "Cell::loadModel()()": "class-cake.view.cell.html#loadModel()", "Cell::modelFactory()()": "class-cake.view.cell.html#modelFactory()", "Cell::render()()": "class-cake.view.cell.html#render()", "Cell::set()()": "class-cake.view.cell.html#set()", "Cell::setEventManager()()": "class-cake.view.cell.html#setEventManager()", "Cell::setModelType()()": "class-cake.view.cell.html#setModelType()", "Cell::setTableLocator()()": "class-cake.view.cell.html#setTableLocator()", "Cell::viewBuilder()()": "class-cake.view.cell.html#viewBuilder()", "CellTrait (trait)": "trait-cake.view.celltrait.html", "ChainMessagesLoader (class)": "class-cake.i18n.chainmessagesloader.html", "ChainMessagesLoader::$_loaders": "class-cake.i18n.chainmessagesloader.html#$_loaders", "ChainMessagesLoader::__construct()()": "class-cake.i18n.chainmessagesloader.html#__construct()", "ChainMessagesLoader::__invoke()()": "class-cake.i18n.chainmessagesloader.html#__invoke()", "CheckboxWidget (class)": "class-cake.view.widget.checkboxwidget.html", "CheckboxWidget::$_templates": "class-cake.view.widget.checkboxwidget.html#$_templates", "CheckboxWidget::$defaults": "class-cake.view.widget.checkboxwidget.html#$defaults", "CheckboxWidget::__construct()()": "class-cake.view.widget.checkboxwidget.html#__construct()", "CheckboxWidget::_isChecked()()": "class-cake.view.widget.checkboxwidget.html#_isChecked()", "CheckboxWidget::mergeDefaults()()": "class-cake.view.widget.checkboxwidget.html#mergeDefaults()", "CheckboxWidget::render()()": "class-cake.view.widget.checkboxwidget.html#render()", "CheckboxWidget::secureFields()()": "class-cake.view.widget.checkboxwidget.html#secureFields()", "CheckboxWidget::setMaxLength()()": "class-cake.view.widget.checkboxwidget.html#setMaxLength()", "CheckboxWidget::setRequired()()": "class-cake.view.widget.checkboxwidget.html#setRequired()", "CheckboxWidget::setStep()()": "class-cake.view.widget.checkboxwidget.html#setStep()", "CheckHttpCacheComponent (class)": "class-cake.controller.component.checkhttpcachecomponent.html", "CheckHttpCacheComponent::$_componentMap": "class-cake.controller.component.checkhttpcachecomponent.html#$_componentMap", "CheckHttpCacheComponent::$_config": "class-cake.controller.component.checkhttpcachecomponent.html#$_config", "CheckHttpCacheComponent::$_configInitialized": "class-cake.controller.component.checkhttpcachecomponent.html#$_configInitialized", "CheckHttpCacheComponent::$_defaultConfig": "class-cake.controller.component.checkhttpcachecomponent.html#$_defaultConfig", "CheckHttpCacheComponent::$_registry": "class-cake.controller.component.checkhttpcachecomponent.html#$_registry", "CheckHttpCacheComponent::$components": "class-cake.controller.component.checkhttpcachecomponent.html#$components", "CheckHttpCacheComponent::__construct()()": "class-cake.controller.component.checkhttpcachecomponent.html#__construct()", "CheckHttpCacheComponent::__debugInfo()()": "class-cake.controller.component.checkhttpcachecomponent.html#__debugInfo()", "CheckHttpCacheComponent::__get()()": "class-cake.controller.component.checkhttpcachecomponent.html#__get()", "CheckHttpCacheComponent::_configDelete()()": "class-cake.controller.component.checkhttpcachecomponent.html#_configDelete()", "CheckHttpCacheComponent::_configRead()()": "class-cake.controller.component.checkhttpcachecomponent.html#_configRead()", "CheckHttpCacheComponent::_configWrite()()": "class-cake.controller.component.checkhttpcachecomponent.html#_configWrite()", "CheckHttpCacheComponent::beforeRender()()": "class-cake.controller.component.checkhttpcachecomponent.html#beforeRender()", "CheckHttpCacheComponent::configShallow()()": "class-cake.controller.component.checkhttpcachecomponent.html#configShallow()", "CheckHttpCacheComponent::getConfig()()": "class-cake.controller.component.checkhttpcachecomponent.html#getConfig()", "CheckHttpCacheComponent::getConfigOrFail()()": "class-cake.controller.component.checkhttpcachecomponent.html#getConfigOrFail()", "CheckHttpCacheComponent::getController()()": "class-cake.controller.component.checkhttpcachecomponent.html#getController()", "CheckHttpCacheComponent::implementedEvents()()": "class-cake.controller.component.checkhttpcachecomponent.html#implementedEvents()", "CheckHttpCacheComponent::initialize()()": "class-cake.controller.component.checkhttpcachecomponent.html#initialize()", "CheckHttpCacheComponent::log()()": "class-cake.controller.component.checkhttpcachecomponent.html#log()", "CheckHttpCacheComponent::setConfig()()": "class-cake.controller.component.checkhttpcachecomponent.html#setConfig()", "ClassLoader (class)": "class-cake.core.classloader.html", "ClassLoader::$_prefixes": "class-cake.core.classloader.html#$_prefixes", "ClassLoader::_loadMappedFile()()": "class-cake.core.classloader.html#_loadMappedFile()", "ClassLoader::_requireFile()()": "class-cake.core.classloader.html#_requireFile()", "ClassLoader::addNamespace()()": "class-cake.core.classloader.html#addNamespace()", "ClassLoader::loadClass()()": "class-cake.core.classloader.html#loadClass()", "ClassLoader::register()()": "class-cake.core.classloader.html#register()", "ClassNode (class)": "class-cake.error.debug.classnode.html", "ClassNode::__construct()()": "class-cake.error.debug.classnode.html#__construct()", "ClassNode::addProperty()()": "class-cake.error.debug.classnode.html#addProperty()", "ClassNode::getChildren()()": "class-cake.error.debug.classnode.html#getChildren()", "ClassNode::getId()()": "class-cake.error.debug.classnode.html#getId()", "ClassNode::getValue()()": "class-cake.error.debug.classnode.html#getValue()", "Client (class)": "class-cake.http.client.html", "Client::$_adapter": "class-cake.http.client.html#$_adapter", "Client::$_config": "class-cake.http.client.html#$_config", "Client::$_configInitialized": "class-cake.http.client.html#$_configInitialized", "Client::$_cookies": "class-cake.http.client.html#$_cookies", "Client::$_defaultConfig": "class-cake.http.client.html#$_defaultConfig", "Client::$_mockAdapter": "class-cake.http.client.html#$_mockAdapter", "Client::__construct()()": "class-cake.http.client.html#__construct()", "Client::_addAuthentication()()": "class-cake.http.client.html#_addAuthentication()", "Client::_addProxy()()": "class-cake.http.client.html#_addProxy()", "Client::_configDelete()()": "class-cake.http.client.html#_configDelete()", "Client::_configRead()()": "class-cake.http.client.html#_configRead()", "Client::_configWrite()()": "class-cake.http.client.html#_configWrite()", "Client::_createAuth()()": "class-cake.http.client.html#_createAuth()", "Client::_createRequest()()": "class-cake.http.client.html#_createRequest()", "Client::_doRequest()()": "class-cake.http.client.html#_doRequest()", "Client::_mergeOptions()()": "class-cake.http.client.html#_mergeOptions()", "Client::_sendRequest()()": "class-cake.http.client.html#_sendRequest()", "Client::_typeHeaders()()": "class-cake.http.client.html#_typeHeaders()", "Client::addCookie()()": "class-cake.http.client.html#addCookie()", "Client::addMockResponse()()": "class-cake.http.client.html#addMockResponse()", "Client::buildUrl()()": "class-cake.http.client.html#buildUrl()", "Client::clearMockResponses()()": "class-cake.http.client.html#clearMockResponses()", "Client::configShallow()()": "class-cake.http.client.html#configShallow()", "Client::cookies()()": "class-cake.http.client.html#cookies()", "Client::createFromUrl()()": "class-cake.http.client.html#createFromUrl()", "Client::delete()()": "class-cake.http.client.html#delete()", "Client::get()()": "class-cake.http.client.html#get()", "Client::getConfig()()": "class-cake.http.client.html#getConfig()", "Client::getConfigOrFail()()": "class-cake.http.client.html#getConfigOrFail()", "Client::head()()": "class-cake.http.client.html#head()", "Client::options()()": "class-cake.http.client.html#options()", "Client::patch()()": "class-cake.http.client.html#patch()", "Client::post()()": "class-cake.http.client.html#post()", "Client::put()()": "class-cake.http.client.html#put()", "Client::send()()": "class-cake.http.client.html#send()", "Client::sendRequest()()": "class-cake.http.client.html#sendRequest()", "Client::setConfig()()": "class-cake.http.client.html#setConfig()", "Client::trace()()": "class-cake.http.client.html#trace()", "ClientException (class)": "class-cake.http.client.exception.clientexception.html", "ClosureDecoratorMiddleware (class)": "class-cake.http.middleware.closuredecoratormiddleware.html", "ClosureDecoratorMiddleware::$callable": "class-cake.http.middleware.closuredecoratormiddleware.html#$callable", "ClosureDecoratorMiddleware::__construct()()": "class-cake.http.middleware.closuredecoratormiddleware.html#__construct()", "ClosureDecoratorMiddleware::getCallable()()": "class-cake.http.middleware.closuredecoratormiddleware.html#getCallable()", "ClosureDecoratorMiddleware::process()()": "class-cake.http.middleware.closuredecoratormiddleware.html#process()", "Collection (class)": "class-cake.database.schema.collection.html", "Collection (namespace)": "namespace-cake.collection.html", "Collection::$_connection": "class-cake.database.schema.collection.html#$_connection", "Collection::$_dialect": "class-cake.database.schema.collection.html#$_dialect", "Collection::__construct()()": "class-cake.collection.collection.html#__construct()", "Collection::__debugInfo()()": "class-cake.collection.collection.html#__debugInfo()", "Collection::__serialize()()": "class-cake.collection.collection.html#__serialize()", "Collection::__unserialize()()": "class-cake.collection.collection.html#__unserialize()", "Collection::_createMatcherFilter()()": "class-cake.collection.collection.html#_createMatcherFilter()", "Collection::_extract()()": "class-cake.collection.collection.html#_extract()", "Collection::_propertyExtractor()()": "class-cake.collection.collection.html#_propertyExtractor()", "Collection::_reflect()()": "class-cake.database.schema.collection.html#_reflect()", "Collection::_simpleExtract()()": "class-cake.collection.collection.html#_simpleExtract()", "Collection::append()()": "class-cake.collection.collection.html#append()", "Collection::appendItem()()": "class-cake.collection.collection.html#appendItem()", "Collection::avg()()": "class-cake.collection.collection.html#avg()", "Collection::buffered()()": "class-cake.collection.collection.html#buffered()", "Collection::cartesianProduct()()": "class-cake.collection.collection.html#cartesianProduct()", "Collection::chunk()()": "class-cake.collection.collection.html#chunk()", "Collection::chunkWithKeys()()": "class-cake.collection.collection.html#chunkWithKeys()", "Collection::combine()()": "class-cake.collection.collection.html#combine()", "Collection::compile()()": "class-cake.collection.collection.html#compile()", "Collection::contains()()": "class-cake.collection.collection.html#contains()", "Collection::count()()": "class-cake.collection.collection.html#count()", "Collection::countBy()()": "class-cake.collection.collection.html#countBy()", "Collection::countKeys()()": "class-cake.collection.collection.html#countKeys()", "Collection::describe()()": "class-cake.database.schema.collection.html#describe()", "Collection::each()()": "class-cake.collection.collection.html#each()", "Collection::every()()": "class-cake.collection.collection.html#every()", "Collection::extract()()": "class-cake.collection.collection.html#extract()", "Collection::filter()()": "class-cake.collection.collection.html#filter()", "Collection::first()()": "class-cake.collection.collection.html#first()", "Collection::firstMatch()()": "class-cake.collection.collection.html#firstMatch()", "Collection::groupBy()()": "class-cake.collection.collection.html#groupBy()", "Collection::indexBy()()": "class-cake.collection.collection.html#indexBy()", "Collection::insert()()": "class-cake.collection.collection.html#insert()", "Collection::isEmpty()()": "class-cake.collection.collection.html#isEmpty()", "Collection::jsonSerialize()()": "class-cake.collection.collection.html#jsonSerialize()", "Collection::last()()": "class-cake.collection.collection.html#last()", "Collection::lazy()()": "class-cake.collection.collection.html#lazy()", "Collection::listNested()()": "class-cake.collection.collection.html#listNested()", "Collection::listTables()()": "class-cake.database.schema.collection.html#listTables()", "Collection::listTablesWithoutViews()()": "class-cake.database.schema.collection.html#listTablesWithoutViews()", "Collection::map()()": "class-cake.collection.collection.html#map()", "Collection::match()()": "class-cake.collection.collection.html#match()", "Collection::max()()": "class-cake.collection.collection.html#max()", "Collection::median()()": "class-cake.collection.collection.html#median()", "Collection::min()()": "class-cake.collection.collection.html#min()", "Collection::nest()()": "class-cake.collection.collection.html#nest()", "Collection::newCollection()()": "class-cake.collection.collection.html#newCollection()", "Collection::optimizeUnwrap()()": "class-cake.collection.collection.html#optimizeUnwrap()", "Collection::prepend()()": "class-cake.collection.collection.html#prepend()", "Collection::prependItem()()": "class-cake.collection.collection.html#prependItem()", "Collection::reduce()()": "class-cake.collection.collection.html#reduce()", "Collection::reject()()": "class-cake.collection.collection.html#reject()", "Collection::sample()()": "class-cake.collection.collection.html#sample()", "Collection::serialize()()": "class-cake.collection.collection.html#serialize()", "Collection::shuffle()()": "class-cake.collection.collection.html#shuffle()", "Collection::skip()()": "class-cake.collection.collection.html#skip()", "Collection::some()()": "class-cake.collection.collection.html#some()", "Collection::sortBy()()": "class-cake.collection.collection.html#sortBy()", "Collection::stopWhen()()": "class-cake.collection.collection.html#stopWhen()", "Collection::sumOf()()": "class-cake.collection.collection.html#sumOf()", "Collection::take()()": "class-cake.collection.collection.html#take()", "Collection::takeLast()()": "class-cake.collection.collection.html#takeLast()", "Collection::through()()": "class-cake.collection.collection.html#through()", "Collection::toArray()()": "class-cake.collection.collection.html#toArray()", "Collection::toList()()": "class-cake.collection.collection.html#toList()", "Collection::transpose()()": "class-cake.collection.collection.html#transpose()", "Collection::unfold()()": "class-cake.collection.collection.html#unfold()", "Collection::unserialize()()": "class-cake.collection.collection.html#unserialize()", "Collection::unwrap()()": "class-cake.collection.collection.html#unwrap()", "Collection::zip()()": "class-cake.collection.collection.html#zip()", "Collection::zipWith()()": "class-cake.collection.collection.html#zipWith()", "Collection\\Iterator (namespace)": "namespace-cake.collection.iterator.html", "CollectionInterface (interface)": "interface-cake.database.schema.collectioninterface.html", "ColumnSchemaAwareInterface (interface)": "interface-cake.database.type.columnschemaawareinterface.html", "Command (class)": "class-cake.command.command.html", "Command (namespace)": "namespace-cake.command.html", "Command::$_modelFactories": "class-cake.command.command.html#$_modelFactories", "Command::$_modelType": "class-cake.command.command.html#$_modelType", "Command::$_tableLocator": "class-cake.command.command.html#$_tableLocator", "Command::$defaultTable": "class-cake.command.command.html#$defaultTable", "Command::$modelClass": "class-cake.command.command.html#$modelClass", "Command::$name": "class-cake.command.command.html#$name", "Command::__construct()()": "class-cake.command.command.html#__construct()", "Command::_setModelClass()()": "class-cake.command.command.html#_setModelClass()", "Command::abort()()": "class-cake.command.command.html#abort()", "Command::buildOptionParser()()": "class-cake.command.command.html#buildOptionParser()", "Command::defaultName()()": "class-cake.command.command.html#defaultName()", "Command::displayHelp()()": "class-cake.command.command.html#displayHelp()", "Command::execute()()": "class-cake.command.command.html#execute()", "Command::executeCommand()()": "class-cake.command.command.html#executeCommand()", "Command::fetchTable()()": "class-cake.command.command.html#fetchTable()", "Command::getDescription()()": "class-cake.command.command.html#getDescription()", "Command::getModelType()()": "class-cake.command.command.html#getModelType()", "Command::getName()()": "class-cake.command.command.html#getName()", "Command::getOptionParser()()": "class-cake.command.command.html#getOptionParser()", "Command::getRootName()()": "class-cake.command.command.html#getRootName()", "Command::getTableLocator()()": "class-cake.command.command.html#getTableLocator()", "Command::initialize()()": "class-cake.command.command.html#initialize()", "Command::loadModel()()": "class-cake.command.command.html#loadModel()", "Command::log()()": "class-cake.command.command.html#log()", "Command::modelFactory()()": "class-cake.command.command.html#modelFactory()", "Command::run()()": "class-cake.command.command.html#run()", "Command::setModelType()()": "class-cake.command.command.html#setModelType()", "Command::setName()()": "class-cake.command.command.html#setName()", "Command::setOutputLevel()()": "class-cake.command.command.html#setOutputLevel()", "Command::setTableLocator()()": "class-cake.command.command.html#setTableLocator()", "CommandCollection (class)": "class-cake.console.commandcollection.html", "CommandCollection::$commands": "class-cake.console.commandcollection.html#$commands", "CommandCollection::__construct()()": "class-cake.console.commandcollection.html#__construct()", "CommandCollection::add()()": "class-cake.console.commandcollection.html#add()", "CommandCollection::addMany()()": "class-cake.console.commandcollection.html#addMany()", "CommandCollection::autoDiscover()()": "class-cake.console.commandcollection.html#autoDiscover()", "CommandCollection::count()()": "class-cake.console.commandcollection.html#count()", "CommandCollection::discoverPlugin()()": "class-cake.console.commandcollection.html#discoverPlugin()", "CommandCollection::get()()": "class-cake.console.commandcollection.html#get()", "CommandCollection::getIterator()()": "class-cake.console.commandcollection.html#getIterator()", "CommandCollection::has()()": "class-cake.console.commandcollection.html#has()", "CommandCollection::keys()()": "class-cake.console.commandcollection.html#keys()", "CommandCollection::remove()()": "class-cake.console.commandcollection.html#remove()", "CommandCollection::resolveNames()()": "class-cake.console.commandcollection.html#resolveNames()", "CommandCollectionAwareInterface (interface)": "interface-cake.console.commandcollectionawareinterface.html", "CommandFactory (class)": "class-cake.console.commandfactory.html", "CommandFactory::$container": "class-cake.console.commandfactory.html#$container", "CommandFactory::__construct()()": "class-cake.console.commandfactory.html#__construct()", "CommandFactory::create()()": "class-cake.console.commandfactory.html#create()", "CommandFactoryInterface (interface)": "interface-cake.console.commandfactoryinterface.html", "CommandInterface (interface)": "interface-cake.console.commandinterface.html", "CommandRetry (class)": "class-cake.core.retry.commandretry.html", "CommandRetry::$maxRetries": "class-cake.core.retry.commandretry.html#$maxRetries", "CommandRetry::$numRetries": "class-cake.core.retry.commandretry.html#$numRetries", "CommandRetry::$strategy": "class-cake.core.retry.commandretry.html#$strategy", "CommandRetry::__construct()()": "class-cake.core.retry.commandretry.html#__construct()", "CommandRetry::getRetries()()": "class-cake.core.retry.commandretry.html#getRetries()", "CommandRetry::run()()": "class-cake.core.retry.commandretry.html#run()", "CommandRunner (class)": "class-cake.console.commandrunner.html", "CommandRunner::$_eventClass": "class-cake.console.commandrunner.html#$_eventClass", "CommandRunner::$_eventManager": "class-cake.console.commandrunner.html#$_eventManager", "CommandRunner::$aliases": "class-cake.console.commandrunner.html#$aliases", "CommandRunner::$app": "class-cake.console.commandrunner.html#$app", "CommandRunner::$factory": "class-cake.console.commandrunner.html#$factory", "CommandRunner::$root": "class-cake.console.commandrunner.html#$root", "CommandRunner::__construct()()": "class-cake.console.commandrunner.html#__construct()", "CommandRunner::bootstrap()()": "class-cake.console.commandrunner.html#bootstrap()", "CommandRunner::createCommand()()": "class-cake.console.commandrunner.html#createCommand()", "CommandRunner::dispatchEvent()()": "class-cake.console.commandrunner.html#dispatchEvent()", "CommandRunner::getCommand()()": "class-cake.console.commandrunner.html#getCommand()", "CommandRunner::getEventManager()()": "class-cake.console.commandrunner.html#getEventManager()", "CommandRunner::loadRoutes()()": "class-cake.console.commandrunner.html#loadRoutes()", "CommandRunner::longestCommandName()()": "class-cake.console.commandrunner.html#longestCommandName()", "CommandRunner::resolveName()()": "class-cake.console.commandrunner.html#resolveName()", "CommandRunner::run()()": "class-cake.console.commandrunner.html#run()", "CommandRunner::runCommand()()": "class-cake.console.commandrunner.html#runCommand()", "CommandRunner::runShell()()": "class-cake.console.commandrunner.html#runShell()", "CommandRunner::setAliases()()": "class-cake.console.commandrunner.html#setAliases()", "CommandRunner::setEventManager()()": "class-cake.console.commandrunner.html#setEventManager()", "CommandScanner (class)": "class-cake.console.commandscanner.html", "CommandScanner::scanApp()()": "class-cake.console.commandscanner.html#scanApp()", "CommandScanner::scanCore()()": "class-cake.console.commandscanner.html#scanCore()", "CommandScanner::scanDir()()": "class-cake.console.commandscanner.html#scanDir()", "CommandScanner::scanPlugin()()": "class-cake.console.commandscanner.html#scanPlugin()", "CommandTask (class)": "class-cake.shell.task.commandtask.html", "CommandTask::$_io": "class-cake.shell.task.commandtask.html#$_io", "CommandTask::$_modelFactories": "class-cake.shell.task.commandtask.html#$_modelFactories", "CommandTask::$_modelType": "class-cake.shell.task.commandtask.html#$_modelType", "CommandTask::$_tableLocator": "class-cake.shell.task.commandtask.html#$_tableLocator", "CommandTask::$_taskMap": "class-cake.shell.task.commandtask.html#$_taskMap", "CommandTask::$args": "class-cake.shell.task.commandtask.html#$args", "CommandTask::$command": "class-cake.shell.task.commandtask.html#$command", "CommandTask::$defaultTable": "class-cake.shell.task.commandtask.html#$defaultTable", "CommandTask::$interactive": "class-cake.shell.task.commandtask.html#$interactive", "CommandTask::$modelClass": "class-cake.shell.task.commandtask.html#$modelClass", "CommandTask::$name": "class-cake.shell.task.commandtask.html#$name", "CommandTask::$OptionParser": "class-cake.shell.task.commandtask.html#$OptionParser", "CommandTask::$params": "class-cake.shell.task.commandtask.html#$params", "CommandTask::$plugin": "class-cake.shell.task.commandtask.html#$plugin", "CommandTask::$rootName": "class-cake.shell.task.commandtask.html#$rootName", "CommandTask::$taskNames": "class-cake.shell.task.commandtask.html#$taskNames", "CommandTask::$Tasks": "class-cake.shell.task.commandtask.html#$Tasks", "CommandTask::$tasks": "class-cake.shell.task.commandtask.html#$tasks", "CommandTask::__construct()()": "class-cake.shell.task.commandtask.html#__construct()", "CommandTask::__debugInfo()()": "class-cake.shell.task.commandtask.html#__debugInfo()", "CommandTask::__get()()": "class-cake.shell.task.commandtask.html#__get()", "CommandTask::_appendShells()()": "class-cake.shell.task.commandtask.html#_appendShells()", "CommandTask::_displayHelp()()": "class-cake.shell.task.commandtask.html#_displayHelp()", "CommandTask::_findShells()()": "class-cake.shell.task.commandtask.html#_findShells()", "CommandTask::_mergeProperty()()": "class-cake.shell.task.commandtask.html#_mergeProperty()", "CommandTask::_mergePropertyData()()": "class-cake.shell.task.commandtask.html#_mergePropertyData()", "CommandTask::_mergeVars()()": "class-cake.shell.task.commandtask.html#_mergeVars()", "CommandTask::_scanDir()()": "class-cake.shell.task.commandtask.html#_scanDir()", "CommandTask::_setModelClass()()": "class-cake.shell.task.commandtask.html#_setModelClass()", "CommandTask::_setOutputLevel()()": "class-cake.shell.task.commandtask.html#_setOutputLevel()", "CommandTask::_stop()()": "class-cake.shell.task.commandtask.html#_stop()", "CommandTask::_validateTasks()()": "class-cake.shell.task.commandtask.html#_validateTasks()", "CommandTask::_welcome()()": "class-cake.shell.task.commandtask.html#_welcome()", "CommandTask::abort()()": "class-cake.shell.task.commandtask.html#abort()", "CommandTask::clear()()": "class-cake.shell.task.commandtask.html#clear()", "CommandTask::createFile()()": "class-cake.shell.task.commandtask.html#createFile()", "CommandTask::dispatchShell()()": "class-cake.shell.task.commandtask.html#dispatchShell()", "CommandTask::err()()": "class-cake.shell.task.commandtask.html#err()", "CommandTask::fetchTable()()": "class-cake.shell.task.commandtask.html#fetchTable()", "CommandTask::getIo()()": "class-cake.shell.task.commandtask.html#getIo()", "CommandTask::getModelType()()": "class-cake.shell.task.commandtask.html#getModelType()", "CommandTask::getOptionParser()()": "class-cake.shell.task.commandtask.html#getOptionParser()", "CommandTask::getShellList()()": "class-cake.shell.task.commandtask.html#getShellList()", "CommandTask::getTableLocator()()": "class-cake.shell.task.commandtask.html#getTableLocator()", "CommandTask::hasMethod()()": "class-cake.shell.task.commandtask.html#hasMethod()", "CommandTask::hasTask()()": "class-cake.shell.task.commandtask.html#hasTask()", "CommandTask::helper()()": "class-cake.shell.task.commandtask.html#helper()", "CommandTask::hr()()": "class-cake.shell.task.commandtask.html#hr()", "CommandTask::in()()": "class-cake.shell.task.commandtask.html#in()", "CommandTask::info()()": "class-cake.shell.task.commandtask.html#info()", "CommandTask::initialize()()": "class-cake.shell.task.commandtask.html#initialize()", "CommandTask::loadModel()()": "class-cake.shell.task.commandtask.html#loadModel()", "CommandTask::loadTasks()()": "class-cake.shell.task.commandtask.html#loadTasks()", "CommandTask::log()()": "class-cake.shell.task.commandtask.html#log()", "CommandTask::main()()": "class-cake.shell.task.commandtask.html#main()", "CommandTask::modelFactory()()": "class-cake.shell.task.commandtask.html#modelFactory()", "CommandTask::nl()()": "class-cake.shell.task.commandtask.html#nl()", "CommandTask::out()()": "class-cake.shell.task.commandtask.html#out()", "CommandTask::param()()": "class-cake.shell.task.commandtask.html#param()", "CommandTask::parseDispatchArguments()()": "class-cake.shell.task.commandtask.html#parseDispatchArguments()", "CommandTask::quiet()()": "class-cake.shell.task.commandtask.html#quiet()", "CommandTask::runCommand()()": "class-cake.shell.task.commandtask.html#runCommand()", "CommandTask::setIo()()": "class-cake.shell.task.commandtask.html#setIo()", "CommandTask::setModelType()()": "class-cake.shell.task.commandtask.html#setModelType()", "CommandTask::setRootName()()": "class-cake.shell.task.commandtask.html#setRootName()", "CommandTask::setTableLocator()()": "class-cake.shell.task.commandtask.html#setTableLocator()", "CommandTask::shortPath()()": "class-cake.shell.task.commandtask.html#shortPath()", "CommandTask::startup()()": "class-cake.shell.task.commandtask.html#startup()", "CommandTask::success()()": "class-cake.shell.task.commandtask.html#success()", "CommandTask::verbose()()": "class-cake.shell.task.commandtask.html#verbose()", "CommandTask::warn()()": "class-cake.shell.task.commandtask.html#warn()", "CommandTask::wrapText()()": "class-cake.shell.task.commandtask.html#wrapText()", "CommonTableExpression (class)": "class-cake.database.expression.commontableexpression.html", "CommonTableExpression::$fields": "class-cake.database.expression.commontableexpression.html#$fields", "CommonTableExpression::$materialized": "class-cake.database.expression.commontableexpression.html#$materialized", "CommonTableExpression::$name": "class-cake.database.expression.commontableexpression.html#$name", "CommonTableExpression::$query": "class-cake.database.expression.commontableexpression.html#$query", "CommonTableExpression::$recursive": "class-cake.database.expression.commontableexpression.html#$recursive", "CommonTableExpression::__clone()()": "class-cake.database.expression.commontableexpression.html#__clone()", "CommonTableExpression::__construct()()": "class-cake.database.expression.commontableexpression.html#__construct()", "CommonTableExpression::field()()": "class-cake.database.expression.commontableexpression.html#field()", "CommonTableExpression::isRecursive()()": "class-cake.database.expression.commontableexpression.html#isRecursive()", "CommonTableExpression::materialized()()": "class-cake.database.expression.commontableexpression.html#materialized()", "CommonTableExpression::name()()": "class-cake.database.expression.commontableexpression.html#name()", "CommonTableExpression::notMaterialized()()": "class-cake.database.expression.commontableexpression.html#notMaterialized()", "CommonTableExpression::query()()": "class-cake.database.expression.commontableexpression.html#query()", "CommonTableExpression::recursive()()": "class-cake.database.expression.commontableexpression.html#recursive()", "CommonTableExpression::sql()()": "class-cake.database.expression.commontableexpression.html#sql()", "CommonTableExpression::traverse()()": "class-cake.database.expression.commontableexpression.html#traverse()", "ComparisonExpression (class)": "class-cake.database.expression.comparisonexpression.html", "ComparisonExpression::$_field": "class-cake.database.expression.comparisonexpression.html#$_field", "ComparisonExpression::$_isMultiple": "class-cake.database.expression.comparisonexpression.html#$_isMultiple", "ComparisonExpression::$_operator": "class-cake.database.expression.comparisonexpression.html#$_operator", "ComparisonExpression::$_type": "class-cake.database.expression.comparisonexpression.html#$_type", "ComparisonExpression::$_value": "class-cake.database.expression.comparisonexpression.html#$_value", "ComparisonExpression::$_valueExpressions": "class-cake.database.expression.comparisonexpression.html#$_valueExpressions", "ComparisonExpression::__clone()()": "class-cake.database.expression.comparisonexpression.html#__clone()", "ComparisonExpression::__construct()()": "class-cake.database.expression.comparisonexpression.html#__construct()", "ComparisonExpression::_bindValue()()": "class-cake.database.expression.comparisonexpression.html#_bindValue()", "ComparisonExpression::_castToExpression()()": "class-cake.database.expression.comparisonexpression.html#_castToExpression()", "ComparisonExpression::_collectExpressions()()": "class-cake.database.expression.comparisonexpression.html#_collectExpressions()", "ComparisonExpression::_flattenValue()()": "class-cake.database.expression.comparisonexpression.html#_flattenValue()", "ComparisonExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.comparisonexpression.html#_requiresToExpressionCasting()", "ComparisonExpression::_stringExpression()()": "class-cake.database.expression.comparisonexpression.html#_stringExpression()", "ComparisonExpression::getField()()": "class-cake.database.expression.comparisonexpression.html#getField()", "ComparisonExpression::getOperator()()": "class-cake.database.expression.comparisonexpression.html#getOperator()", "ComparisonExpression::getValue()()": "class-cake.database.expression.comparisonexpression.html#getValue()", "ComparisonExpression::setField()()": "class-cake.database.expression.comparisonexpression.html#setField()", "ComparisonExpression::setOperator()()": "class-cake.database.expression.comparisonexpression.html#setOperator()", "ComparisonExpression::setValue()()": "class-cake.database.expression.comparisonexpression.html#setValue()", "ComparisonExpression::sql()()": "class-cake.database.expression.comparisonexpression.html#sql()", "ComparisonExpression::traverse()()": "class-cake.database.expression.comparisonexpression.html#traverse()", "CompletionCommand (class)": "class-cake.command.completioncommand.html", "CompletionCommand::$_modelFactories": "class-cake.command.completioncommand.html#$_modelFactories", "CompletionCommand::$_modelType": "class-cake.command.completioncommand.html#$_modelType", "CompletionCommand::$_tableLocator": "class-cake.command.completioncommand.html#$_tableLocator", "CompletionCommand::$commands": "class-cake.command.completioncommand.html#$commands", "CompletionCommand::$defaultTable": "class-cake.command.completioncommand.html#$defaultTable", "CompletionCommand::$modelClass": "class-cake.command.completioncommand.html#$modelClass", "CompletionCommand::$name": "class-cake.command.completioncommand.html#$name", "CompletionCommand::__construct()()": "class-cake.command.completioncommand.html#__construct()", "CompletionCommand::_setModelClass()()": "class-cake.command.completioncommand.html#_setModelClass()", "CompletionCommand::abort()()": "class-cake.command.completioncommand.html#abort()", "CompletionCommand::buildOptionParser()()": "class-cake.command.completioncommand.html#buildOptionParser()", "CompletionCommand::defaultName()()": "class-cake.command.completioncommand.html#defaultName()", "CompletionCommand::displayHelp()()": "class-cake.command.completioncommand.html#displayHelp()", "CompletionCommand::execute()()": "class-cake.command.completioncommand.html#execute()", "CompletionCommand::executeCommand()()": "class-cake.command.completioncommand.html#executeCommand()", "CompletionCommand::fetchTable()()": "class-cake.command.completioncommand.html#fetchTable()", "CompletionCommand::getCommands()()": "class-cake.command.completioncommand.html#getCommands()", "CompletionCommand::getDescription()()": "class-cake.command.completioncommand.html#getDescription()", "CompletionCommand::getModelType()()": "class-cake.command.completioncommand.html#getModelType()", "CompletionCommand::getName()()": "class-cake.command.completioncommand.html#getName()", "CompletionCommand::getOptionParser()()": "class-cake.command.completioncommand.html#getOptionParser()", "CompletionCommand::getOptions()()": "class-cake.command.completioncommand.html#getOptions()", "CompletionCommand::getRootName()()": "class-cake.command.completioncommand.html#getRootName()", "CompletionCommand::getSubcommands()()": "class-cake.command.completioncommand.html#getSubcommands()", "CompletionCommand::getTableLocator()()": "class-cake.command.completioncommand.html#getTableLocator()", "CompletionCommand::initialize()()": "class-cake.command.completioncommand.html#initialize()", "CompletionCommand::loadModel()()": "class-cake.command.completioncommand.html#loadModel()", "CompletionCommand::log()()": "class-cake.command.completioncommand.html#log()", "CompletionCommand::modelFactory()()": "class-cake.command.completioncommand.html#modelFactory()", "CompletionCommand::run()()": "class-cake.command.completioncommand.html#run()", "CompletionCommand::setCommandCollection()()": "class-cake.command.completioncommand.html#setCommandCollection()", "CompletionCommand::setModelType()()": "class-cake.command.completioncommand.html#setModelType()", "CompletionCommand::setName()()": "class-cake.command.completioncommand.html#setName()", "CompletionCommand::setOutputLevel()()": "class-cake.command.completioncommand.html#setOutputLevel()", "CompletionCommand::setTableLocator()()": "class-cake.command.completioncommand.html#setTableLocator()", "CompletionCommand::shellSubcommands()()": "class-cake.command.completioncommand.html#shellSubcommands()", "Component (class)": "class-cake.controller.component.html", "Component::$_componentMap": "class-cake.controller.component.html#$_componentMap", "Component::$_config": "class-cake.controller.component.html#$_config", "Component::$_configInitialized": "class-cake.controller.component.html#$_configInitialized", "Component::$_defaultConfig": "class-cake.controller.component.html#$_defaultConfig", "Component::$_registry": "class-cake.controller.component.html#$_registry", "Component::$components": "class-cake.controller.component.html#$components", "Component::__construct()()": "class-cake.controller.component.html#__construct()", "Component::__debugInfo()()": "class-cake.controller.component.html#__debugInfo()", "Component::__get()()": "class-cake.controller.component.html#__get()", "Component::_configDelete()()": "class-cake.controller.component.html#_configDelete()", "Component::_configRead()()": "class-cake.controller.component.html#_configRead()", "Component::_configWrite()()": "class-cake.controller.component.html#_configWrite()", "Component::configShallow()()": "class-cake.controller.component.html#configShallow()", "Component::getConfig()()": "class-cake.controller.component.html#getConfig()", "Component::getConfigOrFail()()": "class-cake.controller.component.html#getConfigOrFail()", "Component::getController()()": "class-cake.controller.component.html#getController()", "Component::implementedEvents()()": "class-cake.controller.component.html#implementedEvents()", "Component::initialize()()": "class-cake.controller.component.html#initialize()", "Component::log()()": "class-cake.controller.component.html#log()", "Component::setConfig()()": "class-cake.controller.component.html#setConfig()", "ComponentRegistry (class)": "class-cake.controller.componentregistry.html", "ComponentRegistry::$_Controller": "class-cake.controller.componentregistry.html#$_Controller", "ComponentRegistry::$_eventClass": "class-cake.controller.componentregistry.html#$_eventClass", "ComponentRegistry::$_eventManager": "class-cake.controller.componentregistry.html#$_eventManager", "ComponentRegistry::$_loaded": "class-cake.controller.componentregistry.html#$_loaded", "ComponentRegistry::__construct()()": "class-cake.controller.componentregistry.html#__construct()", "ComponentRegistry::__debugInfo()()": "class-cake.controller.componentregistry.html#__debugInfo()", "ComponentRegistry::__get()()": "class-cake.controller.componentregistry.html#__get()", "ComponentRegistry::__isset()()": "class-cake.controller.componentregistry.html#__isset()", "ComponentRegistry::__set()()": "class-cake.controller.componentregistry.html#__set()", "ComponentRegistry::__unset()()": "class-cake.controller.componentregistry.html#__unset()", "ComponentRegistry::_checkDuplicate()()": "class-cake.controller.componentregistry.html#_checkDuplicate()", "ComponentRegistry::_create()()": "class-cake.controller.componentregistry.html#_create()", "ComponentRegistry::_resolveClassName()()": "class-cake.controller.componentregistry.html#_resolveClassName()", "ComponentRegistry::_throwMissingClassError()()": "class-cake.controller.componentregistry.html#_throwMissingClassError()", "ComponentRegistry::count()()": "class-cake.controller.componentregistry.html#count()", "ComponentRegistry::dispatchEvent()()": "class-cake.controller.componentregistry.html#dispatchEvent()", "ComponentRegistry::get()()": "class-cake.controller.componentregistry.html#get()", "ComponentRegistry::getController()()": "class-cake.controller.componentregistry.html#getController()", "ComponentRegistry::getEventManager()()": "class-cake.controller.componentregistry.html#getEventManager()", "ComponentRegistry::getIterator()()": "class-cake.controller.componentregistry.html#getIterator()", "ComponentRegistry::has()()": "class-cake.controller.componentregistry.html#has()", "ComponentRegistry::load()()": "class-cake.controller.componentregistry.html#load()", "ComponentRegistry::loaded()()": "class-cake.controller.componentregistry.html#loaded()", "ComponentRegistry::normalizeArray()()": "class-cake.controller.componentregistry.html#normalizeArray()", "ComponentRegistry::reset()()": "class-cake.controller.componentregistry.html#reset()", "ComponentRegistry::set()()": "class-cake.controller.componentregistry.html#set()", "ComponentRegistry::setController()()": "class-cake.controller.componentregistry.html#setController()", "ComponentRegistry::setEventManager()()": "class-cake.controller.componentregistry.html#setEventManager()", "ComponentRegistry::unload()()": "class-cake.controller.componentregistry.html#unload()", "ConditionDecorator (class)": "class-cake.event.decorator.conditiondecorator.html", "ConditionDecorator::$_callable": "class-cake.event.decorator.conditiondecorator.html#$_callable", "ConditionDecorator::$_options": "class-cake.event.decorator.conditiondecorator.html#$_options", "ConditionDecorator::__construct()()": "class-cake.event.decorator.conditiondecorator.html#__construct()", "ConditionDecorator::__invoke()()": "class-cake.event.decorator.conditiondecorator.html#__invoke()", "ConditionDecorator::_call()()": "class-cake.event.decorator.conditiondecorator.html#_call()", "ConditionDecorator::_evaluateCondition()()": "class-cake.event.decorator.conditiondecorator.html#_evaluateCondition()", "ConditionDecorator::canTrigger()()": "class-cake.event.decorator.conditiondecorator.html#canTrigger()", "ConfigEngineInterface (interface)": "interface-cake.core.configure.configengineinterface.html", "Configure (class)": "class-cake.core.configure.html", "Configure::$_engines": "class-cake.core.configure.html#$_engines", "Configure::$_hasIniSet": "class-cake.core.configure.html#$_hasIniSet", "Configure::$_values": "class-cake.core.configure.html#$_values", "Configure::_getEngine()()": "class-cake.core.configure.html#_getEngine()", "Configure::check()()": "class-cake.core.configure.html#check()", "Configure::clear()()": "class-cake.core.configure.html#clear()", "Configure::config()()": "class-cake.core.configure.html#config()", "Configure::configured()()": "class-cake.core.configure.html#configured()", "Configure::consume()()": "class-cake.core.configure.html#consume()", "Configure::consumeOrFail()()": "class-cake.core.configure.html#consumeOrFail()", "Configure::delete()()": "class-cake.core.configure.html#delete()", "Configure::drop()()": "class-cake.core.configure.html#drop()", "Configure::dump()()": "class-cake.core.configure.html#dump()", "Configure::isConfigured()()": "class-cake.core.configure.html#isConfigured()", "Configure::load()()": "class-cake.core.configure.html#load()", "Configure::read()()": "class-cake.core.configure.html#read()", "Configure::readOrFail()()": "class-cake.core.configure.html#readOrFail()", "Configure::restore()()": "class-cake.core.configure.html#restore()", "Configure::store()()": "class-cake.core.configure.html#store()", "Configure::version()()": "class-cake.core.configure.html#version()", "Configure::write()()": "class-cake.core.configure.html#write()", "ConflictException (class)": "class-cake.http.exception.conflictexception.html", "Connection (class)": "class-cake.database.connection.html", "Connection::$_config": "class-cake.database.connection.html#$_config", "Connection::$_driver": "class-cake.database.connection.html#$_driver", "Connection::$_logger": "class-cake.database.connection.html#$_logger", "Connection::$_logQueries": "class-cake.database.connection.html#$_logQueries", "Connection::$_schemaCollection": "class-cake.database.connection.html#$_schemaCollection", "Connection::$_transactionLevel": "class-cake.database.connection.html#$_transactionLevel", "Connection::$_transactionStarted": "class-cake.database.connection.html#$_transactionStarted", "Connection::$_useSavePoints": "class-cake.database.connection.html#$_useSavePoints", "Connection::$cacher": "class-cake.database.connection.html#$cacher", "Connection::$nestedTransactionRollbackException": "class-cake.database.connection.html#$nestedTransactionRollbackException", "Connection::__construct()()": "class-cake.database.connection.html#__construct()", "Connection::__debugInfo()()": "class-cake.database.connection.html#__debugInfo()", "Connection::__destruct()()": "class-cake.database.connection.html#__destruct()", "Connection::_newLogger()()": "class-cake.database.connection.html#_newLogger()", "Connection::begin()()": "class-cake.database.connection.html#begin()", "Connection::cacheMetadata()()": "class-cake.database.connection.html#cacheMetadata()", "Connection::cast()()": "class-cake.database.connection.html#cast()", "Connection::commit()()": "class-cake.database.connection.html#commit()", "Connection::compileQuery()()": "class-cake.database.connection.html#compileQuery()", "Connection::config()()": "class-cake.database.connection.html#config()", "Connection::configName()()": "class-cake.database.connection.html#configName()", "Connection::connect()()": "class-cake.database.connection.html#connect()", "Connection::createDriver()()": "class-cake.database.connection.html#createDriver()", "Connection::createSavePoint()()": "class-cake.database.connection.html#createSavePoint()", "Connection::delete()()": "class-cake.database.connection.html#delete()", "Connection::disableConstraints()()": "class-cake.database.connection.html#disableConstraints()", "Connection::disableForeignKeys()()": "class-cake.database.connection.html#disableForeignKeys()", "Connection::disableQueryLogging()()": "class-cake.database.connection.html#disableQueryLogging()", "Connection::disableSavePoints()()": "class-cake.database.connection.html#disableSavePoints()", "Connection::disconnect()()": "class-cake.database.connection.html#disconnect()", "Connection::enableForeignKeys()()": "class-cake.database.connection.html#enableForeignKeys()", "Connection::enableQueryLogging()()": "class-cake.database.connection.html#enableQueryLogging()", "Connection::enableSavePoints()()": "class-cake.database.connection.html#enableSavePoints()", "Connection::execute()()": "class-cake.database.connection.html#execute()", "Connection::getCacher()()": "class-cake.database.connection.html#getCacher()", "Connection::getDisconnectRetry()()": "class-cake.database.connection.html#getDisconnectRetry()", "Connection::getDriver()()": "class-cake.database.connection.html#getDriver()", "Connection::getLogger()()": "class-cake.database.connection.html#getLogger()", "Connection::getSchemaCollection()()": "class-cake.database.connection.html#getSchemaCollection()", "Connection::insert()()": "class-cake.database.connection.html#insert()", "Connection::inTransaction()()": "class-cake.database.connection.html#inTransaction()", "Connection::isConnected()()": "class-cake.database.connection.html#isConnected()", "Connection::isQueryLoggingEnabled()()": "class-cake.database.connection.html#isQueryLoggingEnabled()", "Connection::isSavePointsEnabled()()": "class-cake.database.connection.html#isSavePointsEnabled()", "Connection::log()()": "class-cake.database.connection.html#log()", "Connection::matchTypes()()": "class-cake.database.connection.html#matchTypes()", "Connection::newQuery()()": "class-cake.database.connection.html#newQuery()", "Connection::prepare()()": "class-cake.database.connection.html#prepare()", "Connection::query()()": "class-cake.database.connection.html#query()", "Connection::quote()()": "class-cake.database.connection.html#quote()", "Connection::quoteIdentifier()()": "class-cake.database.connection.html#quoteIdentifier()", "Connection::releaseSavePoint()()": "class-cake.database.connection.html#releaseSavePoint()", "Connection::rollback()()": "class-cake.database.connection.html#rollback()", "Connection::rollbackSavepoint()()": "class-cake.database.connection.html#rollbackSavepoint()", "Connection::run()()": "class-cake.database.connection.html#run()", "Connection::setCacher()()": "class-cake.database.connection.html#setCacher()", "Connection::setDriver()()": "class-cake.database.connection.html#setDriver()", "Connection::setLogger()()": "class-cake.database.connection.html#setLogger()", "Connection::setSchemaCollection()()": "class-cake.database.connection.html#setSchemaCollection()", "Connection::supportsDynamicConstraints()()": "class-cake.database.connection.html#supportsDynamicConstraints()", "Connection::supportsQuoting()()": "class-cake.database.connection.html#supportsQuoting()", "Connection::transactional()()": "class-cake.database.connection.html#transactional()", "Connection::update()()": "class-cake.database.connection.html#update()", "Connection::wasNestedTransactionRolledback()()": "class-cake.database.connection.html#wasNestedTransactionRolledback()", "ConnectionHelper (class)": "class-cake.testsuite.connectionhelper.html", "ConnectionHelper::addTestAliases()()": "class-cake.testsuite.connectionhelper.html#addTestAliases()", "ConnectionHelper::dropTables()()": "class-cake.testsuite.connectionhelper.html#dropTables()", "ConnectionHelper::enableQueryLogging()()": "class-cake.testsuite.connectionhelper.html#enableQueryLogging()", "ConnectionHelper::runWithoutConstraints()()": "class-cake.testsuite.connectionhelper.html#runWithoutConstraints()", "ConnectionHelper::truncateTables()()": "class-cake.testsuite.connectionhelper.html#truncateTables()", "ConnectionInterface (interface)": "interface-cake.datasource.connectioninterface.html", "ConnectionManager (class)": "class-cake.datasource.connectionmanager.html", "ConnectionManager::$_aliasMap": "class-cake.datasource.connectionmanager.html#$_aliasMap", "ConnectionManager::$_config": "class-cake.datasource.connectionmanager.html#$_config", "ConnectionManager::$_dsnClassMap": "class-cake.datasource.connectionmanager.html#$_dsnClassMap", "ConnectionManager::$_registry": "class-cake.datasource.connectionmanager.html#$_registry", "ConnectionManager::alias()()": "class-cake.datasource.connectionmanager.html#alias()", "ConnectionManager::configured()()": "class-cake.datasource.connectionmanager.html#configured()", "ConnectionManager::drop()()": "class-cake.datasource.connectionmanager.html#drop()", "ConnectionManager::dropAlias()()": "class-cake.datasource.connectionmanager.html#dropAlias()", "ConnectionManager::get()()": "class-cake.datasource.connectionmanager.html#get()", "ConnectionManager::getConfig()()": "class-cake.datasource.connectionmanager.html#getConfig()", "ConnectionManager::getConfigOrFail()()": "class-cake.datasource.connectionmanager.html#getConfigOrFail()", "ConnectionManager::getDsnClassMap()()": "class-cake.datasource.connectionmanager.html#getDsnClassMap()", "ConnectionManager::parseDsn()()": "class-cake.datasource.connectionmanager.html#parseDsn()", "ConnectionManager::setConfig()()": "class-cake.datasource.connectionmanager.html#setConfig()", "ConnectionManager::setDsnClassMap()()": "class-cake.datasource.connectionmanager.html#setDsnClassMap()", "ConnectionRegistry (class)": "class-cake.datasource.connectionregistry.html", "ConnectionRegistry::$_loaded": "class-cake.datasource.connectionregistry.html#$_loaded", "ConnectionRegistry::__debugInfo()()": "class-cake.datasource.connectionregistry.html#__debugInfo()", "ConnectionRegistry::__get()()": "class-cake.datasource.connectionregistry.html#__get()", "ConnectionRegistry::__isset()()": "class-cake.datasource.connectionregistry.html#__isset()", "ConnectionRegistry::__set()()": "class-cake.datasource.connectionregistry.html#__set()", "ConnectionRegistry::__unset()()": "class-cake.datasource.connectionregistry.html#__unset()", "ConnectionRegistry::_checkDuplicate()()": "class-cake.datasource.connectionregistry.html#_checkDuplicate()", "ConnectionRegistry::_create()()": "class-cake.datasource.connectionregistry.html#_create()", "ConnectionRegistry::_resolveClassName()()": "class-cake.datasource.connectionregistry.html#_resolveClassName()", "ConnectionRegistry::_throwMissingClassError()()": "class-cake.datasource.connectionregistry.html#_throwMissingClassError()", "ConnectionRegistry::count()()": "class-cake.datasource.connectionregistry.html#count()", "ConnectionRegistry::get()()": "class-cake.datasource.connectionregistry.html#get()", "ConnectionRegistry::getIterator()()": "class-cake.datasource.connectionregistry.html#getIterator()", "ConnectionRegistry::has()()": "class-cake.datasource.connectionregistry.html#has()", "ConnectionRegistry::load()()": "class-cake.datasource.connectionregistry.html#load()", "ConnectionRegistry::loaded()()": "class-cake.datasource.connectionregistry.html#loaded()", "ConnectionRegistry::normalizeArray()()": "class-cake.datasource.connectionregistry.html#normalizeArray()", "ConnectionRegistry::reset()()": "class-cake.datasource.connectionregistry.html#reset()", "ConnectionRegistry::set()()": "class-cake.datasource.connectionregistry.html#set()", "ConnectionRegistry::unload()()": "class-cake.datasource.connectionregistry.html#unload()", "Console (namespace)": "namespace-cake.console.html", "Console\\Command (namespace)": "namespace-cake.console.command.html", "Console\\Exception (namespace)": "namespace-cake.console.exception.html", "Console\\TestSuite (namespace)": "namespace-cake.console.testsuite.html", "Console\\TestSuite\\Constraint (namespace)": "namespace-cake.console.testsuite.constraint.html", "ConsoleApplicationInterface (interface)": "interface-cake.core.consoleapplicationinterface.html", "ConsoleErrorHandler (class)": "class-cake.error.consoleerrorhandler.html", "ConsoleErrorHandler::$_config": "class-cake.error.consoleerrorhandler.html#$_config", "ConsoleErrorHandler::$_configInitialized": "class-cake.error.consoleerrorhandler.html#$_configInitialized", "ConsoleErrorHandler::$_defaultConfig": "class-cake.error.consoleerrorhandler.html#$_defaultConfig", "ConsoleErrorHandler::$_handled": "class-cake.error.consoleerrorhandler.html#$_handled", "ConsoleErrorHandler::$_stderr": "class-cake.error.consoleerrorhandler.html#$_stderr", "ConsoleErrorHandler::$logger": "class-cake.error.consoleerrorhandler.html#$logger", "ConsoleErrorHandler::__construct()()": "class-cake.error.consoleerrorhandler.html#__construct()", "ConsoleErrorHandler::_configDelete()()": "class-cake.error.consoleerrorhandler.html#_configDelete()", "ConsoleErrorHandler::_configRead()()": "class-cake.error.consoleerrorhandler.html#_configRead()", "ConsoleErrorHandler::_configWrite()()": "class-cake.error.consoleerrorhandler.html#_configWrite()", "ConsoleErrorHandler::_displayError()()": "class-cake.error.consoleerrorhandler.html#_displayError()", "ConsoleErrorHandler::_displayException()()": "class-cake.error.consoleerrorhandler.html#_displayException()", "ConsoleErrorHandler::_logError()()": "class-cake.error.consoleerrorhandler.html#_logError()", "ConsoleErrorHandler::_stop()()": "class-cake.error.consoleerrorhandler.html#_stop()", "ConsoleErrorHandler::configShallow()()": "class-cake.error.consoleerrorhandler.html#configShallow()", "ConsoleErrorHandler::getConfig()()": "class-cake.error.consoleerrorhandler.html#getConfig()", "ConsoleErrorHandler::getConfigOrFail()()": "class-cake.error.consoleerrorhandler.html#getConfigOrFail()", "ConsoleErrorHandler::getLogger()()": "class-cake.error.consoleerrorhandler.html#getLogger()", "ConsoleErrorHandler::handleError()()": "class-cake.error.consoleerrorhandler.html#handleError()", "ConsoleErrorHandler::handleException()()": "class-cake.error.consoleerrorhandler.html#handleException()", "ConsoleErrorHandler::handleFatalError()()": "class-cake.error.consoleerrorhandler.html#handleFatalError()", "ConsoleErrorHandler::increaseMemoryLimit()()": "class-cake.error.consoleerrorhandler.html#increaseMemoryLimit()", "ConsoleErrorHandler::logException()()": "class-cake.error.consoleerrorhandler.html#logException()", "ConsoleErrorHandler::mapErrorCode()()": "class-cake.error.consoleerrorhandler.html#mapErrorCode()", "ConsoleErrorHandler::register()()": "class-cake.error.consoleerrorhandler.html#register()", "ConsoleErrorHandler::setConfig()()": "class-cake.error.consoleerrorhandler.html#setConfig()", "ConsoleErrorHandler::wrapAndHandleException()()": "class-cake.error.consoleerrorhandler.html#wrapAndHandleException()", "ConsoleErrorRenderer (class)": "class-cake.error.renderer.consoleerrorrenderer.html", "ConsoleErrorRenderer::$output": "class-cake.error.renderer.consoleerrorrenderer.html#$output", "ConsoleErrorRenderer::$trace": "class-cake.error.renderer.consoleerrorrenderer.html#$trace", "ConsoleErrorRenderer::__construct()()": "class-cake.error.renderer.consoleerrorrenderer.html#__construct()", "ConsoleErrorRenderer::render()()": "class-cake.error.renderer.consoleerrorrenderer.html#render()", "ConsoleErrorRenderer::write()()": "class-cake.error.renderer.consoleerrorrenderer.html#write()", "ConsoleException (class)": "class-cake.console.exception.consoleexception.html", "ConsoleExceptionRenderer (class)": "class-cake.error.renderer.consoleexceptionrenderer.html", "ConsoleExceptionRenderer::__construct()()": "class-cake.error.renderer.consoleexceptionrenderer.html#__construct()", "ConsoleExceptionRenderer::render()()": "class-cake.error.renderer.consoleexceptionrenderer.html#render()", "ConsoleExceptionRenderer::renderException()()": "class-cake.error.renderer.consoleexceptionrenderer.html#renderException()", "ConsoleExceptionRenderer::write()()": "class-cake.error.renderer.consoleexceptionrenderer.html#write()", "ConsoleFormatter (class)": "class-cake.error.debug.consoleformatter.html", "ConsoleFormatter::$styles": "class-cake.error.debug.consoleformatter.html#$styles", "ConsoleFormatter::dump()()": "class-cake.error.debug.consoleformatter.html#dump()", "ConsoleFormatter::environmentMatches()()": "class-cake.error.debug.consoleformatter.html#environmentMatches()", "ConsoleFormatter::export()()": "class-cake.error.debug.consoleformatter.html#export()", "ConsoleFormatter::exportArray()()": "class-cake.error.debug.consoleformatter.html#exportArray()", "ConsoleFormatter::exportObject()()": "class-cake.error.debug.consoleformatter.html#exportObject()", "ConsoleFormatter::formatWrapper()()": "class-cake.error.debug.consoleformatter.html#formatWrapper()", "ConsoleFormatter::style()()": "class-cake.error.debug.consoleformatter.html#style()", "ConsoleInput (class)": "class-cake.console.consoleinput.html", "ConsoleInput::$_canReadline": "class-cake.console.consoleinput.html#$_canReadline", "ConsoleInput::$_input": "class-cake.console.consoleinput.html#$_input", "ConsoleInput::__construct()()": "class-cake.console.consoleinput.html#__construct()", "ConsoleInput::dataAvailable()()": "class-cake.console.consoleinput.html#dataAvailable()", "ConsoleInput::read()()": "class-cake.console.consoleinput.html#read()", "ConsoleInputArgument (class)": "class-cake.console.consoleinputargument.html", "ConsoleInputArgument::$_choices": "class-cake.console.consoleinputargument.html#$_choices", "ConsoleInputArgument::$_help": "class-cake.console.consoleinputargument.html#$_help", "ConsoleInputArgument::$_name": "class-cake.console.consoleinputargument.html#$_name", "ConsoleInputArgument::$_required": "class-cake.console.consoleinputargument.html#$_required", "ConsoleInputArgument::__construct()()": "class-cake.console.consoleinputargument.html#__construct()", "ConsoleInputArgument::help()()": "class-cake.console.consoleinputargument.html#help()", "ConsoleInputArgument::isEqualTo()()": "class-cake.console.consoleinputargument.html#isEqualTo()", "ConsoleInputArgument::isRequired()()": "class-cake.console.consoleinputargument.html#isRequired()", "ConsoleInputArgument::name()()": "class-cake.console.consoleinputargument.html#name()", "ConsoleInputArgument::usage()()": "class-cake.console.consoleinputargument.html#usage()", "ConsoleInputArgument::validChoice()()": "class-cake.console.consoleinputargument.html#validChoice()", "ConsoleInputArgument::xml()()": "class-cake.console.consoleinputargument.html#xml()", "ConsoleInputOption (class)": "class-cake.console.consoleinputoption.html", "ConsoleInputOption::$_boolean": "class-cake.console.consoleinputoption.html#$_boolean", "ConsoleInputOption::$_choices": "class-cake.console.consoleinputoption.html#$_choices", "ConsoleInputOption::$_default": "class-cake.console.consoleinputoption.html#$_default", "ConsoleInputOption::$_help": "class-cake.console.consoleinputoption.html#$_help", "ConsoleInputOption::$_multiple": "class-cake.console.consoleinputoption.html#$_multiple", "ConsoleInputOption::$_name": "class-cake.console.consoleinputoption.html#$_name", "ConsoleInputOption::$_short": "class-cake.console.consoleinputoption.html#$_short", "ConsoleInputOption::$prompt": "class-cake.console.consoleinputoption.html#$prompt", "ConsoleInputOption::$required": "class-cake.console.consoleinputoption.html#$required", "ConsoleInputOption::__construct()()": "class-cake.console.consoleinputoption.html#__construct()", "ConsoleInputOption::acceptsMultiple()()": "class-cake.console.consoleinputoption.html#acceptsMultiple()", "ConsoleInputOption::choices()()": "class-cake.console.consoleinputoption.html#choices()", "ConsoleInputOption::defaultValue()()": "class-cake.console.consoleinputoption.html#defaultValue()", "ConsoleInputOption::help()()": "class-cake.console.consoleinputoption.html#help()", "ConsoleInputOption::isBoolean()()": "class-cake.console.consoleinputoption.html#isBoolean()", "ConsoleInputOption::isRequired()()": "class-cake.console.consoleinputoption.html#isRequired()", "ConsoleInputOption::name()()": "class-cake.console.consoleinputoption.html#name()", "ConsoleInputOption::prompt()()": "class-cake.console.consoleinputoption.html#prompt()", "ConsoleInputOption::short()()": "class-cake.console.consoleinputoption.html#short()", "ConsoleInputOption::usage()()": "class-cake.console.consoleinputoption.html#usage()", "ConsoleInputOption::validChoice()()": "class-cake.console.consoleinputoption.html#validChoice()", "ConsoleInputOption::xml()()": "class-cake.console.consoleinputoption.html#xml()", "ConsoleInputSubcommand (class)": "class-cake.console.consoleinputsubcommand.html", "ConsoleInputSubcommand::$_help": "class-cake.console.consoleinputsubcommand.html#$_help", "ConsoleInputSubcommand::$_name": "class-cake.console.consoleinputsubcommand.html#$_name", "ConsoleInputSubcommand::$_parser": "class-cake.console.consoleinputsubcommand.html#$_parser", "ConsoleInputSubcommand::__construct()()": "class-cake.console.consoleinputsubcommand.html#__construct()", "ConsoleInputSubcommand::getRawHelp()()": "class-cake.console.consoleinputsubcommand.html#getRawHelp()", "ConsoleInputSubcommand::help()()": "class-cake.console.consoleinputsubcommand.html#help()", "ConsoleInputSubcommand::name()()": "class-cake.console.consoleinputsubcommand.html#name()", "ConsoleInputSubcommand::parser()()": "class-cake.console.consoleinputsubcommand.html#parser()", "ConsoleInputSubcommand::xml()()": "class-cake.console.consoleinputsubcommand.html#xml()", "ConsoleIntegrationTestCase (class)": "class-cake.testsuite.consoleintegrationtestcase.html", "ConsoleIntegrationTestCase::$_appArgs": "class-cake.testsuite.consoleintegrationtestcase.html#$_appArgs", "ConsoleIntegrationTestCase::$_appClass": "class-cake.testsuite.consoleintegrationtestcase.html#$_appClass", "ConsoleIntegrationTestCase::$_configure": "class-cake.testsuite.consoleintegrationtestcase.html#$_configure", "ConsoleIntegrationTestCase::$_err": "class-cake.testsuite.consoleintegrationtestcase.html#$_err", "ConsoleIntegrationTestCase::$_exitCode": "class-cake.testsuite.consoleintegrationtestcase.html#$_exitCode", "ConsoleIntegrationTestCase::$_in": "class-cake.testsuite.consoleintegrationtestcase.html#$_in", "ConsoleIntegrationTestCase::$_out": "class-cake.testsuite.consoleintegrationtestcase.html#$_out", "ConsoleIntegrationTestCase::$_tableLocator": "class-cake.testsuite.consoleintegrationtestcase.html#$_tableLocator", "ConsoleIntegrationTestCase::$_useCommandRunner": "class-cake.testsuite.consoleintegrationtestcase.html#$_useCommandRunner", "ConsoleIntegrationTestCase::$autoFixtures": "class-cake.testsuite.consoleintegrationtestcase.html#$autoFixtures", "ConsoleIntegrationTestCase::$backupGlobals": "class-cake.testsuite.consoleintegrationtestcase.html#$backupGlobals", "ConsoleIntegrationTestCase::$backupGlobalsBlacklist": "class-cake.testsuite.consoleintegrationtestcase.html#$backupGlobalsBlacklist", "ConsoleIntegrationTestCase::$backupGlobalsExcludeList": "class-cake.testsuite.consoleintegrationtestcase.html#$backupGlobalsExcludeList", "ConsoleIntegrationTestCase::$backupStaticAttributes": "class-cake.testsuite.consoleintegrationtestcase.html#$backupStaticAttributes", "ConsoleIntegrationTestCase::$backupStaticAttributesBlacklist": "class-cake.testsuite.consoleintegrationtestcase.html#$backupStaticAttributesBlacklist", "ConsoleIntegrationTestCase::$backupStaticAttributesExcludeList": "class-cake.testsuite.consoleintegrationtestcase.html#$backupStaticAttributesExcludeList", "ConsoleIntegrationTestCase::$defaultTable": "class-cake.testsuite.consoleintegrationtestcase.html#$defaultTable", "ConsoleIntegrationTestCase::$dropTables": "class-cake.testsuite.consoleintegrationtestcase.html#$dropTables", "ConsoleIntegrationTestCase::$fixtureManager": "class-cake.testsuite.consoleintegrationtestcase.html#$fixtureManager", "ConsoleIntegrationTestCase::$fixtures": "class-cake.testsuite.consoleintegrationtestcase.html#$fixtures", "ConsoleIntegrationTestCase::$fixtureStrategy": "class-cake.testsuite.consoleintegrationtestcase.html#$fixtureStrategy", "ConsoleIntegrationTestCase::$preserveGlobalState": "class-cake.testsuite.consoleintegrationtestcase.html#$preserveGlobalState", "ConsoleIntegrationTestCase::$providedTests": "class-cake.testsuite.consoleintegrationtestcase.html#$providedTests", "ConsoleIntegrationTestCase::$runTestInSeparateProcess": "class-cake.testsuite.consoleintegrationtestcase.html#$runTestInSeparateProcess", "ConsoleIntegrationTestCase::__construct()()": "class-cake.testsuite.consoleintegrationtestcase.html#__construct()", "ConsoleIntegrationTestCase::_assertAttributes()()": "class-cake.testsuite.consoleintegrationtestcase.html#_assertAttributes()", "ConsoleIntegrationTestCase::_getTableClassName()()": "class-cake.testsuite.consoleintegrationtestcase.html#_getTableClassName()", "ConsoleIntegrationTestCase::_normalizePath()()": "class-cake.testsuite.consoleintegrationtestcase.html#_normalizePath()", "ConsoleIntegrationTestCase::addFixture()()": "class-cake.testsuite.consoleintegrationtestcase.html#addFixture()", "ConsoleIntegrationTestCase::addToAssertionCount()()": "class-cake.testsuite.consoleintegrationtestcase.html#addToAssertionCount()", "ConsoleIntegrationTestCase::addWarning()()": "class-cake.testsuite.consoleintegrationtestcase.html#addWarning()", "ConsoleIntegrationTestCase::any()()": "class-cake.testsuite.consoleintegrationtestcase.html#any()", "ConsoleIntegrationTestCase::anything()()": "class-cake.testsuite.consoleintegrationtestcase.html#anything()", "ConsoleIntegrationTestCase::arrayHasKey()()": "class-cake.testsuite.consoleintegrationtestcase.html#arrayHasKey()", "ConsoleIntegrationTestCase::assertArrayHasKey()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertArrayHasKey()", "ConsoleIntegrationTestCase::assertArrayNotHasKey()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertArrayNotHasKey()", "ConsoleIntegrationTestCase::assertClassHasAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertClassHasAttribute()", "ConsoleIntegrationTestCase::assertClassHasStaticAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertClassHasStaticAttribute()", "ConsoleIntegrationTestCase::assertClassNotHasAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertClassNotHasAttribute()", "ConsoleIntegrationTestCase::assertClassNotHasStaticAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertClassNotHasStaticAttribute()", "ConsoleIntegrationTestCase::assertContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertContains()", "ConsoleIntegrationTestCase::assertContainsEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertContainsEquals()", "ConsoleIntegrationTestCase::assertContainsOnly()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertContainsOnly()", "ConsoleIntegrationTestCase::assertContainsOnlyInstancesOf()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertContainsOnlyInstancesOf()", "ConsoleIntegrationTestCase::assertCount()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertCount()", "ConsoleIntegrationTestCase::assertDirectoryDoesNotExist()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryDoesNotExist()", "ConsoleIntegrationTestCase::assertDirectoryExists()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryExists()", "ConsoleIntegrationTestCase::assertDirectoryIsNotReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryIsNotReadable()", "ConsoleIntegrationTestCase::assertDirectoryIsNotWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryIsNotWritable()", "ConsoleIntegrationTestCase::assertDirectoryIsReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryIsReadable()", "ConsoleIntegrationTestCase::assertDirectoryIsWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryIsWritable()", "ConsoleIntegrationTestCase::assertDirectoryNotExists()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryNotExists()", "ConsoleIntegrationTestCase::assertDirectoryNotIsReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryNotIsReadable()", "ConsoleIntegrationTestCase::assertDirectoryNotIsWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDirectoryNotIsWritable()", "ConsoleIntegrationTestCase::assertDoesNotMatchRegularExpression()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertDoesNotMatchRegularExpression()", "ConsoleIntegrationTestCase::assertEmpty()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEmpty()", "ConsoleIntegrationTestCase::assertEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEquals()", "ConsoleIntegrationTestCase::assertEqualsCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEqualsCanonicalizing()", "ConsoleIntegrationTestCase::assertEqualsIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEqualsIgnoringCase()", "ConsoleIntegrationTestCase::assertEqualsSql()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEqualsSql()", "ConsoleIntegrationTestCase::assertEqualsWithDelta()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEqualsWithDelta()", "ConsoleIntegrationTestCase::assertEqualXMLStructure()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEqualXMLStructure()", "ConsoleIntegrationTestCase::assertErrorContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertErrorContains()", "ConsoleIntegrationTestCase::assertErrorEmpty()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertErrorEmpty()", "ConsoleIntegrationTestCase::assertErrorRegExp()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertErrorRegExp()", "ConsoleIntegrationTestCase::assertEventFired()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEventFired()", "ConsoleIntegrationTestCase::assertEventFiredWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertEventFiredWith()", "ConsoleIntegrationTestCase::assertExitCode()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertExitCode()", "ConsoleIntegrationTestCase::assertExitError()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertExitError()", "ConsoleIntegrationTestCase::assertExitSuccess()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertExitSuccess()", "ConsoleIntegrationTestCase::assertFalse()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFalse()", "ConsoleIntegrationTestCase::assertFileDoesNotExist()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileDoesNotExist()", "ConsoleIntegrationTestCase::assertFileEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileEquals()", "ConsoleIntegrationTestCase::assertFileEqualsCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileEqualsCanonicalizing()", "ConsoleIntegrationTestCase::assertFileEqualsIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileEqualsIgnoringCase()", "ConsoleIntegrationTestCase::assertFileExists()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileExists()", "ConsoleIntegrationTestCase::assertFileIsNotReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileIsNotReadable()", "ConsoleIntegrationTestCase::assertFileIsNotWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileIsNotWritable()", "ConsoleIntegrationTestCase::assertFileIsReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileIsReadable()", "ConsoleIntegrationTestCase::assertFileIsWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileIsWritable()", "ConsoleIntegrationTestCase::assertFileNotEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileNotEquals()", "ConsoleIntegrationTestCase::assertFileNotEqualsCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileNotEqualsCanonicalizing()", "ConsoleIntegrationTestCase::assertFileNotEqualsIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileNotEqualsIgnoringCase()", "ConsoleIntegrationTestCase::assertFileNotExists()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileNotExists()", "ConsoleIntegrationTestCase::assertFileNotIsReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileNotIsReadable()", "ConsoleIntegrationTestCase::assertFileNotIsWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFileNotIsWritable()", "ConsoleIntegrationTestCase::assertFinite()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertFinite()", "ConsoleIntegrationTestCase::assertGreaterThan()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertGreaterThan()", "ConsoleIntegrationTestCase::assertGreaterThanOrEqual()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertGreaterThanOrEqual()", "ConsoleIntegrationTestCase::assertHtml()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertHtml()", "ConsoleIntegrationTestCase::assertInfinite()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertInfinite()", "ConsoleIntegrationTestCase::assertInstanceOf()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertInstanceOf()", "ConsoleIntegrationTestCase::assertIsArray()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsArray()", "ConsoleIntegrationTestCase::assertIsBool()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsBool()", "ConsoleIntegrationTestCase::assertIsCallable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsCallable()", "ConsoleIntegrationTestCase::assertIsClosedResource()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsClosedResource()", "ConsoleIntegrationTestCase::assertIsFloat()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsFloat()", "ConsoleIntegrationTestCase::assertIsInt()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsInt()", "ConsoleIntegrationTestCase::assertIsIterable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsIterable()", "ConsoleIntegrationTestCase::assertIsNotArray()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotArray()", "ConsoleIntegrationTestCase::assertIsNotBool()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotBool()", "ConsoleIntegrationTestCase::assertIsNotCallable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotCallable()", "ConsoleIntegrationTestCase::assertIsNotClosedResource()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotClosedResource()", "ConsoleIntegrationTestCase::assertIsNotFloat()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotFloat()", "ConsoleIntegrationTestCase::assertIsNotInt()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotInt()", "ConsoleIntegrationTestCase::assertIsNotIterable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotIterable()", "ConsoleIntegrationTestCase::assertIsNotNumeric()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotNumeric()", "ConsoleIntegrationTestCase::assertIsNotObject()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotObject()", "ConsoleIntegrationTestCase::assertIsNotReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotReadable()", "ConsoleIntegrationTestCase::assertIsNotResource()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotResource()", "ConsoleIntegrationTestCase::assertIsNotScalar()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotScalar()", "ConsoleIntegrationTestCase::assertIsNotString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotString()", "ConsoleIntegrationTestCase::assertIsNotWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNotWritable()", "ConsoleIntegrationTestCase::assertIsNumeric()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsNumeric()", "ConsoleIntegrationTestCase::assertIsObject()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsObject()", "ConsoleIntegrationTestCase::assertIsReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsReadable()", "ConsoleIntegrationTestCase::assertIsResource()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsResource()", "ConsoleIntegrationTestCase::assertIsScalar()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsScalar()", "ConsoleIntegrationTestCase::assertIsString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsString()", "ConsoleIntegrationTestCase::assertIsWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertIsWritable()", "ConsoleIntegrationTestCase::assertJson()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJson()", "ConsoleIntegrationTestCase::assertJsonFileEqualsJsonFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJsonFileEqualsJsonFile()", "ConsoleIntegrationTestCase::assertJsonFileNotEqualsJsonFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJsonFileNotEqualsJsonFile()", "ConsoleIntegrationTestCase::assertJsonStringEqualsJsonFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJsonStringEqualsJsonFile()", "ConsoleIntegrationTestCase::assertJsonStringEqualsJsonString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJsonStringEqualsJsonString()", "ConsoleIntegrationTestCase::assertJsonStringNotEqualsJsonFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJsonStringNotEqualsJsonFile()", "ConsoleIntegrationTestCase::assertJsonStringNotEqualsJsonString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertJsonStringNotEqualsJsonString()", "ConsoleIntegrationTestCase::assertLessThan()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertLessThan()", "ConsoleIntegrationTestCase::assertLessThanOrEqual()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertLessThanOrEqual()", "ConsoleIntegrationTestCase::assertMatchesRegularExpression()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertMatchesRegularExpression()", "ConsoleIntegrationTestCase::assertNan()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNan()", "ConsoleIntegrationTestCase::assertNotContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotContains()", "ConsoleIntegrationTestCase::assertNotContainsEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotContainsEquals()", "ConsoleIntegrationTestCase::assertNotContainsOnly()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotContainsOnly()", "ConsoleIntegrationTestCase::assertNotCount()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotCount()", "ConsoleIntegrationTestCase::assertNotEmpty()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotEmpty()", "ConsoleIntegrationTestCase::assertNotEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotEquals()", "ConsoleIntegrationTestCase::assertNotEqualsCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotEqualsCanonicalizing()", "ConsoleIntegrationTestCase::assertNotEqualsIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotEqualsIgnoringCase()", "ConsoleIntegrationTestCase::assertNotEqualsWithDelta()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotEqualsWithDelta()", "ConsoleIntegrationTestCase::assertNotFalse()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotFalse()", "ConsoleIntegrationTestCase::assertNotInstanceOf()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotInstanceOf()", "ConsoleIntegrationTestCase::assertNotIsReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotIsReadable()", "ConsoleIntegrationTestCase::assertNotIsWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotIsWritable()", "ConsoleIntegrationTestCase::assertNotNull()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotNull()", "ConsoleIntegrationTestCase::assertNotRegExp()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotRegExp()", "ConsoleIntegrationTestCase::assertNotSame()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotSame()", "ConsoleIntegrationTestCase::assertNotSameSize()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotSameSize()", "ConsoleIntegrationTestCase::assertNotTrue()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotTrue()", "ConsoleIntegrationTestCase::assertNotWithinRange()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNotWithinRange()", "ConsoleIntegrationTestCase::assertNull()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertNull()", "ConsoleIntegrationTestCase::assertObjectEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertObjectEquals()", "ConsoleIntegrationTestCase::assertObjectHasAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertObjectHasAttribute()", "ConsoleIntegrationTestCase::assertObjectNotHasAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertObjectNotHasAttribute()", "ConsoleIntegrationTestCase::assertOutputContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertOutputContains()", "ConsoleIntegrationTestCase::assertOutputContainsRow()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertOutputContainsRow()", "ConsoleIntegrationTestCase::assertOutputEmpty()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertOutputEmpty()", "ConsoleIntegrationTestCase::assertOutputNotContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertOutputNotContains()", "ConsoleIntegrationTestCase::assertOutputRegExp()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertOutputRegExp()", "ConsoleIntegrationTestCase::assertPathEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertPathEquals()", "ConsoleIntegrationTestCase::assertPostConditions()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertPostConditions()", "ConsoleIntegrationTestCase::assertPreConditions()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertPreConditions()", "ConsoleIntegrationTestCase::assertRegExp()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertRegExp()", "ConsoleIntegrationTestCase::assertRegExpSql()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertRegExpSql()", "ConsoleIntegrationTestCase::assertSame()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertSame()", "ConsoleIntegrationTestCase::assertSameSize()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertSameSize()", "ConsoleIntegrationTestCase::assertStringContainsString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringContainsString()", "ConsoleIntegrationTestCase::assertStringContainsStringIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringContainsStringIgnoringCase()", "ConsoleIntegrationTestCase::assertStringEndsNotWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringEndsNotWith()", "ConsoleIntegrationTestCase::assertStringEndsWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringEndsWith()", "ConsoleIntegrationTestCase::assertStringEqualsFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringEqualsFile()", "ConsoleIntegrationTestCase::assertStringEqualsFileCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringEqualsFileCanonicalizing()", "ConsoleIntegrationTestCase::assertStringEqualsFileIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringEqualsFileIgnoringCase()", "ConsoleIntegrationTestCase::assertStringMatchesFormat()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringMatchesFormat()", "ConsoleIntegrationTestCase::assertStringMatchesFormatFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringMatchesFormatFile()", "ConsoleIntegrationTestCase::assertStringNotContainsString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotContainsString()", "ConsoleIntegrationTestCase::assertStringNotContainsStringIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotContainsStringIgnoringCase()", "ConsoleIntegrationTestCase::assertStringNotEqualsFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotEqualsFile()", "ConsoleIntegrationTestCase::assertStringNotEqualsFileCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotEqualsFileCanonicalizing()", "ConsoleIntegrationTestCase::assertStringNotEqualsFileIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotEqualsFileIgnoringCase()", "ConsoleIntegrationTestCase::assertStringNotMatchesFormat()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotMatchesFormat()", "ConsoleIntegrationTestCase::assertStringNotMatchesFormatFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringNotMatchesFormatFile()", "ConsoleIntegrationTestCase::assertStringStartsNotWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringStartsNotWith()", "ConsoleIntegrationTestCase::assertStringStartsWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertStringStartsWith()", "ConsoleIntegrationTestCase::assertTextContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextContains()", "ConsoleIntegrationTestCase::assertTextEndsNotWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextEndsNotWith()", "ConsoleIntegrationTestCase::assertTextEndsWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextEndsWith()", "ConsoleIntegrationTestCase::assertTextEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextEquals()", "ConsoleIntegrationTestCase::assertTextNotContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextNotContains()", "ConsoleIntegrationTestCase::assertTextNotEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextNotEquals()", "ConsoleIntegrationTestCase::assertTextStartsNotWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextStartsNotWith()", "ConsoleIntegrationTestCase::assertTextStartsWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTextStartsWith()", "ConsoleIntegrationTestCase::assertThat()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertThat()", "ConsoleIntegrationTestCase::assertTrue()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertTrue()", "ConsoleIntegrationTestCase::assertWithinRange()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertWithinRange()", "ConsoleIntegrationTestCase::assertXmlFileEqualsXmlFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertXmlFileEqualsXmlFile()", "ConsoleIntegrationTestCase::assertXmlFileNotEqualsXmlFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertXmlFileNotEqualsXmlFile()", "ConsoleIntegrationTestCase::assertXmlStringEqualsXmlFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertXmlStringEqualsXmlFile()", "ConsoleIntegrationTestCase::assertXmlStringEqualsXmlString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertXmlStringEqualsXmlString()", "ConsoleIntegrationTestCase::assertXmlStringNotEqualsXmlFile()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertXmlStringNotEqualsXmlFile()", "ConsoleIntegrationTestCase::assertXmlStringNotEqualsXmlString()()": "class-cake.testsuite.consoleintegrationtestcase.html#assertXmlStringNotEqualsXmlString()", "ConsoleIntegrationTestCase::at()()": "class-cake.testsuite.consoleintegrationtestcase.html#at()", "ConsoleIntegrationTestCase::atLeast()()": "class-cake.testsuite.consoleintegrationtestcase.html#atLeast()", "ConsoleIntegrationTestCase::atLeastOnce()()": "class-cake.testsuite.consoleintegrationtestcase.html#atLeastOnce()", "ConsoleIntegrationTestCase::atMost()()": "class-cake.testsuite.consoleintegrationtestcase.html#atMost()", "ConsoleIntegrationTestCase::callback()()": "class-cake.testsuite.consoleintegrationtestcase.html#callback()", "ConsoleIntegrationTestCase::classHasAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#classHasAttribute()", "ConsoleIntegrationTestCase::classHasStaticAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#classHasStaticAttribute()", "ConsoleIntegrationTestCase::cleanupConsoleTrait()()": "class-cake.testsuite.consoleintegrationtestcase.html#cleanupConsoleTrait()", "ConsoleIntegrationTestCase::cleanupContainer()()": "class-cake.testsuite.consoleintegrationtestcase.html#cleanupContainer()", "ConsoleIntegrationTestCase::clearPlugins()()": "class-cake.testsuite.consoleintegrationtestcase.html#clearPlugins()", "ConsoleIntegrationTestCase::commandStringToArgs()()": "class-cake.testsuite.consoleintegrationtestcase.html#commandStringToArgs()", "ConsoleIntegrationTestCase::configApplication()()": "class-cake.testsuite.consoleintegrationtestcase.html#configApplication()", "ConsoleIntegrationTestCase::containsEqual()()": "class-cake.testsuite.consoleintegrationtestcase.html#containsEqual()", "ConsoleIntegrationTestCase::containsIdentical()()": "class-cake.testsuite.consoleintegrationtestcase.html#containsIdentical()", "ConsoleIntegrationTestCase::containsOnly()()": "class-cake.testsuite.consoleintegrationtestcase.html#containsOnly()", "ConsoleIntegrationTestCase::containsOnlyInstancesOf()()": "class-cake.testsuite.consoleintegrationtestcase.html#containsOnlyInstancesOf()", "ConsoleIntegrationTestCase::count()()": "class-cake.testsuite.consoleintegrationtestcase.html#count()", "ConsoleIntegrationTestCase::countOf()()": "class-cake.testsuite.consoleintegrationtestcase.html#countOf()", "ConsoleIntegrationTestCase::createApp()()": "class-cake.testsuite.consoleintegrationtestcase.html#createApp()", "ConsoleIntegrationTestCase::createConfiguredMock()()": "class-cake.testsuite.consoleintegrationtestcase.html#createConfiguredMock()", "ConsoleIntegrationTestCase::createMock()()": "class-cake.testsuite.consoleintegrationtestcase.html#createMock()", "ConsoleIntegrationTestCase::createPartialMock()()": "class-cake.testsuite.consoleintegrationtestcase.html#createPartialMock()", "ConsoleIntegrationTestCase::createResult()()": "class-cake.testsuite.consoleintegrationtestcase.html#createResult()", "ConsoleIntegrationTestCase::createStub()()": "class-cake.testsuite.consoleintegrationtestcase.html#createStub()", "ConsoleIntegrationTestCase::createTestProxy()()": "class-cake.testsuite.consoleintegrationtestcase.html#createTestProxy()", "ConsoleIntegrationTestCase::dataName()()": "class-cake.testsuite.consoleintegrationtestcase.html#dataName()", "ConsoleIntegrationTestCase::deprecated()()": "class-cake.testsuite.consoleintegrationtestcase.html#deprecated()", "ConsoleIntegrationTestCase::directoryExists()()": "class-cake.testsuite.consoleintegrationtestcase.html#directoryExists()", "ConsoleIntegrationTestCase::doesNotPerformAssertions()()": "class-cake.testsuite.consoleintegrationtestcase.html#doesNotPerformAssertions()", "ConsoleIntegrationTestCase::doubledTypes()()": "class-cake.testsuite.consoleintegrationtestcase.html#doubledTypes()", "ConsoleIntegrationTestCase::equalTo()()": "class-cake.testsuite.consoleintegrationtestcase.html#equalTo()", "ConsoleIntegrationTestCase::equalToCanonicalizing()()": "class-cake.testsuite.consoleintegrationtestcase.html#equalToCanonicalizing()", "ConsoleIntegrationTestCase::equalToIgnoringCase()()": "class-cake.testsuite.consoleintegrationtestcase.html#equalToIgnoringCase()", "ConsoleIntegrationTestCase::equalToWithDelta()()": "class-cake.testsuite.consoleintegrationtestcase.html#equalToWithDelta()", "ConsoleIntegrationTestCase::exactly()()": "class-cake.testsuite.consoleintegrationtestcase.html#exactly()", "ConsoleIntegrationTestCase::exec()()": "class-cake.testsuite.consoleintegrationtestcase.html#exec()", "ConsoleIntegrationTestCase::expectDeprecation()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectDeprecation()", "ConsoleIntegrationTestCase::expectDeprecationMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectDeprecationMessage()", "ConsoleIntegrationTestCase::expectDeprecationMessageMatches()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectDeprecationMessageMatches()", "ConsoleIntegrationTestCase::expectError()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectError()", "ConsoleIntegrationTestCase::expectErrorMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectErrorMessage()", "ConsoleIntegrationTestCase::expectErrorMessageMatches()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectErrorMessageMatches()", "ConsoleIntegrationTestCase::expectException()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectException()", "ConsoleIntegrationTestCase::expectExceptionCode()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectExceptionCode()", "ConsoleIntegrationTestCase::expectExceptionMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectExceptionMessage()", "ConsoleIntegrationTestCase::expectExceptionMessageMatches()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectExceptionMessageMatches()", "ConsoleIntegrationTestCase::expectExceptionObject()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectExceptionObject()", "ConsoleIntegrationTestCase::expectNotice()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectNotice()", "ConsoleIntegrationTestCase::expectNoticeMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectNoticeMessage()", "ConsoleIntegrationTestCase::expectNoticeMessageMatches()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectNoticeMessageMatches()", "ConsoleIntegrationTestCase::expectNotToPerformAssertions()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectNotToPerformAssertions()", "ConsoleIntegrationTestCase::expectOutputRegex()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectOutputRegex()", "ConsoleIntegrationTestCase::expectOutputString()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectOutputString()", "ConsoleIntegrationTestCase::expectWarning()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectWarning()", "ConsoleIntegrationTestCase::expectWarningMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectWarningMessage()", "ConsoleIntegrationTestCase::expectWarningMessageMatches()()": "class-cake.testsuite.consoleintegrationtestcase.html#expectWarningMessageMatches()", "ConsoleIntegrationTestCase::fail()()": "class-cake.testsuite.consoleintegrationtestcase.html#fail()", "ConsoleIntegrationTestCase::fetchTable()()": "class-cake.testsuite.consoleintegrationtestcase.html#fetchTable()", "ConsoleIntegrationTestCase::fileExists()()": "class-cake.testsuite.consoleintegrationtestcase.html#fileExists()", "ConsoleIntegrationTestCase::getActualOutput()()": "class-cake.testsuite.consoleintegrationtestcase.html#getActualOutput()", "ConsoleIntegrationTestCase::getActualOutputForAssertion()()": "class-cake.testsuite.consoleintegrationtestcase.html#getActualOutputForAssertion()", "ConsoleIntegrationTestCase::getCount()()": "class-cake.testsuite.consoleintegrationtestcase.html#getCount()", "ConsoleIntegrationTestCase::getDataSetAsString()()": "class-cake.testsuite.consoleintegrationtestcase.html#getDataSetAsString()", "ConsoleIntegrationTestCase::getExpectedException()()": "class-cake.testsuite.consoleintegrationtestcase.html#getExpectedException()", "ConsoleIntegrationTestCase::getExpectedExceptionCode()()": "class-cake.testsuite.consoleintegrationtestcase.html#getExpectedExceptionCode()", "ConsoleIntegrationTestCase::getExpectedExceptionMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#getExpectedExceptionMessage()", "ConsoleIntegrationTestCase::getExpectedExceptionMessageRegExp()()": "class-cake.testsuite.consoleintegrationtestcase.html#getExpectedExceptionMessageRegExp()", "ConsoleIntegrationTestCase::getFixtures()()": "class-cake.testsuite.consoleintegrationtestcase.html#getFixtures()", "ConsoleIntegrationTestCase::getFixtureStrategy()()": "class-cake.testsuite.consoleintegrationtestcase.html#getFixtureStrategy()", "ConsoleIntegrationTestCase::getGroups()()": "class-cake.testsuite.consoleintegrationtestcase.html#getGroups()", "ConsoleIntegrationTestCase::getMockBuilder()()": "class-cake.testsuite.consoleintegrationtestcase.html#getMockBuilder()", "ConsoleIntegrationTestCase::getMockClass()()": "class-cake.testsuite.consoleintegrationtestcase.html#getMockClass()", "ConsoleIntegrationTestCase::getMockForAbstractClass()()": "class-cake.testsuite.consoleintegrationtestcase.html#getMockForAbstractClass()", "ConsoleIntegrationTestCase::getMockForModel()()": "class-cake.testsuite.consoleintegrationtestcase.html#getMockForModel()", "ConsoleIntegrationTestCase::getMockForTrait()()": "class-cake.testsuite.consoleintegrationtestcase.html#getMockForTrait()", "ConsoleIntegrationTestCase::getMockFromWsdl()()": "class-cake.testsuite.consoleintegrationtestcase.html#getMockFromWsdl()", "ConsoleIntegrationTestCase::getName()()": "class-cake.testsuite.consoleintegrationtestcase.html#getName()", "ConsoleIntegrationTestCase::getNumAssertions()()": "class-cake.testsuite.consoleintegrationtestcase.html#getNumAssertions()", "ConsoleIntegrationTestCase::getObjectForTrait()()": "class-cake.testsuite.consoleintegrationtestcase.html#getObjectForTrait()", "ConsoleIntegrationTestCase::getProvidedData()()": "class-cake.testsuite.consoleintegrationtestcase.html#getProvidedData()", "ConsoleIntegrationTestCase::getResult()()": "class-cake.testsuite.consoleintegrationtestcase.html#getResult()", "ConsoleIntegrationTestCase::getSize()()": "class-cake.testsuite.consoleintegrationtestcase.html#getSize()", "ConsoleIntegrationTestCase::getStatus()()": "class-cake.testsuite.consoleintegrationtestcase.html#getStatus()", "ConsoleIntegrationTestCase::getStatusMessage()()": "class-cake.testsuite.consoleintegrationtestcase.html#getStatusMessage()", "ConsoleIntegrationTestCase::getTableLocator()()": "class-cake.testsuite.consoleintegrationtestcase.html#getTableLocator()", "ConsoleIntegrationTestCase::getTestResultObject()()": "class-cake.testsuite.consoleintegrationtestcase.html#getTestResultObject()", "ConsoleIntegrationTestCase::greaterThan()()": "class-cake.testsuite.consoleintegrationtestcase.html#greaterThan()", "ConsoleIntegrationTestCase::greaterThanOrEqual()()": "class-cake.testsuite.consoleintegrationtestcase.html#greaterThanOrEqual()", "ConsoleIntegrationTestCase::hasExpectationOnOutput()()": "class-cake.testsuite.consoleintegrationtestcase.html#hasExpectationOnOutput()", "ConsoleIntegrationTestCase::hasFailed()()": "class-cake.testsuite.consoleintegrationtestcase.html#hasFailed()", "ConsoleIntegrationTestCase::hasOutput()()": "class-cake.testsuite.consoleintegrationtestcase.html#hasOutput()", "ConsoleIntegrationTestCase::hasSize()()": "class-cake.testsuite.consoleintegrationtestcase.html#hasSize()", "ConsoleIntegrationTestCase::identicalTo()()": "class-cake.testsuite.consoleintegrationtestcase.html#identicalTo()", "ConsoleIntegrationTestCase::iniSet()()": "class-cake.testsuite.consoleintegrationtestcase.html#iniSet()", "ConsoleIntegrationTestCase::isEmpty()()": "class-cake.testsuite.consoleintegrationtestcase.html#isEmpty()", "ConsoleIntegrationTestCase::isFalse()()": "class-cake.testsuite.consoleintegrationtestcase.html#isFalse()", "ConsoleIntegrationTestCase::isFinite()()": "class-cake.testsuite.consoleintegrationtestcase.html#isFinite()", "ConsoleIntegrationTestCase::isInfinite()()": "class-cake.testsuite.consoleintegrationtestcase.html#isInfinite()", "ConsoleIntegrationTestCase::isInIsolation()()": "class-cake.testsuite.consoleintegrationtestcase.html#isInIsolation()", "ConsoleIntegrationTestCase::isInstanceOf()()": "class-cake.testsuite.consoleintegrationtestcase.html#isInstanceOf()", "ConsoleIntegrationTestCase::isJson()()": "class-cake.testsuite.consoleintegrationtestcase.html#isJson()", "ConsoleIntegrationTestCase::isLarge()()": "class-cake.testsuite.consoleintegrationtestcase.html#isLarge()", "ConsoleIntegrationTestCase::isMedium()()": "class-cake.testsuite.consoleintegrationtestcase.html#isMedium()", "ConsoleIntegrationTestCase::isNan()()": "class-cake.testsuite.consoleintegrationtestcase.html#isNan()", "ConsoleIntegrationTestCase::isNull()()": "class-cake.testsuite.consoleintegrationtestcase.html#isNull()", "ConsoleIntegrationTestCase::isReadable()()": "class-cake.testsuite.consoleintegrationtestcase.html#isReadable()", "ConsoleIntegrationTestCase::isSmall()()": "class-cake.testsuite.consoleintegrationtestcase.html#isSmall()", "ConsoleIntegrationTestCase::isTrue()()": "class-cake.testsuite.consoleintegrationtestcase.html#isTrue()", "ConsoleIntegrationTestCase::isType()()": "class-cake.testsuite.consoleintegrationtestcase.html#isType()", "ConsoleIntegrationTestCase::isWritable()()": "class-cake.testsuite.consoleintegrationtestcase.html#isWritable()", "ConsoleIntegrationTestCase::lessThan()()": "class-cake.testsuite.consoleintegrationtestcase.html#lessThan()", "ConsoleIntegrationTestCase::lessThanOrEqual()()": "class-cake.testsuite.consoleintegrationtestcase.html#lessThanOrEqual()", "ConsoleIntegrationTestCase::loadFixtures()()": "class-cake.testsuite.consoleintegrationtestcase.html#loadFixtures()", "ConsoleIntegrationTestCase::loadPlugins()()": "class-cake.testsuite.consoleintegrationtestcase.html#loadPlugins()", "ConsoleIntegrationTestCase::loadRoutes()()": "class-cake.testsuite.consoleintegrationtestcase.html#loadRoutes()", "ConsoleIntegrationTestCase::logicalAnd()()": "class-cake.testsuite.consoleintegrationtestcase.html#logicalAnd()", "ConsoleIntegrationTestCase::logicalNot()()": "class-cake.testsuite.consoleintegrationtestcase.html#logicalNot()", "ConsoleIntegrationTestCase::logicalOr()()": "class-cake.testsuite.consoleintegrationtestcase.html#logicalOr()", "ConsoleIntegrationTestCase::logicalXor()()": "class-cake.testsuite.consoleintegrationtestcase.html#logicalXor()", "ConsoleIntegrationTestCase::makeRunner()()": "class-cake.testsuite.consoleintegrationtestcase.html#makeRunner()", "ConsoleIntegrationTestCase::markAsRisky()()": "class-cake.testsuite.consoleintegrationtestcase.html#markAsRisky()", "ConsoleIntegrationTestCase::markTestIncomplete()()": "class-cake.testsuite.consoleintegrationtestcase.html#markTestIncomplete()", "ConsoleIntegrationTestCase::markTestSkipped()()": "class-cake.testsuite.consoleintegrationtestcase.html#markTestSkipped()", "ConsoleIntegrationTestCase::matches()()": "class-cake.testsuite.consoleintegrationtestcase.html#matches()", "ConsoleIntegrationTestCase::matchesRegularExpression()()": "class-cake.testsuite.consoleintegrationtestcase.html#matchesRegularExpression()", "ConsoleIntegrationTestCase::mockService()()": "class-cake.testsuite.consoleintegrationtestcase.html#mockService()", "ConsoleIntegrationTestCase::modifyContainer()()": "class-cake.testsuite.consoleintegrationtestcase.html#modifyContainer()", "ConsoleIntegrationTestCase::never()()": "class-cake.testsuite.consoleintegrationtestcase.html#never()", "ConsoleIntegrationTestCase::objectEquals()()": "class-cake.testsuite.consoleintegrationtestcase.html#objectEquals()", "ConsoleIntegrationTestCase::objectHasAttribute()()": "class-cake.testsuite.consoleintegrationtestcase.html#objectHasAttribute()", "ConsoleIntegrationTestCase::once()()": "class-cake.testsuite.consoleintegrationtestcase.html#once()", "ConsoleIntegrationTestCase::onConsecutiveCalls()()": "class-cake.testsuite.consoleintegrationtestcase.html#onConsecutiveCalls()", "ConsoleIntegrationTestCase::onNotSuccessfulTest()()": "class-cake.testsuite.consoleintegrationtestcase.html#onNotSuccessfulTest()", "ConsoleIntegrationTestCase::prophesize()()": "class-cake.testsuite.consoleintegrationtestcase.html#prophesize()", "ConsoleIntegrationTestCase::provides()()": "class-cake.testsuite.consoleintegrationtestcase.html#provides()", "ConsoleIntegrationTestCase::recordDoubledType()()": "class-cake.testsuite.consoleintegrationtestcase.html#recordDoubledType()", "ConsoleIntegrationTestCase::registerComparator()()": "class-cake.testsuite.consoleintegrationtestcase.html#registerComparator()", "ConsoleIntegrationTestCase::registerMockObject()()": "class-cake.testsuite.consoleintegrationtestcase.html#registerMockObject()", "ConsoleIntegrationTestCase::removeMockService()()": "class-cake.testsuite.consoleintegrationtestcase.html#removeMockService()", "ConsoleIntegrationTestCase::removePlugins()()": "class-cake.testsuite.consoleintegrationtestcase.html#removePlugins()", "ConsoleIntegrationTestCase::requires()()": "class-cake.testsuite.consoleintegrationtestcase.html#requires()", "ConsoleIntegrationTestCase::resetCount()()": "class-cake.testsuite.consoleintegrationtestcase.html#resetCount()", "ConsoleIntegrationTestCase::returnArgument()()": "class-cake.testsuite.consoleintegrationtestcase.html#returnArgument()", "ConsoleIntegrationTestCase::returnCallback()()": "class-cake.testsuite.consoleintegrationtestcase.html#returnCallback()", "ConsoleIntegrationTestCase::returnSelf()()": "class-cake.testsuite.consoleintegrationtestcase.html#returnSelf()", "ConsoleIntegrationTestCase::returnValue()()": "class-cake.testsuite.consoleintegrationtestcase.html#returnValue()", "ConsoleIntegrationTestCase::returnValueMap()()": "class-cake.testsuite.consoleintegrationtestcase.html#returnValueMap()", "ConsoleIntegrationTestCase::run()()": "class-cake.testsuite.consoleintegrationtestcase.html#run()", "ConsoleIntegrationTestCase::runBare()()": "class-cake.testsuite.consoleintegrationtestcase.html#runBare()", "ConsoleIntegrationTestCase::runTest()()": "class-cake.testsuite.consoleintegrationtestcase.html#runTest()", "ConsoleIntegrationTestCase::setAppNamespace()()": "class-cake.testsuite.consoleintegrationtestcase.html#setAppNamespace()", "ConsoleIntegrationTestCase::setBackupGlobals()()": "class-cake.testsuite.consoleintegrationtestcase.html#setBackupGlobals()", "ConsoleIntegrationTestCase::setBackupStaticAttributes()()": "class-cake.testsuite.consoleintegrationtestcase.html#setBackupStaticAttributes()", "ConsoleIntegrationTestCase::setBeStrictAboutChangesToGlobalState()()": "class-cake.testsuite.consoleintegrationtestcase.html#setBeStrictAboutChangesToGlobalState()", "ConsoleIntegrationTestCase::setDependencies()()": "class-cake.testsuite.consoleintegrationtestcase.html#setDependencies()", "ConsoleIntegrationTestCase::setDependencyInput()()": "class-cake.testsuite.consoleintegrationtestcase.html#setDependencyInput()", "ConsoleIntegrationTestCase::setGroups()()": "class-cake.testsuite.consoleintegrationtestcase.html#setGroups()", "ConsoleIntegrationTestCase::setInIsolation()()": "class-cake.testsuite.consoleintegrationtestcase.html#setInIsolation()", "ConsoleIntegrationTestCase::setLocale()()": "class-cake.testsuite.consoleintegrationtestcase.html#setLocale()", "ConsoleIntegrationTestCase::setName()()": "class-cake.testsuite.consoleintegrationtestcase.html#setName()", "ConsoleIntegrationTestCase::setOutputCallback()()": "class-cake.testsuite.consoleintegrationtestcase.html#setOutputCallback()", "ConsoleIntegrationTestCase::setPreserveGlobalState()()": "class-cake.testsuite.consoleintegrationtestcase.html#setPreserveGlobalState()", "ConsoleIntegrationTestCase::setRegisterMockObjectsFromTestArgumentsRecursively()()": "class-cake.testsuite.consoleintegrationtestcase.html#setRegisterMockObjectsFromTestArgumentsRecursively()", "ConsoleIntegrationTestCase::setResult()()": "class-cake.testsuite.consoleintegrationtestcase.html#setResult()", "ConsoleIntegrationTestCase::setRunClassInSeparateProcess()()": "class-cake.testsuite.consoleintegrationtestcase.html#setRunClassInSeparateProcess()", "ConsoleIntegrationTestCase::setRunTestInSeparateProcess()()": "class-cake.testsuite.consoleintegrationtestcase.html#setRunTestInSeparateProcess()", "ConsoleIntegrationTestCase::setTableLocator()()": "class-cake.testsuite.consoleintegrationtestcase.html#setTableLocator()", "ConsoleIntegrationTestCase::setTestResultObject()()": "class-cake.testsuite.consoleintegrationtestcase.html#setTestResultObject()", "ConsoleIntegrationTestCase::setUp()()": "class-cake.testsuite.consoleintegrationtestcase.html#setUp()", "ConsoleIntegrationTestCase::setUpBeforeClass()()": "class-cake.testsuite.consoleintegrationtestcase.html#setUpBeforeClass()", "ConsoleIntegrationTestCase::setupFixtures()()": "class-cake.testsuite.consoleintegrationtestcase.html#setupFixtures()", "ConsoleIntegrationTestCase::skipIf()()": "class-cake.testsuite.consoleintegrationtestcase.html#skipIf()", "ConsoleIntegrationTestCase::skipUnless()()": "class-cake.testsuite.consoleintegrationtestcase.html#skipUnless()", "ConsoleIntegrationTestCase::sortId()()": "class-cake.testsuite.consoleintegrationtestcase.html#sortId()", "ConsoleIntegrationTestCase::stringContains()()": "class-cake.testsuite.consoleintegrationtestcase.html#stringContains()", "ConsoleIntegrationTestCase::stringEndsWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#stringEndsWith()", "ConsoleIntegrationTestCase::stringStartsWith()()": "class-cake.testsuite.consoleintegrationtestcase.html#stringStartsWith()", "ConsoleIntegrationTestCase::tearDown()()": "class-cake.testsuite.consoleintegrationtestcase.html#tearDown()", "ConsoleIntegrationTestCase::tearDownAfterClass()()": "class-cake.testsuite.consoleintegrationtestcase.html#tearDownAfterClass()", "ConsoleIntegrationTestCase::teardownFixtures()()": "class-cake.testsuite.consoleintegrationtestcase.html#teardownFixtures()", "ConsoleIntegrationTestCase::throwException()()": "class-cake.testsuite.consoleintegrationtestcase.html#throwException()", "ConsoleIntegrationTestCase::toString()()": "class-cake.testsuite.consoleintegrationtestcase.html#toString()", "ConsoleIntegrationTestCase::useCommandRunner()()": "class-cake.testsuite.consoleintegrationtestcase.html#useCommandRunner()", "ConsoleIntegrationTestCase::usesDataProvider()()": "class-cake.testsuite.consoleintegrationtestcase.html#usesDataProvider()", "ConsoleIntegrationTestCase::withErrorReporting()()": "class-cake.testsuite.consoleintegrationtestcase.html#withErrorReporting()", "ConsoleIntegrationTestTrait (trait)": "trait-cake.console.testsuite.consoleintegrationtesttrait.html", "ConsoleIo (class)": "class-cake.console.consoleio.html", "ConsoleIo::$_err": "class-cake.console.consoleio.html#$_err", "ConsoleIo::$_helpers": "class-cake.console.consoleio.html#$_helpers", "ConsoleIo::$_in": "class-cake.console.consoleio.html#$_in", "ConsoleIo::$_lastWritten": "class-cake.console.consoleio.html#$_lastWritten", "ConsoleIo::$_level": "class-cake.console.consoleio.html#$_level", "ConsoleIo::$_out": "class-cake.console.consoleio.html#$_out", "ConsoleIo::$forceOverwrite": "class-cake.console.consoleio.html#$forceOverwrite", "ConsoleIo::$interactive": "class-cake.console.consoleio.html#$interactive", "ConsoleIo::__construct()()": "class-cake.console.consoleio.html#__construct()", "ConsoleIo::_getInput()()": "class-cake.console.consoleio.html#_getInput()", "ConsoleIo::abort()()": "class-cake.console.consoleio.html#abort()", "ConsoleIo::ask()()": "class-cake.console.consoleio.html#ask()", "ConsoleIo::askChoice()()": "class-cake.console.consoleio.html#askChoice()", "ConsoleIo::comment()()": "class-cake.console.consoleio.html#comment()", "ConsoleIo::createFile()()": "class-cake.console.consoleio.html#createFile()", "ConsoleIo::err()()": "class-cake.console.consoleio.html#err()", "ConsoleIo::error()()": "class-cake.console.consoleio.html#error()", "ConsoleIo::getStyle()()": "class-cake.console.consoleio.html#getStyle()", "ConsoleIo::helper()()": "class-cake.console.consoleio.html#helper()", "ConsoleIo::hr()()": "class-cake.console.consoleio.html#hr()", "ConsoleIo::info()()": "class-cake.console.consoleio.html#info()", "ConsoleIo::level()()": "class-cake.console.consoleio.html#level()", "ConsoleIo::nl()()": "class-cake.console.consoleio.html#nl()", "ConsoleIo::out()()": "class-cake.console.consoleio.html#out()", "ConsoleIo::overwrite()()": "class-cake.console.consoleio.html#overwrite()", "ConsoleIo::quiet()()": "class-cake.console.consoleio.html#quiet()", "ConsoleIo::setInteractive()()": "class-cake.console.consoleio.html#setInteractive()", "ConsoleIo::setLoggers()()": "class-cake.console.consoleio.html#setLoggers()", "ConsoleIo::setOutputAs()()": "class-cake.console.consoleio.html#setOutputAs()", "ConsoleIo::setStyle()()": "class-cake.console.consoleio.html#setStyle()", "ConsoleIo::styles()()": "class-cake.console.consoleio.html#styles()", "ConsoleIo::success()()": "class-cake.console.consoleio.html#success()", "ConsoleIo::verbose()()": "class-cake.console.consoleio.html#verbose()", "ConsoleIo::warning()()": "class-cake.console.consoleio.html#warning()", "ConsoleIo::wrapMessageWithType()()": "class-cake.console.consoleio.html#wrapMessageWithType()", "ConsoleLog (class)": "class-cake.log.engine.consolelog.html", "ConsoleLog::$_config": "class-cake.log.engine.consolelog.html#$_config", "ConsoleLog::$_configInitialized": "class-cake.log.engine.consolelog.html#$_configInitialized", "ConsoleLog::$_defaultConfig": "class-cake.log.engine.consolelog.html#$_defaultConfig", "ConsoleLog::$_output": "class-cake.log.engine.consolelog.html#$_output", "ConsoleLog::$formatter": "class-cake.log.engine.consolelog.html#$formatter", "ConsoleLog::__construct()()": "class-cake.log.engine.consolelog.html#__construct()", "ConsoleLog::_configDelete()()": "class-cake.log.engine.consolelog.html#_configDelete()", "ConsoleLog::_configRead()()": "class-cake.log.engine.consolelog.html#_configRead()", "ConsoleLog::_configWrite()()": "class-cake.log.engine.consolelog.html#_configWrite()", "ConsoleLog::_format()()": "class-cake.log.engine.consolelog.html#_format()", "ConsoleLog::alert()()": "class-cake.log.engine.consolelog.html#alert()", "ConsoleLog::configShallow()()": "class-cake.log.engine.consolelog.html#configShallow()", "ConsoleLog::critical()()": "class-cake.log.engine.consolelog.html#critical()", "ConsoleLog::debug()()": "class-cake.log.engine.consolelog.html#debug()", "ConsoleLog::emergency()()": "class-cake.log.engine.consolelog.html#emergency()", "ConsoleLog::error()()": "class-cake.log.engine.consolelog.html#error()", "ConsoleLog::getConfig()()": "class-cake.log.engine.consolelog.html#getConfig()", "ConsoleLog::getConfigOrFail()()": "class-cake.log.engine.consolelog.html#getConfigOrFail()", "ConsoleLog::info()()": "class-cake.log.engine.consolelog.html#info()", "ConsoleLog::interpolate()()": "class-cake.log.engine.consolelog.html#interpolate()", "ConsoleLog::levels()()": "class-cake.log.engine.consolelog.html#levels()", "ConsoleLog::log()()": "class-cake.log.engine.consolelog.html#log()", "ConsoleLog::notice()()": "class-cake.log.engine.consolelog.html#notice()", "ConsoleLog::scopes()()": "class-cake.log.engine.consolelog.html#scopes()", "ConsoleLog::setConfig()()": "class-cake.log.engine.consolelog.html#setConfig()", "ConsoleLog::warning()()": "class-cake.log.engine.consolelog.html#warning()", "ConsoleOptionParser (class)": "class-cake.console.consoleoptionparser.html", "ConsoleOptionParser::$_args": "class-cake.console.consoleoptionparser.html#$_args", "ConsoleOptionParser::$_command": "class-cake.console.consoleoptionparser.html#$_command", "ConsoleOptionParser::$_description": "class-cake.console.consoleoptionparser.html#$_description", "ConsoleOptionParser::$_epilog": "class-cake.console.consoleoptionparser.html#$_epilog", "ConsoleOptionParser::$_options": "class-cake.console.consoleoptionparser.html#$_options", "ConsoleOptionParser::$_shortOptions": "class-cake.console.consoleoptionparser.html#$_shortOptions", "ConsoleOptionParser::$_subcommands": "class-cake.console.consoleoptionparser.html#$_subcommands", "ConsoleOptionParser::$_subcommandSort": "class-cake.console.consoleoptionparser.html#$_subcommandSort", "ConsoleOptionParser::$_tokens": "class-cake.console.consoleoptionparser.html#$_tokens", "ConsoleOptionParser::$rootName": "class-cake.console.consoleoptionparser.html#$rootName", "ConsoleOptionParser::__construct()()": "class-cake.console.consoleoptionparser.html#__construct()", "ConsoleOptionParser::_nextToken()()": "class-cake.console.consoleoptionparser.html#_nextToken()", "ConsoleOptionParser::_optionExists()()": "class-cake.console.consoleoptionparser.html#_optionExists()", "ConsoleOptionParser::_parseArg()()": "class-cake.console.consoleoptionparser.html#_parseArg()", "ConsoleOptionParser::_parseLongOption()()": "class-cake.console.consoleoptionparser.html#_parseLongOption()", "ConsoleOptionParser::_parseOption()()": "class-cake.console.consoleoptionparser.html#_parseOption()", "ConsoleOptionParser::_parseShortOption()()": "class-cake.console.consoleoptionparser.html#_parseShortOption()", "ConsoleOptionParser::addArgument()()": "class-cake.console.consoleoptionparser.html#addArgument()", "ConsoleOptionParser::addArguments()()": "class-cake.console.consoleoptionparser.html#addArguments()", "ConsoleOptionParser::addOption()()": "class-cake.console.consoleoptionparser.html#addOption()", "ConsoleOptionParser::addOptions()()": "class-cake.console.consoleoptionparser.html#addOptions()", "ConsoleOptionParser::addSubcommand()()": "class-cake.console.consoleoptionparser.html#addSubcommand()", "ConsoleOptionParser::addSubcommands()()": "class-cake.console.consoleoptionparser.html#addSubcommands()", "ConsoleOptionParser::argumentNames()()": "class-cake.console.consoleoptionparser.html#argumentNames()", "ConsoleOptionParser::arguments()()": "class-cake.console.consoleoptionparser.html#arguments()", "ConsoleOptionParser::buildFromArray()()": "class-cake.console.consoleoptionparser.html#buildFromArray()", "ConsoleOptionParser::create()()": "class-cake.console.consoleoptionparser.html#create()", "ConsoleOptionParser::enableSubcommandSort()()": "class-cake.console.consoleoptionparser.html#enableSubcommandSort()", "ConsoleOptionParser::getCommand()()": "class-cake.console.consoleoptionparser.html#getCommand()", "ConsoleOptionParser::getDescription()()": "class-cake.console.consoleoptionparser.html#getDescription()", "ConsoleOptionParser::getEpilog()()": "class-cake.console.consoleoptionparser.html#getEpilog()", "ConsoleOptionParser::help()()": "class-cake.console.consoleoptionparser.html#help()", "ConsoleOptionParser::isSubcommandSortEnabled()()": "class-cake.console.consoleoptionparser.html#isSubcommandSortEnabled()", "ConsoleOptionParser::merge()()": "class-cake.console.consoleoptionparser.html#merge()", "ConsoleOptionParser::options()()": "class-cake.console.consoleoptionparser.html#options()", "ConsoleOptionParser::parse()()": "class-cake.console.consoleoptionparser.html#parse()", "ConsoleOptionParser::removeOption()()": "class-cake.console.consoleoptionparser.html#removeOption()", "ConsoleOptionParser::removeSubcommand()()": "class-cake.console.consoleoptionparser.html#removeSubcommand()", "ConsoleOptionParser::setCommand()()": "class-cake.console.consoleoptionparser.html#setCommand()", "ConsoleOptionParser::setDescription()()": "class-cake.console.consoleoptionparser.html#setDescription()", "ConsoleOptionParser::setEpilog()()": "class-cake.console.consoleoptionparser.html#setEpilog()", "ConsoleOptionParser::setRootName()()": "class-cake.console.consoleoptionparser.html#setRootName()", "ConsoleOptionParser::subcommands()()": "class-cake.console.consoleoptionparser.html#subcommands()", "ConsoleOptionParser::toArray()()": "class-cake.console.consoleoptionparser.html#toArray()", "ConsoleOutput (class)": "class-cake.console.consoleoutput.html", "ConsoleOutput::$_backgroundColors": "class-cake.console.consoleoutput.html#$_backgroundColors", "ConsoleOutput::$_foregroundColors": "class-cake.console.consoleoutput.html#$_foregroundColors", "ConsoleOutput::$_options": "class-cake.console.consoleoutput.html#$_options", "ConsoleOutput::$_output": "class-cake.console.consoleoutput.html#$_output", "ConsoleOutput::$_outputAs": "class-cake.console.consoleoutput.html#$_outputAs", "ConsoleOutput::$_styles": "class-cake.console.consoleoutput.html#$_styles", "ConsoleOutput::__construct()()": "class-cake.console.consoleoutput.html#__construct()", "ConsoleOutput::__destruct()()": "class-cake.console.consoleoutput.html#__destruct()", "ConsoleOutput::_replaceTags()()": "class-cake.console.consoleoutput.html#_replaceTags()", "ConsoleOutput::_write()()": "class-cake.console.consoleoutput.html#_write()", "ConsoleOutput::getOutputAs()()": "class-cake.console.consoleoutput.html#getOutputAs()", "ConsoleOutput::getStyle()()": "class-cake.console.consoleoutput.html#getStyle()", "ConsoleOutput::setOutputAs()()": "class-cake.console.consoleoutput.html#setOutputAs()", "ConsoleOutput::setStyle()()": "class-cake.console.consoleoutput.html#setStyle()", "ConsoleOutput::styles()()": "class-cake.console.consoleoutput.html#styles()", "ConsoleOutput::styleText()()": "class-cake.console.consoleoutput.html#styleText()", "ConsoleOutput::write()()": "class-cake.console.consoleoutput.html#write()", "ConstraintsInterface (interface)": "interface-cake.database.constraintsinterface.html", "Container (class)": "class-cake.core.container.html", "Container::$defaultToShared": "class-cake.core.container.html#$defaultToShared", "Container::$definitions": "class-cake.core.container.html#$definitions", "Container::$delegates": "class-cake.core.container.html#$delegates", "Container::$inflectors": "class-cake.core.container.html#$inflectors", "Container::$providers": "class-cake.core.container.html#$providers", "Container::__construct()()": "class-cake.core.container.html#__construct()", "Container::add()()": "class-cake.core.container.html#add()", "Container::addServiceProvider()()": "class-cake.core.container.html#addServiceProvider()", "Container::addShared()()": "class-cake.core.container.html#addShared()", "Container::defaultToShared()()": "class-cake.core.container.html#defaultToShared()", "Container::delegate()()": "class-cake.core.container.html#delegate()", "Container::extend()()": "class-cake.core.container.html#extend()", "Container::get()()": "class-cake.core.container.html#get()", "Container::getNew()()": "class-cake.core.container.html#getNew()", "Container::has()()": "class-cake.core.container.html#has()", "Container::inflector()()": "class-cake.core.container.html#inflector()", "Container::resolve()()": "class-cake.core.container.html#resolve()", "ContainerApplicationInterface (interface)": "interface-cake.core.containerapplicationinterface.html", "ContainerInterface (interface)": "interface-cake.core.containerinterface.html", "ContainerStubTrait (trait)": "trait-cake.core.testsuite.containerstubtrait.html", "ContentsBase (class)": "class-cake.console.testsuite.constraint.contentsbase.html", "ContentsBase::$contents": "class-cake.console.testsuite.constraint.contentsbase.html#$contents", "ContentsBase::$output": "class-cake.console.testsuite.constraint.contentsbase.html#$output", "ContentsBase::__construct()()": "class-cake.console.testsuite.constraint.contentsbase.html#__construct()", "ContentsBase::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.contentsbase.html#additionalFailureDescription()", "ContentsBase::count()()": "class-cake.console.testsuite.constraint.contentsbase.html#count()", "ContentsBase::evaluate()()": "class-cake.console.testsuite.constraint.contentsbase.html#evaluate()", "ContentsBase::exporter()()": "class-cake.console.testsuite.constraint.contentsbase.html#exporter()", "ContentsBase::fail()()": "class-cake.console.testsuite.constraint.contentsbase.html#fail()", "ContentsBase::failureDescription()()": "class-cake.console.testsuite.constraint.contentsbase.html#failureDescription()", "ContentsBase::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.contentsbase.html#failureDescriptionInContext()", "ContentsBase::matches()()": "class-cake.console.testsuite.constraint.contentsbase.html#matches()", "ContentsBase::reduce()()": "class-cake.console.testsuite.constraint.contentsbase.html#reduce()", "ContentsBase::toString()()": "class-cake.console.testsuite.constraint.contentsbase.html#toString()", "ContentsBase::toStringInContext()()": "class-cake.console.testsuite.constraint.contentsbase.html#toStringInContext()", "ContentsContain (class)": "class-cake.console.testsuite.constraint.contentscontain.html", "ContentsContain::$contents": "class-cake.console.testsuite.constraint.contentscontain.html#$contents", "ContentsContain::$output": "class-cake.console.testsuite.constraint.contentscontain.html#$output", "ContentsContain::__construct()()": "class-cake.console.testsuite.constraint.contentscontain.html#__construct()", "ContentsContain::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.contentscontain.html#additionalFailureDescription()", "ContentsContain::count()()": "class-cake.console.testsuite.constraint.contentscontain.html#count()", "ContentsContain::evaluate()()": "class-cake.console.testsuite.constraint.contentscontain.html#evaluate()", "ContentsContain::exporter()()": "class-cake.console.testsuite.constraint.contentscontain.html#exporter()", "ContentsContain::fail()()": "class-cake.console.testsuite.constraint.contentscontain.html#fail()", "ContentsContain::failureDescription()()": "class-cake.console.testsuite.constraint.contentscontain.html#failureDescription()", "ContentsContain::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.contentscontain.html#failureDescriptionInContext()", "ContentsContain::matches()()": "class-cake.console.testsuite.constraint.contentscontain.html#matches()", "ContentsContain::reduce()()": "class-cake.console.testsuite.constraint.contentscontain.html#reduce()", "ContentsContain::toString()()": "class-cake.console.testsuite.constraint.contentscontain.html#toString()", "ContentsContain::toStringInContext()()": "class-cake.console.testsuite.constraint.contentscontain.html#toStringInContext()", "ContentsContainRow (class)": "class-cake.console.testsuite.constraint.contentscontainrow.html", "ContentsContainRow::$contents": "class-cake.console.testsuite.constraint.contentscontainrow.html#$contents", "ContentsContainRow::$output": "class-cake.console.testsuite.constraint.contentscontainrow.html#$output", "ContentsContainRow::__construct()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#__construct()", "ContentsContainRow::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#additionalFailureDescription()", "ContentsContainRow::count()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#count()", "ContentsContainRow::evaluate()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#evaluate()", "ContentsContainRow::exporter()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#exporter()", "ContentsContainRow::fail()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#fail()", "ContentsContainRow::failureDescription()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#failureDescription()", "ContentsContainRow::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#failureDescriptionInContext()", "ContentsContainRow::matches()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#matches()", "ContentsContainRow::reduce()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#reduce()", "ContentsContainRow::toString()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#toString()", "ContentsContainRow::toStringInContext()()": "class-cake.console.testsuite.constraint.contentscontainrow.html#toStringInContext()", "ContentsEmpty (class)": "class-cake.console.testsuite.constraint.contentsempty.html", "ContentsEmpty::$contents": "class-cake.console.testsuite.constraint.contentsempty.html#$contents", "ContentsEmpty::$output": "class-cake.console.testsuite.constraint.contentsempty.html#$output", "ContentsEmpty::__construct()()": "class-cake.console.testsuite.constraint.contentsempty.html#__construct()", "ContentsEmpty::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.contentsempty.html#additionalFailureDescription()", "ContentsEmpty::count()()": "class-cake.console.testsuite.constraint.contentsempty.html#count()", "ContentsEmpty::evaluate()()": "class-cake.console.testsuite.constraint.contentsempty.html#evaluate()", "ContentsEmpty::exporter()()": "class-cake.console.testsuite.constraint.contentsempty.html#exporter()", "ContentsEmpty::fail()()": "class-cake.console.testsuite.constraint.contentsempty.html#fail()", "ContentsEmpty::failureDescription()()": "class-cake.console.testsuite.constraint.contentsempty.html#failureDescription()", "ContentsEmpty::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.contentsempty.html#failureDescriptionInContext()", "ContentsEmpty::matches()()": "class-cake.console.testsuite.constraint.contentsempty.html#matches()", "ContentsEmpty::reduce()()": "class-cake.console.testsuite.constraint.contentsempty.html#reduce()", "ContentsEmpty::toString()()": "class-cake.console.testsuite.constraint.contentsempty.html#toString()", "ContentsEmpty::toStringInContext()()": "class-cake.console.testsuite.constraint.contentsempty.html#toStringInContext()", "ContentsNotContain (class)": "class-cake.console.testsuite.constraint.contentsnotcontain.html", "ContentsNotContain::$contents": "class-cake.console.testsuite.constraint.contentsnotcontain.html#$contents", "ContentsNotContain::$output": "class-cake.console.testsuite.constraint.contentsnotcontain.html#$output", "ContentsNotContain::__construct()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#__construct()", "ContentsNotContain::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#additionalFailureDescription()", "ContentsNotContain::count()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#count()", "ContentsNotContain::evaluate()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#evaluate()", "ContentsNotContain::exporter()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#exporter()", "ContentsNotContain::fail()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#fail()", "ContentsNotContain::failureDescription()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#failureDescription()", "ContentsNotContain::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#failureDescriptionInContext()", "ContentsNotContain::matches()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#matches()", "ContentsNotContain::reduce()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#reduce()", "ContentsNotContain::toString()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#toString()", "ContentsNotContain::toStringInContext()()": "class-cake.console.testsuite.constraint.contentsnotcontain.html#toStringInContext()", "ContentsRegExp (class)": "class-cake.console.testsuite.constraint.contentsregexp.html", "ContentsRegExp::$contents": "class-cake.console.testsuite.constraint.contentsregexp.html#$contents", "ContentsRegExp::$output": "class-cake.console.testsuite.constraint.contentsregexp.html#$output", "ContentsRegExp::__construct()()": "class-cake.console.testsuite.constraint.contentsregexp.html#__construct()", "ContentsRegExp::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.contentsregexp.html#additionalFailureDescription()", "ContentsRegExp::count()()": "class-cake.console.testsuite.constraint.contentsregexp.html#count()", "ContentsRegExp::evaluate()()": "class-cake.console.testsuite.constraint.contentsregexp.html#evaluate()", "ContentsRegExp::exporter()()": "class-cake.console.testsuite.constraint.contentsregexp.html#exporter()", "ContentsRegExp::fail()()": "class-cake.console.testsuite.constraint.contentsregexp.html#fail()", "ContentsRegExp::failureDescription()()": "class-cake.console.testsuite.constraint.contentsregexp.html#failureDescription()", "ContentsRegExp::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.contentsregexp.html#failureDescriptionInContext()", "ContentsRegExp::matches()()": "class-cake.console.testsuite.constraint.contentsregexp.html#matches()", "ContentsRegExp::reduce()()": "class-cake.console.testsuite.constraint.contentsregexp.html#reduce()", "ContentsRegExp::toString()()": "class-cake.console.testsuite.constraint.contentsregexp.html#toString()", "ContentsRegExp::toStringInContext()()": "class-cake.console.testsuite.constraint.contentsregexp.html#toStringInContext()", "ContentType (class)": "class-cake.testsuite.constraint.response.contenttype.html", "ContentType::$response": "class-cake.testsuite.constraint.response.contenttype.html#$response", "ContentType::__construct()()": "class-cake.testsuite.constraint.response.contenttype.html#__construct()", "ContentType::_getBodyAsString()()": "class-cake.testsuite.constraint.response.contenttype.html#_getBodyAsString()", "ContentType::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.contenttype.html#additionalFailureDescription()", "ContentType::count()()": "class-cake.testsuite.constraint.response.contenttype.html#count()", "ContentType::evaluate()()": "class-cake.testsuite.constraint.response.contenttype.html#evaluate()", "ContentType::exporter()()": "class-cake.testsuite.constraint.response.contenttype.html#exporter()", "ContentType::fail()()": "class-cake.testsuite.constraint.response.contenttype.html#fail()", "ContentType::failureDescription()()": "class-cake.testsuite.constraint.response.contenttype.html#failureDescription()", "ContentType::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.contenttype.html#failureDescriptionInContext()", "ContentType::matches()()": "class-cake.testsuite.constraint.response.contenttype.html#matches()", "ContentType::reduce()()": "class-cake.testsuite.constraint.response.contenttype.html#reduce()", "ContentType::toString()()": "class-cake.testsuite.constraint.response.contenttype.html#toString()", "ContentType::toStringInContext()()": "class-cake.testsuite.constraint.response.contenttype.html#toStringInContext()", "ContentTypeNegotiation (class)": "class-cake.http.contenttypenegotiation.html", "ContentTypeNegotiation::acceptedLanguages()()": "class-cake.http.contenttypenegotiation.html#acceptedLanguages()", "ContentTypeNegotiation::acceptLanguage()()": "class-cake.http.contenttypenegotiation.html#acceptLanguage()", "ContentTypeNegotiation::parseAccept()()": "class-cake.http.contenttypenegotiation.html#parseAccept()", "ContentTypeNegotiation::parseAcceptLanguage()()": "class-cake.http.contenttypenegotiation.html#parseAcceptLanguage()", "ContentTypeNegotiation::parseQualifiers()()": "class-cake.http.contenttypenegotiation.html#parseQualifiers()", "ContentTypeNegotiation::preferredType()()": "class-cake.http.contenttypenegotiation.html#preferredType()", "ContextFactory (class)": "class-cake.view.form.contextfactory.html", "ContextFactory::$providers": "class-cake.view.form.contextfactory.html#$providers", "ContextFactory::__construct()()": "class-cake.view.form.contextfactory.html#__construct()", "ContextFactory::addProvider()()": "class-cake.view.form.contextfactory.html#addProvider()", "ContextFactory::createWithDefaults()()": "class-cake.view.form.contextfactory.html#createWithDefaults()", "ContextFactory::get()()": "class-cake.view.form.contextfactory.html#get()", "ContextInterface (interface)": "interface-cake.view.form.contextinterface.html", "Controller (class)": "class-cake.controller.controller.html", "Controller (namespace)": "namespace-cake.controller.html", "Controller::$_components": "class-cake.controller.controller.html#$_components", "Controller::$_eventClass": "class-cake.controller.controller.html#$_eventClass", "Controller::$_eventManager": "class-cake.controller.controller.html#$_eventManager", "Controller::$_modelFactories": "class-cake.controller.controller.html#$_modelFactories", "Controller::$_modelType": "class-cake.controller.controller.html#$_modelType", "Controller::$_tableLocator": "class-cake.controller.controller.html#$_tableLocator", "Controller::$_viewBuilder": "class-cake.controller.controller.html#$_viewBuilder", "Controller::$Auth": "class-cake.controller.controller.html#$Auth", "Controller::$autoRender": "class-cake.controller.controller.html#$autoRender", "Controller::$defaultTable": "class-cake.controller.controller.html#$defaultTable", "Controller::$Flash": "class-cake.controller.controller.html#$Flash", "Controller::$FormProtection": "class-cake.controller.controller.html#$FormProtection", "Controller::$middlewares": "class-cake.controller.controller.html#$middlewares", "Controller::$modelClass": "class-cake.controller.controller.html#$modelClass", "Controller::$name": "class-cake.controller.controller.html#$name", "Controller::$paginate": "class-cake.controller.controller.html#$paginate", "Controller::$Paginator": "class-cake.controller.controller.html#$Paginator", "Controller::$plugin": "class-cake.controller.controller.html#$plugin", "Controller::$request": "class-cake.controller.controller.html#$request", "Controller::$RequestHandler": "class-cake.controller.controller.html#$RequestHandler", "Controller::$response": "class-cake.controller.controller.html#$response", "Controller::$Security": "class-cake.controller.controller.html#$Security", "Controller::__construct()()": "class-cake.controller.controller.html#__construct()", "Controller::__get()()": "class-cake.controller.controller.html#__get()", "Controller::__set()()": "class-cake.controller.controller.html#__set()", "Controller::_setModelClass()()": "class-cake.controller.controller.html#_setModelClass()", "Controller::_templatePath()()": "class-cake.controller.controller.html#_templatePath()", "Controller::afterFilter()()": "class-cake.controller.controller.html#afterFilter()", "Controller::beforeFilter()()": "class-cake.controller.controller.html#beforeFilter()", "Controller::beforeRedirect()()": "class-cake.controller.controller.html#beforeRedirect()", "Controller::beforeRender()()": "class-cake.controller.controller.html#beforeRender()", "Controller::chooseViewClass()()": "class-cake.controller.controller.html#chooseViewClass()", "Controller::components()()": "class-cake.controller.controller.html#components()", "Controller::createView()()": "class-cake.controller.controller.html#createView()", "Controller::disableAutoRender()()": "class-cake.controller.controller.html#disableAutoRender()", "Controller::dispatchEvent()()": "class-cake.controller.controller.html#dispatchEvent()", "Controller::enableAutoRender()()": "class-cake.controller.controller.html#enableAutoRender()", "Controller::fetchTable()()": "class-cake.controller.controller.html#fetchTable()", "Controller::getAction()()": "class-cake.controller.controller.html#getAction()", "Controller::getEventManager()()": "class-cake.controller.controller.html#getEventManager()", "Controller::getMiddleware()()": "class-cake.controller.controller.html#getMiddleware()", "Controller::getModelType()()": "class-cake.controller.controller.html#getModelType()", "Controller::getName()()": "class-cake.controller.controller.html#getName()", "Controller::getPlugin()()": "class-cake.controller.controller.html#getPlugin()", "Controller::getRequest()()": "class-cake.controller.controller.html#getRequest()", "Controller::getResponse()()": "class-cake.controller.controller.html#getResponse()", "Controller::getTableLocator()()": "class-cake.controller.controller.html#getTableLocator()", "Controller::implementedEvents()()": "class-cake.controller.controller.html#implementedEvents()", "Controller::initialize()()": "class-cake.controller.controller.html#initialize()", "Controller::invokeAction()()": "class-cake.controller.controller.html#invokeAction()", "Controller::isAction()()": "class-cake.controller.controller.html#isAction()", "Controller::isAutoRenderEnabled()()": "class-cake.controller.controller.html#isAutoRenderEnabled()", "Controller::loadComponent()()": "class-cake.controller.controller.html#loadComponent()", "Controller::loadModel()()": "class-cake.controller.controller.html#loadModel()", "Controller::log()()": "class-cake.controller.controller.html#log()", "Controller::middleware()()": "class-cake.controller.controller.html#middleware()", "Controller::modelFactory()()": "class-cake.controller.controller.html#modelFactory()", "Controller::paginate()()": "class-cake.controller.controller.html#paginate()", "Controller::redirect()()": "class-cake.controller.controller.html#redirect()", "Controller::referer()()": "class-cake.controller.controller.html#referer()", "Controller::render()()": "class-cake.controller.controller.html#render()", "Controller::set()()": "class-cake.controller.controller.html#set()", "Controller::setAction()()": "class-cake.controller.controller.html#setAction()", "Controller::setEventManager()()": "class-cake.controller.controller.html#setEventManager()", "Controller::setModelType()()": "class-cake.controller.controller.html#setModelType()", "Controller::setName()()": "class-cake.controller.controller.html#setName()", "Controller::setPlugin()()": "class-cake.controller.controller.html#setPlugin()", "Controller::setRequest()()": "class-cake.controller.controller.html#setRequest()", "Controller::setResponse()()": "class-cake.controller.controller.html#setResponse()", "Controller::setTableLocator()()": "class-cake.controller.controller.html#setTableLocator()", "Controller::shutdownProcess()()": "class-cake.controller.controller.html#shutdownProcess()", "Controller::startupProcess()()": "class-cake.controller.controller.html#startupProcess()", "Controller::viewBuilder()()": "class-cake.controller.controller.html#viewBuilder()", "Controller::viewClasses()()": "class-cake.controller.controller.html#viewClasses()", "Controller\\Component (namespace)": "namespace-cake.controller.component.html", "Controller\\Exception (namespace)": "namespace-cake.controller.exception.html", "ControllerAuthorize (class)": "class-cake.auth.controllerauthorize.html", "ControllerAuthorize::$_config": "class-cake.auth.controllerauthorize.html#$_config", "ControllerAuthorize::$_configInitialized": "class-cake.auth.controllerauthorize.html#$_configInitialized", "ControllerAuthorize::$_Controller": "class-cake.auth.controllerauthorize.html#$_Controller", "ControllerAuthorize::$_defaultConfig": "class-cake.auth.controllerauthorize.html#$_defaultConfig", "ControllerAuthorize::$_registry": "class-cake.auth.controllerauthorize.html#$_registry", "ControllerAuthorize::__construct()()": "class-cake.auth.controllerauthorize.html#__construct()", "ControllerAuthorize::_configDelete()()": "class-cake.auth.controllerauthorize.html#_configDelete()", "ControllerAuthorize::_configRead()()": "class-cake.auth.controllerauthorize.html#_configRead()", "ControllerAuthorize::_configWrite()()": "class-cake.auth.controllerauthorize.html#_configWrite()", "ControllerAuthorize::authorize()()": "class-cake.auth.controllerauthorize.html#authorize()", "ControllerAuthorize::configShallow()()": "class-cake.auth.controllerauthorize.html#configShallow()", "ControllerAuthorize::controller()()": "class-cake.auth.controllerauthorize.html#controller()", "ControllerAuthorize::getConfig()()": "class-cake.auth.controllerauthorize.html#getConfig()", "ControllerAuthorize::getConfigOrFail()()": "class-cake.auth.controllerauthorize.html#getConfigOrFail()", "ControllerAuthorize::setConfig()()": "class-cake.auth.controllerauthorize.html#setConfig()", "ControllerFactory (class)": "class-cake.controller.controllerfactory.html", "ControllerFactory::$container": "class-cake.controller.controllerfactory.html#$container", "ControllerFactory::$controller": "class-cake.controller.controllerfactory.html#$controller", "ControllerFactory::__construct()()": "class-cake.controller.controllerfactory.html#__construct()", "ControllerFactory::coerceStringToType()()": "class-cake.controller.controllerfactory.html#coerceStringToType()", "ControllerFactory::create()()": "class-cake.controller.controllerfactory.html#create()", "ControllerFactory::getActionArgs()()": "class-cake.controller.controllerfactory.html#getActionArgs()", "ControllerFactory::getControllerClass()()": "class-cake.controller.controllerfactory.html#getControllerClass()", "ControllerFactory::handle()()": "class-cake.controller.controllerfactory.html#handle()", "ControllerFactory::invoke()()": "class-cake.controller.controllerfactory.html#invoke()", "ControllerFactory::missingController()()": "class-cake.controller.controllerfactory.html#missingController()", "ControllerFactoryInterface (interface)": "interface-cake.http.controllerfactoryinterface.html", "ConventionsTrait (trait)": "trait-cake.core.conventionstrait.html", "Cookie (class)": "class-cake.http.cookie.cookie.html", "Cookie::$defaults": "class-cake.http.cookie.cookie.html#$defaults", "Cookie::$domain": "class-cake.http.cookie.cookie.html#$domain", "Cookie::$expiresAt": "class-cake.http.cookie.cookie.html#$expiresAt", "Cookie::$httpOnly": "class-cake.http.cookie.cookie.html#$httpOnly", "Cookie::$isExpanded": "class-cake.http.cookie.cookie.html#$isExpanded", "Cookie::$name": "class-cake.http.cookie.cookie.html#$name", "Cookie::$path": "class-cake.http.cookie.cookie.html#$path", "Cookie::$sameSite": "class-cake.http.cookie.cookie.html#$sameSite", "Cookie::$secure": "class-cake.http.cookie.cookie.html#$secure", "Cookie::$value": "class-cake.http.cookie.cookie.html#$value", "Cookie::__construct()()": "class-cake.http.cookie.cookie.html#__construct()", "Cookie::_expand()()": "class-cake.http.cookie.cookie.html#_expand()", "Cookie::_flatten()()": "class-cake.http.cookie.cookie.html#_flatten()", "Cookie::_setValue()()": "class-cake.http.cookie.cookie.html#_setValue()", "Cookie::check()()": "class-cake.http.cookie.cookie.html#check()", "Cookie::create()()": "class-cake.http.cookie.cookie.html#create()", "Cookie::createFromHeaderString()()": "class-cake.http.cookie.cookie.html#createFromHeaderString()", "Cookie::dateTimeInstance()()": "class-cake.http.cookie.cookie.html#dateTimeInstance()", "Cookie::getDomain()()": "class-cake.http.cookie.cookie.html#getDomain()", "Cookie::getExpiresTimestamp()()": "class-cake.http.cookie.cookie.html#getExpiresTimestamp()", "Cookie::getExpiry()()": "class-cake.http.cookie.cookie.html#getExpiry()", "Cookie::getFormattedExpires()()": "class-cake.http.cookie.cookie.html#getFormattedExpires()", "Cookie::getId()()": "class-cake.http.cookie.cookie.html#getId()", "Cookie::getName()()": "class-cake.http.cookie.cookie.html#getName()", "Cookie::getOptions()()": "class-cake.http.cookie.cookie.html#getOptions()", "Cookie::getPath()()": "class-cake.http.cookie.cookie.html#getPath()", "Cookie::getSameSite()()": "class-cake.http.cookie.cookie.html#getSameSite()", "Cookie::getScalarValue()()": "class-cake.http.cookie.cookie.html#getScalarValue()", "Cookie::getStringValue()()": "class-cake.http.cookie.cookie.html#getStringValue()", "Cookie::getValue()()": "class-cake.http.cookie.cookie.html#getValue()", "Cookie::isExpanded()()": "class-cake.http.cookie.cookie.html#isExpanded()", "Cookie::isExpired()()": "class-cake.http.cookie.cookie.html#isExpired()", "Cookie::isHttpOnly()()": "class-cake.http.cookie.cookie.html#isHttpOnly()", "Cookie::isSecure()()": "class-cake.http.cookie.cookie.html#isSecure()", "Cookie::read()()": "class-cake.http.cookie.cookie.html#read()", "Cookie::setDefaults()()": "class-cake.http.cookie.cookie.html#setDefaults()", "Cookie::toArray()()": "class-cake.http.cookie.cookie.html#toArray()", "Cookie::toHeaderValue()()": "class-cake.http.cookie.cookie.html#toHeaderValue()", "Cookie::validateName()()": "class-cake.http.cookie.cookie.html#validateName()", "Cookie::validateSameSiteValue()()": "class-cake.http.cookie.cookie.html#validateSameSiteValue()", "Cookie::withAddedValue()()": "class-cake.http.cookie.cookie.html#withAddedValue()", "Cookie::withDomain()()": "class-cake.http.cookie.cookie.html#withDomain()", "Cookie::withExpired()()": "class-cake.http.cookie.cookie.html#withExpired()", "Cookie::withExpiry()()": "class-cake.http.cookie.cookie.html#withExpiry()", "Cookie::withHttpOnly()()": "class-cake.http.cookie.cookie.html#withHttpOnly()", "Cookie::withName()()": "class-cake.http.cookie.cookie.html#withName()", "Cookie::withNeverExpire()()": "class-cake.http.cookie.cookie.html#withNeverExpire()", "Cookie::withoutAddedValue()()": "class-cake.http.cookie.cookie.html#withoutAddedValue()", "Cookie::withPath()()": "class-cake.http.cookie.cookie.html#withPath()", "Cookie::withSameSite()()": "class-cake.http.cookie.cookie.html#withSameSite()", "Cookie::withSecure()()": "class-cake.http.cookie.cookie.html#withSecure()", "Cookie::withValue()()": "class-cake.http.cookie.cookie.html#withValue()", "CookieCollection (class)": "class-cake.http.cookie.cookiecollection.html", "CookieCollection::$cookies": "class-cake.http.cookie.cookiecollection.html#$cookies", "CookieCollection::__construct()()": "class-cake.http.cookie.cookiecollection.html#__construct()", "CookieCollection::add()()": "class-cake.http.cookie.cookiecollection.html#add()", "CookieCollection::addFromResponse()()": "class-cake.http.cookie.cookiecollection.html#addFromResponse()", "CookieCollection::addToRequest()()": "class-cake.http.cookie.cookiecollection.html#addToRequest()", "CookieCollection::checkCookies()()": "class-cake.http.cookie.cookiecollection.html#checkCookies()", "CookieCollection::count()()": "class-cake.http.cookie.cookiecollection.html#count()", "CookieCollection::createFromHeader()()": "class-cake.http.cookie.cookiecollection.html#createFromHeader()", "CookieCollection::createFromServerRequest()()": "class-cake.http.cookie.cookiecollection.html#createFromServerRequest()", "CookieCollection::findMatchingCookies()()": "class-cake.http.cookie.cookiecollection.html#findMatchingCookies()", "CookieCollection::get()()": "class-cake.http.cookie.cookiecollection.html#get()", "CookieCollection::getIterator()()": "class-cake.http.cookie.cookiecollection.html#getIterator()", "CookieCollection::has()()": "class-cake.http.cookie.cookiecollection.html#has()", "CookieCollection::remove()()": "class-cake.http.cookie.cookiecollection.html#remove()", "CookieCollection::removeExpiredCookies()()": "class-cake.http.cookie.cookiecollection.html#removeExpiredCookies()", "CookieCryptTrait (trait)": "trait-cake.utility.cookiecrypttrait.html", "CookieEncryptedEquals (class)": "class-cake.testsuite.constraint.response.cookieencryptedequals.html", "CookieEncryptedEquals::$_validCiphers": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#$_validCiphers", "CookieEncryptedEquals::$cookieName": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#$cookieName", "CookieEncryptedEquals::$key": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#$key", "CookieEncryptedEquals::$mode": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#$mode", "CookieEncryptedEquals::$response": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#$response", "CookieEncryptedEquals::__construct()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#__construct()", "CookieEncryptedEquals::_checkCipher()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_checkCipher()", "CookieEncryptedEquals::_decode()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_decode()", "CookieEncryptedEquals::_decrypt()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_decrypt()", "CookieEncryptedEquals::_encrypt()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_encrypt()", "CookieEncryptedEquals::_explode()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_explode()", "CookieEncryptedEquals::_getBodyAsString()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_getBodyAsString()", "CookieEncryptedEquals::_getCookieEncryptionKey()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_getCookieEncryptionKey()", "CookieEncryptedEquals::_implode()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#_implode()", "CookieEncryptedEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#additionalFailureDescription()", "CookieEncryptedEquals::count()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#count()", "CookieEncryptedEquals::evaluate()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#evaluate()", "CookieEncryptedEquals::exporter()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#exporter()", "CookieEncryptedEquals::fail()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#fail()", "CookieEncryptedEquals::failureDescription()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#failureDescription()", "CookieEncryptedEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#failureDescriptionInContext()", "CookieEncryptedEquals::matches()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#matches()", "CookieEncryptedEquals::reduce()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#reduce()", "CookieEncryptedEquals::toString()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#toString()", "CookieEncryptedEquals::toStringInContext()()": "class-cake.testsuite.constraint.response.cookieencryptedequals.html#toStringInContext()", "CookieEquals (class)": "class-cake.testsuite.constraint.response.cookieequals.html", "CookieEquals::$cookieName": "class-cake.testsuite.constraint.response.cookieequals.html#$cookieName", "CookieEquals::$response": "class-cake.testsuite.constraint.response.cookieequals.html#$response", "CookieEquals::__construct()()": "class-cake.testsuite.constraint.response.cookieequals.html#__construct()", "CookieEquals::_getBodyAsString()()": "class-cake.testsuite.constraint.response.cookieequals.html#_getBodyAsString()", "CookieEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.cookieequals.html#additionalFailureDescription()", "CookieEquals::count()()": "class-cake.testsuite.constraint.response.cookieequals.html#count()", "CookieEquals::evaluate()()": "class-cake.testsuite.constraint.response.cookieequals.html#evaluate()", "CookieEquals::exporter()()": "class-cake.testsuite.constraint.response.cookieequals.html#exporter()", "CookieEquals::fail()()": "class-cake.testsuite.constraint.response.cookieequals.html#fail()", "CookieEquals::failureDescription()()": "class-cake.testsuite.constraint.response.cookieequals.html#failureDescription()", "CookieEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.cookieequals.html#failureDescriptionInContext()", "CookieEquals::matches()()": "class-cake.testsuite.constraint.response.cookieequals.html#matches()", "CookieEquals::reduce()()": "class-cake.testsuite.constraint.response.cookieequals.html#reduce()", "CookieEquals::toString()()": "class-cake.testsuite.constraint.response.cookieequals.html#toString()", "CookieEquals::toStringInContext()()": "class-cake.testsuite.constraint.response.cookieequals.html#toStringInContext()", "CookieInterface (interface)": "interface-cake.http.cookie.cookieinterface.html", "CookieNotSet (class)": "class-cake.testsuite.constraint.response.cookienotset.html", "CookieNotSet::$response": "class-cake.testsuite.constraint.response.cookienotset.html#$response", "CookieNotSet::__construct()()": "class-cake.testsuite.constraint.response.cookienotset.html#__construct()", "CookieNotSet::_getBodyAsString()()": "class-cake.testsuite.constraint.response.cookienotset.html#_getBodyAsString()", "CookieNotSet::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.cookienotset.html#additionalFailureDescription()", "CookieNotSet::count()()": "class-cake.testsuite.constraint.response.cookienotset.html#count()", "CookieNotSet::evaluate()()": "class-cake.testsuite.constraint.response.cookienotset.html#evaluate()", "CookieNotSet::exporter()()": "class-cake.testsuite.constraint.response.cookienotset.html#exporter()", "CookieNotSet::fail()()": "class-cake.testsuite.constraint.response.cookienotset.html#fail()", "CookieNotSet::failureDescription()()": "class-cake.testsuite.constraint.response.cookienotset.html#failureDescription()", "CookieNotSet::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.cookienotset.html#failureDescriptionInContext()", "CookieNotSet::matches()()": "class-cake.testsuite.constraint.response.cookienotset.html#matches()", "CookieNotSet::reduce()()": "class-cake.testsuite.constraint.response.cookienotset.html#reduce()", "CookieNotSet::toString()()": "class-cake.testsuite.constraint.response.cookienotset.html#toString()", "CookieNotSet::toStringInContext()()": "class-cake.testsuite.constraint.response.cookienotset.html#toStringInContext()", "CookieSet (class)": "class-cake.testsuite.constraint.response.cookieset.html", "CookieSet::$response": "class-cake.testsuite.constraint.response.cookieset.html#$response", "CookieSet::__construct()()": "class-cake.testsuite.constraint.response.cookieset.html#__construct()", "CookieSet::_getBodyAsString()()": "class-cake.testsuite.constraint.response.cookieset.html#_getBodyAsString()", "CookieSet::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.cookieset.html#additionalFailureDescription()", "CookieSet::count()()": "class-cake.testsuite.constraint.response.cookieset.html#count()", "CookieSet::evaluate()()": "class-cake.testsuite.constraint.response.cookieset.html#evaluate()", "CookieSet::exporter()()": "class-cake.testsuite.constraint.response.cookieset.html#exporter()", "CookieSet::fail()()": "class-cake.testsuite.constraint.response.cookieset.html#fail()", "CookieSet::failureDescription()()": "class-cake.testsuite.constraint.response.cookieset.html#failureDescription()", "CookieSet::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.cookieset.html#failureDescriptionInContext()", "CookieSet::matches()()": "class-cake.testsuite.constraint.response.cookieset.html#matches()", "CookieSet::reduce()()": "class-cake.testsuite.constraint.response.cookieset.html#reduce()", "CookieSet::toString()()": "class-cake.testsuite.constraint.response.cookieset.html#toString()", "CookieSet::toStringInContext()()": "class-cake.testsuite.constraint.response.cookieset.html#toStringInContext()", "Core (namespace)": "namespace-cake.core.html", "Core\\Configure (namespace)": "namespace-cake.core.configure.html", "Core\\Configure\\Engine (namespace)": "namespace-cake.core.configure.engine.html", "Core\\Exception (namespace)": "namespace-cake.core.exception.html", "Core\\Retry (namespace)": "namespace-cake.core.retry.html", "Core\\TestSuite (namespace)": "namespace-cake.core.testsuite.html", "CorsBuilder (class)": "class-cake.http.corsbuilder.html", "CorsBuilder::$_headers": "class-cake.http.corsbuilder.html#$_headers", "CorsBuilder::$_isSsl": "class-cake.http.corsbuilder.html#$_isSsl", "CorsBuilder::$_origin": "class-cake.http.corsbuilder.html#$_origin", "CorsBuilder::$_response": "class-cake.http.corsbuilder.html#$_response", "CorsBuilder::__construct()()": "class-cake.http.corsbuilder.html#__construct()", "CorsBuilder::_normalizeDomains()()": "class-cake.http.corsbuilder.html#_normalizeDomains()", "CorsBuilder::allowCredentials()()": "class-cake.http.corsbuilder.html#allowCredentials()", "CorsBuilder::allowHeaders()()": "class-cake.http.corsbuilder.html#allowHeaders()", "CorsBuilder::allowMethods()()": "class-cake.http.corsbuilder.html#allowMethods()", "CorsBuilder::allowOrigin()()": "class-cake.http.corsbuilder.html#allowOrigin()", "CorsBuilder::build()()": "class-cake.http.corsbuilder.html#build()", "CorsBuilder::exposeHeaders()()": "class-cake.http.corsbuilder.html#exposeHeaders()", "CorsBuilder::maxAge()()": "class-cake.http.corsbuilder.html#maxAge()", "CounterCacheBehavior (class)": "class-cake.orm.behavior.countercachebehavior.html", "CounterCacheBehavior::$_config": "class-cake.orm.behavior.countercachebehavior.html#$_config", "CounterCacheBehavior::$_configInitialized": "class-cake.orm.behavior.countercachebehavior.html#$_configInitialized", "CounterCacheBehavior::$_defaultConfig": "class-cake.orm.behavior.countercachebehavior.html#$_defaultConfig", "CounterCacheBehavior::$_ignoreDirty": "class-cake.orm.behavior.countercachebehavior.html#$_ignoreDirty", "CounterCacheBehavior::$_reflectionCache": "class-cake.orm.behavior.countercachebehavior.html#$_reflectionCache", "CounterCacheBehavior::$_table": "class-cake.orm.behavior.countercachebehavior.html#$_table", "CounterCacheBehavior::__construct()()": "class-cake.orm.behavior.countercachebehavior.html#__construct()", "CounterCacheBehavior::_configDelete()()": "class-cake.orm.behavior.countercachebehavior.html#_configDelete()", "CounterCacheBehavior::_configRead()()": "class-cake.orm.behavior.countercachebehavior.html#_configRead()", "CounterCacheBehavior::_configWrite()()": "class-cake.orm.behavior.countercachebehavior.html#_configWrite()", "CounterCacheBehavior::_getCount()()": "class-cake.orm.behavior.countercachebehavior.html#_getCount()", "CounterCacheBehavior::_processAssociation()()": "class-cake.orm.behavior.countercachebehavior.html#_processAssociation()", "CounterCacheBehavior::_processAssociations()()": "class-cake.orm.behavior.countercachebehavior.html#_processAssociations()", "CounterCacheBehavior::_reflectionCache()()": "class-cake.orm.behavior.countercachebehavior.html#_reflectionCache()", "CounterCacheBehavior::_resolveMethodAliases()()": "class-cake.orm.behavior.countercachebehavior.html#_resolveMethodAliases()", "CounterCacheBehavior::_shouldUpdateCount()()": "class-cake.orm.behavior.countercachebehavior.html#_shouldUpdateCount()", "CounterCacheBehavior::afterDelete()()": "class-cake.orm.behavior.countercachebehavior.html#afterDelete()", "CounterCacheBehavior::afterSave()()": "class-cake.orm.behavior.countercachebehavior.html#afterSave()", "CounterCacheBehavior::beforeSave()()": "class-cake.orm.behavior.countercachebehavior.html#beforeSave()", "CounterCacheBehavior::configShallow()()": "class-cake.orm.behavior.countercachebehavior.html#configShallow()", "CounterCacheBehavior::getConfig()()": "class-cake.orm.behavior.countercachebehavior.html#getConfig()", "CounterCacheBehavior::getConfigOrFail()()": "class-cake.orm.behavior.countercachebehavior.html#getConfigOrFail()", "CounterCacheBehavior::getTable()()": "class-cake.orm.behavior.countercachebehavior.html#getTable()", "CounterCacheBehavior::implementedEvents()()": "class-cake.orm.behavior.countercachebehavior.html#implementedEvents()", "CounterCacheBehavior::implementedFinders()()": "class-cake.orm.behavior.countercachebehavior.html#implementedFinders()", "CounterCacheBehavior::implementedMethods()()": "class-cake.orm.behavior.countercachebehavior.html#implementedMethods()", "CounterCacheBehavior::initialize()()": "class-cake.orm.behavior.countercachebehavior.html#initialize()", "CounterCacheBehavior::setConfig()()": "class-cake.orm.behavior.countercachebehavior.html#setConfig()", "CounterCacheBehavior::table()()": "class-cake.orm.behavior.countercachebehavior.html#table()", "CounterCacheBehavior::verifyConfig()()": "class-cake.orm.behavior.countercachebehavior.html#verifyConfig()", "CspMiddleware (class)": "class-cake.http.middleware.cspmiddleware.html", "CspMiddleware::$_config": "class-cake.http.middleware.cspmiddleware.html#$_config", "CspMiddleware::$_configInitialized": "class-cake.http.middleware.cspmiddleware.html#$_configInitialized", "CspMiddleware::$_defaultConfig": "class-cake.http.middleware.cspmiddleware.html#$_defaultConfig", "CspMiddleware::$csp": "class-cake.http.middleware.cspmiddleware.html#$csp", "CspMiddleware::__construct()()": "class-cake.http.middleware.cspmiddleware.html#__construct()", "CspMiddleware::_configDelete()()": "class-cake.http.middleware.cspmiddleware.html#_configDelete()", "CspMiddleware::_configRead()()": "class-cake.http.middleware.cspmiddleware.html#_configRead()", "CspMiddleware::_configWrite()()": "class-cake.http.middleware.cspmiddleware.html#_configWrite()", "CspMiddleware::configShallow()()": "class-cake.http.middleware.cspmiddleware.html#configShallow()", "CspMiddleware::getConfig()()": "class-cake.http.middleware.cspmiddleware.html#getConfig()", "CspMiddleware::getConfigOrFail()()": "class-cake.http.middleware.cspmiddleware.html#getConfigOrFail()", "CspMiddleware::process()()": "class-cake.http.middleware.cspmiddleware.html#process()", "CspMiddleware::setConfig()()": "class-cake.http.middleware.cspmiddleware.html#setConfig()", "CsrfProtectionMiddleware (class)": "class-cake.http.middleware.csrfprotectionmiddleware.html", "CsrfProtectionMiddleware::$_config": "class-cake.http.middleware.csrfprotectionmiddleware.html#$_config", "CsrfProtectionMiddleware::$skipCheckCallback": "class-cake.http.middleware.csrfprotectionmiddleware.html#$skipCheckCallback", "CsrfProtectionMiddleware::__construct()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#__construct()", "CsrfProtectionMiddleware::_addTokenCookie()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#_addTokenCookie()", "CsrfProtectionMiddleware::_createCookie()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#_createCookie()", "CsrfProtectionMiddleware::_createToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#_createToken()", "CsrfProtectionMiddleware::_unsetTokenField()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#_unsetTokenField()", "CsrfProtectionMiddleware::_validateToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#_validateToken()", "CsrfProtectionMiddleware::_verifyToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#_verifyToken()", "CsrfProtectionMiddleware::createToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#createToken()", "CsrfProtectionMiddleware::isHexadecimalToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#isHexadecimalToken()", "CsrfProtectionMiddleware::process()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#process()", "CsrfProtectionMiddleware::saltToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#saltToken()", "CsrfProtectionMiddleware::skipCheckCallback()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#skipCheckCallback()", "CsrfProtectionMiddleware::unsaltToken()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#unsaltToken()", "CsrfProtectionMiddleware::whitelistCallback()()": "class-cake.http.middleware.csrfprotectionmiddleware.html#whitelistCallback()", "Curl (class)": "class-cake.http.client.adapter.curl.html", "Curl::buildOptions()()": "class-cake.http.client.adapter.curl.html#buildOptions()", "Curl::createResponse()()": "class-cake.http.client.adapter.curl.html#createResponse()", "Curl::exec()()": "class-cake.http.client.adapter.curl.html#exec()", "Curl::getProtocolVersion()()": "class-cake.http.client.adapter.curl.html#getProtocolVersion()", "Curl::send()()": "class-cake.http.client.adapter.curl.html#send()", "DashedRoute (class)": "class-cake.routing.route.dashedroute.html", "DashedRoute::$_compiledRoute": "class-cake.routing.route.dashedroute.html#$_compiledRoute", "DashedRoute::$_extensions": "class-cake.routing.route.dashedroute.html#$_extensions", "DashedRoute::$_greedy": "class-cake.routing.route.dashedroute.html#$_greedy", "DashedRoute::$_inflectedDefaults": "class-cake.routing.route.dashedroute.html#$_inflectedDefaults", "DashedRoute::$_name": "class-cake.routing.route.dashedroute.html#$_name", "DashedRoute::$braceKeys": "class-cake.routing.route.dashedroute.html#$braceKeys", "DashedRoute::$defaults": "class-cake.routing.route.dashedroute.html#$defaults", "DashedRoute::$keys": "class-cake.routing.route.dashedroute.html#$keys", "DashedRoute::$middleware": "class-cake.routing.route.dashedroute.html#$middleware", "DashedRoute::$options": "class-cake.routing.route.dashedroute.html#$options", "DashedRoute::$template": "class-cake.routing.route.dashedroute.html#$template", "DashedRoute::__construct()()": "class-cake.routing.route.dashedroute.html#__construct()", "DashedRoute::__set_state()()": "class-cake.routing.route.dashedroute.html#__set_state()", "DashedRoute::_camelizePlugin()()": "class-cake.routing.route.dashedroute.html#_camelizePlugin()", "DashedRoute::_dasherize()()": "class-cake.routing.route.dashedroute.html#_dasherize()", "DashedRoute::_matchMethod()()": "class-cake.routing.route.dashedroute.html#_matchMethod()", "DashedRoute::_parseArgs()()": "class-cake.routing.route.dashedroute.html#_parseArgs()", "DashedRoute::_parseExtension()()": "class-cake.routing.route.dashedroute.html#_parseExtension()", "DashedRoute::_persistParams()()": "class-cake.routing.route.dashedroute.html#_persistParams()", "DashedRoute::_writeRoute()()": "class-cake.routing.route.dashedroute.html#_writeRoute()", "DashedRoute::_writeUrl()()": "class-cake.routing.route.dashedroute.html#_writeUrl()", "DashedRoute::compile()()": "class-cake.routing.route.dashedroute.html#compile()", "DashedRoute::compiled()()": "class-cake.routing.route.dashedroute.html#compiled()", "DashedRoute::getExtensions()()": "class-cake.routing.route.dashedroute.html#getExtensions()", "DashedRoute::getMiddleware()()": "class-cake.routing.route.dashedroute.html#getMiddleware()", "DashedRoute::getName()()": "class-cake.routing.route.dashedroute.html#getName()", "DashedRoute::hostMatches()()": "class-cake.routing.route.dashedroute.html#hostMatches()", "DashedRoute::match()()": "class-cake.routing.route.dashedroute.html#match()", "DashedRoute::normalizeAndValidateMethods()()": "class-cake.routing.route.dashedroute.html#normalizeAndValidateMethods()", "DashedRoute::parse()()": "class-cake.routing.route.dashedroute.html#parse()", "DashedRoute::parseRequest()()": "class-cake.routing.route.dashedroute.html#parseRequest()", "DashedRoute::setExtensions()()": "class-cake.routing.route.dashedroute.html#setExtensions()", "DashedRoute::setHost()()": "class-cake.routing.route.dashedroute.html#setHost()", "DashedRoute::setMethods()()": "class-cake.routing.route.dashedroute.html#setMethods()", "DashedRoute::setMiddleware()()": "class-cake.routing.route.dashedroute.html#setMiddleware()", "DashedRoute::setPass()()": "class-cake.routing.route.dashedroute.html#setPass()", "DashedRoute::setPatterns()()": "class-cake.routing.route.dashedroute.html#setPatterns()", "DashedRoute::setPersist()()": "class-cake.routing.route.dashedroute.html#setPersist()", "DashedRoute::staticPath()()": "class-cake.routing.route.dashedroute.html#staticPath()", "Database (namespace)": "namespace-cake.database.html", "Database\\Driver (namespace)": "namespace-cake.database.driver.html", "Database\\Exception (namespace)": "namespace-cake.database.exception.html", "Database\\Expression (namespace)": "namespace-cake.database.expression.html", "Database\\Log (namespace)": "namespace-cake.database.log.html", "Database\\Retry (namespace)": "namespace-cake.database.retry.html", "Database\\Schema (namespace)": "namespace-cake.database.schema.html", "Database\\Statement (namespace)": "namespace-cake.database.statement.html", "Database\\Type (namespace)": "namespace-cake.database.type.html", "DatabaseException (class)": "class-cake.database.exception.databaseexception.html", "DatabaseSession (class)": "class-cake.http.session.databasesession.html", "DatabaseSession::$_table": "class-cake.http.session.databasesession.html#$_table", "DatabaseSession::$_tableLocator": "class-cake.http.session.databasesession.html#$_tableLocator", "DatabaseSession::$_timeout": "class-cake.http.session.databasesession.html#$_timeout", "DatabaseSession::$defaultTable": "class-cake.http.session.databasesession.html#$defaultTable", "DatabaseSession::__construct()()": "class-cake.http.session.databasesession.html#__construct()", "DatabaseSession::close()()": "class-cake.http.session.databasesession.html#close()", "DatabaseSession::destroy()()": "class-cake.http.session.databasesession.html#destroy()", "DatabaseSession::fetchTable()()": "class-cake.http.session.databasesession.html#fetchTable()", "DatabaseSession::gc()()": "class-cake.http.session.databasesession.html#gc()", "DatabaseSession::getTableLocator()()": "class-cake.http.session.databasesession.html#getTableLocator()", "DatabaseSession::open()()": "class-cake.http.session.databasesession.html#open()", "DatabaseSession::read()()": "class-cake.http.session.databasesession.html#read()", "DatabaseSession::setTableLocator()()": "class-cake.http.session.databasesession.html#setTableLocator()", "DatabaseSession::setTimeout()()": "class-cake.http.session.databasesession.html#setTimeout()", "DatabaseSession::write()()": "class-cake.http.session.databasesession.html#write()", "Datasource (namespace)": "namespace-cake.datasource.html", "Datasource\\Exception (namespace)": "namespace-cake.datasource.exception.html", "Datasource\\Locator (namespace)": "namespace-cake.datasource.locator.html", "Datasource\\Paging (namespace)": "namespace-cake.datasource.paging.html", "Datasource\\Paging\\Exception (namespace)": "namespace-cake.datasource.paging.exception.html", "Date (class)": "class-cake.i18n.date.html", "Date::$_formatters": "class-cake.i18n.date.html#$_formatters", "Date::$_jsonEncodeFormat": "class-cake.i18n.date.html#$_jsonEncodeFormat", "Date::$_lastErrors": "class-cake.i18n.date.html#$_lastErrors", "Date::$_toStringFormat": "class-cake.i18n.date.html#$_toStringFormat", "Date::$age": "class-cake.i18n.date.html#$age", "Date::$day": "class-cake.i18n.date.html#$day", "Date::$dayOfWeek": "class-cake.i18n.date.html#$dayOfWeek", "Date::$dayOfWeekName": "class-cake.i18n.date.html#$dayOfWeekName", "Date::$dayOfYear": "class-cake.i18n.date.html#$dayOfYear", "Date::$days": "class-cake.i18n.date.html#$days", "Date::$daysInMonth": "class-cake.i18n.date.html#$daysInMonth", "Date::$defaultLocale": "class-cake.i18n.date.html#$defaultLocale", "Date::$diffFormatter": "class-cake.i18n.date.html#$diffFormatter", "Date::$dst": "class-cake.i18n.date.html#$dst", "Date::$hour": "class-cake.i18n.date.html#$hour", "Date::$lenientParsing": "class-cake.i18n.date.html#$lenientParsing", "Date::$local": "class-cake.i18n.date.html#$local", "Date::$micro": "class-cake.i18n.date.html#$micro", "Date::$microsecond": "class-cake.i18n.date.html#$microsecond", "Date::$minute": "class-cake.i18n.date.html#$minute", "Date::$month": "class-cake.i18n.date.html#$month", "Date::$niceFormat": "class-cake.i18n.date.html#$niceFormat", "Date::$offset": "class-cake.i18n.date.html#$offset", "Date::$offsetHours": "class-cake.i18n.date.html#$offsetHours", "Date::$quarter": "class-cake.i18n.date.html#$quarter", "Date::$relativePattern": "class-cake.i18n.date.html#$relativePattern", "Date::$second": "class-cake.i18n.date.html#$second", "Date::$timestamp": "class-cake.i18n.date.html#$timestamp", "Date::$timezone": "class-cake.i18n.date.html#$timezone", "Date::$timezoneName": "class-cake.i18n.date.html#$timezoneName", "Date::$toStringFormat": "class-cake.i18n.date.html#$toStringFormat", "Date::$tz": "class-cake.i18n.date.html#$tz", "Date::$tzName": "class-cake.i18n.date.html#$tzName", "Date::$utc": "class-cake.i18n.date.html#$utc", "Date::$weekendDays": "class-cake.i18n.date.html#$weekendDays", "Date::$weekEndsAt": "class-cake.i18n.date.html#$weekEndsAt", "Date::$weekOfMonth": "class-cake.i18n.date.html#$weekOfMonth", "Date::$weekOfYear": "class-cake.i18n.date.html#$weekOfYear", "Date::$weekStartsAt": "class-cake.i18n.date.html#$weekStartsAt", "Date::$wordAccuracy": "class-cake.i18n.date.html#$wordAccuracy", "Date::$wordEnd": "class-cake.i18n.date.html#$wordEnd", "Date::$wordFormat": "class-cake.i18n.date.html#$wordFormat", "Date::$year": "class-cake.i18n.date.html#$year", "Date::$yearIso": "class-cake.i18n.date.html#$yearIso", "Date::__construct()()": "class-cake.i18n.date.html#__construct()", "Date::__debugInfo()()": "class-cake.i18n.date.html#__debugInfo()", "Date::__get()()": "class-cake.i18n.date.html#__get()", "Date::__isset()()": "class-cake.i18n.date.html#__isset()", "Date::__toString()()": "class-cake.i18n.date.html#__toString()", "Date::_formatObject()()": "class-cake.i18n.date.html#_formatObject()", "Date::add()()": "class-cake.i18n.date.html#add()", "Date::addDay()()": "class-cake.i18n.date.html#addDay()", "Date::addDays()()": "class-cake.i18n.date.html#addDays()", "Date::addHour()()": "class-cake.i18n.date.html#addHour()", "Date::addHours()()": "class-cake.i18n.date.html#addHours()", "Date::addMinute()()": "class-cake.i18n.date.html#addMinute()", "Date::addMinutes()()": "class-cake.i18n.date.html#addMinutes()", "Date::addMonth()()": "class-cake.i18n.date.html#addMonth()", "Date::addMonths()()": "class-cake.i18n.date.html#addMonths()", "Date::addMonthsWithOverflow()()": "class-cake.i18n.date.html#addMonthsWithOverflow()", "Date::addMonthWithOverflow()()": "class-cake.i18n.date.html#addMonthWithOverflow()", "Date::addSecond()()": "class-cake.i18n.date.html#addSecond()", "Date::addSeconds()()": "class-cake.i18n.date.html#addSeconds()", "Date::addWeek()()": "class-cake.i18n.date.html#addWeek()", "Date::addWeekday()()": "class-cake.i18n.date.html#addWeekday()", "Date::addWeekdays()()": "class-cake.i18n.date.html#addWeekdays()", "Date::addWeeks()()": "class-cake.i18n.date.html#addWeeks()", "Date::addYear()()": "class-cake.i18n.date.html#addYear()", "Date::addYears()()": "class-cake.i18n.date.html#addYears()", "Date::addYearsWithOverflow()()": "class-cake.i18n.date.html#addYearsWithOverflow()", "Date::addYearWithOverflow()()": "class-cake.i18n.date.html#addYearWithOverflow()", "Date::average()()": "class-cake.i18n.date.html#average()", "Date::between()()": "class-cake.i18n.date.html#between()", "Date::closest()()": "class-cake.i18n.date.html#closest()", "Date::copy()()": "class-cake.i18n.date.html#copy()", "Date::create()()": "class-cake.i18n.date.html#create()", "Date::createFromArray()()": "class-cake.i18n.date.html#createFromArray()", "Date::createFromDate()()": "class-cake.i18n.date.html#createFromDate()", "Date::createFromFormat()()": "class-cake.i18n.date.html#createFromFormat()", "Date::createFromTime()()": "class-cake.i18n.date.html#createFromTime()", "Date::createFromTimestamp()()": "class-cake.i18n.date.html#createFromTimestamp()", "Date::createFromTimestampUTC()()": "class-cake.i18n.date.html#createFromTimestampUTC()", "Date::day()()": "class-cake.i18n.date.html#day()", "Date::diffFiltered()()": "class-cake.i18n.date.html#diffFiltered()", "Date::diffForHumans()()": "class-cake.i18n.date.html#diffForHumans()", "Date::diffFormatter()()": "class-cake.i18n.date.html#diffFormatter()", "Date::diffInDays()()": "class-cake.i18n.date.html#diffInDays()", "Date::diffInDaysFiltered()()": "class-cake.i18n.date.html#diffInDaysFiltered()", "Date::diffInHours()()": "class-cake.i18n.date.html#diffInHours()", "Date::diffInHoursFiltered()()": "class-cake.i18n.date.html#diffInHoursFiltered()", "Date::diffInMinutes()()": "class-cake.i18n.date.html#diffInMinutes()", "Date::diffInMonths()()": "class-cake.i18n.date.html#diffInMonths()", "Date::diffInMonthsIgnoreTimezone()()": "class-cake.i18n.date.html#diffInMonthsIgnoreTimezone()", "Date::diffInSeconds()()": "class-cake.i18n.date.html#diffInSeconds()", "Date::diffInWeekdays()()": "class-cake.i18n.date.html#diffInWeekdays()", "Date::diffInWeekendDays()()": "class-cake.i18n.date.html#diffInWeekendDays()", "Date::diffInWeeks()()": "class-cake.i18n.date.html#diffInWeeks()", "Date::diffInYears()()": "class-cake.i18n.date.html#diffInYears()", "Date::disableLenientParsing()()": "class-cake.i18n.date.html#disableLenientParsing()", "Date::enableLenientParsing()()": "class-cake.i18n.date.html#enableLenientParsing()", "Date::endOfCentury()()": "class-cake.i18n.date.html#endOfCentury()", "Date::endOfDay()()": "class-cake.i18n.date.html#endOfDay()", "Date::endOfDecade()()": "class-cake.i18n.date.html#endOfDecade()", "Date::endOfMonth()()": "class-cake.i18n.date.html#endOfMonth()", "Date::endOfWeek()()": "class-cake.i18n.date.html#endOfWeek()", "Date::endOfYear()()": "class-cake.i18n.date.html#endOfYear()", "Date::eq()()": "class-cake.i18n.date.html#eq()", "Date::equals()()": "class-cake.i18n.date.html#equals()", "Date::farthest()()": "class-cake.i18n.date.html#farthest()", "Date::firstOfMonth()()": "class-cake.i18n.date.html#firstOfMonth()", "Date::firstOfQuarter()()": "class-cake.i18n.date.html#firstOfQuarter()", "Date::firstOfYear()()": "class-cake.i18n.date.html#firstOfYear()", "Date::fromNow()()": "class-cake.i18n.date.html#fromNow()", "Date::getDefaultLocale()()": "class-cake.i18n.date.html#getDefaultLocale()", "Date::getDiffFormatter()()": "class-cake.i18n.date.html#getDiffFormatter()", "Date::getLastErrors()()": "class-cake.i18n.date.html#getLastErrors()", "Date::getTestNow()()": "class-cake.i18n.date.html#getTestNow()", "Date::getWeekendDays()()": "class-cake.i18n.date.html#getWeekendDays()", "Date::getWeekEndsAt()()": "class-cake.i18n.date.html#getWeekEndsAt()", "Date::getWeekStartsAt()()": "class-cake.i18n.date.html#getWeekStartsAt()", "Date::greaterThan()()": "class-cake.i18n.date.html#greaterThan()", "Date::greaterThanOrEquals()()": "class-cake.i18n.date.html#greaterThanOrEquals()", "Date::gt()()": "class-cake.i18n.date.html#gt()", "Date::gte()()": "class-cake.i18n.date.html#gte()", "Date::hasRelativeKeywords()()": "class-cake.i18n.date.html#hasRelativeKeywords()", "Date::hasTestNow()()": "class-cake.i18n.date.html#hasTestNow()", "Date::hour()()": "class-cake.i18n.date.html#hour()", "Date::i18nFormat()()": "class-cake.i18n.date.html#i18nFormat()", "Date::instance()()": "class-cake.i18n.date.html#instance()", "Date::isBirthday()()": "class-cake.i18n.date.html#isBirthday()", "Date::isFriday()()": "class-cake.i18n.date.html#isFriday()", "Date::isFuture()()": "class-cake.i18n.date.html#isFuture()", "Date::isLastMonth()()": "class-cake.i18n.date.html#isLastMonth()", "Date::isLastWeek()()": "class-cake.i18n.date.html#isLastWeek()", "Date::isLastYear()()": "class-cake.i18n.date.html#isLastYear()", "Date::isLeapYear()()": "class-cake.i18n.date.html#isLeapYear()", "Date::isMonday()()": "class-cake.i18n.date.html#isMonday()", "Date::isMutable()()": "class-cake.i18n.date.html#isMutable()", "Date::isNextMonth()()": "class-cake.i18n.date.html#isNextMonth()", "Date::isNextWeek()()": "class-cake.i18n.date.html#isNextWeek()", "Date::isNextYear()()": "class-cake.i18n.date.html#isNextYear()", "Date::isPast()()": "class-cake.i18n.date.html#isPast()", "Date::isSameDay()()": "class-cake.i18n.date.html#isSameDay()", "Date::isSaturday()()": "class-cake.i18n.date.html#isSaturday()", "Date::isSunday()()": "class-cake.i18n.date.html#isSunday()", "Date::isThisMonth()()": "class-cake.i18n.date.html#isThisMonth()", "Date::isThisWeek()()": "class-cake.i18n.date.html#isThisWeek()", "Date::isThisYear()()": "class-cake.i18n.date.html#isThisYear()", "Date::isThursday()()": "class-cake.i18n.date.html#isThursday()", "Date::isToday()()": "class-cake.i18n.date.html#isToday()", "Date::isTomorrow()()": "class-cake.i18n.date.html#isTomorrow()", "Date::isTuesday()()": "class-cake.i18n.date.html#isTuesday()", "Date::isWednesday()()": "class-cake.i18n.date.html#isWednesday()", "Date::isWeekday()()": "class-cake.i18n.date.html#isWeekday()", "Date::isWeekend()()": "class-cake.i18n.date.html#isWeekend()", "Date::isWithinNext()()": "class-cake.i18n.date.html#isWithinNext()", "Date::isYesterday()()": "class-cake.i18n.date.html#isYesterday()", "Date::jsonSerialize()()": "class-cake.i18n.date.html#jsonSerialize()", "Date::lastOfMonth()()": "class-cake.i18n.date.html#lastOfMonth()", "Date::lastOfQuarter()()": "class-cake.i18n.date.html#lastOfQuarter()", "Date::lastOfYear()()": "class-cake.i18n.date.html#lastOfYear()", "Date::lenientParsingEnabled()()": "class-cake.i18n.date.html#lenientParsingEnabled()", "Date::lessThan()()": "class-cake.i18n.date.html#lessThan()", "Date::lessThanOrEquals()()": "class-cake.i18n.date.html#lessThanOrEquals()", "Date::lt()()": "class-cake.i18n.date.html#lt()", "Date::lte()()": "class-cake.i18n.date.html#lte()", "Date::max()()": "class-cake.i18n.date.html#max()", "Date::maxValue()()": "class-cake.i18n.date.html#maxValue()", "Date::microsecond()()": "class-cake.i18n.date.html#microsecond()", "Date::min()()": "class-cake.i18n.date.html#min()", "Date::minute()()": "class-cake.i18n.date.html#minute()", "Date::minValue()()": "class-cake.i18n.date.html#minValue()", "Date::modify()()": "class-cake.i18n.date.html#modify()", "Date::month()()": "class-cake.i18n.date.html#month()", "Date::ne()()": "class-cake.i18n.date.html#ne()", "Date::next()()": "class-cake.i18n.date.html#next()", "Date::nice()()": "class-cake.i18n.date.html#nice()", "Date::notEquals()()": "class-cake.i18n.date.html#notEquals()", "Date::now()()": "class-cake.i18n.date.html#now()", "Date::nthOfMonth()()": "class-cake.i18n.date.html#nthOfMonth()", "Date::nthOfQuarter()()": "class-cake.i18n.date.html#nthOfQuarter()", "Date::nthOfYear()()": "class-cake.i18n.date.html#nthOfYear()", "Date::parse()()": "class-cake.i18n.date.html#parse()", "Date::parseDate()()": "class-cake.i18n.date.html#parseDate()", "Date::parseDateTime()()": "class-cake.i18n.date.html#parseDateTime()", "Date::parseTime()()": "class-cake.i18n.date.html#parseTime()", "Date::previous()()": "class-cake.i18n.date.html#previous()", "Date::resetToStringFormat()()": "class-cake.i18n.date.html#resetToStringFormat()", "Date::safeCreateDateTimeZone()()": "class-cake.i18n.date.html#safeCreateDateTimeZone()", "Date::second()()": "class-cake.i18n.date.html#second()", "Date::secondsSinceMidnight()()": "class-cake.i18n.date.html#secondsSinceMidnight()", "Date::secondsUntilEndOfDay()()": "class-cake.i18n.date.html#secondsUntilEndOfDay()", "Date::setDate()()": "class-cake.i18n.date.html#setDate()", "Date::setDateTime()()": "class-cake.i18n.date.html#setDateTime()", "Date::setDefaultLocale()()": "class-cake.i18n.date.html#setDefaultLocale()", "Date::setDiffFormatter()()": "class-cake.i18n.date.html#setDiffFormatter()", "Date::setJsonEncodeFormat()()": "class-cake.i18n.date.html#setJsonEncodeFormat()", "Date::setTestNow()()": "class-cake.i18n.date.html#setTestNow()", "Date::setTime()()": "class-cake.i18n.date.html#setTime()", "Date::setTimeFromTimeString()()": "class-cake.i18n.date.html#setTimeFromTimeString()", "Date::setTimestamp()()": "class-cake.i18n.date.html#setTimestamp()", "Date::setTimezone()()": "class-cake.i18n.date.html#setTimezone()", "Date::setToStringFormat()()": "class-cake.i18n.date.html#setToStringFormat()", "Date::setWeekendDays()()": "class-cake.i18n.date.html#setWeekendDays()", "Date::setWeekEndsAt()()": "class-cake.i18n.date.html#setWeekEndsAt()", "Date::setWeekStartsAt()()": "class-cake.i18n.date.html#setWeekStartsAt()", "Date::startOfCentury()()": "class-cake.i18n.date.html#startOfCentury()", "Date::startOfDay()()": "class-cake.i18n.date.html#startOfDay()", "Date::startOfDecade()()": "class-cake.i18n.date.html#startOfDecade()", "Date::startOfMonth()()": "class-cake.i18n.date.html#startOfMonth()", "Date::startOfWeek()()": "class-cake.i18n.date.html#startOfWeek()", "Date::startOfYear()()": "class-cake.i18n.date.html#startOfYear()", "Date::stripRelativeTime()()": "class-cake.i18n.date.html#stripRelativeTime()", "Date::stripTime()()": "class-cake.i18n.date.html#stripTime()", "Date::sub()()": "class-cake.i18n.date.html#sub()", "Date::subDay()()": "class-cake.i18n.date.html#subDay()", "Date::subDays()()": "class-cake.i18n.date.html#subDays()", "Date::subHour()()": "class-cake.i18n.date.html#subHour()", "Date::subHours()()": "class-cake.i18n.date.html#subHours()", "Date::subMinute()()": "class-cake.i18n.date.html#subMinute()", "Date::subMinutes()()": "class-cake.i18n.date.html#subMinutes()", "Date::subMonth()()": "class-cake.i18n.date.html#subMonth()", "Date::subMonths()()": "class-cake.i18n.date.html#subMonths()", "Date::subMonthsWithOverflow()()": "class-cake.i18n.date.html#subMonthsWithOverflow()", "Date::subMonthWithOverflow()()": "class-cake.i18n.date.html#subMonthWithOverflow()", "Date::subSecond()()": "class-cake.i18n.date.html#subSecond()", "Date::subSeconds()()": "class-cake.i18n.date.html#subSeconds()", "Date::subWeek()()": "class-cake.i18n.date.html#subWeek()", "Date::subWeekday()()": "class-cake.i18n.date.html#subWeekday()", "Date::subWeekdays()()": "class-cake.i18n.date.html#subWeekdays()", "Date::subWeeks()()": "class-cake.i18n.date.html#subWeeks()", "Date::subYear()()": "class-cake.i18n.date.html#subYear()", "Date::subYears()()": "class-cake.i18n.date.html#subYears()", "Date::subYearsWithOverflow()()": "class-cake.i18n.date.html#subYearsWithOverflow()", "Date::subYearWithOverflow()()": "class-cake.i18n.date.html#subYearWithOverflow()", "Date::timeAgoInWords()()": "class-cake.i18n.date.html#timeAgoInWords()", "Date::timestamp()()": "class-cake.i18n.date.html#timestamp()", "Date::timezone()()": "class-cake.i18n.date.html#timezone()", "Date::toAtomString()()": "class-cake.i18n.date.html#toAtomString()", "Date::toCookieString()()": "class-cake.i18n.date.html#toCookieString()", "Date::toDateString()()": "class-cake.i18n.date.html#toDateString()", "Date::toDateTimeString()()": "class-cake.i18n.date.html#toDateTimeString()", "Date::today()()": "class-cake.i18n.date.html#today()", "Date::toDayDateTimeString()()": "class-cake.i18n.date.html#toDayDateTimeString()", "Date::toFormattedDateString()()": "class-cake.i18n.date.html#toFormattedDateString()", "Date::toImmutable()()": "class-cake.i18n.date.html#toImmutable()", "Date::toIso8601String()()": "class-cake.i18n.date.html#toIso8601String()", "Date::tomorrow()()": "class-cake.i18n.date.html#tomorrow()", "Date::toQuarter()()": "class-cake.i18n.date.html#toQuarter()", "Date::toRfc1036String()()": "class-cake.i18n.date.html#toRfc1036String()", "Date::toRfc1123String()()": "class-cake.i18n.date.html#toRfc1123String()", "Date::toRfc2822String()()": "class-cake.i18n.date.html#toRfc2822String()", "Date::toRfc3339String()()": "class-cake.i18n.date.html#toRfc3339String()", "Date::toRfc822String()()": "class-cake.i18n.date.html#toRfc822String()", "Date::toRfc850String()()": "class-cake.i18n.date.html#toRfc850String()", "Date::toRssString()()": "class-cake.i18n.date.html#toRssString()", "Date::toTimeString()()": "class-cake.i18n.date.html#toTimeString()", "Date::toUnixString()()": "class-cake.i18n.date.html#toUnixString()", "Date::toW3cString()()": "class-cake.i18n.date.html#toW3cString()", "Date::toWeek()()": "class-cake.i18n.date.html#toWeek()", "Date::tz()()": "class-cake.i18n.date.html#tz()", "Date::wasWithinLast()()": "class-cake.i18n.date.html#wasWithinLast()", "Date::year()()": "class-cake.i18n.date.html#year()", "Date::yesterday()()": "class-cake.i18n.date.html#yesterday()", "DateTimeFractionalType (class)": "class-cake.database.type.datetimefractionaltype.html", "DateTimeFractionalType::$_className": "class-cake.database.type.datetimefractionaltype.html#$_className", "DateTimeFractionalType::$_format": "class-cake.database.type.datetimefractionaltype.html#$_format", "DateTimeFractionalType::$_localeMarshalFormat": "class-cake.database.type.datetimefractionaltype.html#$_localeMarshalFormat", "DateTimeFractionalType::$_marshalFormats": "class-cake.database.type.datetimefractionaltype.html#$_marshalFormats", "DateTimeFractionalType::$_name": "class-cake.database.type.datetimefractionaltype.html#$_name", "DateTimeFractionalType::$_useLocaleMarshal": "class-cake.database.type.datetimefractionaltype.html#$_useLocaleMarshal", "DateTimeFractionalType::$dbTimezone": "class-cake.database.type.datetimefractionaltype.html#$dbTimezone", "DateTimeFractionalType::$defaultTimezone": "class-cake.database.type.datetimefractionaltype.html#$defaultTimezone", "DateTimeFractionalType::$keepDatabaseTimezone": "class-cake.database.type.datetimefractionaltype.html#$keepDatabaseTimezone", "DateTimeFractionalType::$setToDateStart": "class-cake.database.type.datetimefractionaltype.html#$setToDateStart", "DateTimeFractionalType::$userTimezone": "class-cake.database.type.datetimefractionaltype.html#$userTimezone", "DateTimeFractionalType::__construct()()": "class-cake.database.type.datetimefractionaltype.html#__construct()", "DateTimeFractionalType::_parseLocaleValue()()": "class-cake.database.type.datetimefractionaltype.html#_parseLocaleValue()", "DateTimeFractionalType::_parseValue()()": "class-cake.database.type.datetimefractionaltype.html#_parseValue()", "DateTimeFractionalType::_setClassName()()": "class-cake.database.type.datetimefractionaltype.html#_setClassName()", "DateTimeFractionalType::getBaseType()()": "class-cake.database.type.datetimefractionaltype.html#getBaseType()", "DateTimeFractionalType::getDateTimeClassName()()": "class-cake.database.type.datetimefractionaltype.html#getDateTimeClassName()", "DateTimeFractionalType::getName()()": "class-cake.database.type.datetimefractionaltype.html#getName()", "DateTimeFractionalType::manyToPHP()()": "class-cake.database.type.datetimefractionaltype.html#manyToPHP()", "DateTimeFractionalType::marshal()()": "class-cake.database.type.datetimefractionaltype.html#marshal()", "DateTimeFractionalType::newId()()": "class-cake.database.type.datetimefractionaltype.html#newId()", "DateTimeFractionalType::setDatabaseTimezone()()": "class-cake.database.type.datetimefractionaltype.html#setDatabaseTimezone()", "DateTimeFractionalType::setKeepDatabaseTimezone()()": "class-cake.database.type.datetimefractionaltype.html#setKeepDatabaseTimezone()", "DateTimeFractionalType::setLocaleFormat()()": "class-cake.database.type.datetimefractionaltype.html#setLocaleFormat()", "DateTimeFractionalType::setTimezone()()": "class-cake.database.type.datetimefractionaltype.html#setTimezone()", "DateTimeFractionalType::setUserTimezone()()": "class-cake.database.type.datetimefractionaltype.html#setUserTimezone()", "DateTimeFractionalType::toDatabase()()": "class-cake.database.type.datetimefractionaltype.html#toDatabase()", "DateTimeFractionalType::toPHP()()": "class-cake.database.type.datetimefractionaltype.html#toPHP()", "DateTimeFractionalType::toStatement()()": "class-cake.database.type.datetimefractionaltype.html#toStatement()", "DateTimeFractionalType::useImmutable()()": "class-cake.database.type.datetimefractionaltype.html#useImmutable()", "DateTimeFractionalType::useLocaleParser()()": "class-cake.database.type.datetimefractionaltype.html#useLocaleParser()", "DateTimeFractionalType::useMutable()()": "class-cake.database.type.datetimefractionaltype.html#useMutable()", "DateTimeTimezoneType (class)": "class-cake.database.type.datetimetimezonetype.html", "DateTimeTimezoneType::$_className": "class-cake.database.type.datetimetimezonetype.html#$_className", "DateTimeTimezoneType::$_format": "class-cake.database.type.datetimetimezonetype.html#$_format", "DateTimeTimezoneType::$_localeMarshalFormat": "class-cake.database.type.datetimetimezonetype.html#$_localeMarshalFormat", "DateTimeTimezoneType::$_marshalFormats": "class-cake.database.type.datetimetimezonetype.html#$_marshalFormats", "DateTimeTimezoneType::$_name": "class-cake.database.type.datetimetimezonetype.html#$_name", "DateTimeTimezoneType::$_useLocaleMarshal": "class-cake.database.type.datetimetimezonetype.html#$_useLocaleMarshal", "DateTimeTimezoneType::$dbTimezone": "class-cake.database.type.datetimetimezonetype.html#$dbTimezone", "DateTimeTimezoneType::$defaultTimezone": "class-cake.database.type.datetimetimezonetype.html#$defaultTimezone", "DateTimeTimezoneType::$keepDatabaseTimezone": "class-cake.database.type.datetimetimezonetype.html#$keepDatabaseTimezone", "DateTimeTimezoneType::$setToDateStart": "class-cake.database.type.datetimetimezonetype.html#$setToDateStart", "DateTimeTimezoneType::$userTimezone": "class-cake.database.type.datetimetimezonetype.html#$userTimezone", "DateTimeTimezoneType::__construct()()": "class-cake.database.type.datetimetimezonetype.html#__construct()", "DateTimeTimezoneType::_parseLocaleValue()()": "class-cake.database.type.datetimetimezonetype.html#_parseLocaleValue()", "DateTimeTimezoneType::_parseValue()()": "class-cake.database.type.datetimetimezonetype.html#_parseValue()", "DateTimeTimezoneType::_setClassName()()": "class-cake.database.type.datetimetimezonetype.html#_setClassName()", "DateTimeTimezoneType::getBaseType()()": "class-cake.database.type.datetimetimezonetype.html#getBaseType()", "DateTimeTimezoneType::getDateTimeClassName()()": "class-cake.database.type.datetimetimezonetype.html#getDateTimeClassName()", "DateTimeTimezoneType::getName()()": "class-cake.database.type.datetimetimezonetype.html#getName()", "DateTimeTimezoneType::manyToPHP()()": "class-cake.database.type.datetimetimezonetype.html#manyToPHP()", "DateTimeTimezoneType::marshal()()": "class-cake.database.type.datetimetimezonetype.html#marshal()", "DateTimeTimezoneType::newId()()": "class-cake.database.type.datetimetimezonetype.html#newId()", "DateTimeTimezoneType::setDatabaseTimezone()()": "class-cake.database.type.datetimetimezonetype.html#setDatabaseTimezone()", "DateTimeTimezoneType::setKeepDatabaseTimezone()()": "class-cake.database.type.datetimetimezonetype.html#setKeepDatabaseTimezone()", "DateTimeTimezoneType::setLocaleFormat()()": "class-cake.database.type.datetimetimezonetype.html#setLocaleFormat()", "DateTimeTimezoneType::setTimezone()()": "class-cake.database.type.datetimetimezonetype.html#setTimezone()", "DateTimeTimezoneType::setUserTimezone()()": "class-cake.database.type.datetimetimezonetype.html#setUserTimezone()", "DateTimeTimezoneType::toDatabase()()": "class-cake.database.type.datetimetimezonetype.html#toDatabase()", "DateTimeTimezoneType::toPHP()()": "class-cake.database.type.datetimetimezonetype.html#toPHP()", "DateTimeTimezoneType::toStatement()()": "class-cake.database.type.datetimetimezonetype.html#toStatement()", "DateTimeTimezoneType::useImmutable()()": "class-cake.database.type.datetimetimezonetype.html#useImmutable()", "DateTimeTimezoneType::useLocaleParser()()": "class-cake.database.type.datetimetimezonetype.html#useLocaleParser()", "DateTimeTimezoneType::useMutable()()": "class-cake.database.type.datetimetimezonetype.html#useMutable()", "DateTimeType (class)": "class-cake.database.type.datetimetype.html", "DateTimeType::$_className": "class-cake.database.type.datetimetype.html#$_className", "DateTimeType::$_format": "class-cake.database.type.datetimetype.html#$_format", "DateTimeType::$_localeMarshalFormat": "class-cake.database.type.datetimetype.html#$_localeMarshalFormat", "DateTimeType::$_marshalFormats": "class-cake.database.type.datetimetype.html#$_marshalFormats", "DateTimeType::$_name": "class-cake.database.type.datetimetype.html#$_name", "DateTimeType::$_useLocaleMarshal": "class-cake.database.type.datetimetype.html#$_useLocaleMarshal", "DateTimeType::$dbTimezone": "class-cake.database.type.datetimetype.html#$dbTimezone", "DateTimeType::$defaultTimezone": "class-cake.database.type.datetimetype.html#$defaultTimezone", "DateTimeType::$keepDatabaseTimezone": "class-cake.database.type.datetimetype.html#$keepDatabaseTimezone", "DateTimeType::$setToDateStart": "class-cake.database.type.datetimetype.html#$setToDateStart", "DateTimeType::$userTimezone": "class-cake.database.type.datetimetype.html#$userTimezone", "DateTimeType::__construct()()": "class-cake.database.type.datetimetype.html#__construct()", "DateTimeType::_parseLocaleValue()()": "class-cake.database.type.datetimetype.html#_parseLocaleValue()", "DateTimeType::_parseValue()()": "class-cake.database.type.datetimetype.html#_parseValue()", "DateTimeType::_setClassName()()": "class-cake.database.type.datetimetype.html#_setClassName()", "DateTimeType::getBaseType()()": "class-cake.database.type.datetimetype.html#getBaseType()", "DateTimeType::getDateTimeClassName()()": "class-cake.database.type.datetimetype.html#getDateTimeClassName()", "DateTimeType::getName()()": "class-cake.database.type.datetimetype.html#getName()", "DateTimeType::manyToPHP()()": "class-cake.database.type.datetimetype.html#manyToPHP()", "DateTimeType::marshal()()": "class-cake.database.type.datetimetype.html#marshal()", "DateTimeType::newId()()": "class-cake.database.type.datetimetype.html#newId()", "DateTimeType::setDatabaseTimezone()()": "class-cake.database.type.datetimetype.html#setDatabaseTimezone()", "DateTimeType::setKeepDatabaseTimezone()()": "class-cake.database.type.datetimetype.html#setKeepDatabaseTimezone()", "DateTimeType::setLocaleFormat()()": "class-cake.database.type.datetimetype.html#setLocaleFormat()", "DateTimeType::setTimezone()()": "class-cake.database.type.datetimetype.html#setTimezone()", "DateTimeType::setUserTimezone()()": "class-cake.database.type.datetimetype.html#setUserTimezone()", "DateTimeType::toDatabase()()": "class-cake.database.type.datetimetype.html#toDatabase()", "DateTimeType::toPHP()()": "class-cake.database.type.datetimetype.html#toPHP()", "DateTimeType::toStatement()()": "class-cake.database.type.datetimetype.html#toStatement()", "DateTimeType::useImmutable()()": "class-cake.database.type.datetimetype.html#useImmutable()", "DateTimeType::useLocaleParser()()": "class-cake.database.type.datetimetype.html#useLocaleParser()", "DateTimeType::useMutable()()": "class-cake.database.type.datetimetype.html#useMutable()", "DateTimeWidget (class)": "class-cake.view.widget.datetimewidget.html", "DateTimeWidget::$_templates": "class-cake.view.widget.datetimewidget.html#$_templates", "DateTimeWidget::$defaults": "class-cake.view.widget.datetimewidget.html#$defaults", "DateTimeWidget::$defaultStep": "class-cake.view.widget.datetimewidget.html#$defaultStep", "DateTimeWidget::$formatMap": "class-cake.view.widget.datetimewidget.html#$formatMap", "DateTimeWidget::__construct()()": "class-cake.view.widget.datetimewidget.html#__construct()", "DateTimeWidget::formatDateTime()()": "class-cake.view.widget.datetimewidget.html#formatDateTime()", "DateTimeWidget::mergeDefaults()()": "class-cake.view.widget.datetimewidget.html#mergeDefaults()", "DateTimeWidget::render()()": "class-cake.view.widget.datetimewidget.html#render()", "DateTimeWidget::secureFields()()": "class-cake.view.widget.datetimewidget.html#secureFields()", "DateTimeWidget::setMaxLength()()": "class-cake.view.widget.datetimewidget.html#setMaxLength()", "DateTimeWidget::setRequired()()": "class-cake.view.widget.datetimewidget.html#setRequired()", "DateTimeWidget::setStep()()": "class-cake.view.widget.datetimewidget.html#setStep()", "DateType (class)": "class-cake.database.type.datetype.html", "DateType::$_className": "class-cake.database.type.datetype.html#$_className", "DateType::$_format": "class-cake.database.type.datetype.html#$_format", "DateType::$_localeMarshalFormat": "class-cake.database.type.datetype.html#$_localeMarshalFormat", "DateType::$_marshalFormats": "class-cake.database.type.datetype.html#$_marshalFormats", "DateType::$_name": "class-cake.database.type.datetype.html#$_name", "DateType::$_useLocaleMarshal": "class-cake.database.type.datetype.html#$_useLocaleMarshal", "DateType::$dbTimezone": "class-cake.database.type.datetype.html#$dbTimezone", "DateType::$defaultTimezone": "class-cake.database.type.datetype.html#$defaultTimezone", "DateType::$keepDatabaseTimezone": "class-cake.database.type.datetype.html#$keepDatabaseTimezone", "DateType::$setToDateStart": "class-cake.database.type.datetype.html#$setToDateStart", "DateType::$userTimezone": "class-cake.database.type.datetype.html#$userTimezone", "DateType::__construct()()": "class-cake.database.type.datetype.html#__construct()", "DateType::_parseLocaleValue()()": "class-cake.database.type.datetype.html#_parseLocaleValue()", "DateType::_parseValue()()": "class-cake.database.type.datetype.html#_parseValue()", "DateType::_setClassName()()": "class-cake.database.type.datetype.html#_setClassName()", "DateType::getBaseType()()": "class-cake.database.type.datetype.html#getBaseType()", "DateType::getDateTimeClassName()()": "class-cake.database.type.datetype.html#getDateTimeClassName()", "DateType::getName()()": "class-cake.database.type.datetype.html#getName()", "DateType::manyToPHP()()": "class-cake.database.type.datetype.html#manyToPHP()", "DateType::marshal()()": "class-cake.database.type.datetype.html#marshal()", "DateType::newId()()": "class-cake.database.type.datetype.html#newId()", "DateType::setDatabaseTimezone()()": "class-cake.database.type.datetype.html#setDatabaseTimezone()", "DateType::setKeepDatabaseTimezone()()": "class-cake.database.type.datetype.html#setKeepDatabaseTimezone()", "DateType::setLocaleFormat()()": "class-cake.database.type.datetype.html#setLocaleFormat()", "DateType::setTimezone()()": "class-cake.database.type.datetype.html#setTimezone()", "DateType::setUserTimezone()()": "class-cake.database.type.datetype.html#setUserTimezone()", "DateType::toDatabase()()": "class-cake.database.type.datetype.html#toDatabase()", "DateType::toPHP()()": "class-cake.database.type.datetype.html#toPHP()", "DateType::toStatement()()": "class-cake.database.type.datetype.html#toStatement()", "DateType::useImmutable()()": "class-cake.database.type.datetype.html#useImmutable()", "DateType::useLocaleParser()()": "class-cake.database.type.datetype.html#useLocaleParser()", "DateType::useMutable()()": "class-cake.database.type.datetype.html#useMutable()", "DebugContext (class)": "class-cake.error.debug.debugcontext.html", "DebugContext::__construct()()": "class-cake.error.debug.debugcontext.html#__construct()", "DebugContext::getReferenceId()()": "class-cake.error.debug.debugcontext.html#getReferenceId()", "DebugContext::hasReference()()": "class-cake.error.debug.debugcontext.html#hasReference()", "DebugContext::remainingDepth()()": "class-cake.error.debug.debugcontext.html#remainingDepth()", "DebugContext::withAddedDepth()()": "class-cake.error.debug.debugcontext.html#withAddedDepth()", "Debugger (class)": "class-cake.error.debugger.html", "Debugger::$_config": "class-cake.error.debugger.html#$_config", "Debugger::$_configInitialized": "class-cake.error.debugger.html#$_configInitialized", "Debugger::$_data": "class-cake.error.debugger.html#$_data", "Debugger::$_defaultConfig": "class-cake.error.debugger.html#$_defaultConfig", "Debugger::$_outputFormat": "class-cake.error.debugger.html#$_outputFormat", "Debugger::$_templates": "class-cake.error.debugger.html#$_templates", "Debugger::$editors": "class-cake.error.debugger.html#$editors", "Debugger::$renderers": "class-cake.error.debugger.html#$renderers", "Debugger::__construct()()": "class-cake.error.debugger.html#__construct()", "Debugger::_configDelete()()": "class-cake.error.debugger.html#_configDelete()", "Debugger::_configRead()()": "class-cake.error.debugger.html#_configRead()", "Debugger::_configWrite()()": "class-cake.error.debugger.html#_configWrite()", "Debugger::_highlight()()": "class-cake.error.debugger.html#_highlight()", "Debugger::addEditor()()": "class-cake.error.debugger.html#addEditor()", "Debugger::addFormat()()": "class-cake.error.debugger.html#addFormat()", "Debugger::addRenderer()()": "class-cake.error.debugger.html#addRenderer()", "Debugger::checkSecurityKeys()()": "class-cake.error.debugger.html#checkSecurityKeys()", "Debugger::configInstance()()": "class-cake.error.debugger.html#configInstance()", "Debugger::configShallow()()": "class-cake.error.debugger.html#configShallow()", "Debugger::dump()()": "class-cake.error.debugger.html#dump()", "Debugger::editorUrl()()": "class-cake.error.debugger.html#editorUrl()", "Debugger::excerpt()()": "class-cake.error.debugger.html#excerpt()", "Debugger::export()()": "class-cake.error.debugger.html#export()", "Debugger::exportArray()()": "class-cake.error.debugger.html#exportArray()", "Debugger::exportObject()()": "class-cake.error.debugger.html#exportObject()", "Debugger::exportVar()()": "class-cake.error.debugger.html#exportVar()", "Debugger::exportVarAsNodes()()": "class-cake.error.debugger.html#exportVarAsNodes()", "Debugger::exportVarAsPlainText()()": "class-cake.error.debugger.html#exportVarAsPlainText()", "Debugger::formatHtmlMessage()()": "class-cake.error.debugger.html#formatHtmlMessage()", "Debugger::formatTrace()()": "class-cake.error.debugger.html#formatTrace()", "Debugger::getConfig()()": "class-cake.error.debugger.html#getConfig()", "Debugger::getConfigOrFail()()": "class-cake.error.debugger.html#getConfigOrFail()", "Debugger::getExportFormatter()()": "class-cake.error.debugger.html#getExportFormatter()", "Debugger::getInstance()()": "class-cake.error.debugger.html#getInstance()", "Debugger::getOutputFormat()()": "class-cake.error.debugger.html#getOutputFormat()", "Debugger::getType()()": "class-cake.error.debugger.html#getType()", "Debugger::log()()": "class-cake.error.debugger.html#log()", "Debugger::outputError()()": "class-cake.error.debugger.html#outputError()", "Debugger::outputMask()()": "class-cake.error.debugger.html#outputMask()", "Debugger::printVar()()": "class-cake.error.debugger.html#printVar()", "Debugger::setConfig()()": "class-cake.error.debugger.html#setConfig()", "Debugger::setEditor()()": "class-cake.error.debugger.html#setEditor()", "Debugger::setOutputFormat()()": "class-cake.error.debugger.html#setOutputFormat()", "Debugger::setOutputMask()()": "class-cake.error.debugger.html#setOutputMask()", "Debugger::trace()()": "class-cake.error.debugger.html#trace()", "Debugger::trimPath()()": "class-cake.error.debugger.html#trimPath()", "DebugTransport (class)": "class-cake.mailer.transport.debugtransport.html", "DebugTransport::$_config": "class-cake.mailer.transport.debugtransport.html#$_config", "DebugTransport::$_configInitialized": "class-cake.mailer.transport.debugtransport.html#$_configInitialized", "DebugTransport::$_defaultConfig": "class-cake.mailer.transport.debugtransport.html#$_defaultConfig", "DebugTransport::__construct()()": "class-cake.mailer.transport.debugtransport.html#__construct()", "DebugTransport::_configDelete()()": "class-cake.mailer.transport.debugtransport.html#_configDelete()", "DebugTransport::_configRead()()": "class-cake.mailer.transport.debugtransport.html#_configRead()", "DebugTransport::_configWrite()()": "class-cake.mailer.transport.debugtransport.html#_configWrite()", "DebugTransport::checkRecipient()()": "class-cake.mailer.transport.debugtransport.html#checkRecipient()", "DebugTransport::configShallow()()": "class-cake.mailer.transport.debugtransport.html#configShallow()", "DebugTransport::getConfig()()": "class-cake.mailer.transport.debugtransport.html#getConfig()", "DebugTransport::getConfigOrFail()()": "class-cake.mailer.transport.debugtransport.html#getConfigOrFail()", "DebugTransport::send()()": "class-cake.mailer.transport.debugtransport.html#send()", "DebugTransport::setConfig()()": "class-cake.mailer.transport.debugtransport.html#setConfig()", "DecimalType (class)": "class-cake.database.type.decimaltype.html", "DecimalType::$_name": "class-cake.database.type.decimaltype.html#$_name", "DecimalType::$_useLocaleParser": "class-cake.database.type.decimaltype.html#$_useLocaleParser", "DecimalType::$numberClass": "class-cake.database.type.decimaltype.html#$numberClass", "DecimalType::__construct()()": "class-cake.database.type.decimaltype.html#__construct()", "DecimalType::_parseValue()()": "class-cake.database.type.decimaltype.html#_parseValue()", "DecimalType::getBaseType()()": "class-cake.database.type.decimaltype.html#getBaseType()", "DecimalType::getName()()": "class-cake.database.type.decimaltype.html#getName()", "DecimalType::manyToPHP()()": "class-cake.database.type.decimaltype.html#manyToPHP()", "DecimalType::marshal()()": "class-cake.database.type.decimaltype.html#marshal()", "DecimalType::newId()()": "class-cake.database.type.decimaltype.html#newId()", "DecimalType::toDatabase()()": "class-cake.database.type.decimaltype.html#toDatabase()", "DecimalType::toPHP()()": "class-cake.database.type.decimaltype.html#toPHP()", "DecimalType::toStatement()()": "class-cake.database.type.decimaltype.html#toStatement()", "DecimalType::useLocaleParser()()": "class-cake.database.type.decimaltype.html#useLocaleParser()", "DefaultFormatter (class)": "class-cake.log.formatter.defaultformatter.html", "DefaultFormatter::$_config": "class-cake.log.formatter.defaultformatter.html#$_config", "DefaultFormatter::$_configInitialized": "class-cake.log.formatter.defaultformatter.html#$_configInitialized", "DefaultFormatter::$_defaultConfig": "class-cake.log.formatter.defaultformatter.html#$_defaultConfig", "DefaultFormatter::__construct()()": "class-cake.log.formatter.defaultformatter.html#__construct()", "DefaultFormatter::_configDelete()()": "class-cake.log.formatter.defaultformatter.html#_configDelete()", "DefaultFormatter::_configRead()()": "class-cake.log.formatter.defaultformatter.html#_configRead()", "DefaultFormatter::_configWrite()()": "class-cake.log.formatter.defaultformatter.html#_configWrite()", "DefaultFormatter::configShallow()()": "class-cake.log.formatter.defaultformatter.html#configShallow()", "DefaultFormatter::format()()": "class-cake.log.formatter.defaultformatter.html#format()", "DefaultFormatter::getConfig()()": "class-cake.log.formatter.defaultformatter.html#getConfig()", "DefaultFormatter::getConfigOrFail()()": "class-cake.log.formatter.defaultformatter.html#getConfigOrFail()", "DefaultFormatter::setConfig()()": "class-cake.log.formatter.defaultformatter.html#setConfig()", "DefaultPasswordHasher (class)": "class-cake.auth.defaultpasswordhasher.html", "DefaultPasswordHasher::$_config": "class-cake.auth.defaultpasswordhasher.html#$_config", "DefaultPasswordHasher::$_configInitialized": "class-cake.auth.defaultpasswordhasher.html#$_configInitialized", "DefaultPasswordHasher::$_defaultConfig": "class-cake.auth.defaultpasswordhasher.html#$_defaultConfig", "DefaultPasswordHasher::__construct()()": "class-cake.auth.defaultpasswordhasher.html#__construct()", "DefaultPasswordHasher::_configDelete()()": "class-cake.auth.defaultpasswordhasher.html#_configDelete()", "DefaultPasswordHasher::_configRead()()": "class-cake.auth.defaultpasswordhasher.html#_configRead()", "DefaultPasswordHasher::_configWrite()()": "class-cake.auth.defaultpasswordhasher.html#_configWrite()", "DefaultPasswordHasher::check()()": "class-cake.auth.defaultpasswordhasher.html#check()", "DefaultPasswordHasher::configShallow()()": "class-cake.auth.defaultpasswordhasher.html#configShallow()", "DefaultPasswordHasher::getConfig()()": "class-cake.auth.defaultpasswordhasher.html#getConfig()", "DefaultPasswordHasher::getConfigOrFail()()": "class-cake.auth.defaultpasswordhasher.html#getConfigOrFail()", "DefaultPasswordHasher::hash()()": "class-cake.auth.defaultpasswordhasher.html#hash()", "DefaultPasswordHasher::needsRehash()()": "class-cake.auth.defaultpasswordhasher.html#needsRehash()", "DefaultPasswordHasher::setConfig()()": "class-cake.auth.defaultpasswordhasher.html#setConfig()", "DependentDeleteHelper (class)": "class-cake.orm.association.dependentdeletehelper.html", "DependentDeleteHelper::cascadeDelete()()": "class-cake.orm.association.dependentdeletehelper.html#cascadeDelete()", "Digest (class)": "class-cake.http.client.auth.digest.html", "Digest::$_client": "class-cake.http.client.auth.digest.html#$_client", "Digest::__construct()()": "class-cake.http.client.auth.digest.html#__construct()", "Digest::_generateHeader()()": "class-cake.http.client.auth.digest.html#_generateHeader()", "Digest::_getServerInfo()()": "class-cake.http.client.auth.digest.html#_getServerInfo()", "Digest::authentication()()": "class-cake.http.client.auth.digest.html#authentication()", "DigestAuthenticate (class)": "class-cake.auth.digestauthenticate.html", "DigestAuthenticate::$_config": "class-cake.auth.digestauthenticate.html#$_config", "DigestAuthenticate::$_configInitialized": "class-cake.auth.digestauthenticate.html#$_configInitialized", "DigestAuthenticate::$_defaultConfig": "class-cake.auth.digestauthenticate.html#$_defaultConfig", "DigestAuthenticate::$_needsPasswordRehash": "class-cake.auth.digestauthenticate.html#$_needsPasswordRehash", "DigestAuthenticate::$_passwordHasher": "class-cake.auth.digestauthenticate.html#$_passwordHasher", "DigestAuthenticate::$_registry": "class-cake.auth.digestauthenticate.html#$_registry", "DigestAuthenticate::$_tableLocator": "class-cake.auth.digestauthenticate.html#$_tableLocator", "DigestAuthenticate::$defaultTable": "class-cake.auth.digestauthenticate.html#$defaultTable", "DigestAuthenticate::__construct()()": "class-cake.auth.digestauthenticate.html#__construct()", "DigestAuthenticate::_configDelete()()": "class-cake.auth.digestauthenticate.html#_configDelete()", "DigestAuthenticate::_configRead()()": "class-cake.auth.digestauthenticate.html#_configRead()", "DigestAuthenticate::_configWrite()()": "class-cake.auth.digestauthenticate.html#_configWrite()", "DigestAuthenticate::_findUser()()": "class-cake.auth.digestauthenticate.html#_findUser()", "DigestAuthenticate::_getDigest()()": "class-cake.auth.digestauthenticate.html#_getDigest()", "DigestAuthenticate::_query()()": "class-cake.auth.digestauthenticate.html#_query()", "DigestAuthenticate::authenticate()()": "class-cake.auth.digestauthenticate.html#authenticate()", "DigestAuthenticate::configShallow()()": "class-cake.auth.digestauthenticate.html#configShallow()", "DigestAuthenticate::fetchTable()()": "class-cake.auth.digestauthenticate.html#fetchTable()", "DigestAuthenticate::generateNonce()()": "class-cake.auth.digestauthenticate.html#generateNonce()", "DigestAuthenticate::generateResponseHash()()": "class-cake.auth.digestauthenticate.html#generateResponseHash()", "DigestAuthenticate::getConfig()()": "class-cake.auth.digestauthenticate.html#getConfig()", "DigestAuthenticate::getConfigOrFail()()": "class-cake.auth.digestauthenticate.html#getConfigOrFail()", "DigestAuthenticate::getTableLocator()()": "class-cake.auth.digestauthenticate.html#getTableLocator()", "DigestAuthenticate::getUser()()": "class-cake.auth.digestauthenticate.html#getUser()", "DigestAuthenticate::implementedEvents()()": "class-cake.auth.digestauthenticate.html#implementedEvents()", "DigestAuthenticate::loginHeaders()()": "class-cake.auth.digestauthenticate.html#loginHeaders()", "DigestAuthenticate::needsPasswordRehash()()": "class-cake.auth.digestauthenticate.html#needsPasswordRehash()", "DigestAuthenticate::parseAuthData()()": "class-cake.auth.digestauthenticate.html#parseAuthData()", "DigestAuthenticate::password()()": "class-cake.auth.digestauthenticate.html#password()", "DigestAuthenticate::passwordHasher()()": "class-cake.auth.digestauthenticate.html#passwordHasher()", "DigestAuthenticate::setConfig()()": "class-cake.auth.digestauthenticate.html#setConfig()", "DigestAuthenticate::setTableLocator()()": "class-cake.auth.digestauthenticate.html#setTableLocator()", "DigestAuthenticate::unauthenticated()()": "class-cake.auth.digestauthenticate.html#unauthenticated()", "DigestAuthenticate::validNonce()()": "class-cake.auth.digestauthenticate.html#validNonce()", "DoublePassDecoratorMiddleware (class)": "class-cake.http.middleware.doublepassdecoratormiddleware.html", "DoublePassDecoratorMiddleware::$callable": "class-cake.http.middleware.doublepassdecoratormiddleware.html#$callable", "DoublePassDecoratorMiddleware::__construct()()": "class-cake.http.middleware.doublepassdecoratormiddleware.html#__construct()", "DoublePassDecoratorMiddleware::getCallable()()": "class-cake.http.middleware.doublepassdecoratormiddleware.html#getCallable()", "DoublePassDecoratorMiddleware::process()()": "class-cake.http.middleware.doublepassdecoratormiddleware.html#process()", "Driver (class)": "class-cake.database.driver.html", "Driver::$_autoQuoting": "class-cake.database.driver.html#$_autoQuoting", "Driver::$_baseConfig": "class-cake.database.driver.html#$_baseConfig", "Driver::$_config": "class-cake.database.driver.html#$_config", "Driver::$_connection": "class-cake.database.driver.html#$_connection", "Driver::$_version": "class-cake.database.driver.html#$_version", "Driver::$connectRetries": "class-cake.database.driver.html#$connectRetries", "Driver::__construct()()": "class-cake.database.driver.html#__construct()", "Driver::__debugInfo()()": "class-cake.database.driver.html#__debugInfo()", "Driver::__destruct()()": "class-cake.database.driver.html#__destruct()", "Driver::_connect()()": "class-cake.database.driver.html#_connect()", "Driver::beginTransaction()()": "class-cake.database.driver.html#beginTransaction()", "Driver::commitTransaction()()": "class-cake.database.driver.html#commitTransaction()", "Driver::compileQuery()()": "class-cake.database.driver.html#compileQuery()", "Driver::connect()()": "class-cake.database.driver.html#connect()", "Driver::disableAutoQuoting()()": "class-cake.database.driver.html#disableAutoQuoting()", "Driver::disableForeignKeySQL()()": "class-cake.database.driver.html#disableForeignKeySQL()", "Driver::disconnect()()": "class-cake.database.driver.html#disconnect()", "Driver::enableAutoQuoting()()": "class-cake.database.driver.html#enableAutoQuoting()", "Driver::enabled()()": "class-cake.database.driver.html#enabled()", "Driver::enableForeignKeySQL()()": "class-cake.database.driver.html#enableForeignKeySQL()", "Driver::getConnection()()": "class-cake.database.driver.html#getConnection()", "Driver::getConnectRetries()()": "class-cake.database.driver.html#getConnectRetries()", "Driver::getMaxAliasLength()()": "class-cake.database.driver.html#getMaxAliasLength()", "Driver::inTransaction()()": "class-cake.database.driver.html#inTransaction()", "Driver::isAutoQuotingEnabled()()": "class-cake.database.driver.html#isAutoQuotingEnabled()", "Driver::isConnected()()": "class-cake.database.driver.html#isConnected()", "Driver::lastInsertId()()": "class-cake.database.driver.html#lastInsertId()", "Driver::newCompiler()()": "class-cake.database.driver.html#newCompiler()", "Driver::newTableSchema()()": "class-cake.database.driver.html#newTableSchema()", "Driver::prepare()()": "class-cake.database.driver.html#prepare()", "Driver::queryTranslator()()": "class-cake.database.driver.html#queryTranslator()", "Driver::quote()()": "class-cake.database.driver.html#quote()", "Driver::quoteIdentifier()()": "class-cake.database.driver.html#quoteIdentifier()", "Driver::releaseSavePointSQL()()": "class-cake.database.driver.html#releaseSavePointSQL()", "Driver::rollbackSavePointSQL()()": "class-cake.database.driver.html#rollbackSavePointSQL()", "Driver::rollbackTransaction()()": "class-cake.database.driver.html#rollbackTransaction()", "Driver::savePointSQL()()": "class-cake.database.driver.html#savePointSQL()", "Driver::schema()()": "class-cake.database.driver.html#schema()", "Driver::schemaDialect()()": "class-cake.database.driver.html#schemaDialect()", "Driver::schemaValue()()": "class-cake.database.driver.html#schemaValue()", "Driver::setConnection()()": "class-cake.database.driver.html#setConnection()", "Driver::supports()()": "class-cake.database.driver.html#supports()", "Driver::supportsCTEs()()": "class-cake.database.driver.html#supportsCTEs()", "Driver::supportsDynamicConstraints()()": "class-cake.database.driver.html#supportsDynamicConstraints()", "Driver::supportsQuoting()()": "class-cake.database.driver.html#supportsQuoting()", "Driver::supportsSavePoints()()": "class-cake.database.driver.html#supportsSavePoints()", "Driver::version()()": "class-cake.database.driver.html#version()", "DriverInterface (interface)": "interface-cake.database.driverinterface.html", "DuplicateNamedRouteException (class)": "class-cake.routing.exception.duplicatenamedrouteexception.html", "EagerLoadable (class)": "class-cake.orm.eagerloadable.html", "EagerLoadable::$_aliasPath": "class-cake.orm.eagerloadable.html#$_aliasPath", "EagerLoadable::$_associations": "class-cake.orm.eagerloadable.html#$_associations", "EagerLoadable::$_canBeJoined": "class-cake.orm.eagerloadable.html#$_canBeJoined", "EagerLoadable::$_config": "class-cake.orm.eagerloadable.html#$_config", "EagerLoadable::$_forMatching": "class-cake.orm.eagerloadable.html#$_forMatching", "EagerLoadable::$_instance": "class-cake.orm.eagerloadable.html#$_instance", "EagerLoadable::$_name": "class-cake.orm.eagerloadable.html#$_name", "EagerLoadable::$_propertyPath": "class-cake.orm.eagerloadable.html#$_propertyPath", "EagerLoadable::$_targetProperty": "class-cake.orm.eagerloadable.html#$_targetProperty", "EagerLoadable::__clone()()": "class-cake.orm.eagerloadable.html#__clone()", "EagerLoadable::__construct()()": "class-cake.orm.eagerloadable.html#__construct()", "EagerLoadable::addAssociation()()": "class-cake.orm.eagerloadable.html#addAssociation()", "EagerLoadable::aliasPath()()": "class-cake.orm.eagerloadable.html#aliasPath()", "EagerLoadable::asContainArray()()": "class-cake.orm.eagerloadable.html#asContainArray()", "EagerLoadable::associations()()": "class-cake.orm.eagerloadable.html#associations()", "EagerLoadable::canBeJoined()()": "class-cake.orm.eagerloadable.html#canBeJoined()", "EagerLoadable::forMatching()()": "class-cake.orm.eagerloadable.html#forMatching()", "EagerLoadable::getConfig()()": "class-cake.orm.eagerloadable.html#getConfig()", "EagerLoadable::instance()()": "class-cake.orm.eagerloadable.html#instance()", "EagerLoadable::propertyPath()()": "class-cake.orm.eagerloadable.html#propertyPath()", "EagerLoadable::setCanBeJoined()()": "class-cake.orm.eagerloadable.html#setCanBeJoined()", "EagerLoadable::setConfig()()": "class-cake.orm.eagerloadable.html#setConfig()", "EagerLoadable::targetProperty()()": "class-cake.orm.eagerloadable.html#targetProperty()", "EagerLoader (class)": "class-cake.orm.eagerloader.html", "EagerLoader::$_aliasList": "class-cake.orm.eagerloader.html#$_aliasList", "EagerLoader::$_autoFields": "class-cake.orm.eagerloader.html#$_autoFields", "EagerLoader::$_containments": "class-cake.orm.eagerloader.html#$_containments", "EagerLoader::$_containOptions": "class-cake.orm.eagerloader.html#$_containOptions", "EagerLoader::$_joinsMap": "class-cake.orm.eagerloader.html#$_joinsMap", "EagerLoader::$_loadExternal": "class-cake.orm.eagerloader.html#$_loadExternal", "EagerLoader::$_matching": "class-cake.orm.eagerloader.html#$_matching", "EagerLoader::$_normalized": "class-cake.orm.eagerloader.html#$_normalized", "EagerLoader::__clone()()": "class-cake.orm.eagerloader.html#__clone()", "EagerLoader::_buildAssociationsMap()()": "class-cake.orm.eagerloader.html#_buildAssociationsMap()", "EagerLoader::_collectKeys()()": "class-cake.orm.eagerloader.html#_collectKeys()", "EagerLoader::_correctStrategy()()": "class-cake.orm.eagerloader.html#_correctStrategy()", "EagerLoader::_fixStrategies()()": "class-cake.orm.eagerloader.html#_fixStrategies()", "EagerLoader::_groupKeys()()": "class-cake.orm.eagerloader.html#_groupKeys()", "EagerLoader::_normalizeContain()()": "class-cake.orm.eagerloader.html#_normalizeContain()", "EagerLoader::_reformatContain()()": "class-cake.orm.eagerloader.html#_reformatContain()", "EagerLoader::_resolveJoins()()": "class-cake.orm.eagerloader.html#_resolveJoins()", "EagerLoader::addToJoinsMap()()": "class-cake.orm.eagerloader.html#addToJoinsMap()", "EagerLoader::associationsMap()()": "class-cake.orm.eagerloader.html#associationsMap()", "EagerLoader::attachableAssociations()()": "class-cake.orm.eagerloader.html#attachableAssociations()", "EagerLoader::attachAssociations()()": "class-cake.orm.eagerloader.html#attachAssociations()", "EagerLoader::clearContain()()": "class-cake.orm.eagerloader.html#clearContain()", "EagerLoader::contain()()": "class-cake.orm.eagerloader.html#contain()", "EagerLoader::disableAutoFields()()": "class-cake.orm.eagerloader.html#disableAutoFields()", "EagerLoader::enableAutoFields()()": "class-cake.orm.eagerloader.html#enableAutoFields()", "EagerLoader::externalAssociations()()": "class-cake.orm.eagerloader.html#externalAssociations()", "EagerLoader::getContain()()": "class-cake.orm.eagerloader.html#getContain()", "EagerLoader::getMatching()()": "class-cake.orm.eagerloader.html#getMatching()", "EagerLoader::isAutoFieldsEnabled()()": "class-cake.orm.eagerloader.html#isAutoFieldsEnabled()", "EagerLoader::loadExternal()()": "class-cake.orm.eagerloader.html#loadExternal()", "EagerLoader::normalized()()": "class-cake.orm.eagerloader.html#normalized()", "EagerLoader::setMatching()()": "class-cake.orm.eagerloader.html#setMatching()", "EavStrategy (class)": "class-cake.orm.behavior.translate.eavstrategy.html", "EavStrategy::$_config": "class-cake.orm.behavior.translate.eavstrategy.html#$_config", "EavStrategy::$_configInitialized": "class-cake.orm.behavior.translate.eavstrategy.html#$_configInitialized", "EavStrategy::$_defaultConfig": "class-cake.orm.behavior.translate.eavstrategy.html#$_defaultConfig", "EavStrategy::$_tableLocator": "class-cake.orm.behavior.translate.eavstrategy.html#$_tableLocator", "EavStrategy::$defaultTable": "class-cake.orm.behavior.translate.eavstrategy.html#$defaultTable", "EavStrategy::$locale": "class-cake.orm.behavior.translate.eavstrategy.html#$locale", "EavStrategy::$table": "class-cake.orm.behavior.translate.eavstrategy.html#$table", "EavStrategy::$translationTable": "class-cake.orm.behavior.translate.eavstrategy.html#$translationTable", "EavStrategy::__construct()()": "class-cake.orm.behavior.translate.eavstrategy.html#__construct()", "EavStrategy::_configDelete()()": "class-cake.orm.behavior.translate.eavstrategy.html#_configDelete()", "EavStrategy::_configRead()()": "class-cake.orm.behavior.translate.eavstrategy.html#_configRead()", "EavStrategy::_configWrite()()": "class-cake.orm.behavior.translate.eavstrategy.html#_configWrite()", "EavStrategy::afterSave()()": "class-cake.orm.behavior.translate.eavstrategy.html#afterSave()", "EavStrategy::beforeFind()()": "class-cake.orm.behavior.translate.eavstrategy.html#beforeFind()", "EavStrategy::beforeSave()()": "class-cake.orm.behavior.translate.eavstrategy.html#beforeSave()", "EavStrategy::buildMarshalMap()()": "class-cake.orm.behavior.translate.eavstrategy.html#buildMarshalMap()", "EavStrategy::bundleTranslatedFields()()": "class-cake.orm.behavior.translate.eavstrategy.html#bundleTranslatedFields()", "EavStrategy::configShallow()()": "class-cake.orm.behavior.translate.eavstrategy.html#configShallow()", "EavStrategy::fetchTable()()": "class-cake.orm.behavior.translate.eavstrategy.html#fetchTable()", "EavStrategy::findExistingTranslations()()": "class-cake.orm.behavior.translate.eavstrategy.html#findExistingTranslations()", "EavStrategy::getConfig()()": "class-cake.orm.behavior.translate.eavstrategy.html#getConfig()", "EavStrategy::getConfigOrFail()()": "class-cake.orm.behavior.translate.eavstrategy.html#getConfigOrFail()", "EavStrategy::getLocale()()": "class-cake.orm.behavior.translate.eavstrategy.html#getLocale()", "EavStrategy::getTableLocator()()": "class-cake.orm.behavior.translate.eavstrategy.html#getTableLocator()", "EavStrategy::getTranslationTable()()": "class-cake.orm.behavior.translate.eavstrategy.html#getTranslationTable()", "EavStrategy::groupTranslations()()": "class-cake.orm.behavior.translate.eavstrategy.html#groupTranslations()", "EavStrategy::rowMapper()()": "class-cake.orm.behavior.translate.eavstrategy.html#rowMapper()", "EavStrategy::setConfig()()": "class-cake.orm.behavior.translate.eavstrategy.html#setConfig()", "EavStrategy::setLocale()()": "class-cake.orm.behavior.translate.eavstrategy.html#setLocale()", "EavStrategy::setTableLocator()()": "class-cake.orm.behavior.translate.eavstrategy.html#setTableLocator()", "EavStrategy::setupAssociations()()": "class-cake.orm.behavior.translate.eavstrategy.html#setupAssociations()", "EavStrategy::translationField()()": "class-cake.orm.behavior.translate.eavstrategy.html#translationField()", "EavStrategy::unsetEmptyFields()()": "class-cake.orm.behavior.translate.eavstrategy.html#unsetEmptyFields()", "Email (class)": "class-cake.mailer.email.html", "Email::$_profile": "class-cake.mailer.email.html#$_profile", "Email::$_transport": "class-cake.mailer.email.html#$_transport", "Email::$message": "class-cake.mailer.email.html#$message", "Email::$messageClass": "class-cake.mailer.email.html#$messageClass", "Email::$renderer": "class-cake.mailer.email.html#$renderer", "Email::__call()()": "class-cake.mailer.email.html#__call()", "Email::__callStatic()()": "class-cake.mailer.email.html#__callStatic()", "Email::__clone()()": "class-cake.mailer.email.html#__clone()", "Email::__construct()()": "class-cake.mailer.email.html#__construct()", "Email::__serialize()()": "class-cake.mailer.email.html#__serialize()", "Email::__unserialize()()": "class-cake.mailer.email.html#__unserialize()", "Email::_logDelivery()()": "class-cake.mailer.email.html#_logDelivery()", "Email::createFromArray()()": "class-cake.mailer.email.html#createFromArray()", "Email::deliver()()": "class-cake.mailer.email.html#deliver()", "Email::flatten()()": "class-cake.mailer.email.html#flatten()", "Email::getMessage()()": "class-cake.mailer.email.html#getMessage()", "Email::getProfile()()": "class-cake.mailer.email.html#getProfile()", "Email::getRenderer()()": "class-cake.mailer.email.html#getRenderer()", "Email::getTransport()()": "class-cake.mailer.email.html#getTransport()", "Email::getViewRenderer()()": "class-cake.mailer.email.html#getViewRenderer()", "Email::getViewVars()()": "class-cake.mailer.email.html#getViewVars()", "Email::jsonSerialize()()": "class-cake.mailer.email.html#jsonSerialize()", "Email::message()()": "class-cake.mailer.email.html#message()", "Email::render()()": "class-cake.mailer.email.html#render()", "Email::reset()()": "class-cake.mailer.email.html#reset()", "Email::send()()": "class-cake.mailer.email.html#send()", "Email::serialize()()": "class-cake.mailer.email.html#serialize()", "Email::setProfile()()": "class-cake.mailer.email.html#setProfile()", "Email::setRenderer()()": "class-cake.mailer.email.html#setRenderer()", "Email::setTransport()()": "class-cake.mailer.email.html#setTransport()", "Email::setViewRenderer()()": "class-cake.mailer.email.html#setViewRenderer()", "Email::setViewVars()()": "class-cake.mailer.email.html#setViewVars()", "Email::unserialize()()": "class-cake.mailer.email.html#unserialize()", "Email::viewBuilder()()": "class-cake.mailer.email.html#viewBuilder()", "EmailTrait (trait)": "trait-cake.testsuite.emailtrait.html", "EncryptedCookieMiddleware (class)": "class-cake.http.middleware.encryptedcookiemiddleware.html", "EncryptedCookieMiddleware::$_validCiphers": "class-cake.http.middleware.encryptedcookiemiddleware.html#$_validCiphers", "EncryptedCookieMiddleware::$cipherType": "class-cake.http.middleware.encryptedcookiemiddleware.html#$cipherType", "EncryptedCookieMiddleware::$cookieNames": "class-cake.http.middleware.encryptedcookiemiddleware.html#$cookieNames", "EncryptedCookieMiddleware::$key": "class-cake.http.middleware.encryptedcookiemiddleware.html#$key", "EncryptedCookieMiddleware::__construct()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#__construct()", "EncryptedCookieMiddleware::_checkCipher()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_checkCipher()", "EncryptedCookieMiddleware::_decode()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_decode()", "EncryptedCookieMiddleware::_decrypt()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_decrypt()", "EncryptedCookieMiddleware::_encrypt()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_encrypt()", "EncryptedCookieMiddleware::_explode()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_explode()", "EncryptedCookieMiddleware::_getCookieEncryptionKey()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_getCookieEncryptionKey()", "EncryptedCookieMiddleware::_implode()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#_implode()", "EncryptedCookieMiddleware::decodeCookies()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#decodeCookies()", "EncryptedCookieMiddleware::encodeCookies()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#encodeCookies()", "EncryptedCookieMiddleware::encodeSetCookieHeader()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#encodeSetCookieHeader()", "EncryptedCookieMiddleware::process()()": "class-cake.http.middleware.encryptedcookiemiddleware.html#process()", "Entity (class)": "class-cake.orm.entity.html", "Entity::$_accessible": "class-cake.orm.entity.html#$_accessible", "Entity::$_accessors": "class-cake.orm.entity.html#$_accessors", "Entity::$_dirty": "class-cake.orm.entity.html#$_dirty", "Entity::$_errors": "class-cake.orm.entity.html#$_errors", "Entity::$_fields": "class-cake.orm.entity.html#$_fields", "Entity::$_hidden": "class-cake.orm.entity.html#$_hidden", "Entity::$_invalid": "class-cake.orm.entity.html#$_invalid", "Entity::$_new": "class-cake.orm.entity.html#$_new", "Entity::$_original": "class-cake.orm.entity.html#$_original", "Entity::$_registryAlias": "class-cake.orm.entity.html#$_registryAlias", "Entity::$_virtual": "class-cake.orm.entity.html#$_virtual", "Entity::$id": "class-cake.orm.entity.html#$id", "Entity::__construct()()": "class-cake.orm.entity.html#__construct()", "Entity::__debugInfo()()": "class-cake.orm.entity.html#__debugInfo()", "Entity::__get()()": "class-cake.orm.entity.html#__get()", "Entity::__isset()()": "class-cake.orm.entity.html#__isset()", "Entity::__set()()": "class-cake.orm.entity.html#__set()", "Entity::__toString()()": "class-cake.orm.entity.html#__toString()", "Entity::__unset()()": "class-cake.orm.entity.html#__unset()", "Entity::_accessor()()": "class-cake.orm.entity.html#_accessor()", "Entity::_nestedErrors()()": "class-cake.orm.entity.html#_nestedErrors()", "Entity::_readError()()": "class-cake.orm.entity.html#_readError()", "Entity::_readHasErrors()()": "class-cake.orm.entity.html#_readHasErrors()", "Entity::clean()()": "class-cake.orm.entity.html#clean()", "Entity::extract()()": "class-cake.orm.entity.html#extract()", "Entity::extractOriginal()()": "class-cake.orm.entity.html#extractOriginal()", "Entity::extractOriginalChanged()()": "class-cake.orm.entity.html#extractOriginalChanged()", "Entity::get()()": "class-cake.orm.entity.html#get()", "Entity::getAccessible()()": "class-cake.orm.entity.html#getAccessible()", "Entity::getDirty()()": "class-cake.orm.entity.html#getDirty()", "Entity::getError()()": "class-cake.orm.entity.html#getError()", "Entity::getErrors()()": "class-cake.orm.entity.html#getErrors()", "Entity::getHidden()()": "class-cake.orm.entity.html#getHidden()", "Entity::getInvalid()()": "class-cake.orm.entity.html#getInvalid()", "Entity::getInvalidField()()": "class-cake.orm.entity.html#getInvalidField()", "Entity::getOriginal()()": "class-cake.orm.entity.html#getOriginal()", "Entity::getOriginalValues()()": "class-cake.orm.entity.html#getOriginalValues()", "Entity::getSource()()": "class-cake.orm.entity.html#getSource()", "Entity::getVirtual()()": "class-cake.orm.entity.html#getVirtual()", "Entity::getVisible()()": "class-cake.orm.entity.html#getVisible()", "Entity::has()()": "class-cake.orm.entity.html#has()", "Entity::hasErrors()()": "class-cake.orm.entity.html#hasErrors()", "Entity::hasValue()()": "class-cake.orm.entity.html#hasValue()", "Entity::isAccessible()()": "class-cake.orm.entity.html#isAccessible()", "Entity::isDirty()()": "class-cake.orm.entity.html#isDirty()", "Entity::isEmpty()()": "class-cake.orm.entity.html#isEmpty()", "Entity::isNew()()": "class-cake.orm.entity.html#isNew()", "Entity::jsonSerialize()()": "class-cake.orm.entity.html#jsonSerialize()", "Entity::offsetExists()()": "class-cake.orm.entity.html#offsetExists()", "Entity::offsetGet()()": "class-cake.orm.entity.html#offsetGet()", "Entity::offsetSet()()": "class-cake.orm.entity.html#offsetSet()", "Entity::offsetUnset()()": "class-cake.orm.entity.html#offsetUnset()", "Entity::set()()": "class-cake.orm.entity.html#set()", "Entity::setAccess()()": "class-cake.orm.entity.html#setAccess()", "Entity::setDirty()()": "class-cake.orm.entity.html#setDirty()", "Entity::setError()()": "class-cake.orm.entity.html#setError()", "Entity::setErrors()()": "class-cake.orm.entity.html#setErrors()", "Entity::setHidden()()": "class-cake.orm.entity.html#setHidden()", "Entity::setInvalid()()": "class-cake.orm.entity.html#setInvalid()", "Entity::setInvalidField()()": "class-cake.orm.entity.html#setInvalidField()", "Entity::setNew()()": "class-cake.orm.entity.html#setNew()", "Entity::setSource()()": "class-cake.orm.entity.html#setSource()", "Entity::setVirtual()()": "class-cake.orm.entity.html#setVirtual()", "Entity::toArray()()": "class-cake.orm.entity.html#toArray()", "Entity::unset()()": "class-cake.orm.entity.html#unset()", "Entity::unsetProperty()()": "class-cake.orm.entity.html#unsetProperty()", "EntityContext (class)": "class-cake.view.form.entitycontext.html", "EntityContext::$_context": "class-cake.view.form.entitycontext.html#$_context", "EntityContext::$_isCollection": "class-cake.view.form.entitycontext.html#$_isCollection", "EntityContext::$_rootName": "class-cake.view.form.entitycontext.html#$_rootName", "EntityContext::$_tableLocator": "class-cake.view.form.entitycontext.html#$_tableLocator", "EntityContext::$_tables": "class-cake.view.form.entitycontext.html#$_tables", "EntityContext::$_validator": "class-cake.view.form.entitycontext.html#$_validator", "EntityContext::$defaultTable": "class-cake.view.form.entitycontext.html#$defaultTable", "EntityContext::__construct()()": "class-cake.view.form.entitycontext.html#__construct()", "EntityContext::_extractMultiple()()": "class-cake.view.form.entitycontext.html#_extractMultiple()", "EntityContext::_getProp()()": "class-cake.view.form.entitycontext.html#_getProp()", "EntityContext::_getTable()()": "class-cake.view.form.entitycontext.html#_getTable()", "EntityContext::_getValidator()()": "class-cake.view.form.entitycontext.html#_getValidator()", "EntityContext::_prepare()()": "class-cake.view.form.entitycontext.html#_prepare()", "EntityContext::_schemaDefault()()": "class-cake.view.form.entitycontext.html#_schemaDefault()", "EntityContext::attributes()()": "class-cake.view.form.entitycontext.html#attributes()", "EntityContext::entity()()": "class-cake.view.form.entitycontext.html#entity()", "EntityContext::error()()": "class-cake.view.form.entitycontext.html#error()", "EntityContext::fetchTable()()": "class-cake.view.form.entitycontext.html#fetchTable()", "EntityContext::fieldNames()()": "class-cake.view.form.entitycontext.html#fieldNames()", "EntityContext::getMaxLength()()": "class-cake.view.form.entitycontext.html#getMaxLength()", "EntityContext::getPrimaryKey()()": "class-cake.view.form.entitycontext.html#getPrimaryKey()", "EntityContext::getRequiredMessage()()": "class-cake.view.form.entitycontext.html#getRequiredMessage()", "EntityContext::getTableLocator()()": "class-cake.view.form.entitycontext.html#getTableLocator()", "EntityContext::hasError()()": "class-cake.view.form.entitycontext.html#hasError()", "EntityContext::isCreate()()": "class-cake.view.form.entitycontext.html#isCreate()", "EntityContext::isPrimaryKey()()": "class-cake.view.form.entitycontext.html#isPrimaryKey()", "EntityContext::isRequired()()": "class-cake.view.form.entitycontext.html#isRequired()", "EntityContext::leafEntity()()": "class-cake.view.form.entitycontext.html#leafEntity()", "EntityContext::primaryKey()()": "class-cake.view.form.entitycontext.html#primaryKey()", "EntityContext::setTableLocator()()": "class-cake.view.form.entitycontext.html#setTableLocator()", "EntityContext::type()()": "class-cake.view.form.entitycontext.html#type()", "EntityContext::val()()": "class-cake.view.form.entitycontext.html#val()", "EntityInterface (interface)": "interface-cake.datasource.entityinterface.html", "EntityRoute (class)": "class-cake.routing.route.entityroute.html", "EntityRoute::$_compiledRoute": "class-cake.routing.route.entityroute.html#$_compiledRoute", "EntityRoute::$_extensions": "class-cake.routing.route.entityroute.html#$_extensions", "EntityRoute::$_greedy": "class-cake.routing.route.entityroute.html#$_greedy", "EntityRoute::$_name": "class-cake.routing.route.entityroute.html#$_name", "EntityRoute::$braceKeys": "class-cake.routing.route.entityroute.html#$braceKeys", "EntityRoute::$defaults": "class-cake.routing.route.entityroute.html#$defaults", "EntityRoute::$keys": "class-cake.routing.route.entityroute.html#$keys", "EntityRoute::$middleware": "class-cake.routing.route.entityroute.html#$middleware", "EntityRoute::$options": "class-cake.routing.route.entityroute.html#$options", "EntityRoute::$template": "class-cake.routing.route.entityroute.html#$template", "EntityRoute::__construct()()": "class-cake.routing.route.entityroute.html#__construct()", "EntityRoute::__set_state()()": "class-cake.routing.route.entityroute.html#__set_state()", "EntityRoute::_checkEntity()()": "class-cake.routing.route.entityroute.html#_checkEntity()", "EntityRoute::_matchMethod()()": "class-cake.routing.route.entityroute.html#_matchMethod()", "EntityRoute::_parseArgs()()": "class-cake.routing.route.entityroute.html#_parseArgs()", "EntityRoute::_parseExtension()()": "class-cake.routing.route.entityroute.html#_parseExtension()", "EntityRoute::_persistParams()()": "class-cake.routing.route.entityroute.html#_persistParams()", "EntityRoute::_writeRoute()()": "class-cake.routing.route.entityroute.html#_writeRoute()", "EntityRoute::_writeUrl()()": "class-cake.routing.route.entityroute.html#_writeUrl()", "EntityRoute::compile()()": "class-cake.routing.route.entityroute.html#compile()", "EntityRoute::compiled()()": "class-cake.routing.route.entityroute.html#compiled()", "EntityRoute::getExtensions()()": "class-cake.routing.route.entityroute.html#getExtensions()", "EntityRoute::getMiddleware()()": "class-cake.routing.route.entityroute.html#getMiddleware()", "EntityRoute::getName()()": "class-cake.routing.route.entityroute.html#getName()", "EntityRoute::hostMatches()()": "class-cake.routing.route.entityroute.html#hostMatches()", "EntityRoute::match()()": "class-cake.routing.route.entityroute.html#match()", "EntityRoute::normalizeAndValidateMethods()()": "class-cake.routing.route.entityroute.html#normalizeAndValidateMethods()", "EntityRoute::parse()()": "class-cake.routing.route.entityroute.html#parse()", "EntityRoute::parseRequest()()": "class-cake.routing.route.entityroute.html#parseRequest()", "EntityRoute::setExtensions()()": "class-cake.routing.route.entityroute.html#setExtensions()", "EntityRoute::setHost()()": "class-cake.routing.route.entityroute.html#setHost()", "EntityRoute::setMethods()()": "class-cake.routing.route.entityroute.html#setMethods()", "EntityRoute::setMiddleware()()": "class-cake.routing.route.entityroute.html#setMiddleware()", "EntityRoute::setPass()()": "class-cake.routing.route.entityroute.html#setPass()", "EntityRoute::setPatterns()()": "class-cake.routing.route.entityroute.html#setPatterns()", "EntityRoute::setPersist()()": "class-cake.routing.route.entityroute.html#setPersist()", "EntityRoute::staticPath()()": "class-cake.routing.route.entityroute.html#staticPath()", "Error (namespace)": "namespace-cake.error.html", "Error\\Debug (namespace)": "namespace-cake.error.debug.html", "Error\\Middleware (namespace)": "namespace-cake.error.middleware.html", "Error\\Renderer (namespace)": "namespace-cake.error.renderer.html", "ErrorCodeWaitStrategy (class)": "class-cake.database.retry.errorcodewaitstrategy.html", "ErrorCodeWaitStrategy::$errorCodes": "class-cake.database.retry.errorcodewaitstrategy.html#$errorCodes", "ErrorCodeWaitStrategy::$retryInterval": "class-cake.database.retry.errorcodewaitstrategy.html#$retryInterval", "ErrorCodeWaitStrategy::__construct()()": "class-cake.database.retry.errorcodewaitstrategy.html#__construct()", "ErrorCodeWaitStrategy::shouldRetry()()": "class-cake.database.retry.errorcodewaitstrategy.html#shouldRetry()", "ErrorController (class)": "class-cake.controller.errorcontroller.html", "ErrorController::$_components": "class-cake.controller.errorcontroller.html#$_components", "ErrorController::$_eventClass": "class-cake.controller.errorcontroller.html#$_eventClass", "ErrorController::$_eventManager": "class-cake.controller.errorcontroller.html#$_eventManager", "ErrorController::$_modelFactories": "class-cake.controller.errorcontroller.html#$_modelFactories", "ErrorController::$_modelType": "class-cake.controller.errorcontroller.html#$_modelType", "ErrorController::$_tableLocator": "class-cake.controller.errorcontroller.html#$_tableLocator", "ErrorController::$_viewBuilder": "class-cake.controller.errorcontroller.html#$_viewBuilder", "ErrorController::$Auth": "class-cake.controller.errorcontroller.html#$Auth", "ErrorController::$autoRender": "class-cake.controller.errorcontroller.html#$autoRender", "ErrorController::$defaultTable": "class-cake.controller.errorcontroller.html#$defaultTable", "ErrorController::$Flash": "class-cake.controller.errorcontroller.html#$Flash", "ErrorController::$FormProtection": "class-cake.controller.errorcontroller.html#$FormProtection", "ErrorController::$middlewares": "class-cake.controller.errorcontroller.html#$middlewares", "ErrorController::$modelClass": "class-cake.controller.errorcontroller.html#$modelClass", "ErrorController::$name": "class-cake.controller.errorcontroller.html#$name", "ErrorController::$paginate": "class-cake.controller.errorcontroller.html#$paginate", "ErrorController::$Paginator": "class-cake.controller.errorcontroller.html#$Paginator", "ErrorController::$plugin": "class-cake.controller.errorcontroller.html#$plugin", "ErrorController::$request": "class-cake.controller.errorcontroller.html#$request", "ErrorController::$RequestHandler": "class-cake.controller.errorcontroller.html#$RequestHandler", "ErrorController::$response": "class-cake.controller.errorcontroller.html#$response", "ErrorController::$Security": "class-cake.controller.errorcontroller.html#$Security", "ErrorController::__construct()()": "class-cake.controller.errorcontroller.html#__construct()", "ErrorController::__get()()": "class-cake.controller.errorcontroller.html#__get()", "ErrorController::__set()()": "class-cake.controller.errorcontroller.html#__set()", "ErrorController::_setModelClass()()": "class-cake.controller.errorcontroller.html#_setModelClass()", "ErrorController::_templatePath()()": "class-cake.controller.errorcontroller.html#_templatePath()", "ErrorController::afterFilter()()": "class-cake.controller.errorcontroller.html#afterFilter()", "ErrorController::beforeFilter()()": "class-cake.controller.errorcontroller.html#beforeFilter()", "ErrorController::beforeRedirect()()": "class-cake.controller.errorcontroller.html#beforeRedirect()", "ErrorController::beforeRender()()": "class-cake.controller.errorcontroller.html#beforeRender()", "ErrorController::chooseViewClass()()": "class-cake.controller.errorcontroller.html#chooseViewClass()", "ErrorController::components()()": "class-cake.controller.errorcontroller.html#components()", "ErrorController::createView()()": "class-cake.controller.errorcontroller.html#createView()", "ErrorController::disableAutoRender()()": "class-cake.controller.errorcontroller.html#disableAutoRender()", "ErrorController::dispatchEvent()()": "class-cake.controller.errorcontroller.html#dispatchEvent()", "ErrorController::enableAutoRender()()": "class-cake.controller.errorcontroller.html#enableAutoRender()", "ErrorController::fetchTable()()": "class-cake.controller.errorcontroller.html#fetchTable()", "ErrorController::getAction()()": "class-cake.controller.errorcontroller.html#getAction()", "ErrorController::getEventManager()()": "class-cake.controller.errorcontroller.html#getEventManager()", "ErrorController::getMiddleware()()": "class-cake.controller.errorcontroller.html#getMiddleware()", "ErrorController::getModelType()()": "class-cake.controller.errorcontroller.html#getModelType()", "ErrorController::getName()()": "class-cake.controller.errorcontroller.html#getName()", "ErrorController::getPlugin()()": "class-cake.controller.errorcontroller.html#getPlugin()", "ErrorController::getRequest()()": "class-cake.controller.errorcontroller.html#getRequest()", "ErrorController::getResponse()()": "class-cake.controller.errorcontroller.html#getResponse()", "ErrorController::getTableLocator()()": "class-cake.controller.errorcontroller.html#getTableLocator()", "ErrorController::implementedEvents()()": "class-cake.controller.errorcontroller.html#implementedEvents()", "ErrorController::initialize()()": "class-cake.controller.errorcontroller.html#initialize()", "ErrorController::invokeAction()()": "class-cake.controller.errorcontroller.html#invokeAction()", "ErrorController::isAction()()": "class-cake.controller.errorcontroller.html#isAction()", "ErrorController::isAutoRenderEnabled()()": "class-cake.controller.errorcontroller.html#isAutoRenderEnabled()", "ErrorController::loadComponent()()": "class-cake.controller.errorcontroller.html#loadComponent()", "ErrorController::loadModel()()": "class-cake.controller.errorcontroller.html#loadModel()", "ErrorController::log()()": "class-cake.controller.errorcontroller.html#log()", "ErrorController::middleware()()": "class-cake.controller.errorcontroller.html#middleware()", "ErrorController::modelFactory()()": "class-cake.controller.errorcontroller.html#modelFactory()", "ErrorController::paginate()()": "class-cake.controller.errorcontroller.html#paginate()", "ErrorController::redirect()()": "class-cake.controller.errorcontroller.html#redirect()", "ErrorController::referer()()": "class-cake.controller.errorcontroller.html#referer()", "ErrorController::render()()": "class-cake.controller.errorcontroller.html#render()", "ErrorController::set()()": "class-cake.controller.errorcontroller.html#set()", "ErrorController::setAction()()": "class-cake.controller.errorcontroller.html#setAction()", "ErrorController::setEventManager()()": "class-cake.controller.errorcontroller.html#setEventManager()", "ErrorController::setModelType()()": "class-cake.controller.errorcontroller.html#setModelType()", "ErrorController::setName()()": "class-cake.controller.errorcontroller.html#setName()", "ErrorController::setPlugin()()": "class-cake.controller.errorcontroller.html#setPlugin()", "ErrorController::setRequest()()": "class-cake.controller.errorcontroller.html#setRequest()", "ErrorController::setResponse()()": "class-cake.controller.errorcontroller.html#setResponse()", "ErrorController::setTableLocator()()": "class-cake.controller.errorcontroller.html#setTableLocator()", "ErrorController::shutdownProcess()()": "class-cake.controller.errorcontroller.html#shutdownProcess()", "ErrorController::startupProcess()()": "class-cake.controller.errorcontroller.html#startupProcess()", "ErrorController::viewBuilder()()": "class-cake.controller.errorcontroller.html#viewBuilder()", "ErrorController::viewClasses()()": "class-cake.controller.errorcontroller.html#viewClasses()", "ErrorHandler (class)": "class-cake.error.errorhandler.html", "ErrorHandler::$_config": "class-cake.error.errorhandler.html#$_config", "ErrorHandler::$_configInitialized": "class-cake.error.errorhandler.html#$_configInitialized", "ErrorHandler::$_defaultConfig": "class-cake.error.errorhandler.html#$_defaultConfig", "ErrorHandler::$_handled": "class-cake.error.errorhandler.html#$_handled", "ErrorHandler::$logger": "class-cake.error.errorhandler.html#$logger", "ErrorHandler::__construct()()": "class-cake.error.errorhandler.html#__construct()", "ErrorHandler::_configDelete()()": "class-cake.error.errorhandler.html#_configDelete()", "ErrorHandler::_configRead()()": "class-cake.error.errorhandler.html#_configRead()", "ErrorHandler::_configWrite()()": "class-cake.error.errorhandler.html#_configWrite()", "ErrorHandler::_displayError()()": "class-cake.error.errorhandler.html#_displayError()", "ErrorHandler::_displayException()()": "class-cake.error.errorhandler.html#_displayException()", "ErrorHandler::_logError()()": "class-cake.error.errorhandler.html#_logError()", "ErrorHandler::_logInternalError()()": "class-cake.error.errorhandler.html#_logInternalError()", "ErrorHandler::_sendResponse()()": "class-cake.error.errorhandler.html#_sendResponse()", "ErrorHandler::_stop()()": "class-cake.error.errorhandler.html#_stop()", "ErrorHandler::configShallow()()": "class-cake.error.errorhandler.html#configShallow()", "ErrorHandler::getConfig()()": "class-cake.error.errorhandler.html#getConfig()", "ErrorHandler::getConfigOrFail()()": "class-cake.error.errorhandler.html#getConfigOrFail()", "ErrorHandler::getLogger()()": "class-cake.error.errorhandler.html#getLogger()", "ErrorHandler::getRenderer()()": "class-cake.error.errorhandler.html#getRenderer()", "ErrorHandler::handleError()()": "class-cake.error.errorhandler.html#handleError()", "ErrorHandler::handleException()()": "class-cake.error.errorhandler.html#handleException()", "ErrorHandler::handleFatalError()()": "class-cake.error.errorhandler.html#handleFatalError()", "ErrorHandler::increaseMemoryLimit()()": "class-cake.error.errorhandler.html#increaseMemoryLimit()", "ErrorHandler::logException()()": "class-cake.error.errorhandler.html#logException()", "ErrorHandler::mapErrorCode()()": "class-cake.error.errorhandler.html#mapErrorCode()", "ErrorHandler::register()()": "class-cake.error.errorhandler.html#register()", "ErrorHandler::setConfig()()": "class-cake.error.errorhandler.html#setConfig()", "ErrorHandler::wrapAndHandleException()()": "class-cake.error.errorhandler.html#wrapAndHandleException()", "ErrorHandlerMiddleware (class)": "class-cake.error.middleware.errorhandlermiddleware.html", "ErrorHandlerMiddleware::$_config": "class-cake.error.middleware.errorhandlermiddleware.html#$_config", "ErrorHandlerMiddleware::$_configInitialized": "class-cake.error.middleware.errorhandlermiddleware.html#$_configInitialized", "ErrorHandlerMiddleware::$_defaultConfig": "class-cake.error.middleware.errorhandlermiddleware.html#$_defaultConfig", "ErrorHandlerMiddleware::$errorHandler": "class-cake.error.middleware.errorhandlermiddleware.html#$errorHandler", "ErrorHandlerMiddleware::$exceptionTrap": "class-cake.error.middleware.errorhandlermiddleware.html#$exceptionTrap", "ErrorHandlerMiddleware::__construct()()": "class-cake.error.middleware.errorhandlermiddleware.html#__construct()", "ErrorHandlerMiddleware::_configDelete()()": "class-cake.error.middleware.errorhandlermiddleware.html#_configDelete()", "ErrorHandlerMiddleware::_configRead()()": "class-cake.error.middleware.errorhandlermiddleware.html#_configRead()", "ErrorHandlerMiddleware::_configWrite()()": "class-cake.error.middleware.errorhandlermiddleware.html#_configWrite()", "ErrorHandlerMiddleware::configShallow()()": "class-cake.error.middleware.errorhandlermiddleware.html#configShallow()", "ErrorHandlerMiddleware::getConfig()()": "class-cake.error.middleware.errorhandlermiddleware.html#getConfig()", "ErrorHandlerMiddleware::getConfigOrFail()()": "class-cake.error.middleware.errorhandlermiddleware.html#getConfigOrFail()", "ErrorHandlerMiddleware::getErrorHandler()()": "class-cake.error.middleware.errorhandlermiddleware.html#getErrorHandler()", "ErrorHandlerMiddleware::getExceptionTrap()()": "class-cake.error.middleware.errorhandlermiddleware.html#getExceptionTrap()", "ErrorHandlerMiddleware::handleException()()": "class-cake.error.middleware.errorhandlermiddleware.html#handleException()", "ErrorHandlerMiddleware::handleInternalError()()": "class-cake.error.middleware.errorhandlermiddleware.html#handleInternalError()", "ErrorHandlerMiddleware::handleRedirect()()": "class-cake.error.middleware.errorhandlermiddleware.html#handleRedirect()", "ErrorHandlerMiddleware::process()()": "class-cake.error.middleware.errorhandlermiddleware.html#process()", "ErrorHandlerMiddleware::setConfig()()": "class-cake.error.middleware.errorhandlermiddleware.html#setConfig()", "ErrorLogger (class)": "class-cake.error.errorlogger.html", "ErrorLogger::$_config": "class-cake.error.errorlogger.html#$_config", "ErrorLogger::$_configInitialized": "class-cake.error.errorlogger.html#$_configInitialized", "ErrorLogger::$_defaultConfig": "class-cake.error.errorlogger.html#$_defaultConfig", "ErrorLogger::__construct()()": "class-cake.error.errorlogger.html#__construct()", "ErrorLogger::_configDelete()()": "class-cake.error.errorlogger.html#_configDelete()", "ErrorLogger::_configRead()()": "class-cake.error.errorlogger.html#_configRead()", "ErrorLogger::_configWrite()()": "class-cake.error.errorlogger.html#_configWrite()", "ErrorLogger::configShallow()()": "class-cake.error.errorlogger.html#configShallow()", "ErrorLogger::getConfig()()": "class-cake.error.errorlogger.html#getConfig()", "ErrorLogger::getConfigOrFail()()": "class-cake.error.errorlogger.html#getConfigOrFail()", "ErrorLogger::getMessage()()": "class-cake.error.errorlogger.html#getMessage()", "ErrorLogger::getRequestContext()()": "class-cake.error.errorlogger.html#getRequestContext()", "ErrorLogger::log()()": "class-cake.error.errorlogger.html#log()", "ErrorLogger::logError()()": "class-cake.error.errorlogger.html#logError()", "ErrorLogger::logException()()": "class-cake.error.errorlogger.html#logException()", "ErrorLogger::logMessage()()": "class-cake.error.errorlogger.html#logMessage()", "ErrorLogger::setConfig()()": "class-cake.error.errorlogger.html#setConfig()", "ErrorLoggerInterface (interface)": "interface-cake.error.errorloggerinterface.html", "ErrorRendererInterface (interface)": "interface-cake.error.errorrendererinterface.html", "ErrorTrap (class)": "class-cake.error.errortrap.html", "ErrorTrap::$_config": "class-cake.error.errortrap.html#$_config", "ErrorTrap::$_configInitialized": "class-cake.error.errortrap.html#$_configInitialized", "ErrorTrap::$_defaultConfig": "class-cake.error.errortrap.html#$_defaultConfig", "ErrorTrap::$_eventClass": "class-cake.error.errortrap.html#$_eventClass", "ErrorTrap::$_eventManager": "class-cake.error.errortrap.html#$_eventManager", "ErrorTrap::__construct()()": "class-cake.error.errortrap.html#__construct()", "ErrorTrap::_configDelete()()": "class-cake.error.errortrap.html#_configDelete()", "ErrorTrap::_configRead()()": "class-cake.error.errortrap.html#_configRead()", "ErrorTrap::_configWrite()()": "class-cake.error.errortrap.html#_configWrite()", "ErrorTrap::chooseErrorRenderer()()": "class-cake.error.errortrap.html#chooseErrorRenderer()", "ErrorTrap::configShallow()()": "class-cake.error.errortrap.html#configShallow()", "ErrorTrap::dispatchEvent()()": "class-cake.error.errortrap.html#dispatchEvent()", "ErrorTrap::getConfig()()": "class-cake.error.errortrap.html#getConfig()", "ErrorTrap::getConfigOrFail()()": "class-cake.error.errortrap.html#getConfigOrFail()", "ErrorTrap::getEventManager()()": "class-cake.error.errortrap.html#getEventManager()", "ErrorTrap::handleError()()": "class-cake.error.errortrap.html#handleError()", "ErrorTrap::logError()()": "class-cake.error.errortrap.html#logError()", "ErrorTrap::logger()()": "class-cake.error.errortrap.html#logger()", "ErrorTrap::register()()": "class-cake.error.errortrap.html#register()", "ErrorTrap::renderer()()": "class-cake.error.errortrap.html#renderer()", "ErrorTrap::setConfig()()": "class-cake.error.errortrap.html#setConfig()", "ErrorTrap::setEventManager()()": "class-cake.error.errortrap.html#setEventManager()", "Event (class)": "class-cake.event.event.html", "Event (namespace)": "namespace-cake.event.html", "Event::$_data": "class-cake.event.event.html#$_data", "Event::$_name": "class-cake.event.event.html#$_name", "Event::$_stopped": "class-cake.event.event.html#$_stopped", "Event::$_subject": "class-cake.event.event.html#$_subject", "Event::$result": "class-cake.event.event.html#$result", "Event::__construct()()": "class-cake.event.event.html#__construct()", "Event::getData()()": "class-cake.event.event.html#getData()", "Event::getName()()": "class-cake.event.event.html#getName()", "Event::getResult()()": "class-cake.event.event.html#getResult()", "Event::getSubject()()": "class-cake.event.event.html#getSubject()", "Event::isStopped()()": "class-cake.event.event.html#isStopped()", "Event::setData()()": "class-cake.event.event.html#setData()", "Event::setResult()()": "class-cake.event.event.html#setResult()", "Event::stopPropagation()()": "class-cake.event.event.html#stopPropagation()", "Event\\Decorator (namespace)": "namespace-cake.event.decorator.html", "EventDispatcherInterface (interface)": "interface-cake.event.eventdispatcherinterface.html", "EventDispatcherTrait (trait)": "trait-cake.event.eventdispatchertrait.html", "EventFired (class)": "class-cake.testsuite.constraint.eventfired.html", "EventFired::$_eventManager": "class-cake.testsuite.constraint.eventfired.html#$_eventManager", "EventFired::__construct()()": "class-cake.testsuite.constraint.eventfired.html#__construct()", "EventFired::additionalFailureDescription()()": "class-cake.testsuite.constraint.eventfired.html#additionalFailureDescription()", "EventFired::count()()": "class-cake.testsuite.constraint.eventfired.html#count()", "EventFired::evaluate()()": "class-cake.testsuite.constraint.eventfired.html#evaluate()", "EventFired::exporter()()": "class-cake.testsuite.constraint.eventfired.html#exporter()", "EventFired::fail()()": "class-cake.testsuite.constraint.eventfired.html#fail()", "EventFired::failureDescription()()": "class-cake.testsuite.constraint.eventfired.html#failureDescription()", "EventFired::failureDescriptionInContext()()": "class-cake.testsuite.constraint.eventfired.html#failureDescriptionInContext()", "EventFired::matches()()": "class-cake.testsuite.constraint.eventfired.html#matches()", "EventFired::reduce()()": "class-cake.testsuite.constraint.eventfired.html#reduce()", "EventFired::toString()()": "class-cake.testsuite.constraint.eventfired.html#toString()", "EventFired::toStringInContext()()": "class-cake.testsuite.constraint.eventfired.html#toStringInContext()", "EventFiredWith (class)": "class-cake.testsuite.constraint.eventfiredwith.html", "EventFiredWith::$_dataKey": "class-cake.testsuite.constraint.eventfiredwith.html#$_dataKey", "EventFiredWith::$_dataValue": "class-cake.testsuite.constraint.eventfiredwith.html#$_dataValue", "EventFiredWith::$_eventManager": "class-cake.testsuite.constraint.eventfiredwith.html#$_eventManager", "EventFiredWith::__construct()()": "class-cake.testsuite.constraint.eventfiredwith.html#__construct()", "EventFiredWith::additionalFailureDescription()()": "class-cake.testsuite.constraint.eventfiredwith.html#additionalFailureDescription()", "EventFiredWith::count()()": "class-cake.testsuite.constraint.eventfiredwith.html#count()", "EventFiredWith::evaluate()()": "class-cake.testsuite.constraint.eventfiredwith.html#evaluate()", "EventFiredWith::exporter()()": "class-cake.testsuite.constraint.eventfiredwith.html#exporter()", "EventFiredWith::fail()()": "class-cake.testsuite.constraint.eventfiredwith.html#fail()", "EventFiredWith::failureDescription()()": "class-cake.testsuite.constraint.eventfiredwith.html#failureDescription()", "EventFiredWith::failureDescriptionInContext()()": "class-cake.testsuite.constraint.eventfiredwith.html#failureDescriptionInContext()", "EventFiredWith::matches()()": "class-cake.testsuite.constraint.eventfiredwith.html#matches()", "EventFiredWith::reduce()()": "class-cake.testsuite.constraint.eventfiredwith.html#reduce()", "EventFiredWith::toString()()": "class-cake.testsuite.constraint.eventfiredwith.html#toString()", "EventFiredWith::toStringInContext()()": "class-cake.testsuite.constraint.eventfiredwith.html#toStringInContext()", "EventInterface (interface)": "interface-cake.event.eventinterface.html", "EventList (class)": "class-cake.event.eventlist.html", "EventList::$_events": "class-cake.event.eventlist.html#$_events", "EventList::add()()": "class-cake.event.eventlist.html#add()", "EventList::count()()": "class-cake.event.eventlist.html#count()", "EventList::flush()()": "class-cake.event.eventlist.html#flush()", "EventList::hasEvent()()": "class-cake.event.eventlist.html#hasEvent()", "EventList::offsetExists()()": "class-cake.event.eventlist.html#offsetExists()", "EventList::offsetGet()()": "class-cake.event.eventlist.html#offsetGet()", "EventList::offsetSet()()": "class-cake.event.eventlist.html#offsetSet()", "EventList::offsetUnset()()": "class-cake.event.eventlist.html#offsetUnset()", "EventListenerInterface (interface)": "interface-cake.event.eventlistenerinterface.html", "EventManager (class)": "class-cake.event.eventmanager.html", "EventManager::$_eventList": "class-cake.event.eventmanager.html#$_eventList", "EventManager::$_generalManager": "class-cake.event.eventmanager.html#$_generalManager", "EventManager::$_isGlobal": "class-cake.event.eventmanager.html#$_isGlobal", "EventManager::$_listeners": "class-cake.event.eventmanager.html#$_listeners", "EventManager::$_trackEvents": "class-cake.event.eventmanager.html#$_trackEvents", "EventManager::$defaultPriority": "class-cake.event.eventmanager.html#$defaultPriority", "EventManager::__debugInfo()()": "class-cake.event.eventmanager.html#__debugInfo()", "EventManager::_attachSubscriber()()": "class-cake.event.eventmanager.html#_attachSubscriber()", "EventManager::_callListener()()": "class-cake.event.eventmanager.html#_callListener()", "EventManager::_detachSubscriber()()": "class-cake.event.eventmanager.html#_detachSubscriber()", "EventManager::_extractCallable()()": "class-cake.event.eventmanager.html#_extractCallable()", "EventManager::addEventToList()()": "class-cake.event.eventmanager.html#addEventToList()", "EventManager::dispatch()()": "class-cake.event.eventmanager.html#dispatch()", "EventManager::getEventList()()": "class-cake.event.eventmanager.html#getEventList()", "EventManager::instance()()": "class-cake.event.eventmanager.html#instance()", "EventManager::isTrackingEvents()()": "class-cake.event.eventmanager.html#isTrackingEvents()", "EventManager::listeners()()": "class-cake.event.eventmanager.html#listeners()", "EventManager::matchingListeners()()": "class-cake.event.eventmanager.html#matchingListeners()", "EventManager::off()()": "class-cake.event.eventmanager.html#off()", "EventManager::on()()": "class-cake.event.eventmanager.html#on()", "EventManager::prioritisedListeners()()": "class-cake.event.eventmanager.html#prioritisedListeners()", "EventManager::setEventList()()": "class-cake.event.eventmanager.html#setEventList()", "EventManager::trackEvents()()": "class-cake.event.eventmanager.html#trackEvents()", "EventManager::unsetEventList()()": "class-cake.event.eventmanager.html#unsetEventList()", "EventManagerInterface (interface)": "interface-cake.event.eventmanagerinterface.html", "ExceptionRenderer (class)": "class-cake.error.exceptionrenderer.html", "ExceptionRenderer::$controller": "class-cake.error.exceptionrenderer.html#$controller", "ExceptionRenderer::$error": "class-cake.error.exceptionrenderer.html#$error", "ExceptionRenderer::$exceptionHttpCodes": "class-cake.error.exceptionrenderer.html#$exceptionHttpCodes", "ExceptionRenderer::$method": "class-cake.error.exceptionrenderer.html#$method", "ExceptionRenderer::$request": "class-cake.error.exceptionrenderer.html#$request", "ExceptionRenderer::$template": "class-cake.error.exceptionrenderer.html#$template", "ExceptionRenderer::__construct()()": "class-cake.error.exceptionrenderer.html#__construct()", "ExceptionRenderer::__debugInfo()()": "class-cake.error.exceptionrenderer.html#__debugInfo()", "ExceptionRenderer::_customMethod()()": "class-cake.error.exceptionrenderer.html#_customMethod()", "ExceptionRenderer::_getController()()": "class-cake.error.exceptionrenderer.html#_getController()", "ExceptionRenderer::_message()()": "class-cake.error.exceptionrenderer.html#_message()", "ExceptionRenderer::_method()()": "class-cake.error.exceptionrenderer.html#_method()", "ExceptionRenderer::_outputMessage()()": "class-cake.error.exceptionrenderer.html#_outputMessage()", "ExceptionRenderer::_outputMessageSafe()()": "class-cake.error.exceptionrenderer.html#_outputMessageSafe()", "ExceptionRenderer::_shutdown()()": "class-cake.error.exceptionrenderer.html#_shutdown()", "ExceptionRenderer::_template()()": "class-cake.error.exceptionrenderer.html#_template()", "ExceptionRenderer::clearOutput()()": "class-cake.error.exceptionrenderer.html#clearOutput()", "ExceptionRenderer::getHttpCode()()": "class-cake.error.exceptionrenderer.html#getHttpCode()", "ExceptionRenderer::render()()": "class-cake.error.exceptionrenderer.html#render()", "ExceptionRenderer::write()()": "class-cake.error.exceptionrenderer.html#write()", "ExceptionRendererInterface (interface)": "interface-cake.error.exceptionrendererinterface.html", "ExceptionTrap (class)": "class-cake.error.exceptiontrap.html", "ExceptionTrap::$_config": "class-cake.error.exceptiontrap.html#$_config", "ExceptionTrap::$_configInitialized": "class-cake.error.exceptiontrap.html#$_configInitialized", "ExceptionTrap::$_defaultConfig": "class-cake.error.exceptiontrap.html#$_defaultConfig", "ExceptionTrap::$_eventClass": "class-cake.error.exceptiontrap.html#$_eventClass", "ExceptionTrap::$_eventManager": "class-cake.error.exceptiontrap.html#$_eventManager", "ExceptionTrap::$callbacks": "class-cake.error.exceptiontrap.html#$callbacks", "ExceptionTrap::$disabled": "class-cake.error.exceptiontrap.html#$disabled", "ExceptionTrap::$registeredTrap": "class-cake.error.exceptiontrap.html#$registeredTrap", "ExceptionTrap::__construct()()": "class-cake.error.exceptiontrap.html#__construct()", "ExceptionTrap::_configDelete()()": "class-cake.error.exceptiontrap.html#_configDelete()", "ExceptionTrap::_configRead()()": "class-cake.error.exceptiontrap.html#_configRead()", "ExceptionTrap::_configWrite()()": "class-cake.error.exceptiontrap.html#_configWrite()", "ExceptionTrap::chooseRenderer()()": "class-cake.error.exceptiontrap.html#chooseRenderer()", "ExceptionTrap::configShallow()()": "class-cake.error.exceptiontrap.html#configShallow()", "ExceptionTrap::dispatchEvent()()": "class-cake.error.exceptiontrap.html#dispatchEvent()", "ExceptionTrap::getConfig()()": "class-cake.error.exceptiontrap.html#getConfig()", "ExceptionTrap::getConfigOrFail()()": "class-cake.error.exceptiontrap.html#getConfigOrFail()", "ExceptionTrap::getEventManager()()": "class-cake.error.exceptiontrap.html#getEventManager()", "ExceptionTrap::handleException()()": "class-cake.error.exceptiontrap.html#handleException()", "ExceptionTrap::handleFatalError()()": "class-cake.error.exceptiontrap.html#handleFatalError()", "ExceptionTrap::handleShutdown()()": "class-cake.error.exceptiontrap.html#handleShutdown()", "ExceptionTrap::increaseMemoryLimit()()": "class-cake.error.exceptiontrap.html#increaseMemoryLimit()", "ExceptionTrap::instance()()": "class-cake.error.exceptiontrap.html#instance()", "ExceptionTrap::logException()()": "class-cake.error.exceptiontrap.html#logException()", "ExceptionTrap::logger()()": "class-cake.error.exceptiontrap.html#logger()", "ExceptionTrap::logInternalError()()": "class-cake.error.exceptiontrap.html#logInternalError()", "ExceptionTrap::register()()": "class-cake.error.exceptiontrap.html#register()", "ExceptionTrap::renderer()()": "class-cake.error.exceptiontrap.html#renderer()", "ExceptionTrap::setConfig()()": "class-cake.error.exceptiontrap.html#setConfig()", "ExceptionTrap::setEventManager()()": "class-cake.error.exceptiontrap.html#setEventManager()", "ExceptionTrap::unregister()()": "class-cake.error.exceptiontrap.html#unregister()", "ExistsIn (class)": "class-cake.orm.rule.existsin.html", "ExistsIn::$_fields": "class-cake.orm.rule.existsin.html#$_fields", "ExistsIn::$_options": "class-cake.orm.rule.existsin.html#$_options", "ExistsIn::$_repository": "class-cake.orm.rule.existsin.html#$_repository", "ExistsIn::__construct()()": "class-cake.orm.rule.existsin.html#__construct()", "ExistsIn::__invoke()()": "class-cake.orm.rule.existsin.html#__invoke()", "ExistsIn::_fieldsAreNull()()": "class-cake.orm.rule.existsin.html#_fieldsAreNull()", "ExitCode (class)": "class-cake.console.testsuite.constraint.exitcode.html", "ExitCode::__construct()()": "class-cake.console.testsuite.constraint.exitcode.html#__construct()", "ExitCode::additionalFailureDescription()()": "class-cake.console.testsuite.constraint.exitcode.html#additionalFailureDescription()", "ExitCode::count()()": "class-cake.console.testsuite.constraint.exitcode.html#count()", "ExitCode::evaluate()()": "class-cake.console.testsuite.constraint.exitcode.html#evaluate()", "ExitCode::exporter()()": "class-cake.console.testsuite.constraint.exitcode.html#exporter()", "ExitCode::fail()()": "class-cake.console.testsuite.constraint.exitcode.html#fail()", "ExitCode::failureDescription()()": "class-cake.console.testsuite.constraint.exitcode.html#failureDescription()", "ExitCode::failureDescriptionInContext()()": "class-cake.console.testsuite.constraint.exitcode.html#failureDescriptionInContext()", "ExitCode::matches()()": "class-cake.console.testsuite.constraint.exitcode.html#matches()", "ExitCode::reduce()()": "class-cake.console.testsuite.constraint.exitcode.html#reduce()", "ExitCode::toString()()": "class-cake.console.testsuite.constraint.exitcode.html#toString()", "ExitCode::toStringInContext()()": "class-cake.console.testsuite.constraint.exitcode.html#toStringInContext()", "ExpressionInterface (interface)": "interface-cake.database.expressioninterface.html", "ExpressionTypeCasterTrait (trait)": "trait-cake.database.type.expressiontypecastertrait.html", "ExpressionTypeInterface (interface)": "interface-cake.database.type.expressiontypeinterface.html", "ExtractIterator (class)": "class-cake.collection.iterator.extractiterator.html", "ExtractIterator::$_extractor": "class-cake.collection.iterator.extractiterator.html#$_extractor", "ExtractIterator::__construct()()": "class-cake.collection.iterator.extractiterator.html#__construct()", "ExtractIterator::__debugInfo()()": "class-cake.collection.iterator.extractiterator.html#__debugInfo()", "ExtractIterator::__serialize()()": "class-cake.collection.iterator.extractiterator.html#__serialize()", "ExtractIterator::__unserialize()()": "class-cake.collection.iterator.extractiterator.html#__unserialize()", "ExtractIterator::_createMatcherFilter()()": "class-cake.collection.iterator.extractiterator.html#_createMatcherFilter()", "ExtractIterator::_extract()()": "class-cake.collection.iterator.extractiterator.html#_extract()", "ExtractIterator::_propertyExtractor()()": "class-cake.collection.iterator.extractiterator.html#_propertyExtractor()", "ExtractIterator::_simpleExtract()()": "class-cake.collection.iterator.extractiterator.html#_simpleExtract()", "ExtractIterator::append()()": "class-cake.collection.iterator.extractiterator.html#append()", "ExtractIterator::appendItem()()": "class-cake.collection.iterator.extractiterator.html#appendItem()", "ExtractIterator::avg()()": "class-cake.collection.iterator.extractiterator.html#avg()", "ExtractIterator::buffered()()": "class-cake.collection.iterator.extractiterator.html#buffered()", "ExtractIterator::cartesianProduct()()": "class-cake.collection.iterator.extractiterator.html#cartesianProduct()", "ExtractIterator::chunk()()": "class-cake.collection.iterator.extractiterator.html#chunk()", "ExtractIterator::chunkWithKeys()()": "class-cake.collection.iterator.extractiterator.html#chunkWithKeys()", "ExtractIterator::combine()()": "class-cake.collection.iterator.extractiterator.html#combine()", "ExtractIterator::compile()()": "class-cake.collection.iterator.extractiterator.html#compile()", "ExtractIterator::contains()()": "class-cake.collection.iterator.extractiterator.html#contains()", "ExtractIterator::count()()": "class-cake.collection.iterator.extractiterator.html#count()", "ExtractIterator::countBy()()": "class-cake.collection.iterator.extractiterator.html#countBy()", "ExtractIterator::countKeys()()": "class-cake.collection.iterator.extractiterator.html#countKeys()", "ExtractIterator::current()()": "class-cake.collection.iterator.extractiterator.html#current()", "ExtractIterator::each()()": "class-cake.collection.iterator.extractiterator.html#each()", "ExtractIterator::every()()": "class-cake.collection.iterator.extractiterator.html#every()", "ExtractIterator::extract()()": "class-cake.collection.iterator.extractiterator.html#extract()", "ExtractIterator::filter()()": "class-cake.collection.iterator.extractiterator.html#filter()", "ExtractIterator::first()()": "class-cake.collection.iterator.extractiterator.html#first()", "ExtractIterator::firstMatch()()": "class-cake.collection.iterator.extractiterator.html#firstMatch()", "ExtractIterator::groupBy()()": "class-cake.collection.iterator.extractiterator.html#groupBy()", "ExtractIterator::indexBy()()": "class-cake.collection.iterator.extractiterator.html#indexBy()", "ExtractIterator::insert()()": "class-cake.collection.iterator.extractiterator.html#insert()", "ExtractIterator::isEmpty()()": "class-cake.collection.iterator.extractiterator.html#isEmpty()", "ExtractIterator::jsonSerialize()()": "class-cake.collection.iterator.extractiterator.html#jsonSerialize()", "ExtractIterator::last()()": "class-cake.collection.iterator.extractiterator.html#last()", "ExtractIterator::lazy()()": "class-cake.collection.iterator.extractiterator.html#lazy()", "ExtractIterator::listNested()()": "class-cake.collection.iterator.extractiterator.html#listNested()", "ExtractIterator::map()()": "class-cake.collection.iterator.extractiterator.html#map()", "ExtractIterator::match()()": "class-cake.collection.iterator.extractiterator.html#match()", "ExtractIterator::max()()": "class-cake.collection.iterator.extractiterator.html#max()", "ExtractIterator::median()()": "class-cake.collection.iterator.extractiterator.html#median()", "ExtractIterator::min()()": "class-cake.collection.iterator.extractiterator.html#min()", "ExtractIterator::nest()()": "class-cake.collection.iterator.extractiterator.html#nest()", "ExtractIterator::newCollection()()": "class-cake.collection.iterator.extractiterator.html#newCollection()", "ExtractIterator::optimizeUnwrap()()": "class-cake.collection.iterator.extractiterator.html#optimizeUnwrap()", "ExtractIterator::prepend()()": "class-cake.collection.iterator.extractiterator.html#prepend()", "ExtractIterator::prependItem()()": "class-cake.collection.iterator.extractiterator.html#prependItem()", "ExtractIterator::reduce()()": "class-cake.collection.iterator.extractiterator.html#reduce()", "ExtractIterator::reject()()": "class-cake.collection.iterator.extractiterator.html#reject()", "ExtractIterator::sample()()": "class-cake.collection.iterator.extractiterator.html#sample()", "ExtractIterator::serialize()()": "class-cake.collection.iterator.extractiterator.html#serialize()", "ExtractIterator::shuffle()()": "class-cake.collection.iterator.extractiterator.html#shuffle()", "ExtractIterator::skip()()": "class-cake.collection.iterator.extractiterator.html#skip()", "ExtractIterator::some()()": "class-cake.collection.iterator.extractiterator.html#some()", "ExtractIterator::sortBy()()": "class-cake.collection.iterator.extractiterator.html#sortBy()", "ExtractIterator::stopWhen()()": "class-cake.collection.iterator.extractiterator.html#stopWhen()", "ExtractIterator::sumOf()()": "class-cake.collection.iterator.extractiterator.html#sumOf()", "ExtractIterator::take()()": "class-cake.collection.iterator.extractiterator.html#take()", "ExtractIterator::takeLast()()": "class-cake.collection.iterator.extractiterator.html#takeLast()", "ExtractIterator::through()()": "class-cake.collection.iterator.extractiterator.html#through()", "ExtractIterator::toArray()()": "class-cake.collection.iterator.extractiterator.html#toArray()", "ExtractIterator::toList()()": "class-cake.collection.iterator.extractiterator.html#toList()", "ExtractIterator::transpose()()": "class-cake.collection.iterator.extractiterator.html#transpose()", "ExtractIterator::unfold()()": "class-cake.collection.iterator.extractiterator.html#unfold()", "ExtractIterator::unserialize()()": "class-cake.collection.iterator.extractiterator.html#unserialize()", "ExtractIterator::unwrap()()": "class-cake.collection.iterator.extractiterator.html#unwrap()", "ExtractIterator::zip()()": "class-cake.collection.iterator.extractiterator.html#zip()", "ExtractIterator::zipWith()()": "class-cake.collection.iterator.extractiterator.html#zipWith()", "FactoryLocator (class)": "class-cake.datasource.factorylocator.html", "FactoryLocator::$_modelFactories": "class-cake.datasource.factorylocator.html#$_modelFactories", "FactoryLocator::add()()": "class-cake.datasource.factorylocator.html#add()", "FactoryLocator::drop()()": "class-cake.datasource.factorylocator.html#drop()", "FactoryLocator::get()()": "class-cake.datasource.factorylocator.html#get()", "FailedRouteCacheException (class)": "class-cake.routing.exception.failedroutecacheexception.html", "FallbackPasswordHasher (class)": "class-cake.auth.fallbackpasswordhasher.html", "FallbackPasswordHasher::$_config": "class-cake.auth.fallbackpasswordhasher.html#$_config", "FallbackPasswordHasher::$_configInitialized": "class-cake.auth.fallbackpasswordhasher.html#$_configInitialized", "FallbackPasswordHasher::$_defaultConfig": "class-cake.auth.fallbackpasswordhasher.html#$_defaultConfig", "FallbackPasswordHasher::$_hashers": "class-cake.auth.fallbackpasswordhasher.html#$_hashers", "FallbackPasswordHasher::__construct()()": "class-cake.auth.fallbackpasswordhasher.html#__construct()", "FallbackPasswordHasher::_configDelete()()": "class-cake.auth.fallbackpasswordhasher.html#_configDelete()", "FallbackPasswordHasher::_configRead()()": "class-cake.auth.fallbackpasswordhasher.html#_configRead()", "FallbackPasswordHasher::_configWrite()()": "class-cake.auth.fallbackpasswordhasher.html#_configWrite()", "FallbackPasswordHasher::check()()": "class-cake.auth.fallbackpasswordhasher.html#check()", "FallbackPasswordHasher::configShallow()()": "class-cake.auth.fallbackpasswordhasher.html#configShallow()", "FallbackPasswordHasher::getConfig()()": "class-cake.auth.fallbackpasswordhasher.html#getConfig()", "FallbackPasswordHasher::getConfigOrFail()()": "class-cake.auth.fallbackpasswordhasher.html#getConfigOrFail()", "FallbackPasswordHasher::hash()()": "class-cake.auth.fallbackpasswordhasher.html#hash()", "FallbackPasswordHasher::needsRehash()()": "class-cake.auth.fallbackpasswordhasher.html#needsRehash()", "FallbackPasswordHasher::setConfig()()": "class-cake.auth.fallbackpasswordhasher.html#setConfig()", "FatalErrorException (class)": "class-cake.error.fatalerrorexception.html", "FieldInterface (interface)": "interface-cake.database.expression.fieldinterface.html", "FieldTrait (trait)": "trait-cake.database.expression.fieldtrait.html", "FieldTypeConverter (class)": "class-cake.database.fieldtypeconverter.html", "FieldTypeConverter::$_driver": "class-cake.database.fieldtypeconverter.html#$_driver", "FieldTypeConverter::$_typeMap": "class-cake.database.fieldtypeconverter.html#$_typeMap", "FieldTypeConverter::$batchingTypeMap": "class-cake.database.fieldtypeconverter.html#$batchingTypeMap", "FieldTypeConverter::$types": "class-cake.database.fieldtypeconverter.html#$types", "FieldTypeConverter::__construct()()": "class-cake.database.fieldtypeconverter.html#__construct()", "FieldTypeConverter::__invoke()()": "class-cake.database.fieldtypeconverter.html#__invoke()", "File (class)": "class-cake.filesystem.file.html", "File::$Folder": "class-cake.filesystem.file.html#$Folder", "File::$handle": "class-cake.filesystem.file.html#$handle", "File::$info": "class-cake.filesystem.file.html#$info", "File::$lock": "class-cake.filesystem.file.html#$lock", "File::$name": "class-cake.filesystem.file.html#$name", "File::$path": "class-cake.filesystem.file.html#$path", "File::__construct()()": "class-cake.filesystem.file.html#__construct()", "File::__destruct()()": "class-cake.filesystem.file.html#__destruct()", "File::_basename()()": "class-cake.filesystem.file.html#_basename()", "File::append()()": "class-cake.filesystem.file.html#append()", "File::clearStatCache()()": "class-cake.filesystem.file.html#clearStatCache()", "File::close()()": "class-cake.filesystem.file.html#close()", "File::copy()()": "class-cake.filesystem.file.html#copy()", "File::create()()": "class-cake.filesystem.file.html#create()", "File::delete()()": "class-cake.filesystem.file.html#delete()", "File::executable()()": "class-cake.filesystem.file.html#executable()", "File::exists()()": "class-cake.filesystem.file.html#exists()", "File::ext()()": "class-cake.filesystem.file.html#ext()", "File::folder()()": "class-cake.filesystem.file.html#folder()", "File::group()()": "class-cake.filesystem.file.html#group()", "File::info()()": "class-cake.filesystem.file.html#info()", "File::lastAccess()()": "class-cake.filesystem.file.html#lastAccess()", "File::lastChange()()": "class-cake.filesystem.file.html#lastChange()", "File::md5()()": "class-cake.filesystem.file.html#md5()", "File::mime()()": "class-cake.filesystem.file.html#mime()", "File::name()()": "class-cake.filesystem.file.html#name()", "File::offset()()": "class-cake.filesystem.file.html#offset()", "File::open()()": "class-cake.filesystem.file.html#open()", "File::owner()()": "class-cake.filesystem.file.html#owner()", "File::perms()()": "class-cake.filesystem.file.html#perms()", "File::prepare()()": "class-cake.filesystem.file.html#prepare()", "File::pwd()()": "class-cake.filesystem.file.html#pwd()", "File::read()()": "class-cake.filesystem.file.html#read()", "File::readable()()": "class-cake.filesystem.file.html#readable()", "File::replaceText()()": "class-cake.filesystem.file.html#replaceText()", "File::safe()()": "class-cake.filesystem.file.html#safe()", "File::size()()": "class-cake.filesystem.file.html#size()", "File::writable()()": "class-cake.filesystem.file.html#writable()", "File::write()()": "class-cake.filesystem.file.html#write()", "FileConfigTrait (trait)": "trait-cake.core.configure.fileconfigtrait.html", "FileEngine (class)": "class-cake.cache.engine.fileengine.html", "FileEngine::$_config": "class-cake.cache.engine.fileengine.html#$_config", "FileEngine::$_configInitialized": "class-cake.cache.engine.fileengine.html#$_configInitialized", "FileEngine::$_defaultConfig": "class-cake.cache.engine.fileengine.html#$_defaultConfig", "FileEngine::$_File": "class-cake.cache.engine.fileengine.html#$_File", "FileEngine::$_groupPrefix": "class-cake.cache.engine.fileengine.html#$_groupPrefix", "FileEngine::$_init": "class-cake.cache.engine.fileengine.html#$_init", "FileEngine::_active()()": "class-cake.cache.engine.fileengine.html#_active()", "FileEngine::_clearDirectory()()": "class-cake.cache.engine.fileengine.html#_clearDirectory()", "FileEngine::_configDelete()()": "class-cake.cache.engine.fileengine.html#_configDelete()", "FileEngine::_configRead()()": "class-cake.cache.engine.fileengine.html#_configRead()", "FileEngine::_configWrite()()": "class-cake.cache.engine.fileengine.html#_configWrite()", "FileEngine::_key()()": "class-cake.cache.engine.fileengine.html#_key()", "FileEngine::_setKey()()": "class-cake.cache.engine.fileengine.html#_setKey()", "FileEngine::add()()": "class-cake.cache.engine.fileengine.html#add()", "FileEngine::clear()()": "class-cake.cache.engine.fileengine.html#clear()", "FileEngine::clearGroup()()": "class-cake.cache.engine.fileengine.html#clearGroup()", "FileEngine::configShallow()()": "class-cake.cache.engine.fileengine.html#configShallow()", "FileEngine::decrement()()": "class-cake.cache.engine.fileengine.html#decrement()", "FileEngine::delete()()": "class-cake.cache.engine.fileengine.html#delete()", "FileEngine::deleteMultiple()()": "class-cake.cache.engine.fileengine.html#deleteMultiple()", "FileEngine::duration()()": "class-cake.cache.engine.fileengine.html#duration()", "FileEngine::ensureValidKey()()": "class-cake.cache.engine.fileengine.html#ensureValidKey()", "FileEngine::ensureValidType()()": "class-cake.cache.engine.fileengine.html#ensureValidType()", "FileEngine::get()()": "class-cake.cache.engine.fileengine.html#get()", "FileEngine::getConfig()()": "class-cake.cache.engine.fileengine.html#getConfig()", "FileEngine::getConfigOrFail()()": "class-cake.cache.engine.fileengine.html#getConfigOrFail()", "FileEngine::getMultiple()()": "class-cake.cache.engine.fileengine.html#getMultiple()", "FileEngine::groups()()": "class-cake.cache.engine.fileengine.html#groups()", "FileEngine::has()()": "class-cake.cache.engine.fileengine.html#has()", "FileEngine::increment()()": "class-cake.cache.engine.fileengine.html#increment()", "FileEngine::init()()": "class-cake.cache.engine.fileengine.html#init()", "FileEngine::set()()": "class-cake.cache.engine.fileengine.html#set()", "FileEngine::setConfig()()": "class-cake.cache.engine.fileengine.html#setConfig()", "FileEngine::setMultiple()()": "class-cake.cache.engine.fileengine.html#setMultiple()", "FileEngine::warning()()": "class-cake.cache.engine.fileengine.html#warning()", "FileLog (class)": "class-cake.log.engine.filelog.html", "FileLog::$_config": "class-cake.log.engine.filelog.html#$_config", "FileLog::$_configInitialized": "class-cake.log.engine.filelog.html#$_configInitialized", "FileLog::$_defaultConfig": "class-cake.log.engine.filelog.html#$_defaultConfig", "FileLog::$_file": "class-cake.log.engine.filelog.html#$_file", "FileLog::$_path": "class-cake.log.engine.filelog.html#$_path", "FileLog::$_size": "class-cake.log.engine.filelog.html#$_size", "FileLog::$formatter": "class-cake.log.engine.filelog.html#$formatter", "FileLog::__construct()()": "class-cake.log.engine.filelog.html#__construct()", "FileLog::_configDelete()()": "class-cake.log.engine.filelog.html#_configDelete()", "FileLog::_configRead()()": "class-cake.log.engine.filelog.html#_configRead()", "FileLog::_configWrite()()": "class-cake.log.engine.filelog.html#_configWrite()", "FileLog::_format()()": "class-cake.log.engine.filelog.html#_format()", "FileLog::_getFilename()()": "class-cake.log.engine.filelog.html#_getFilename()", "FileLog::_rotateFile()()": "class-cake.log.engine.filelog.html#_rotateFile()", "FileLog::alert()()": "class-cake.log.engine.filelog.html#alert()", "FileLog::configShallow()()": "class-cake.log.engine.filelog.html#configShallow()", "FileLog::critical()()": "class-cake.log.engine.filelog.html#critical()", "FileLog::debug()()": "class-cake.log.engine.filelog.html#debug()", "FileLog::emergency()()": "class-cake.log.engine.filelog.html#emergency()", "FileLog::error()()": "class-cake.log.engine.filelog.html#error()", "FileLog::getConfig()()": "class-cake.log.engine.filelog.html#getConfig()", "FileLog::getConfigOrFail()()": "class-cake.log.engine.filelog.html#getConfigOrFail()", "FileLog::info()()": "class-cake.log.engine.filelog.html#info()", "FileLog::interpolate()()": "class-cake.log.engine.filelog.html#interpolate()", "FileLog::levels()()": "class-cake.log.engine.filelog.html#levels()", "FileLog::log()()": "class-cake.log.engine.filelog.html#log()", "FileLog::notice()()": "class-cake.log.engine.filelog.html#notice()", "FileLog::scopes()()": "class-cake.log.engine.filelog.html#scopes()", "FileLog::setConfig()()": "class-cake.log.engine.filelog.html#setConfig()", "FileLog::warning()()": "class-cake.log.engine.filelog.html#warning()", "FileSent (class)": "class-cake.testsuite.constraint.response.filesent.html", "FileSent::$response": "class-cake.testsuite.constraint.response.filesent.html#$response", "FileSent::__construct()()": "class-cake.testsuite.constraint.response.filesent.html#__construct()", "FileSent::_getBodyAsString()()": "class-cake.testsuite.constraint.response.filesent.html#_getBodyAsString()", "FileSent::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.filesent.html#additionalFailureDescription()", "FileSent::count()()": "class-cake.testsuite.constraint.response.filesent.html#count()", "FileSent::evaluate()()": "class-cake.testsuite.constraint.response.filesent.html#evaluate()", "FileSent::exporter()()": "class-cake.testsuite.constraint.response.filesent.html#exporter()", "FileSent::fail()()": "class-cake.testsuite.constraint.response.filesent.html#fail()", "FileSent::failureDescription()()": "class-cake.testsuite.constraint.response.filesent.html#failureDescription()", "FileSent::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.filesent.html#failureDescriptionInContext()", "FileSent::matches()()": "class-cake.testsuite.constraint.response.filesent.html#matches()", "FileSent::reduce()()": "class-cake.testsuite.constraint.response.filesent.html#reduce()", "FileSent::toString()()": "class-cake.testsuite.constraint.response.filesent.html#toString()", "FileSent::toStringInContext()()": "class-cake.testsuite.constraint.response.filesent.html#toStringInContext()", "FileSentAs (class)": "class-cake.testsuite.constraint.response.filesentas.html", "FileSentAs::$response": "class-cake.testsuite.constraint.response.filesentas.html#$response", "FileSentAs::__construct()()": "class-cake.testsuite.constraint.response.filesentas.html#__construct()", "FileSentAs::_getBodyAsString()()": "class-cake.testsuite.constraint.response.filesentas.html#_getBodyAsString()", "FileSentAs::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.filesentas.html#additionalFailureDescription()", "FileSentAs::count()()": "class-cake.testsuite.constraint.response.filesentas.html#count()", "FileSentAs::evaluate()()": "class-cake.testsuite.constraint.response.filesentas.html#evaluate()", "FileSentAs::exporter()()": "class-cake.testsuite.constraint.response.filesentas.html#exporter()", "FileSentAs::fail()()": "class-cake.testsuite.constraint.response.filesentas.html#fail()", "FileSentAs::failureDescription()()": "class-cake.testsuite.constraint.response.filesentas.html#failureDescription()", "FileSentAs::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.filesentas.html#failureDescriptionInContext()", "FileSentAs::matches()()": "class-cake.testsuite.constraint.response.filesentas.html#matches()", "FileSentAs::reduce()()": "class-cake.testsuite.constraint.response.filesentas.html#reduce()", "FileSentAs::toString()()": "class-cake.testsuite.constraint.response.filesentas.html#toString()", "FileSentAs::toStringInContext()()": "class-cake.testsuite.constraint.response.filesentas.html#toStringInContext()", "Filesystem (class)": "class-cake.filesystem.filesystem.html", "Filesystem (namespace)": "namespace-cake.filesystem.html", "Filesystem::copyDir()()": "class-cake.filesystem.filesystem.html#copyDir()", "Filesystem::deleteDir()()": "class-cake.filesystem.filesystem.html#deleteDir()", "Filesystem::dumpFile()()": "class-cake.filesystem.filesystem.html#dumpFile()", "Filesystem::filterIterator()()": "class-cake.filesystem.filesystem.html#filterIterator()", "Filesystem::find()()": "class-cake.filesystem.filesystem.html#find()", "Filesystem::findRecursive()()": "class-cake.filesystem.filesystem.html#findRecursive()", "Filesystem::isStream()()": "class-cake.filesystem.filesystem.html#isStream()", "Filesystem::mkdir()()": "class-cake.filesystem.filesystem.html#mkdir()", "FileWidget (class)": "class-cake.view.widget.filewidget.html", "FileWidget::$_templates": "class-cake.view.widget.filewidget.html#$_templates", "FileWidget::$defaults": "class-cake.view.widget.filewidget.html#$defaults", "FileWidget::__construct()()": "class-cake.view.widget.filewidget.html#__construct()", "FileWidget::mergeDefaults()()": "class-cake.view.widget.filewidget.html#mergeDefaults()", "FileWidget::render()()": "class-cake.view.widget.filewidget.html#render()", "FileWidget::secureFields()()": "class-cake.view.widget.filewidget.html#secureFields()", "FileWidget::setMaxLength()()": "class-cake.view.widget.filewidget.html#setMaxLength()", "FileWidget::setRequired()()": "class-cake.view.widget.filewidget.html#setRequired()", "FileWidget::setStep()()": "class-cake.view.widget.filewidget.html#setStep()", "FilterIterator (class)": "class-cake.collection.iterator.filteriterator.html", "FilterIterator::$_callback": "class-cake.collection.iterator.filteriterator.html#$_callback", "FilterIterator::__construct()()": "class-cake.collection.iterator.filteriterator.html#__construct()", "FilterIterator::__debugInfo()()": "class-cake.collection.iterator.filteriterator.html#__debugInfo()", "FilterIterator::__serialize()()": "class-cake.collection.iterator.filteriterator.html#__serialize()", "FilterIterator::__unserialize()()": "class-cake.collection.iterator.filteriterator.html#__unserialize()", "FilterIterator::_createMatcherFilter()()": "class-cake.collection.iterator.filteriterator.html#_createMatcherFilter()", "FilterIterator::_extract()()": "class-cake.collection.iterator.filteriterator.html#_extract()", "FilterIterator::_propertyExtractor()()": "class-cake.collection.iterator.filteriterator.html#_propertyExtractor()", "FilterIterator::_simpleExtract()()": "class-cake.collection.iterator.filteriterator.html#_simpleExtract()", "FilterIterator::append()()": "class-cake.collection.iterator.filteriterator.html#append()", "FilterIterator::appendItem()()": "class-cake.collection.iterator.filteriterator.html#appendItem()", "FilterIterator::avg()()": "class-cake.collection.iterator.filteriterator.html#avg()", "FilterIterator::buffered()()": "class-cake.collection.iterator.filteriterator.html#buffered()", "FilterIterator::cartesianProduct()()": "class-cake.collection.iterator.filteriterator.html#cartesianProduct()", "FilterIterator::chunk()()": "class-cake.collection.iterator.filteriterator.html#chunk()", "FilterIterator::chunkWithKeys()()": "class-cake.collection.iterator.filteriterator.html#chunkWithKeys()", "FilterIterator::combine()()": "class-cake.collection.iterator.filteriterator.html#combine()", "FilterIterator::compile()()": "class-cake.collection.iterator.filteriterator.html#compile()", "FilterIterator::contains()()": "class-cake.collection.iterator.filteriterator.html#contains()", "FilterIterator::count()()": "class-cake.collection.iterator.filteriterator.html#count()", "FilterIterator::countBy()()": "class-cake.collection.iterator.filteriterator.html#countBy()", "FilterIterator::countKeys()()": "class-cake.collection.iterator.filteriterator.html#countKeys()", "FilterIterator::each()()": "class-cake.collection.iterator.filteriterator.html#each()", "FilterIterator::every()()": "class-cake.collection.iterator.filteriterator.html#every()", "FilterIterator::extract()()": "class-cake.collection.iterator.filteriterator.html#extract()", "FilterIterator::filter()()": "class-cake.collection.iterator.filteriterator.html#filter()", "FilterIterator::first()()": "class-cake.collection.iterator.filteriterator.html#first()", "FilterIterator::firstMatch()()": "class-cake.collection.iterator.filteriterator.html#firstMatch()", "FilterIterator::groupBy()()": "class-cake.collection.iterator.filteriterator.html#groupBy()", "FilterIterator::indexBy()()": "class-cake.collection.iterator.filteriterator.html#indexBy()", "FilterIterator::insert()()": "class-cake.collection.iterator.filteriterator.html#insert()", "FilterIterator::isEmpty()()": "class-cake.collection.iterator.filteriterator.html#isEmpty()", "FilterIterator::jsonSerialize()()": "class-cake.collection.iterator.filteriterator.html#jsonSerialize()", "FilterIterator::last()()": "class-cake.collection.iterator.filteriterator.html#last()", "FilterIterator::lazy()()": "class-cake.collection.iterator.filteriterator.html#lazy()", "FilterIterator::listNested()()": "class-cake.collection.iterator.filteriterator.html#listNested()", "FilterIterator::map()()": "class-cake.collection.iterator.filteriterator.html#map()", "FilterIterator::match()()": "class-cake.collection.iterator.filteriterator.html#match()", "FilterIterator::max()()": "class-cake.collection.iterator.filteriterator.html#max()", "FilterIterator::median()()": "class-cake.collection.iterator.filteriterator.html#median()", "FilterIterator::min()()": "class-cake.collection.iterator.filteriterator.html#min()", "FilterIterator::nest()()": "class-cake.collection.iterator.filteriterator.html#nest()", "FilterIterator::newCollection()()": "class-cake.collection.iterator.filteriterator.html#newCollection()", "FilterIterator::optimizeUnwrap()()": "class-cake.collection.iterator.filteriterator.html#optimizeUnwrap()", "FilterIterator::prepend()()": "class-cake.collection.iterator.filteriterator.html#prepend()", "FilterIterator::prependItem()()": "class-cake.collection.iterator.filteriterator.html#prependItem()", "FilterIterator::reduce()()": "class-cake.collection.iterator.filteriterator.html#reduce()", "FilterIterator::reject()()": "class-cake.collection.iterator.filteriterator.html#reject()", "FilterIterator::sample()()": "class-cake.collection.iterator.filteriterator.html#sample()", "FilterIterator::serialize()()": "class-cake.collection.iterator.filteriterator.html#serialize()", "FilterIterator::shuffle()()": "class-cake.collection.iterator.filteriterator.html#shuffle()", "FilterIterator::skip()()": "class-cake.collection.iterator.filteriterator.html#skip()", "FilterIterator::some()()": "class-cake.collection.iterator.filteriterator.html#some()", "FilterIterator::sortBy()()": "class-cake.collection.iterator.filteriterator.html#sortBy()", "FilterIterator::stopWhen()()": "class-cake.collection.iterator.filteriterator.html#stopWhen()", "FilterIterator::sumOf()()": "class-cake.collection.iterator.filteriterator.html#sumOf()", "FilterIterator::take()()": "class-cake.collection.iterator.filteriterator.html#take()", "FilterIterator::takeLast()()": "class-cake.collection.iterator.filteriterator.html#takeLast()", "FilterIterator::through()()": "class-cake.collection.iterator.filteriterator.html#through()", "FilterIterator::toArray()()": "class-cake.collection.iterator.filteriterator.html#toArray()", "FilterIterator::toList()()": "class-cake.collection.iterator.filteriterator.html#toList()", "FilterIterator::transpose()()": "class-cake.collection.iterator.filteriterator.html#transpose()", "FilterIterator::unfold()()": "class-cake.collection.iterator.filteriterator.html#unfold()", "FilterIterator::unserialize()()": "class-cake.collection.iterator.filteriterator.html#unserialize()", "FilterIterator::unwrap()()": "class-cake.collection.iterator.filteriterator.html#unwrap()", "FilterIterator::zip()()": "class-cake.collection.iterator.filteriterator.html#zip()", "FilterIterator::zipWith()()": "class-cake.collection.iterator.filteriterator.html#zipWith()", "FixtureHelper (class)": "class-cake.testsuite.fixture.fixturehelper.html", "FixtureHelper::getForeignReferences()()": "class-cake.testsuite.fixture.fixturehelper.html#getForeignReferences()", "FixtureHelper::insert()()": "class-cake.testsuite.fixture.fixturehelper.html#insert()", "FixtureHelper::insertConnection()()": "class-cake.testsuite.fixture.fixturehelper.html#insertConnection()", "FixtureHelper::loadFixtures()()": "class-cake.testsuite.fixture.fixturehelper.html#loadFixtures()", "FixtureHelper::runPerConnection()()": "class-cake.testsuite.fixture.fixturehelper.html#runPerConnection()", "FixtureHelper::sortByConstraint()()": "class-cake.testsuite.fixture.fixturehelper.html#sortByConstraint()", "FixtureHelper::truncate()()": "class-cake.testsuite.fixture.fixturehelper.html#truncate()", "FixtureHelper::truncateConnection()()": "class-cake.testsuite.fixture.fixturehelper.html#truncateConnection()", "FixtureInjector (class)": "class-cake.testsuite.fixture.fixtureinjector.html", "FixtureInjector::$_first": "class-cake.testsuite.fixture.fixtureinjector.html#$_first", "FixtureInjector::$_fixtureManager": "class-cake.testsuite.fixture.fixtureinjector.html#$_fixtureManager", "FixtureInjector::__construct()()": "class-cake.testsuite.fixture.fixtureinjector.html#__construct()", "FixtureInjector::addError()()": "class-cake.testsuite.fixture.fixtureinjector.html#addError()", "FixtureInjector::addFailure()()": "class-cake.testsuite.fixture.fixtureinjector.html#addFailure()", "FixtureInjector::addIncompleteTest()()": "class-cake.testsuite.fixture.fixtureinjector.html#addIncompleteTest()", "FixtureInjector::addRiskyTest()()": "class-cake.testsuite.fixture.fixtureinjector.html#addRiskyTest()", "FixtureInjector::addSkippedTest()()": "class-cake.testsuite.fixture.fixtureinjector.html#addSkippedTest()", "FixtureInjector::addWarning()()": "class-cake.testsuite.fixture.fixtureinjector.html#addWarning()", "FixtureInjector::endTest()()": "class-cake.testsuite.fixture.fixtureinjector.html#endTest()", "FixtureInjector::endTestSuite()()": "class-cake.testsuite.fixture.fixtureinjector.html#endTestSuite()", "FixtureInjector::startTest()()": "class-cake.testsuite.fixture.fixtureinjector.html#startTest()", "FixtureInjector::startTestSuite()()": "class-cake.testsuite.fixture.fixtureinjector.html#startTestSuite()", "FixtureInterface (interface)": "interface-cake.datasource.fixtureinterface.html", "FixtureManager (class)": "class-cake.testsuite.fixture.fixturemanager.html", "FixtureManager::$_debug": "class-cake.testsuite.fixture.fixturemanager.html#$_debug", "FixtureManager::$_fixtureMap": "class-cake.testsuite.fixture.fixturemanager.html#$_fixtureMap", "FixtureManager::$_initialized": "class-cake.testsuite.fixture.fixturemanager.html#$_initialized", "FixtureManager::$_insertionMap": "class-cake.testsuite.fixture.fixturemanager.html#$_insertionMap", "FixtureManager::$_loaded": "class-cake.testsuite.fixture.fixturemanager.html#$_loaded", "FixtureManager::$_processed": "class-cake.testsuite.fixture.fixturemanager.html#$_processed", "FixtureManager::_aliasConnections()()": "class-cake.testsuite.fixture.fixturemanager.html#_aliasConnections()", "FixtureManager::_fixtureConnections()()": "class-cake.testsuite.fixture.fixturemanager.html#_fixtureConnections()", "FixtureManager::_initDb()()": "class-cake.testsuite.fixture.fixturemanager.html#_initDb()", "FixtureManager::_loadFixtures()()": "class-cake.testsuite.fixture.fixturemanager.html#_loadFixtures()", "FixtureManager::_runOperation()()": "class-cake.testsuite.fixture.fixturemanager.html#_runOperation()", "FixtureManager::_setupTable()()": "class-cake.testsuite.fixture.fixturemanager.html#_setupTable()", "FixtureManager::fixturize()()": "class-cake.testsuite.fixture.fixturemanager.html#fixturize()", "FixtureManager::getInserted()()": "class-cake.testsuite.fixture.fixturemanager.html#getInserted()", "FixtureManager::isFixtureSetup()()": "class-cake.testsuite.fixture.fixturemanager.html#isFixtureSetup()", "FixtureManager::load()()": "class-cake.testsuite.fixture.fixturemanager.html#load()", "FixtureManager::loaded()()": "class-cake.testsuite.fixture.fixturemanager.html#loaded()", "FixtureManager::loadSingle()()": "class-cake.testsuite.fixture.fixturemanager.html#loadSingle()", "FixtureManager::setDebug()()": "class-cake.testsuite.fixture.fixturemanager.html#setDebug()", "FixtureManager::shutDown()()": "class-cake.testsuite.fixture.fixturemanager.html#shutDown()", "FixtureManager::unload()()": "class-cake.testsuite.fixture.fixturemanager.html#unload()", "FixtureStrategyInterface (interface)": "interface-cake.testsuite.fixture.fixturestrategyinterface.html", "FlashComponent (class)": "class-cake.controller.component.flashcomponent.html", "FlashComponent::$_componentMap": "class-cake.controller.component.flashcomponent.html#$_componentMap", "FlashComponent::$_config": "class-cake.controller.component.flashcomponent.html#$_config", "FlashComponent::$_configInitialized": "class-cake.controller.component.flashcomponent.html#$_configInitialized", "FlashComponent::$_defaultConfig": "class-cake.controller.component.flashcomponent.html#$_defaultConfig", "FlashComponent::$_registry": "class-cake.controller.component.flashcomponent.html#$_registry", "FlashComponent::$components": "class-cake.controller.component.flashcomponent.html#$components", "FlashComponent::__call()()": "class-cake.controller.component.flashcomponent.html#__call()", "FlashComponent::__construct()()": "class-cake.controller.component.flashcomponent.html#__construct()", "FlashComponent::__debugInfo()()": "class-cake.controller.component.flashcomponent.html#__debugInfo()", "FlashComponent::__get()()": "class-cake.controller.component.flashcomponent.html#__get()", "FlashComponent::_configDelete()()": "class-cake.controller.component.flashcomponent.html#_configDelete()", "FlashComponent::_configRead()()": "class-cake.controller.component.flashcomponent.html#_configRead()", "FlashComponent::_configWrite()()": "class-cake.controller.component.flashcomponent.html#_configWrite()", "FlashComponent::configShallow()()": "class-cake.controller.component.flashcomponent.html#configShallow()", "FlashComponent::error()()": "class-cake.controller.component.flashcomponent.html#error()", "FlashComponent::flash()()": "class-cake.controller.component.flashcomponent.html#flash()", "FlashComponent::getConfig()()": "class-cake.controller.component.flashcomponent.html#getConfig()", "FlashComponent::getConfigOrFail()()": "class-cake.controller.component.flashcomponent.html#getConfigOrFail()", "FlashComponent::getController()()": "class-cake.controller.component.flashcomponent.html#getController()", "FlashComponent::implementedEvents()()": "class-cake.controller.component.flashcomponent.html#implementedEvents()", "FlashComponent::info()()": "class-cake.controller.component.flashcomponent.html#info()", "FlashComponent::initialize()()": "class-cake.controller.component.flashcomponent.html#initialize()", "FlashComponent::log()()": "class-cake.controller.component.flashcomponent.html#log()", "FlashComponent::set()()": "class-cake.controller.component.flashcomponent.html#set()", "FlashComponent::setConfig()()": "class-cake.controller.component.flashcomponent.html#setConfig()", "FlashComponent::success()()": "class-cake.controller.component.flashcomponent.html#success()", "FlashComponent::warning()()": "class-cake.controller.component.flashcomponent.html#warning()", "FlashHelper (class)": "class-cake.view.helper.flashhelper.html", "FlashHelper::$_config": "class-cake.view.helper.flashhelper.html#$_config", "FlashHelper::$_configInitialized": "class-cake.view.helper.flashhelper.html#$_configInitialized", "FlashHelper::$_defaultConfig": "class-cake.view.helper.flashhelper.html#$_defaultConfig", "FlashHelper::$_helperMap": "class-cake.view.helper.flashhelper.html#$_helperMap", "FlashHelper::$_View": "class-cake.view.helper.flashhelper.html#$_View", "FlashHelper::$helpers": "class-cake.view.helper.flashhelper.html#$helpers", "FlashHelper::__call()()": "class-cake.view.helper.flashhelper.html#__call()", "FlashHelper::__construct()()": "class-cake.view.helper.flashhelper.html#__construct()", "FlashHelper::__debugInfo()()": "class-cake.view.helper.flashhelper.html#__debugInfo()", "FlashHelper::__get()()": "class-cake.view.helper.flashhelper.html#__get()", "FlashHelper::_configDelete()()": "class-cake.view.helper.flashhelper.html#_configDelete()", "FlashHelper::_configRead()()": "class-cake.view.helper.flashhelper.html#_configRead()", "FlashHelper::_configWrite()()": "class-cake.view.helper.flashhelper.html#_configWrite()", "FlashHelper::_confirm()()": "class-cake.view.helper.flashhelper.html#_confirm()", "FlashHelper::addClass()()": "class-cake.view.helper.flashhelper.html#addClass()", "FlashHelper::configShallow()()": "class-cake.view.helper.flashhelper.html#configShallow()", "FlashHelper::getConfig()()": "class-cake.view.helper.flashhelper.html#getConfig()", "FlashHelper::getConfigOrFail()()": "class-cake.view.helper.flashhelper.html#getConfigOrFail()", "FlashHelper::getView()()": "class-cake.view.helper.flashhelper.html#getView()", "FlashHelper::implementedEvents()()": "class-cake.view.helper.flashhelper.html#implementedEvents()", "FlashHelper::initialize()()": "class-cake.view.helper.flashhelper.html#initialize()", "FlashHelper::render()()": "class-cake.view.helper.flashhelper.html#render()", "FlashHelper::setConfig()()": "class-cake.view.helper.flashhelper.html#setConfig()", "FlashMessage (class)": "class-cake.http.flashmessage.html", "FlashMessage::$_config": "class-cake.http.flashmessage.html#$_config", "FlashMessage::$_configInitialized": "class-cake.http.flashmessage.html#$_configInitialized", "FlashMessage::$_defaultConfig": "class-cake.http.flashmessage.html#$_defaultConfig", "FlashMessage::$session": "class-cake.http.flashmessage.html#$session", "FlashMessage::__construct()()": "class-cake.http.flashmessage.html#__construct()", "FlashMessage::_configDelete()()": "class-cake.http.flashmessage.html#_configDelete()", "FlashMessage::_configRead()()": "class-cake.http.flashmessage.html#_configRead()", "FlashMessage::_configWrite()()": "class-cake.http.flashmessage.html#_configWrite()", "FlashMessage::configShallow()()": "class-cake.http.flashmessage.html#configShallow()", "FlashMessage::consume()()": "class-cake.http.flashmessage.html#consume()", "FlashMessage::error()()": "class-cake.http.flashmessage.html#error()", "FlashMessage::getConfig()()": "class-cake.http.flashmessage.html#getConfig()", "FlashMessage::getConfigOrFail()()": "class-cake.http.flashmessage.html#getConfigOrFail()", "FlashMessage::info()()": "class-cake.http.flashmessage.html#info()", "FlashMessage::set()()": "class-cake.http.flashmessage.html#set()", "FlashMessage::setConfig()()": "class-cake.http.flashmessage.html#setConfig()", "FlashMessage::setExceptionMessage()()": "class-cake.http.flashmessage.html#setExceptionMessage()", "FlashMessage::success()()": "class-cake.http.flashmessage.html#success()", "FlashMessage::warning()()": "class-cake.http.flashmessage.html#warning()", "FlashParamEquals (class)": "class-cake.testsuite.constraint.session.flashparamequals.html", "FlashParamEquals::$at": "class-cake.testsuite.constraint.session.flashparamequals.html#$at", "FlashParamEquals::$key": "class-cake.testsuite.constraint.session.flashparamequals.html#$key", "FlashParamEquals::$param": "class-cake.testsuite.constraint.session.flashparamequals.html#$param", "FlashParamEquals::$session": "class-cake.testsuite.constraint.session.flashparamequals.html#$session", "FlashParamEquals::__construct()()": "class-cake.testsuite.constraint.session.flashparamequals.html#__construct()", "FlashParamEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.session.flashparamequals.html#additionalFailureDescription()", "FlashParamEquals::count()()": "class-cake.testsuite.constraint.session.flashparamequals.html#count()", "FlashParamEquals::evaluate()()": "class-cake.testsuite.constraint.session.flashparamequals.html#evaluate()", "FlashParamEquals::exporter()()": "class-cake.testsuite.constraint.session.flashparamequals.html#exporter()", "FlashParamEquals::fail()()": "class-cake.testsuite.constraint.session.flashparamequals.html#fail()", "FlashParamEquals::failureDescription()()": "class-cake.testsuite.constraint.session.flashparamequals.html#failureDescription()", "FlashParamEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.session.flashparamequals.html#failureDescriptionInContext()", "FlashParamEquals::matches()()": "class-cake.testsuite.constraint.session.flashparamequals.html#matches()", "FlashParamEquals::reduce()()": "class-cake.testsuite.constraint.session.flashparamequals.html#reduce()", "FlashParamEquals::toString()()": "class-cake.testsuite.constraint.session.flashparamequals.html#toString()", "FlashParamEquals::toStringInContext()()": "class-cake.testsuite.constraint.session.flashparamequals.html#toStringInContext()", "FloatType (class)": "class-cake.database.type.floattype.html", "FloatType::$_name": "class-cake.database.type.floattype.html#$_name", "FloatType::$_useLocaleParser": "class-cake.database.type.floattype.html#$_useLocaleParser", "FloatType::$numberClass": "class-cake.database.type.floattype.html#$numberClass", "FloatType::__construct()()": "class-cake.database.type.floattype.html#__construct()", "FloatType::_parseValue()()": "class-cake.database.type.floattype.html#_parseValue()", "FloatType::getBaseType()()": "class-cake.database.type.floattype.html#getBaseType()", "FloatType::getName()()": "class-cake.database.type.floattype.html#getName()", "FloatType::manyToPHP()()": "class-cake.database.type.floattype.html#manyToPHP()", "FloatType::marshal()()": "class-cake.database.type.floattype.html#marshal()", "FloatType::newId()()": "class-cake.database.type.floattype.html#newId()", "FloatType::toDatabase()()": "class-cake.database.type.floattype.html#toDatabase()", "FloatType::toPHP()()": "class-cake.database.type.floattype.html#toPHP()", "FloatType::toStatement()()": "class-cake.database.type.floattype.html#toStatement()", "FloatType::useLocaleParser()()": "class-cake.database.type.floattype.html#useLocaleParser()", "Folder (class)": "class-cake.filesystem.folder.html", "Folder::$_directories": "class-cake.filesystem.folder.html#$_directories", "Folder::$_errors": "class-cake.filesystem.folder.html#$_errors", "Folder::$_files": "class-cake.filesystem.folder.html#$_files", "Folder::$_fsorts": "class-cake.filesystem.folder.html#$_fsorts", "Folder::$_messages": "class-cake.filesystem.folder.html#$_messages", "Folder::$mode": "class-cake.filesystem.folder.html#$mode", "Folder::$path": "class-cake.filesystem.folder.html#$path", "Folder::$sort": "class-cake.filesystem.folder.html#$sort", "Folder::__construct()()": "class-cake.filesystem.folder.html#__construct()", "Folder::_findRecursive()()": "class-cake.filesystem.folder.html#_findRecursive()", "Folder::addPathElement()()": "class-cake.filesystem.folder.html#addPathElement()", "Folder::cd()()": "class-cake.filesystem.folder.html#cd()", "Folder::chmod()()": "class-cake.filesystem.folder.html#chmod()", "Folder::copy()()": "class-cake.filesystem.folder.html#copy()", "Folder::correctSlashFor()()": "class-cake.filesystem.folder.html#correctSlashFor()", "Folder::create()()": "class-cake.filesystem.folder.html#create()", "Folder::delete()()": "class-cake.filesystem.folder.html#delete()", "Folder::dirsize()()": "class-cake.filesystem.folder.html#dirsize()", "Folder::errors()()": "class-cake.filesystem.folder.html#errors()", "Folder::find()()": "class-cake.filesystem.folder.html#find()", "Folder::findRecursive()()": "class-cake.filesystem.folder.html#findRecursive()", "Folder::inPath()()": "class-cake.filesystem.folder.html#inPath()", "Folder::isAbsolute()()": "class-cake.filesystem.folder.html#isAbsolute()", "Folder::isRegisteredStreamWrapper()()": "class-cake.filesystem.folder.html#isRegisteredStreamWrapper()", "Folder::isSlashTerm()()": "class-cake.filesystem.folder.html#isSlashTerm()", "Folder::isWindowsPath()()": "class-cake.filesystem.folder.html#isWindowsPath()", "Folder::messages()()": "class-cake.filesystem.folder.html#messages()", "Folder::move()()": "class-cake.filesystem.folder.html#move()", "Folder::normalizeFullPath()()": "class-cake.filesystem.folder.html#normalizeFullPath()", "Folder::pwd()()": "class-cake.filesystem.folder.html#pwd()", "Folder::read()()": "class-cake.filesystem.folder.html#read()", "Folder::realpath()()": "class-cake.filesystem.folder.html#realpath()", "Folder::slashTerm()()": "class-cake.filesystem.folder.html#slashTerm()", "Folder::subdirectories()()": "class-cake.filesystem.folder.html#subdirectories()", "Folder::tree()()": "class-cake.filesystem.folder.html#tree()", "ForbiddenException (class)": "class-cake.http.exception.forbiddenexception.html", "Form (class)": "class-cake.form.form.html", "Form (namespace)": "namespace-cake.form.html", "Form::$_data": "class-cake.form.form.html#$_data", "Form::$_errors": "class-cake.form.form.html#$_errors", "Form::$_eventClass": "class-cake.form.form.html#$_eventClass", "Form::$_eventManager": "class-cake.form.form.html#$_eventManager", "Form::$_schema": "class-cake.form.form.html#$_schema", "Form::$_schemaClass": "class-cake.form.form.html#$_schemaClass", "Form::$_validatorClass": "class-cake.form.form.html#$_validatorClass", "Form::$_validators": "class-cake.form.form.html#$_validators", "Form::__construct()()": "class-cake.form.form.html#__construct()", "Form::__debugInfo()()": "class-cake.form.form.html#__debugInfo()", "Form::_buildSchema()()": "class-cake.form.form.html#_buildSchema()", "Form::_execute()()": "class-cake.form.form.html#_execute()", "Form::createValidator()()": "class-cake.form.form.html#createValidator()", "Form::dispatchEvent()()": "class-cake.form.form.html#dispatchEvent()", "Form::execute()()": "class-cake.form.form.html#execute()", "Form::getData()()": "class-cake.form.form.html#getData()", "Form::getErrors()()": "class-cake.form.form.html#getErrors()", "Form::getEventManager()()": "class-cake.form.form.html#getEventManager()", "Form::getSchema()()": "class-cake.form.form.html#getSchema()", "Form::getValidator()()": "class-cake.form.form.html#getValidator()", "Form::hasValidator()()": "class-cake.form.form.html#hasValidator()", "Form::implementedEvents()()": "class-cake.form.form.html#implementedEvents()", "Form::schema()()": "class-cake.form.form.html#schema()", "Form::set()()": "class-cake.form.form.html#set()", "Form::setData()()": "class-cake.form.form.html#setData()", "Form::setErrors()()": "class-cake.form.form.html#setErrors()", "Form::setEventManager()()": "class-cake.form.form.html#setEventManager()", "Form::setSchema()()": "class-cake.form.form.html#setSchema()", "Form::setValidator()()": "class-cake.form.form.html#setValidator()", "Form::validate()()": "class-cake.form.form.html#validate()", "Form::validationDefault()()": "class-cake.form.form.html#validationDefault()", "Form::validationMethodExists()()": "class-cake.form.form.html#validationMethodExists()", "FormatterInterface (interface)": "interface-cake.error.debug.formatterinterface.html", "FormatterLocator (class)": "class-cake.i18n.formatterlocator.html", "FormatterLocator::$converted": "class-cake.i18n.formatterlocator.html#$converted", "FormatterLocator::$registry": "class-cake.i18n.formatterlocator.html#$registry", "FormatterLocator::__construct()()": "class-cake.i18n.formatterlocator.html#__construct()", "FormatterLocator::get()()": "class-cake.i18n.formatterlocator.html#get()", "FormatterLocator::set()()": "class-cake.i18n.formatterlocator.html#set()", "FormAuthenticate (class)": "class-cake.auth.formauthenticate.html", "FormAuthenticate::$_config": "class-cake.auth.formauthenticate.html#$_config", "FormAuthenticate::$_configInitialized": "class-cake.auth.formauthenticate.html#$_configInitialized", "FormAuthenticate::$_defaultConfig": "class-cake.auth.formauthenticate.html#$_defaultConfig", "FormAuthenticate::$_needsPasswordRehash": "class-cake.auth.formauthenticate.html#$_needsPasswordRehash", "FormAuthenticate::$_passwordHasher": "class-cake.auth.formauthenticate.html#$_passwordHasher", "FormAuthenticate::$_registry": "class-cake.auth.formauthenticate.html#$_registry", "FormAuthenticate::$_tableLocator": "class-cake.auth.formauthenticate.html#$_tableLocator", "FormAuthenticate::$defaultTable": "class-cake.auth.formauthenticate.html#$defaultTable", "FormAuthenticate::__construct()()": "class-cake.auth.formauthenticate.html#__construct()", "FormAuthenticate::_checkFields()()": "class-cake.auth.formauthenticate.html#_checkFields()", "FormAuthenticate::_configDelete()()": "class-cake.auth.formauthenticate.html#_configDelete()", "FormAuthenticate::_configRead()()": "class-cake.auth.formauthenticate.html#_configRead()", "FormAuthenticate::_configWrite()()": "class-cake.auth.formauthenticate.html#_configWrite()", "FormAuthenticate::_findUser()()": "class-cake.auth.formauthenticate.html#_findUser()", "FormAuthenticate::_query()()": "class-cake.auth.formauthenticate.html#_query()", "FormAuthenticate::authenticate()()": "class-cake.auth.formauthenticate.html#authenticate()", "FormAuthenticate::configShallow()()": "class-cake.auth.formauthenticate.html#configShallow()", "FormAuthenticate::fetchTable()()": "class-cake.auth.formauthenticate.html#fetchTable()", "FormAuthenticate::getConfig()()": "class-cake.auth.formauthenticate.html#getConfig()", "FormAuthenticate::getConfigOrFail()()": "class-cake.auth.formauthenticate.html#getConfigOrFail()", "FormAuthenticate::getTableLocator()()": "class-cake.auth.formauthenticate.html#getTableLocator()", "FormAuthenticate::getUser()()": "class-cake.auth.formauthenticate.html#getUser()", "FormAuthenticate::implementedEvents()()": "class-cake.auth.formauthenticate.html#implementedEvents()", "FormAuthenticate::needsPasswordRehash()()": "class-cake.auth.formauthenticate.html#needsPasswordRehash()", "FormAuthenticate::passwordHasher()()": "class-cake.auth.formauthenticate.html#passwordHasher()", "FormAuthenticate::setConfig()()": "class-cake.auth.formauthenticate.html#setConfig()", "FormAuthenticate::setTableLocator()()": "class-cake.auth.formauthenticate.html#setTableLocator()", "FormAuthenticate::unauthenticated()()": "class-cake.auth.formauthenticate.html#unauthenticated()", "FormContext (class)": "class-cake.view.form.formcontext.html", "FormContext::$_form": "class-cake.view.form.formcontext.html#$_form", "FormContext::$_validator": "class-cake.view.form.formcontext.html#$_validator", "FormContext::__construct()()": "class-cake.view.form.formcontext.html#__construct()", "FormContext::_schemaDefault()()": "class-cake.view.form.formcontext.html#_schemaDefault()", "FormContext::attributes()()": "class-cake.view.form.formcontext.html#attributes()", "FormContext::error()()": "class-cake.view.form.formcontext.html#error()", "FormContext::fieldNames()()": "class-cake.view.form.formcontext.html#fieldNames()", "FormContext::getMaxLength()()": "class-cake.view.form.formcontext.html#getMaxLength()", "FormContext::getPrimaryKey()()": "class-cake.view.form.formcontext.html#getPrimaryKey()", "FormContext::getRequiredMessage()()": "class-cake.view.form.formcontext.html#getRequiredMessage()", "FormContext::hasError()()": "class-cake.view.form.formcontext.html#hasError()", "FormContext::isCreate()()": "class-cake.view.form.formcontext.html#isCreate()", "FormContext::isPrimaryKey()()": "class-cake.view.form.formcontext.html#isPrimaryKey()", "FormContext::isRequired()()": "class-cake.view.form.formcontext.html#isRequired()", "FormContext::primaryKey()()": "class-cake.view.form.formcontext.html#primaryKey()", "FormContext::type()()": "class-cake.view.form.formcontext.html#type()", "FormContext::val()()": "class-cake.view.form.formcontext.html#val()", "FormData (class)": "class-cake.http.client.formdata.html", "FormData::$_boundary": "class-cake.http.client.formdata.html#$_boundary", "FormData::$_hasComplexPart": "class-cake.http.client.formdata.html#$_hasComplexPart", "FormData::$_hasFile": "class-cake.http.client.formdata.html#$_hasFile", "FormData::$_parts": "class-cake.http.client.formdata.html#$_parts", "FormData::__toString()()": "class-cake.http.client.formdata.html#__toString()", "FormData::add()()": "class-cake.http.client.formdata.html#add()", "FormData::addFile()()": "class-cake.http.client.formdata.html#addFile()", "FormData::addMany()()": "class-cake.http.client.formdata.html#addMany()", "FormData::addRecursive()()": "class-cake.http.client.formdata.html#addRecursive()", "FormData::boundary()()": "class-cake.http.client.formdata.html#boundary()", "FormData::contentType()()": "class-cake.http.client.formdata.html#contentType()", "FormData::count()()": "class-cake.http.client.formdata.html#count()", "FormData::hasFile()()": "class-cake.http.client.formdata.html#hasFile()", "FormData::isMultipart()()": "class-cake.http.client.formdata.html#isMultipart()", "FormData::newPart()()": "class-cake.http.client.formdata.html#newPart()", "FormDataPart (class)": "class-cake.http.client.formdatapart.html", "FormDataPart::$_charset": "class-cake.http.client.formdatapart.html#$_charset", "FormDataPart::$_contentId": "class-cake.http.client.formdatapart.html#$_contentId", "FormDataPart::$_disposition": "class-cake.http.client.formdatapart.html#$_disposition", "FormDataPart::$_filename": "class-cake.http.client.formdatapart.html#$_filename", "FormDataPart::$_name": "class-cake.http.client.formdatapart.html#$_name", "FormDataPart::$_transferEncoding": "class-cake.http.client.formdatapart.html#$_transferEncoding", "FormDataPart::$_type": "class-cake.http.client.formdatapart.html#$_type", "FormDataPart::$_value": "class-cake.http.client.formdatapart.html#$_value", "FormDataPart::__construct()()": "class-cake.http.client.formdatapart.html#__construct()", "FormDataPart::__toString()()": "class-cake.http.client.formdatapart.html#__toString()", "FormDataPart::_headerParameterToString()()": "class-cake.http.client.formdatapart.html#_headerParameterToString()", "FormDataPart::contentId()()": "class-cake.http.client.formdatapart.html#contentId()", "FormDataPart::disposition()()": "class-cake.http.client.formdatapart.html#disposition()", "FormDataPart::filename()()": "class-cake.http.client.formdatapart.html#filename()", "FormDataPart::name()()": "class-cake.http.client.formdatapart.html#name()", "FormDataPart::transferEncoding()()": "class-cake.http.client.formdatapart.html#transferEncoding()", "FormDataPart::type()()": "class-cake.http.client.formdatapart.html#type()", "FormDataPart::value()()": "class-cake.http.client.formdatapart.html#value()", "FormHelper (class)": "class-cake.view.helper.formhelper.html", "FormHelper::$_config": "class-cake.view.helper.formhelper.html#$_config", "FormHelper::$_configInitialized": "class-cake.view.helper.formhelper.html#$_configInitialized", "FormHelper::$_context": "class-cake.view.helper.formhelper.html#$_context", "FormHelper::$_contextFactory": "class-cake.view.helper.formhelper.html#$_contextFactory", "FormHelper::$_defaultConfig": "class-cake.view.helper.formhelper.html#$_defaultConfig", "FormHelper::$_defaultWidgets": "class-cake.view.helper.formhelper.html#$_defaultWidgets", "FormHelper::$_groupedInputTypes": "class-cake.view.helper.formhelper.html#$_groupedInputTypes", "FormHelper::$_helperMap": "class-cake.view.helper.formhelper.html#$_helperMap", "FormHelper::$_idPrefix": "class-cake.view.helper.formhelper.html#$_idPrefix", "FormHelper::$_idSuffixes": "class-cake.view.helper.formhelper.html#$_idSuffixes", "FormHelper::$_lastAction": "class-cake.view.helper.formhelper.html#$_lastAction", "FormHelper::$_locator": "class-cake.view.helper.formhelper.html#$_locator", "FormHelper::$_templater": "class-cake.view.helper.formhelper.html#$_templater", "FormHelper::$_valueSources": "class-cake.view.helper.formhelper.html#$_valueSources", "FormHelper::$_View": "class-cake.view.helper.formhelper.html#$_View", "FormHelper::$formProtector": "class-cake.view.helper.formhelper.html#$formProtector", "FormHelper::$helpers": "class-cake.view.helper.formhelper.html#$helpers", "FormHelper::$Html": "class-cake.view.helper.formhelper.html#$Html", "FormHelper::$requestType": "class-cake.view.helper.formhelper.html#$requestType", "FormHelper::$supportedValueSources": "class-cake.view.helper.formhelper.html#$supportedValueSources", "FormHelper::$Url": "class-cake.view.helper.formhelper.html#$Url", "FormHelper::__call()()": "class-cake.view.helper.formhelper.html#__call()", "FormHelper::__construct()()": "class-cake.view.helper.formhelper.html#__construct()", "FormHelper::__debugInfo()()": "class-cake.view.helper.formhelper.html#__debugInfo()", "FormHelper::__get()()": "class-cake.view.helper.formhelper.html#__get()", "FormHelper::_clearIds()()": "class-cake.view.helper.formhelper.html#_clearIds()", "FormHelper::_configDelete()()": "class-cake.view.helper.formhelper.html#_configDelete()", "FormHelper::_configRead()()": "class-cake.view.helper.formhelper.html#_configRead()", "FormHelper::_configWrite()()": "class-cake.view.helper.formhelper.html#_configWrite()", "FormHelper::_confirm()()": "class-cake.view.helper.formhelper.html#_confirm()", "FormHelper::_csrfField()()": "class-cake.view.helper.formhelper.html#_csrfField()", "FormHelper::_domId()()": "class-cake.view.helper.formhelper.html#_domId()", "FormHelper::_extractOption()()": "class-cake.view.helper.formhelper.html#_extractOption()", "FormHelper::_formUrl()()": "class-cake.view.helper.formhelper.html#_formUrl()", "FormHelper::_getContext()()": "class-cake.view.helper.formhelper.html#_getContext()", "FormHelper::_getInput()()": "class-cake.view.helper.formhelper.html#_getInput()", "FormHelper::_getLabel()()": "class-cake.view.helper.formhelper.html#_getLabel()", "FormHelper::_groupTemplate()()": "class-cake.view.helper.formhelper.html#_groupTemplate()", "FormHelper::_id()()": "class-cake.view.helper.formhelper.html#_id()", "FormHelper::_idSuffix()()": "class-cake.view.helper.formhelper.html#_idSuffix()", "FormHelper::_initInputField()()": "class-cake.view.helper.formhelper.html#_initInputField()", "FormHelper::_inputContainerTemplate()()": "class-cake.view.helper.formhelper.html#_inputContainerTemplate()", "FormHelper::_inputLabel()()": "class-cake.view.helper.formhelper.html#_inputLabel()", "FormHelper::_inputType()()": "class-cake.view.helper.formhelper.html#_inputType()", "FormHelper::_isDisabled()()": "class-cake.view.helper.formhelper.html#_isDisabled()", "FormHelper::_lastAction()()": "class-cake.view.helper.formhelper.html#_lastAction()", "FormHelper::_magicOptions()()": "class-cake.view.helper.formhelper.html#_magicOptions()", "FormHelper::_optionsOptions()()": "class-cake.view.helper.formhelper.html#_optionsOptions()", "FormHelper::_parseOptions()()": "class-cake.view.helper.formhelper.html#_parseOptions()", "FormHelper::addClass()()": "class-cake.view.helper.formhelper.html#addClass()", "FormHelper::addContextProvider()()": "class-cake.view.helper.formhelper.html#addContextProvider()", "FormHelper::addWidget()()": "class-cake.view.helper.formhelper.html#addWidget()", "FormHelper::allControls()()": "class-cake.view.helper.formhelper.html#allControls()", "FormHelper::button()()": "class-cake.view.helper.formhelper.html#button()", "FormHelper::checkbox()()": "class-cake.view.helper.formhelper.html#checkbox()", "FormHelper::configShallow()()": "class-cake.view.helper.formhelper.html#configShallow()", "FormHelper::context()()": "class-cake.view.helper.formhelper.html#context()", "FormHelper::contextFactory()()": "class-cake.view.helper.formhelper.html#contextFactory()", "FormHelper::control()()": "class-cake.view.helper.formhelper.html#control()", "FormHelper::controls()()": "class-cake.view.helper.formhelper.html#controls()", "FormHelper::create()()": "class-cake.view.helper.formhelper.html#create()", "FormHelper::createFormProtector()()": "class-cake.view.helper.formhelper.html#createFormProtector()", "FormHelper::date()()": "class-cake.view.helper.formhelper.html#date()", "FormHelper::dateTime()()": "class-cake.view.helper.formhelper.html#dateTime()", "FormHelper::email()()": "class-cake.view.helper.formhelper.html#email()", "FormHelper::end()()": "class-cake.view.helper.formhelper.html#end()", "FormHelper::error()()": "class-cake.view.helper.formhelper.html#error()", "FormHelper::fieldset()()": "class-cake.view.helper.formhelper.html#fieldset()", "FormHelper::file()()": "class-cake.view.helper.formhelper.html#file()", "FormHelper::formatTemplate()()": "class-cake.view.helper.formhelper.html#formatTemplate()", "FormHelper::getConfig()()": "class-cake.view.helper.formhelper.html#getConfig()", "FormHelper::getConfigOrFail()()": "class-cake.view.helper.formhelper.html#getConfigOrFail()", "FormHelper::getFormProtector()()": "class-cake.view.helper.formhelper.html#getFormProtector()", "FormHelper::getSourceValue()()": "class-cake.view.helper.formhelper.html#getSourceValue()", "FormHelper::getTemplates()()": "class-cake.view.helper.formhelper.html#getTemplates()", "FormHelper::getValueSources()()": "class-cake.view.helper.formhelper.html#getValueSources()", "FormHelper::getView()()": "class-cake.view.helper.formhelper.html#getView()", "FormHelper::getWidgetLocator()()": "class-cake.view.helper.formhelper.html#getWidgetLocator()", "FormHelper::hidden()()": "class-cake.view.helper.formhelper.html#hidden()", "FormHelper::implementedEvents()()": "class-cake.view.helper.formhelper.html#implementedEvents()", "FormHelper::initialize()()": "class-cake.view.helper.formhelper.html#initialize()", "FormHelper::isFieldError()()": "class-cake.view.helper.formhelper.html#isFieldError()", "FormHelper::label()()": "class-cake.view.helper.formhelper.html#label()", "FormHelper::month()()": "class-cake.view.helper.formhelper.html#month()", "FormHelper::multiCheckbox()()": "class-cake.view.helper.formhelper.html#multiCheckbox()", "FormHelper::number()()": "class-cake.view.helper.formhelper.html#number()", "FormHelper::password()()": "class-cake.view.helper.formhelper.html#password()", "FormHelper::postButton()()": "class-cake.view.helper.formhelper.html#postButton()", "FormHelper::postLink()()": "class-cake.view.helper.formhelper.html#postLink()", "FormHelper::radio()()": "class-cake.view.helper.formhelper.html#radio()", "FormHelper::resetTemplates()()": "class-cake.view.helper.formhelper.html#resetTemplates()", "FormHelper::search()()": "class-cake.view.helper.formhelper.html#search()", "FormHelper::secure()()": "class-cake.view.helper.formhelper.html#secure()", "FormHelper::select()()": "class-cake.view.helper.formhelper.html#select()", "FormHelper::setConfig()()": "class-cake.view.helper.formhelper.html#setConfig()", "FormHelper::setRequiredAndCustomValidity()()": "class-cake.view.helper.formhelper.html#setRequiredAndCustomValidity()", "FormHelper::setTemplates()()": "class-cake.view.helper.formhelper.html#setTemplates()", "FormHelper::setValueSources()()": "class-cake.view.helper.formhelper.html#setValueSources()", "FormHelper::setWidgetLocator()()": "class-cake.view.helper.formhelper.html#setWidgetLocator()", "FormHelper::submit()()": "class-cake.view.helper.formhelper.html#submit()", "FormHelper::templater()()": "class-cake.view.helper.formhelper.html#templater()", "FormHelper::text()()": "class-cake.view.helper.formhelper.html#text()", "FormHelper::textarea()()": "class-cake.view.helper.formhelper.html#textarea()", "FormHelper::time()()": "class-cake.view.helper.formhelper.html#time()", "FormHelper::unlockField()()": "class-cake.view.helper.formhelper.html#unlockField()", "FormHelper::validateValueSources()()": "class-cake.view.helper.formhelper.html#validateValueSources()", "FormHelper::widget()()": "class-cake.view.helper.formhelper.html#widget()", "FormHelper::year()()": "class-cake.view.helper.formhelper.html#year()", "FormProtectionComponent (class)": "class-cake.controller.component.formprotectioncomponent.html", "FormProtectionComponent::$_componentMap": "class-cake.controller.component.formprotectioncomponent.html#$_componentMap", "FormProtectionComponent::$_config": "class-cake.controller.component.formprotectioncomponent.html#$_config", "FormProtectionComponent::$_configInitialized": "class-cake.controller.component.formprotectioncomponent.html#$_configInitialized", "FormProtectionComponent::$_defaultConfig": "class-cake.controller.component.formprotectioncomponent.html#$_defaultConfig", "FormProtectionComponent::$_registry": "class-cake.controller.component.formprotectioncomponent.html#$_registry", "FormProtectionComponent::$components": "class-cake.controller.component.formprotectioncomponent.html#$components", "FormProtectionComponent::__construct()()": "class-cake.controller.component.formprotectioncomponent.html#__construct()", "FormProtectionComponent::__debugInfo()()": "class-cake.controller.component.formprotectioncomponent.html#__debugInfo()", "FormProtectionComponent::__get()()": "class-cake.controller.component.formprotectioncomponent.html#__get()", "FormProtectionComponent::_configDelete()()": "class-cake.controller.component.formprotectioncomponent.html#_configDelete()", "FormProtectionComponent::_configRead()()": "class-cake.controller.component.formprotectioncomponent.html#_configRead()", "FormProtectionComponent::_configWrite()()": "class-cake.controller.component.formprotectioncomponent.html#_configWrite()", "FormProtectionComponent::configShallow()()": "class-cake.controller.component.formprotectioncomponent.html#configShallow()", "FormProtectionComponent::executeCallback()()": "class-cake.controller.component.formprotectioncomponent.html#executeCallback()", "FormProtectionComponent::getConfig()()": "class-cake.controller.component.formprotectioncomponent.html#getConfig()", "FormProtectionComponent::getConfigOrFail()()": "class-cake.controller.component.formprotectioncomponent.html#getConfigOrFail()", "FormProtectionComponent::getController()()": "class-cake.controller.component.formprotectioncomponent.html#getController()", "FormProtectionComponent::implementedEvents()()": "class-cake.controller.component.formprotectioncomponent.html#implementedEvents()", "FormProtectionComponent::initialize()()": "class-cake.controller.component.formprotectioncomponent.html#initialize()", "FormProtectionComponent::log()()": "class-cake.controller.component.formprotectioncomponent.html#log()", "FormProtectionComponent::setConfig()()": "class-cake.controller.component.formprotectioncomponent.html#setConfig()", "FormProtectionComponent::startup()()": "class-cake.controller.component.formprotectioncomponent.html#startup()", "FormProtectionComponent::validationFailure()()": "class-cake.controller.component.formprotectioncomponent.html#validationFailure()", "FormProtector (class)": "class-cake.form.formprotector.html", "FormProtector::$debugMessage": "class-cake.form.formprotector.html#$debugMessage", "FormProtector::$fields": "class-cake.form.formprotector.html#$fields", "FormProtector::$unlockedFields": "class-cake.form.formprotector.html#$unlockedFields", "FormProtector::__construct()()": "class-cake.form.formprotector.html#__construct()", "FormProtector::__debugInfo()()": "class-cake.form.formprotector.html#__debugInfo()", "FormProtector::addField()()": "class-cake.form.formprotector.html#addField()", "FormProtector::buildTokenData()()": "class-cake.form.formprotector.html#buildTokenData()", "FormProtector::debugCheckFields()()": "class-cake.form.formprotector.html#debugCheckFields()", "FormProtector::debugExpectedFields()()": "class-cake.form.formprotector.html#debugExpectedFields()", "FormProtector::debugTokenNotMatching()()": "class-cake.form.formprotector.html#debugTokenNotMatching()", "FormProtector::extractFields()()": "class-cake.form.formprotector.html#extractFields()", "FormProtector::extractHashParts()()": "class-cake.form.formprotector.html#extractHashParts()", "FormProtector::extractToken()()": "class-cake.form.formprotector.html#extractToken()", "FormProtector::generateHash()()": "class-cake.form.formprotector.html#generateHash()", "FormProtector::getError()()": "class-cake.form.formprotector.html#getError()", "FormProtector::getFieldNameArray()()": "class-cake.form.formprotector.html#getFieldNameArray()", "FormProtector::matchExistingFields()()": "class-cake.form.formprotector.html#matchExistingFields()", "FormProtector::sortedUnlockedFields()()": "class-cake.form.formprotector.html#sortedUnlockedFields()", "FormProtector::unlockField()()": "class-cake.form.formprotector.html#unlockField()", "FormProtector::validate()()": "class-cake.form.formprotector.html#validate()", "FrozenDate (class)": "class-cake.i18n.frozendate.html", "FrozenDate::$_formatters": "class-cake.i18n.frozendate.html#$_formatters", "FrozenDate::$_jsonEncodeFormat": "class-cake.i18n.frozendate.html#$_jsonEncodeFormat", "FrozenDate::$_lastErrors": "class-cake.i18n.frozendate.html#$_lastErrors", "FrozenDate::$_toStringFormat": "class-cake.i18n.frozendate.html#$_toStringFormat", "FrozenDate::$age": "class-cake.i18n.frozendate.html#$age", "FrozenDate::$day": "class-cake.i18n.frozendate.html#$day", "FrozenDate::$dayOfWeek": "class-cake.i18n.frozendate.html#$dayOfWeek", "FrozenDate::$dayOfWeekName": "class-cake.i18n.frozendate.html#$dayOfWeekName", "FrozenDate::$dayOfYear": "class-cake.i18n.frozendate.html#$dayOfYear", "FrozenDate::$days": "class-cake.i18n.frozendate.html#$days", "FrozenDate::$daysInMonth": "class-cake.i18n.frozendate.html#$daysInMonth", "FrozenDate::$defaultLocale": "class-cake.i18n.frozendate.html#$defaultLocale", "FrozenDate::$diffFormatter": "class-cake.i18n.frozendate.html#$diffFormatter", "FrozenDate::$dst": "class-cake.i18n.frozendate.html#$dst", "FrozenDate::$hour": "class-cake.i18n.frozendate.html#$hour", "FrozenDate::$lenientParsing": "class-cake.i18n.frozendate.html#$lenientParsing", "FrozenDate::$local": "class-cake.i18n.frozendate.html#$local", "FrozenDate::$micro": "class-cake.i18n.frozendate.html#$micro", "FrozenDate::$microsecond": "class-cake.i18n.frozendate.html#$microsecond", "FrozenDate::$minute": "class-cake.i18n.frozendate.html#$minute", "FrozenDate::$month": "class-cake.i18n.frozendate.html#$month", "FrozenDate::$niceFormat": "class-cake.i18n.frozendate.html#$niceFormat", "FrozenDate::$offset": "class-cake.i18n.frozendate.html#$offset", "FrozenDate::$offsetHours": "class-cake.i18n.frozendate.html#$offsetHours", "FrozenDate::$quarter": "class-cake.i18n.frozendate.html#$quarter", "FrozenDate::$relativePattern": "class-cake.i18n.frozendate.html#$relativePattern", "FrozenDate::$second": "class-cake.i18n.frozendate.html#$second", "FrozenDate::$timestamp": "class-cake.i18n.frozendate.html#$timestamp", "FrozenDate::$timezone": "class-cake.i18n.frozendate.html#$timezone", "FrozenDate::$timezoneName": "class-cake.i18n.frozendate.html#$timezoneName", "FrozenDate::$toStringFormat": "class-cake.i18n.frozendate.html#$toStringFormat", "FrozenDate::$tz": "class-cake.i18n.frozendate.html#$tz", "FrozenDate::$tzName": "class-cake.i18n.frozendate.html#$tzName", "FrozenDate::$utc": "class-cake.i18n.frozendate.html#$utc", "FrozenDate::$weekendDays": "class-cake.i18n.frozendate.html#$weekendDays", "FrozenDate::$weekEndsAt": "class-cake.i18n.frozendate.html#$weekEndsAt", "FrozenDate::$weekOfMonth": "class-cake.i18n.frozendate.html#$weekOfMonth", "FrozenDate::$weekOfYear": "class-cake.i18n.frozendate.html#$weekOfYear", "FrozenDate::$weekStartsAt": "class-cake.i18n.frozendate.html#$weekStartsAt", "FrozenDate::$wordAccuracy": "class-cake.i18n.frozendate.html#$wordAccuracy", "FrozenDate::$wordEnd": "class-cake.i18n.frozendate.html#$wordEnd", "FrozenDate::$wordFormat": "class-cake.i18n.frozendate.html#$wordFormat", "FrozenDate::$year": "class-cake.i18n.frozendate.html#$year", "FrozenDate::$yearIso": "class-cake.i18n.frozendate.html#$yearIso", "FrozenDate::__construct()()": "class-cake.i18n.frozendate.html#__construct()", "FrozenDate::__debugInfo()()": "class-cake.i18n.frozendate.html#__debugInfo()", "FrozenDate::__get()()": "class-cake.i18n.frozendate.html#__get()", "FrozenDate::__isset()()": "class-cake.i18n.frozendate.html#__isset()", "FrozenDate::__toString()()": "class-cake.i18n.frozendate.html#__toString()", "FrozenDate::_formatObject()()": "class-cake.i18n.frozendate.html#_formatObject()", "FrozenDate::add()()": "class-cake.i18n.frozendate.html#add()", "FrozenDate::addDay()()": "class-cake.i18n.frozendate.html#addDay()", "FrozenDate::addDays()()": "class-cake.i18n.frozendate.html#addDays()", "FrozenDate::addHour()()": "class-cake.i18n.frozendate.html#addHour()", "FrozenDate::addHours()()": "class-cake.i18n.frozendate.html#addHours()", "FrozenDate::addMinute()()": "class-cake.i18n.frozendate.html#addMinute()", "FrozenDate::addMinutes()()": "class-cake.i18n.frozendate.html#addMinutes()", "FrozenDate::addMonth()()": "class-cake.i18n.frozendate.html#addMonth()", "FrozenDate::addMonths()()": "class-cake.i18n.frozendate.html#addMonths()", "FrozenDate::addMonthsWithOverflow()()": "class-cake.i18n.frozendate.html#addMonthsWithOverflow()", "FrozenDate::addMonthWithOverflow()()": "class-cake.i18n.frozendate.html#addMonthWithOverflow()", "FrozenDate::addSecond()()": "class-cake.i18n.frozendate.html#addSecond()", "FrozenDate::addSeconds()()": "class-cake.i18n.frozendate.html#addSeconds()", "FrozenDate::addWeek()()": "class-cake.i18n.frozendate.html#addWeek()", "FrozenDate::addWeekday()()": "class-cake.i18n.frozendate.html#addWeekday()", "FrozenDate::addWeekdays()()": "class-cake.i18n.frozendate.html#addWeekdays()", "FrozenDate::addWeeks()()": "class-cake.i18n.frozendate.html#addWeeks()", "FrozenDate::addYear()()": "class-cake.i18n.frozendate.html#addYear()", "FrozenDate::addYears()()": "class-cake.i18n.frozendate.html#addYears()", "FrozenDate::addYearsWithOverflow()()": "class-cake.i18n.frozendate.html#addYearsWithOverflow()", "FrozenDate::addYearWithOverflow()()": "class-cake.i18n.frozendate.html#addYearWithOverflow()", "FrozenDate::average()()": "class-cake.i18n.frozendate.html#average()", "FrozenDate::between()()": "class-cake.i18n.frozendate.html#between()", "FrozenDate::closest()()": "class-cake.i18n.frozendate.html#closest()", "FrozenDate::copy()()": "class-cake.i18n.frozendate.html#copy()", "FrozenDate::create()()": "class-cake.i18n.frozendate.html#create()", "FrozenDate::createFromArray()()": "class-cake.i18n.frozendate.html#createFromArray()", "FrozenDate::createFromDate()()": "class-cake.i18n.frozendate.html#createFromDate()", "FrozenDate::createFromFormat()()": "class-cake.i18n.frozendate.html#createFromFormat()", "FrozenDate::createFromTime()()": "class-cake.i18n.frozendate.html#createFromTime()", "FrozenDate::createFromTimestamp()()": "class-cake.i18n.frozendate.html#createFromTimestamp()", "FrozenDate::createFromTimestampUTC()()": "class-cake.i18n.frozendate.html#createFromTimestampUTC()", "FrozenDate::day()()": "class-cake.i18n.frozendate.html#day()", "FrozenDate::diffFiltered()()": "class-cake.i18n.frozendate.html#diffFiltered()", "FrozenDate::diffForHumans()()": "class-cake.i18n.frozendate.html#diffForHumans()", "FrozenDate::diffFormatter()()": "class-cake.i18n.frozendate.html#diffFormatter()", "FrozenDate::diffInDays()()": "class-cake.i18n.frozendate.html#diffInDays()", "FrozenDate::diffInDaysFiltered()()": "class-cake.i18n.frozendate.html#diffInDaysFiltered()", "FrozenDate::diffInHours()()": "class-cake.i18n.frozendate.html#diffInHours()", "FrozenDate::diffInHoursFiltered()()": "class-cake.i18n.frozendate.html#diffInHoursFiltered()", "FrozenDate::diffInMinutes()()": "class-cake.i18n.frozendate.html#diffInMinutes()", "FrozenDate::diffInMonths()()": "class-cake.i18n.frozendate.html#diffInMonths()", "FrozenDate::diffInMonthsIgnoreTimezone()()": "class-cake.i18n.frozendate.html#diffInMonthsIgnoreTimezone()", "FrozenDate::diffInSeconds()()": "class-cake.i18n.frozendate.html#diffInSeconds()", "FrozenDate::diffInWeekdays()()": "class-cake.i18n.frozendate.html#diffInWeekdays()", "FrozenDate::diffInWeekendDays()()": "class-cake.i18n.frozendate.html#diffInWeekendDays()", "FrozenDate::diffInWeeks()()": "class-cake.i18n.frozendate.html#diffInWeeks()", "FrozenDate::diffInYears()()": "class-cake.i18n.frozendate.html#diffInYears()", "FrozenDate::disableLenientParsing()()": "class-cake.i18n.frozendate.html#disableLenientParsing()", "FrozenDate::enableLenientParsing()()": "class-cake.i18n.frozendate.html#enableLenientParsing()", "FrozenDate::endOfCentury()()": "class-cake.i18n.frozendate.html#endOfCentury()", "FrozenDate::endOfDay()()": "class-cake.i18n.frozendate.html#endOfDay()", "FrozenDate::endOfDecade()()": "class-cake.i18n.frozendate.html#endOfDecade()", "FrozenDate::endOfMonth()()": "class-cake.i18n.frozendate.html#endOfMonth()", "FrozenDate::endOfWeek()()": "class-cake.i18n.frozendate.html#endOfWeek()", "FrozenDate::endOfYear()()": "class-cake.i18n.frozendate.html#endOfYear()", "FrozenDate::eq()()": "class-cake.i18n.frozendate.html#eq()", "FrozenDate::equals()()": "class-cake.i18n.frozendate.html#equals()", "FrozenDate::farthest()()": "class-cake.i18n.frozendate.html#farthest()", "FrozenDate::firstOfMonth()()": "class-cake.i18n.frozendate.html#firstOfMonth()", "FrozenDate::firstOfQuarter()()": "class-cake.i18n.frozendate.html#firstOfQuarter()", "FrozenDate::firstOfYear()()": "class-cake.i18n.frozendate.html#firstOfYear()", "FrozenDate::fromNow()()": "class-cake.i18n.frozendate.html#fromNow()", "FrozenDate::getDefaultLocale()()": "class-cake.i18n.frozendate.html#getDefaultLocale()", "FrozenDate::getDiffFormatter()()": "class-cake.i18n.frozendate.html#getDiffFormatter()", "FrozenDate::getLastErrors()()": "class-cake.i18n.frozendate.html#getLastErrors()", "FrozenDate::getTestNow()()": "class-cake.i18n.frozendate.html#getTestNow()", "FrozenDate::getWeekendDays()()": "class-cake.i18n.frozendate.html#getWeekendDays()", "FrozenDate::getWeekEndsAt()()": "class-cake.i18n.frozendate.html#getWeekEndsAt()", "FrozenDate::getWeekStartsAt()()": "class-cake.i18n.frozendate.html#getWeekStartsAt()", "FrozenDate::greaterThan()()": "class-cake.i18n.frozendate.html#greaterThan()", "FrozenDate::greaterThanOrEquals()()": "class-cake.i18n.frozendate.html#greaterThanOrEquals()", "FrozenDate::gt()()": "class-cake.i18n.frozendate.html#gt()", "FrozenDate::gte()()": "class-cake.i18n.frozendate.html#gte()", "FrozenDate::hasRelativeKeywords()()": "class-cake.i18n.frozendate.html#hasRelativeKeywords()", "FrozenDate::hasTestNow()()": "class-cake.i18n.frozendate.html#hasTestNow()", "FrozenDate::hour()()": "class-cake.i18n.frozendate.html#hour()", "FrozenDate::i18nFormat()()": "class-cake.i18n.frozendate.html#i18nFormat()", "FrozenDate::instance()()": "class-cake.i18n.frozendate.html#instance()", "FrozenDate::isBirthday()()": "class-cake.i18n.frozendate.html#isBirthday()", "FrozenDate::isFriday()()": "class-cake.i18n.frozendate.html#isFriday()", "FrozenDate::isFuture()()": "class-cake.i18n.frozendate.html#isFuture()", "FrozenDate::isLastMonth()()": "class-cake.i18n.frozendate.html#isLastMonth()", "FrozenDate::isLastWeek()()": "class-cake.i18n.frozendate.html#isLastWeek()", "FrozenDate::isLastYear()()": "class-cake.i18n.frozendate.html#isLastYear()", "FrozenDate::isLeapYear()()": "class-cake.i18n.frozendate.html#isLeapYear()", "FrozenDate::isMonday()()": "class-cake.i18n.frozendate.html#isMonday()", "FrozenDate::isMutable()()": "class-cake.i18n.frozendate.html#isMutable()", "FrozenDate::isNextMonth()()": "class-cake.i18n.frozendate.html#isNextMonth()", "FrozenDate::isNextWeek()()": "class-cake.i18n.frozendate.html#isNextWeek()", "FrozenDate::isNextYear()()": "class-cake.i18n.frozendate.html#isNextYear()", "FrozenDate::isPast()()": "class-cake.i18n.frozendate.html#isPast()", "FrozenDate::isSameDay()()": "class-cake.i18n.frozendate.html#isSameDay()", "FrozenDate::isSaturday()()": "class-cake.i18n.frozendate.html#isSaturday()", "FrozenDate::isSunday()()": "class-cake.i18n.frozendate.html#isSunday()", "FrozenDate::isThisMonth()()": "class-cake.i18n.frozendate.html#isThisMonth()", "FrozenDate::isThisWeek()()": "class-cake.i18n.frozendate.html#isThisWeek()", "FrozenDate::isThisYear()()": "class-cake.i18n.frozendate.html#isThisYear()", "FrozenDate::isThursday()()": "class-cake.i18n.frozendate.html#isThursday()", "FrozenDate::isToday()()": "class-cake.i18n.frozendate.html#isToday()", "FrozenDate::isTomorrow()()": "class-cake.i18n.frozendate.html#isTomorrow()", "FrozenDate::isTuesday()()": "class-cake.i18n.frozendate.html#isTuesday()", "FrozenDate::isWednesday()()": "class-cake.i18n.frozendate.html#isWednesday()", "FrozenDate::isWeekday()()": "class-cake.i18n.frozendate.html#isWeekday()", "FrozenDate::isWeekend()()": "class-cake.i18n.frozendate.html#isWeekend()", "FrozenDate::isWithinNext()()": "class-cake.i18n.frozendate.html#isWithinNext()", "FrozenDate::isYesterday()()": "class-cake.i18n.frozendate.html#isYesterday()", "FrozenDate::jsonSerialize()()": "class-cake.i18n.frozendate.html#jsonSerialize()", "FrozenDate::lastOfMonth()()": "class-cake.i18n.frozendate.html#lastOfMonth()", "FrozenDate::lastOfQuarter()()": "class-cake.i18n.frozendate.html#lastOfQuarter()", "FrozenDate::lastOfYear()()": "class-cake.i18n.frozendate.html#lastOfYear()", "FrozenDate::lenientParsingEnabled()()": "class-cake.i18n.frozendate.html#lenientParsingEnabled()", "FrozenDate::lessThan()()": "class-cake.i18n.frozendate.html#lessThan()", "FrozenDate::lessThanOrEquals()()": "class-cake.i18n.frozendate.html#lessThanOrEquals()", "FrozenDate::lt()()": "class-cake.i18n.frozendate.html#lt()", "FrozenDate::lte()()": "class-cake.i18n.frozendate.html#lte()", "FrozenDate::max()()": "class-cake.i18n.frozendate.html#max()", "FrozenDate::maxValue()()": "class-cake.i18n.frozendate.html#maxValue()", "FrozenDate::microsecond()()": "class-cake.i18n.frozendate.html#microsecond()", "FrozenDate::min()()": "class-cake.i18n.frozendate.html#min()", "FrozenDate::minute()()": "class-cake.i18n.frozendate.html#minute()", "FrozenDate::minValue()()": "class-cake.i18n.frozendate.html#minValue()", "FrozenDate::modify()()": "class-cake.i18n.frozendate.html#modify()", "FrozenDate::month()()": "class-cake.i18n.frozendate.html#month()", "FrozenDate::ne()()": "class-cake.i18n.frozendate.html#ne()", "FrozenDate::next()()": "class-cake.i18n.frozendate.html#next()", "FrozenDate::nice()()": "class-cake.i18n.frozendate.html#nice()", "FrozenDate::notEquals()()": "class-cake.i18n.frozendate.html#notEquals()", "FrozenDate::now()()": "class-cake.i18n.frozendate.html#now()", "FrozenDate::nthOfMonth()()": "class-cake.i18n.frozendate.html#nthOfMonth()", "FrozenDate::nthOfQuarter()()": "class-cake.i18n.frozendate.html#nthOfQuarter()", "FrozenDate::nthOfYear()()": "class-cake.i18n.frozendate.html#nthOfYear()", "FrozenDate::parse()()": "class-cake.i18n.frozendate.html#parse()", "FrozenDate::parseDate()()": "class-cake.i18n.frozendate.html#parseDate()", "FrozenDate::parseDateTime()()": "class-cake.i18n.frozendate.html#parseDateTime()", "FrozenDate::parseTime()()": "class-cake.i18n.frozendate.html#parseTime()", "FrozenDate::previous()()": "class-cake.i18n.frozendate.html#previous()", "FrozenDate::resetToStringFormat()()": "class-cake.i18n.frozendate.html#resetToStringFormat()", "FrozenDate::safeCreateDateTimeZone()()": "class-cake.i18n.frozendate.html#safeCreateDateTimeZone()", "FrozenDate::second()()": "class-cake.i18n.frozendate.html#second()", "FrozenDate::secondsSinceMidnight()()": "class-cake.i18n.frozendate.html#secondsSinceMidnight()", "FrozenDate::secondsUntilEndOfDay()()": "class-cake.i18n.frozendate.html#secondsUntilEndOfDay()", "FrozenDate::setDate()()": "class-cake.i18n.frozendate.html#setDate()", "FrozenDate::setDateTime()()": "class-cake.i18n.frozendate.html#setDateTime()", "FrozenDate::setDefaultLocale()()": "class-cake.i18n.frozendate.html#setDefaultLocale()", "FrozenDate::setDiffFormatter()()": "class-cake.i18n.frozendate.html#setDiffFormatter()", "FrozenDate::setJsonEncodeFormat()()": "class-cake.i18n.frozendate.html#setJsonEncodeFormat()", "FrozenDate::setTestNow()()": "class-cake.i18n.frozendate.html#setTestNow()", "FrozenDate::setTime()()": "class-cake.i18n.frozendate.html#setTime()", "FrozenDate::setTimeFromTimeString()()": "class-cake.i18n.frozendate.html#setTimeFromTimeString()", "FrozenDate::setTimestamp()()": "class-cake.i18n.frozendate.html#setTimestamp()", "FrozenDate::setTimezone()()": "class-cake.i18n.frozendate.html#setTimezone()", "FrozenDate::setToStringFormat()()": "class-cake.i18n.frozendate.html#setToStringFormat()", "FrozenDate::setWeekendDays()()": "class-cake.i18n.frozendate.html#setWeekendDays()", "FrozenDate::setWeekEndsAt()()": "class-cake.i18n.frozendate.html#setWeekEndsAt()", "FrozenDate::setWeekStartsAt()()": "class-cake.i18n.frozendate.html#setWeekStartsAt()", "FrozenDate::startOfCentury()()": "class-cake.i18n.frozendate.html#startOfCentury()", "FrozenDate::startOfDay()()": "class-cake.i18n.frozendate.html#startOfDay()", "FrozenDate::startOfDecade()()": "class-cake.i18n.frozendate.html#startOfDecade()", "FrozenDate::startOfMonth()()": "class-cake.i18n.frozendate.html#startOfMonth()", "FrozenDate::startOfWeek()()": "class-cake.i18n.frozendate.html#startOfWeek()", "FrozenDate::startOfYear()()": "class-cake.i18n.frozendate.html#startOfYear()", "FrozenDate::stripRelativeTime()()": "class-cake.i18n.frozendate.html#stripRelativeTime()", "FrozenDate::stripTime()()": "class-cake.i18n.frozendate.html#stripTime()", "FrozenDate::sub()()": "class-cake.i18n.frozendate.html#sub()", "FrozenDate::subDay()()": "class-cake.i18n.frozendate.html#subDay()", "FrozenDate::subDays()()": "class-cake.i18n.frozendate.html#subDays()", "FrozenDate::subHour()()": "class-cake.i18n.frozendate.html#subHour()", "FrozenDate::subHours()()": "class-cake.i18n.frozendate.html#subHours()", "FrozenDate::subMinute()()": "class-cake.i18n.frozendate.html#subMinute()", "FrozenDate::subMinutes()()": "class-cake.i18n.frozendate.html#subMinutes()", "FrozenDate::subMonth()()": "class-cake.i18n.frozendate.html#subMonth()", "FrozenDate::subMonths()()": "class-cake.i18n.frozendate.html#subMonths()", "FrozenDate::subMonthsWithOverflow()()": "class-cake.i18n.frozendate.html#subMonthsWithOverflow()", "FrozenDate::subMonthWithOverflow()()": "class-cake.i18n.frozendate.html#subMonthWithOverflow()", "FrozenDate::subSecond()()": "class-cake.i18n.frozendate.html#subSecond()", "FrozenDate::subSeconds()()": "class-cake.i18n.frozendate.html#subSeconds()", "FrozenDate::subWeek()()": "class-cake.i18n.frozendate.html#subWeek()", "FrozenDate::subWeekday()()": "class-cake.i18n.frozendate.html#subWeekday()", "FrozenDate::subWeekdays()()": "class-cake.i18n.frozendate.html#subWeekdays()", "FrozenDate::subWeeks()()": "class-cake.i18n.frozendate.html#subWeeks()", "FrozenDate::subYear()()": "class-cake.i18n.frozendate.html#subYear()", "FrozenDate::subYears()()": "class-cake.i18n.frozendate.html#subYears()", "FrozenDate::subYearsWithOverflow()()": "class-cake.i18n.frozendate.html#subYearsWithOverflow()", "FrozenDate::subYearWithOverflow()()": "class-cake.i18n.frozendate.html#subYearWithOverflow()", "FrozenDate::timeAgoInWords()()": "class-cake.i18n.frozendate.html#timeAgoInWords()", "FrozenDate::timestamp()()": "class-cake.i18n.frozendate.html#timestamp()", "FrozenDate::timezone()()": "class-cake.i18n.frozendate.html#timezone()", "FrozenDate::toAtomString()()": "class-cake.i18n.frozendate.html#toAtomString()", "FrozenDate::toCookieString()()": "class-cake.i18n.frozendate.html#toCookieString()", "FrozenDate::toDateString()()": "class-cake.i18n.frozendate.html#toDateString()", "FrozenDate::toDateTimeString()()": "class-cake.i18n.frozendate.html#toDateTimeString()", "FrozenDate::today()()": "class-cake.i18n.frozendate.html#today()", "FrozenDate::toDayDateTimeString()()": "class-cake.i18n.frozendate.html#toDayDateTimeString()", "FrozenDate::toFormattedDateString()()": "class-cake.i18n.frozendate.html#toFormattedDateString()", "FrozenDate::toIso8601String()()": "class-cake.i18n.frozendate.html#toIso8601String()", "FrozenDate::tomorrow()()": "class-cake.i18n.frozendate.html#tomorrow()", "FrozenDate::toMutable()()": "class-cake.i18n.frozendate.html#toMutable()", "FrozenDate::toQuarter()()": "class-cake.i18n.frozendate.html#toQuarter()", "FrozenDate::toRfc1036String()()": "class-cake.i18n.frozendate.html#toRfc1036String()", "FrozenDate::toRfc1123String()()": "class-cake.i18n.frozendate.html#toRfc1123String()", "FrozenDate::toRfc2822String()()": "class-cake.i18n.frozendate.html#toRfc2822String()", "FrozenDate::toRfc3339String()()": "class-cake.i18n.frozendate.html#toRfc3339String()", "FrozenDate::toRfc822String()()": "class-cake.i18n.frozendate.html#toRfc822String()", "FrozenDate::toRfc850String()()": "class-cake.i18n.frozendate.html#toRfc850String()", "FrozenDate::toRssString()()": "class-cake.i18n.frozendate.html#toRssString()", "FrozenDate::toTimeString()()": "class-cake.i18n.frozendate.html#toTimeString()", "FrozenDate::toUnixString()()": "class-cake.i18n.frozendate.html#toUnixString()", "FrozenDate::toW3cString()()": "class-cake.i18n.frozendate.html#toW3cString()", "FrozenDate::toWeek()()": "class-cake.i18n.frozendate.html#toWeek()", "FrozenDate::tz()()": "class-cake.i18n.frozendate.html#tz()", "FrozenDate::wasWithinLast()()": "class-cake.i18n.frozendate.html#wasWithinLast()", "FrozenDate::year()()": "class-cake.i18n.frozendate.html#year()", "FrozenDate::yesterday()()": "class-cake.i18n.frozendate.html#yesterday()", "FrozenTime (class)": "class-cake.i18n.frozentime.html", "FrozenTime::$_formatters": "class-cake.i18n.frozentime.html#$_formatters", "FrozenTime::$_jsonEncodeFormat": "class-cake.i18n.frozentime.html#$_jsonEncodeFormat", "FrozenTime::$_lastErrors": "class-cake.i18n.frozentime.html#$_lastErrors", "FrozenTime::$_toStringFormat": "class-cake.i18n.frozentime.html#$_toStringFormat", "FrozenTime::$age": "class-cake.i18n.frozentime.html#$age", "FrozenTime::$day": "class-cake.i18n.frozentime.html#$day", "FrozenTime::$dayOfWeek": "class-cake.i18n.frozentime.html#$dayOfWeek", "FrozenTime::$dayOfWeekName": "class-cake.i18n.frozentime.html#$dayOfWeekName", "FrozenTime::$dayOfYear": "class-cake.i18n.frozentime.html#$dayOfYear", "FrozenTime::$days": "class-cake.i18n.frozentime.html#$days", "FrozenTime::$daysInMonth": "class-cake.i18n.frozentime.html#$daysInMonth", "FrozenTime::$defaultLocale": "class-cake.i18n.frozentime.html#$defaultLocale", "FrozenTime::$diffFormatter": "class-cake.i18n.frozentime.html#$diffFormatter", "FrozenTime::$dst": "class-cake.i18n.frozentime.html#$dst", "FrozenTime::$hour": "class-cake.i18n.frozentime.html#$hour", "FrozenTime::$lenientParsing": "class-cake.i18n.frozentime.html#$lenientParsing", "FrozenTime::$local": "class-cake.i18n.frozentime.html#$local", "FrozenTime::$micro": "class-cake.i18n.frozentime.html#$micro", "FrozenTime::$microsecond": "class-cake.i18n.frozentime.html#$microsecond", "FrozenTime::$minute": "class-cake.i18n.frozentime.html#$minute", "FrozenTime::$month": "class-cake.i18n.frozentime.html#$month", "FrozenTime::$niceFormat": "class-cake.i18n.frozentime.html#$niceFormat", "FrozenTime::$offset": "class-cake.i18n.frozentime.html#$offset", "FrozenTime::$offsetHours": "class-cake.i18n.frozentime.html#$offsetHours", "FrozenTime::$quarter": "class-cake.i18n.frozentime.html#$quarter", "FrozenTime::$relativePattern": "class-cake.i18n.frozentime.html#$relativePattern", "FrozenTime::$second": "class-cake.i18n.frozentime.html#$second", "FrozenTime::$testNow": "class-cake.i18n.frozentime.html#$testNow", "FrozenTime::$timestamp": "class-cake.i18n.frozentime.html#$timestamp", "FrozenTime::$timezone": "class-cake.i18n.frozentime.html#$timezone", "FrozenTime::$timezoneName": "class-cake.i18n.frozentime.html#$timezoneName", "FrozenTime::$toStringFormat": "class-cake.i18n.frozentime.html#$toStringFormat", "FrozenTime::$tz": "class-cake.i18n.frozentime.html#$tz", "FrozenTime::$tzName": "class-cake.i18n.frozentime.html#$tzName", "FrozenTime::$utc": "class-cake.i18n.frozentime.html#$utc", "FrozenTime::$weekendDays": "class-cake.i18n.frozentime.html#$weekendDays", "FrozenTime::$weekEndsAt": "class-cake.i18n.frozentime.html#$weekEndsAt", "FrozenTime::$weekOfMonth": "class-cake.i18n.frozentime.html#$weekOfMonth", "FrozenTime::$weekOfYear": "class-cake.i18n.frozentime.html#$weekOfYear", "FrozenTime::$weekStartsAt": "class-cake.i18n.frozentime.html#$weekStartsAt", "FrozenTime::$wordAccuracy": "class-cake.i18n.frozentime.html#$wordAccuracy", "FrozenTime::$wordEnd": "class-cake.i18n.frozentime.html#$wordEnd", "FrozenTime::$wordFormat": "class-cake.i18n.frozentime.html#$wordFormat", "FrozenTime::$year": "class-cake.i18n.frozentime.html#$year", "FrozenTime::$yearIso": "class-cake.i18n.frozentime.html#$yearIso", "FrozenTime::__construct()()": "class-cake.i18n.frozentime.html#__construct()", "FrozenTime::__debugInfo()()": "class-cake.i18n.frozentime.html#__debugInfo()", "FrozenTime::__get()()": "class-cake.i18n.frozentime.html#__get()", "FrozenTime::__isset()()": "class-cake.i18n.frozentime.html#__isset()", "FrozenTime::__toString()()": "class-cake.i18n.frozentime.html#__toString()", "FrozenTime::_formatObject()()": "class-cake.i18n.frozentime.html#_formatObject()", "FrozenTime::addDay()()": "class-cake.i18n.frozentime.html#addDay()", "FrozenTime::addDays()()": "class-cake.i18n.frozentime.html#addDays()", "FrozenTime::addHour()()": "class-cake.i18n.frozentime.html#addHour()", "FrozenTime::addHours()()": "class-cake.i18n.frozentime.html#addHours()", "FrozenTime::addMinute()()": "class-cake.i18n.frozentime.html#addMinute()", "FrozenTime::addMinutes()()": "class-cake.i18n.frozentime.html#addMinutes()", "FrozenTime::addMonth()()": "class-cake.i18n.frozentime.html#addMonth()", "FrozenTime::addMonths()()": "class-cake.i18n.frozentime.html#addMonths()", "FrozenTime::addMonthsWithOverflow()()": "class-cake.i18n.frozentime.html#addMonthsWithOverflow()", "FrozenTime::addMonthWithOverflow()()": "class-cake.i18n.frozentime.html#addMonthWithOverflow()", "FrozenTime::addSecond()()": "class-cake.i18n.frozentime.html#addSecond()", "FrozenTime::addSeconds()()": "class-cake.i18n.frozentime.html#addSeconds()", "FrozenTime::addWeek()()": "class-cake.i18n.frozentime.html#addWeek()", "FrozenTime::addWeekday()()": "class-cake.i18n.frozentime.html#addWeekday()", "FrozenTime::addWeekdays()()": "class-cake.i18n.frozentime.html#addWeekdays()", "FrozenTime::addWeeks()()": "class-cake.i18n.frozentime.html#addWeeks()", "FrozenTime::addYear()()": "class-cake.i18n.frozentime.html#addYear()", "FrozenTime::addYears()()": "class-cake.i18n.frozentime.html#addYears()", "FrozenTime::addYearsWithOverflow()()": "class-cake.i18n.frozentime.html#addYearsWithOverflow()", "FrozenTime::addYearWithOverflow()()": "class-cake.i18n.frozentime.html#addYearWithOverflow()", "FrozenTime::average()()": "class-cake.i18n.frozentime.html#average()", "FrozenTime::between()()": "class-cake.i18n.frozentime.html#between()", "FrozenTime::closest()()": "class-cake.i18n.frozentime.html#closest()", "FrozenTime::copy()()": "class-cake.i18n.frozentime.html#copy()", "FrozenTime::create()()": "class-cake.i18n.frozentime.html#create()", "FrozenTime::createFromArray()()": "class-cake.i18n.frozentime.html#createFromArray()", "FrozenTime::createFromDate()()": "class-cake.i18n.frozentime.html#createFromDate()", "FrozenTime::createFromFormat()()": "class-cake.i18n.frozentime.html#createFromFormat()", "FrozenTime::createFromTime()()": "class-cake.i18n.frozentime.html#createFromTime()", "FrozenTime::createFromTimestamp()()": "class-cake.i18n.frozentime.html#createFromTimestamp()", "FrozenTime::createFromTimestampUTC()()": "class-cake.i18n.frozentime.html#createFromTimestampUTC()", "FrozenTime::day()()": "class-cake.i18n.frozentime.html#day()", "FrozenTime::diffFiltered()()": "class-cake.i18n.frozentime.html#diffFiltered()", "FrozenTime::diffForHumans()()": "class-cake.i18n.frozentime.html#diffForHumans()", "FrozenTime::diffFormatter()()": "class-cake.i18n.frozentime.html#diffFormatter()", "FrozenTime::diffInDays()()": "class-cake.i18n.frozentime.html#diffInDays()", "FrozenTime::diffInDaysFiltered()()": "class-cake.i18n.frozentime.html#diffInDaysFiltered()", "FrozenTime::diffInHours()()": "class-cake.i18n.frozentime.html#diffInHours()", "FrozenTime::diffInHoursFiltered()()": "class-cake.i18n.frozentime.html#diffInHoursFiltered()", "FrozenTime::diffInMinutes()()": "class-cake.i18n.frozentime.html#diffInMinutes()", "FrozenTime::diffInMonths()()": "class-cake.i18n.frozentime.html#diffInMonths()", "FrozenTime::diffInMonthsIgnoreTimezone()()": "class-cake.i18n.frozentime.html#diffInMonthsIgnoreTimezone()", "FrozenTime::diffInSeconds()()": "class-cake.i18n.frozentime.html#diffInSeconds()", "FrozenTime::diffInWeekdays()()": "class-cake.i18n.frozentime.html#diffInWeekdays()", "FrozenTime::diffInWeekendDays()()": "class-cake.i18n.frozentime.html#diffInWeekendDays()", "FrozenTime::diffInWeeks()()": "class-cake.i18n.frozentime.html#diffInWeeks()", "FrozenTime::diffInYears()()": "class-cake.i18n.frozentime.html#diffInYears()", "FrozenTime::disableLenientParsing()()": "class-cake.i18n.frozentime.html#disableLenientParsing()", "FrozenTime::enableLenientParsing()()": "class-cake.i18n.frozentime.html#enableLenientParsing()", "FrozenTime::endOfCentury()()": "class-cake.i18n.frozentime.html#endOfCentury()", "FrozenTime::endOfDay()()": "class-cake.i18n.frozentime.html#endOfDay()", "FrozenTime::endOfDecade()()": "class-cake.i18n.frozentime.html#endOfDecade()", "FrozenTime::endOfMonth()()": "class-cake.i18n.frozentime.html#endOfMonth()", "FrozenTime::endOfWeek()()": "class-cake.i18n.frozentime.html#endOfWeek()", "FrozenTime::endOfYear()()": "class-cake.i18n.frozentime.html#endOfYear()", "FrozenTime::eq()()": "class-cake.i18n.frozentime.html#eq()", "FrozenTime::equals()()": "class-cake.i18n.frozentime.html#equals()", "FrozenTime::farthest()()": "class-cake.i18n.frozentime.html#farthest()", "FrozenTime::firstOfMonth()()": "class-cake.i18n.frozentime.html#firstOfMonth()", "FrozenTime::firstOfQuarter()()": "class-cake.i18n.frozentime.html#firstOfQuarter()", "FrozenTime::firstOfYear()()": "class-cake.i18n.frozentime.html#firstOfYear()", "FrozenTime::fromNow()()": "class-cake.i18n.frozentime.html#fromNow()", "FrozenTime::getDefaultLocale()()": "class-cake.i18n.frozentime.html#getDefaultLocale()", "FrozenTime::getDiffFormatter()()": "class-cake.i18n.frozentime.html#getDiffFormatter()", "FrozenTime::getLastErrors()()": "class-cake.i18n.frozentime.html#getLastErrors()", "FrozenTime::getTestNow()()": "class-cake.i18n.frozentime.html#getTestNow()", "FrozenTime::getWeekendDays()()": "class-cake.i18n.frozentime.html#getWeekendDays()", "FrozenTime::getWeekEndsAt()()": "class-cake.i18n.frozentime.html#getWeekEndsAt()", "FrozenTime::getWeekStartsAt()()": "class-cake.i18n.frozentime.html#getWeekStartsAt()", "FrozenTime::greaterThan()()": "class-cake.i18n.frozentime.html#greaterThan()", "FrozenTime::greaterThanOrEquals()()": "class-cake.i18n.frozentime.html#greaterThanOrEquals()", "FrozenTime::gt()()": "class-cake.i18n.frozentime.html#gt()", "FrozenTime::gte()()": "class-cake.i18n.frozentime.html#gte()", "FrozenTime::hasRelativeKeywords()()": "class-cake.i18n.frozentime.html#hasRelativeKeywords()", "FrozenTime::hasTestNow()()": "class-cake.i18n.frozentime.html#hasTestNow()", "FrozenTime::hour()()": "class-cake.i18n.frozentime.html#hour()", "FrozenTime::i18nFormat()()": "class-cake.i18n.frozentime.html#i18nFormat()", "FrozenTime::instance()()": "class-cake.i18n.frozentime.html#instance()", "FrozenTime::isBirthday()()": "class-cake.i18n.frozentime.html#isBirthday()", "FrozenTime::isFriday()()": "class-cake.i18n.frozentime.html#isFriday()", "FrozenTime::isFuture()()": "class-cake.i18n.frozentime.html#isFuture()", "FrozenTime::isLastMonth()()": "class-cake.i18n.frozentime.html#isLastMonth()", "FrozenTime::isLastWeek()()": "class-cake.i18n.frozentime.html#isLastWeek()", "FrozenTime::isLastYear()()": "class-cake.i18n.frozentime.html#isLastYear()", "FrozenTime::isLeapYear()()": "class-cake.i18n.frozentime.html#isLeapYear()", "FrozenTime::isMonday()()": "class-cake.i18n.frozentime.html#isMonday()", "FrozenTime::isMutable()()": "class-cake.i18n.frozentime.html#isMutable()", "FrozenTime::isNextMonth()()": "class-cake.i18n.frozentime.html#isNextMonth()", "FrozenTime::isNextWeek()()": "class-cake.i18n.frozentime.html#isNextWeek()", "FrozenTime::isNextYear()()": "class-cake.i18n.frozentime.html#isNextYear()", "FrozenTime::isPast()()": "class-cake.i18n.frozentime.html#isPast()", "FrozenTime::isSameDay()()": "class-cake.i18n.frozentime.html#isSameDay()", "FrozenTime::isSaturday()()": "class-cake.i18n.frozentime.html#isSaturday()", "FrozenTime::isSunday()()": "class-cake.i18n.frozentime.html#isSunday()", "FrozenTime::isThisMonth()()": "class-cake.i18n.frozentime.html#isThisMonth()", "FrozenTime::isThisWeek()()": "class-cake.i18n.frozentime.html#isThisWeek()", "FrozenTime::isThisYear()()": "class-cake.i18n.frozentime.html#isThisYear()", "FrozenTime::isThursday()()": "class-cake.i18n.frozentime.html#isThursday()", "FrozenTime::isToday()()": "class-cake.i18n.frozentime.html#isToday()", "FrozenTime::isTomorrow()()": "class-cake.i18n.frozentime.html#isTomorrow()", "FrozenTime::isTuesday()()": "class-cake.i18n.frozentime.html#isTuesday()", "FrozenTime::isWednesday()()": "class-cake.i18n.frozentime.html#isWednesday()", "FrozenTime::isWeekday()()": "class-cake.i18n.frozentime.html#isWeekday()", "FrozenTime::isWeekend()()": "class-cake.i18n.frozentime.html#isWeekend()", "FrozenTime::isWithinNext()()": "class-cake.i18n.frozentime.html#isWithinNext()", "FrozenTime::isYesterday()()": "class-cake.i18n.frozentime.html#isYesterday()", "FrozenTime::jsonSerialize()()": "class-cake.i18n.frozentime.html#jsonSerialize()", "FrozenTime::lastOfMonth()()": "class-cake.i18n.frozentime.html#lastOfMonth()", "FrozenTime::lastOfQuarter()()": "class-cake.i18n.frozentime.html#lastOfQuarter()", "FrozenTime::lastOfYear()()": "class-cake.i18n.frozentime.html#lastOfYear()", "FrozenTime::lenientParsingEnabled()()": "class-cake.i18n.frozentime.html#lenientParsingEnabled()", "FrozenTime::lessThan()()": "class-cake.i18n.frozentime.html#lessThan()", "FrozenTime::lessThanOrEquals()()": "class-cake.i18n.frozentime.html#lessThanOrEquals()", "FrozenTime::listTimezones()()": "class-cake.i18n.frozentime.html#listTimezones()", "FrozenTime::lt()()": "class-cake.i18n.frozentime.html#lt()", "FrozenTime::lte()()": "class-cake.i18n.frozentime.html#lte()", "FrozenTime::max()()": "class-cake.i18n.frozentime.html#max()", "FrozenTime::maxValue()()": "class-cake.i18n.frozentime.html#maxValue()", "FrozenTime::microsecond()()": "class-cake.i18n.frozentime.html#microsecond()", "FrozenTime::min()()": "class-cake.i18n.frozentime.html#min()", "FrozenTime::minute()()": "class-cake.i18n.frozentime.html#minute()", "FrozenTime::minValue()()": "class-cake.i18n.frozentime.html#minValue()", "FrozenTime::modify()()": "class-cake.i18n.frozentime.html#modify()", "FrozenTime::month()()": "class-cake.i18n.frozentime.html#month()", "FrozenTime::ne()()": "class-cake.i18n.frozentime.html#ne()", "FrozenTime::next()()": "class-cake.i18n.frozentime.html#next()", "FrozenTime::nice()()": "class-cake.i18n.frozentime.html#nice()", "FrozenTime::notEquals()()": "class-cake.i18n.frozentime.html#notEquals()", "FrozenTime::now()()": "class-cake.i18n.frozentime.html#now()", "FrozenTime::nthOfMonth()()": "class-cake.i18n.frozentime.html#nthOfMonth()", "FrozenTime::nthOfQuarter()()": "class-cake.i18n.frozentime.html#nthOfQuarter()", "FrozenTime::nthOfYear()()": "class-cake.i18n.frozentime.html#nthOfYear()", "FrozenTime::parse()()": "class-cake.i18n.frozentime.html#parse()", "FrozenTime::parseDate()()": "class-cake.i18n.frozentime.html#parseDate()", "FrozenTime::parseDateTime()()": "class-cake.i18n.frozentime.html#parseDateTime()", "FrozenTime::parseTime()()": "class-cake.i18n.frozentime.html#parseTime()", "FrozenTime::previous()()": "class-cake.i18n.frozentime.html#previous()", "FrozenTime::resetToStringFormat()()": "class-cake.i18n.frozentime.html#resetToStringFormat()", "FrozenTime::safeCreateDateTimeZone()()": "class-cake.i18n.frozentime.html#safeCreateDateTimeZone()", "FrozenTime::second()()": "class-cake.i18n.frozentime.html#second()", "FrozenTime::secondsSinceMidnight()()": "class-cake.i18n.frozentime.html#secondsSinceMidnight()", "FrozenTime::secondsUntilEndOfDay()()": "class-cake.i18n.frozentime.html#secondsUntilEndOfDay()", "FrozenTime::setDate()()": "class-cake.i18n.frozentime.html#setDate()", "FrozenTime::setDateTime()()": "class-cake.i18n.frozentime.html#setDateTime()", "FrozenTime::setDefaultLocale()()": "class-cake.i18n.frozentime.html#setDefaultLocale()", "FrozenTime::setDiffFormatter()()": "class-cake.i18n.frozentime.html#setDiffFormatter()", "FrozenTime::setJsonEncodeFormat()()": "class-cake.i18n.frozentime.html#setJsonEncodeFormat()", "FrozenTime::setTestNow()()": "class-cake.i18n.frozentime.html#setTestNow()", "FrozenTime::setTimeFromTimeString()()": "class-cake.i18n.frozentime.html#setTimeFromTimeString()", "FrozenTime::setTimezone()()": "class-cake.i18n.frozentime.html#setTimezone()", "FrozenTime::setToStringFormat()()": "class-cake.i18n.frozentime.html#setToStringFormat()", "FrozenTime::setWeekendDays()()": "class-cake.i18n.frozentime.html#setWeekendDays()", "FrozenTime::setWeekEndsAt()()": "class-cake.i18n.frozentime.html#setWeekEndsAt()", "FrozenTime::setWeekStartsAt()()": "class-cake.i18n.frozentime.html#setWeekStartsAt()", "FrozenTime::startOfCentury()()": "class-cake.i18n.frozentime.html#startOfCentury()", "FrozenTime::startOfDay()()": "class-cake.i18n.frozentime.html#startOfDay()", "FrozenTime::startOfDecade()()": "class-cake.i18n.frozentime.html#startOfDecade()", "FrozenTime::startOfMonth()()": "class-cake.i18n.frozentime.html#startOfMonth()", "FrozenTime::startOfWeek()()": "class-cake.i18n.frozentime.html#startOfWeek()", "FrozenTime::startOfYear()()": "class-cake.i18n.frozentime.html#startOfYear()", "FrozenTime::subDay()()": "class-cake.i18n.frozentime.html#subDay()", "FrozenTime::subDays()()": "class-cake.i18n.frozentime.html#subDays()", "FrozenTime::subHour()()": "class-cake.i18n.frozentime.html#subHour()", "FrozenTime::subHours()()": "class-cake.i18n.frozentime.html#subHours()", "FrozenTime::subMinute()()": "class-cake.i18n.frozentime.html#subMinute()", "FrozenTime::subMinutes()()": "class-cake.i18n.frozentime.html#subMinutes()", "FrozenTime::subMonth()()": "class-cake.i18n.frozentime.html#subMonth()", "FrozenTime::subMonths()()": "class-cake.i18n.frozentime.html#subMonths()", "FrozenTime::subMonthsWithOverflow()()": "class-cake.i18n.frozentime.html#subMonthsWithOverflow()", "FrozenTime::subMonthWithOverflow()()": "class-cake.i18n.frozentime.html#subMonthWithOverflow()", "FrozenTime::subSecond()()": "class-cake.i18n.frozentime.html#subSecond()", "FrozenTime::subSeconds()()": "class-cake.i18n.frozentime.html#subSeconds()", "FrozenTime::subWeek()()": "class-cake.i18n.frozentime.html#subWeek()", "FrozenTime::subWeekday()()": "class-cake.i18n.frozentime.html#subWeekday()", "FrozenTime::subWeekdays()()": "class-cake.i18n.frozentime.html#subWeekdays()", "FrozenTime::subWeeks()()": "class-cake.i18n.frozentime.html#subWeeks()", "FrozenTime::subYear()()": "class-cake.i18n.frozentime.html#subYear()", "FrozenTime::subYears()()": "class-cake.i18n.frozentime.html#subYears()", "FrozenTime::subYearsWithOverflow()()": "class-cake.i18n.frozentime.html#subYearsWithOverflow()", "FrozenTime::subYearWithOverflow()()": "class-cake.i18n.frozentime.html#subYearWithOverflow()", "FrozenTime::timeAgoInWords()()": "class-cake.i18n.frozentime.html#timeAgoInWords()", "FrozenTime::timestamp()()": "class-cake.i18n.frozentime.html#timestamp()", "FrozenTime::timezone()()": "class-cake.i18n.frozentime.html#timezone()", "FrozenTime::toAtomString()()": "class-cake.i18n.frozentime.html#toAtomString()", "FrozenTime::toCookieString()()": "class-cake.i18n.frozentime.html#toCookieString()", "FrozenTime::toDateString()()": "class-cake.i18n.frozentime.html#toDateString()", "FrozenTime::toDateTimeString()()": "class-cake.i18n.frozentime.html#toDateTimeString()", "FrozenTime::today()()": "class-cake.i18n.frozentime.html#today()", "FrozenTime::toDayDateTimeString()()": "class-cake.i18n.frozentime.html#toDayDateTimeString()", "FrozenTime::toFormattedDateString()()": "class-cake.i18n.frozentime.html#toFormattedDateString()", "FrozenTime::toIso8601String()()": "class-cake.i18n.frozentime.html#toIso8601String()", "FrozenTime::tomorrow()()": "class-cake.i18n.frozentime.html#tomorrow()", "FrozenTime::toMutable()()": "class-cake.i18n.frozentime.html#toMutable()", "FrozenTime::toQuarter()()": "class-cake.i18n.frozentime.html#toQuarter()", "FrozenTime::toRfc1036String()()": "class-cake.i18n.frozentime.html#toRfc1036String()", "FrozenTime::toRfc1123String()()": "class-cake.i18n.frozentime.html#toRfc1123String()", "FrozenTime::toRfc2822String()()": "class-cake.i18n.frozentime.html#toRfc2822String()", "FrozenTime::toRfc3339String()()": "class-cake.i18n.frozentime.html#toRfc3339String()", "FrozenTime::toRfc822String()()": "class-cake.i18n.frozentime.html#toRfc822String()", "FrozenTime::toRfc850String()()": "class-cake.i18n.frozentime.html#toRfc850String()", "FrozenTime::toRssString()()": "class-cake.i18n.frozentime.html#toRssString()", "FrozenTime::toTimeString()()": "class-cake.i18n.frozentime.html#toTimeString()", "FrozenTime::toUnixString()()": "class-cake.i18n.frozentime.html#toUnixString()", "FrozenTime::toW3cString()()": "class-cake.i18n.frozentime.html#toW3cString()", "FrozenTime::toWeek()()": "class-cake.i18n.frozentime.html#toWeek()", "FrozenTime::tz()()": "class-cake.i18n.frozentime.html#tz()", "FrozenTime::wasWithinLast()()": "class-cake.i18n.frozentime.html#wasWithinLast()", "FrozenTime::year()()": "class-cake.i18n.frozentime.html#year()", "FrozenTime::yesterday()()": "class-cake.i18n.frozentime.html#yesterday()", "FunctionExpression (class)": "class-cake.database.expression.functionexpression.html", "FunctionExpression::$_conditions": "class-cake.database.expression.functionexpression.html#$_conditions", "FunctionExpression::$_conjunction": "class-cake.database.expression.functionexpression.html#$_conjunction", "FunctionExpression::$_name": "class-cake.database.expression.functionexpression.html#$_name", "FunctionExpression::$_returnType": "class-cake.database.expression.functionexpression.html#$_returnType", "FunctionExpression::$_typeMap": "class-cake.database.expression.functionexpression.html#$_typeMap", "FunctionExpression::__clone()()": "class-cake.database.expression.functionexpression.html#__clone()", "FunctionExpression::__construct()()": "class-cake.database.expression.functionexpression.html#__construct()", "FunctionExpression::_addConditions()()": "class-cake.database.expression.functionexpression.html#_addConditions()", "FunctionExpression::_calculateType()()": "class-cake.database.expression.functionexpression.html#_calculateType()", "FunctionExpression::_castToExpression()()": "class-cake.database.expression.functionexpression.html#_castToExpression()", "FunctionExpression::_parseCondition()()": "class-cake.database.expression.functionexpression.html#_parseCondition()", "FunctionExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.functionexpression.html#_requiresToExpressionCasting()", "FunctionExpression::add()()": "class-cake.database.expression.functionexpression.html#add()", "FunctionExpression::addCase()()": "class-cake.database.expression.functionexpression.html#addCase()", "FunctionExpression::and()()": "class-cake.database.expression.functionexpression.html#and()", "FunctionExpression::and_()()": "class-cake.database.expression.functionexpression.html#and_()", "FunctionExpression::between()()": "class-cake.database.expression.functionexpression.html#between()", "FunctionExpression::case()()": "class-cake.database.expression.functionexpression.html#case()", "FunctionExpression::count()()": "class-cake.database.expression.functionexpression.html#count()", "FunctionExpression::eq()()": "class-cake.database.expression.functionexpression.html#eq()", "FunctionExpression::equalFields()()": "class-cake.database.expression.functionexpression.html#equalFields()", "FunctionExpression::exists()()": "class-cake.database.expression.functionexpression.html#exists()", "FunctionExpression::getConjunction()()": "class-cake.database.expression.functionexpression.html#getConjunction()", "FunctionExpression::getDefaultTypes()()": "class-cake.database.expression.functionexpression.html#getDefaultTypes()", "FunctionExpression::getName()()": "class-cake.database.expression.functionexpression.html#getName()", "FunctionExpression::getReturnType()()": "class-cake.database.expression.functionexpression.html#getReturnType()", "FunctionExpression::getTypeMap()()": "class-cake.database.expression.functionexpression.html#getTypeMap()", "FunctionExpression::gt()()": "class-cake.database.expression.functionexpression.html#gt()", "FunctionExpression::gte()()": "class-cake.database.expression.functionexpression.html#gte()", "FunctionExpression::hasNestedExpression()()": "class-cake.database.expression.functionexpression.html#hasNestedExpression()", "FunctionExpression::in()()": "class-cake.database.expression.functionexpression.html#in()", "FunctionExpression::isCallable()()": "class-cake.database.expression.functionexpression.html#isCallable()", "FunctionExpression::isNotNull()()": "class-cake.database.expression.functionexpression.html#isNotNull()", "FunctionExpression::isNull()()": "class-cake.database.expression.functionexpression.html#isNull()", "FunctionExpression::iterateParts()()": "class-cake.database.expression.functionexpression.html#iterateParts()", "FunctionExpression::like()()": "class-cake.database.expression.functionexpression.html#like()", "FunctionExpression::lt()()": "class-cake.database.expression.functionexpression.html#lt()", "FunctionExpression::lte()()": "class-cake.database.expression.functionexpression.html#lte()", "FunctionExpression::not()()": "class-cake.database.expression.functionexpression.html#not()", "FunctionExpression::notEq()()": "class-cake.database.expression.functionexpression.html#notEq()", "FunctionExpression::notExists()()": "class-cake.database.expression.functionexpression.html#notExists()", "FunctionExpression::notIn()()": "class-cake.database.expression.functionexpression.html#notIn()", "FunctionExpression::notInOrNull()()": "class-cake.database.expression.functionexpression.html#notInOrNull()", "FunctionExpression::notLike()()": "class-cake.database.expression.functionexpression.html#notLike()", "FunctionExpression::or()()": "class-cake.database.expression.functionexpression.html#or()", "FunctionExpression::or_()()": "class-cake.database.expression.functionexpression.html#or_()", "FunctionExpression::setConjunction()()": "class-cake.database.expression.functionexpression.html#setConjunction()", "FunctionExpression::setDefaultTypes()()": "class-cake.database.expression.functionexpression.html#setDefaultTypes()", "FunctionExpression::setName()()": "class-cake.database.expression.functionexpression.html#setName()", "FunctionExpression::setReturnType()()": "class-cake.database.expression.functionexpression.html#setReturnType()", "FunctionExpression::setTypeMap()()": "class-cake.database.expression.functionexpression.html#setTypeMap()", "FunctionExpression::sql()()": "class-cake.database.expression.functionexpression.html#sql()", "FunctionExpression::traverse()()": "class-cake.database.expression.functionexpression.html#traverse()", "FunctionsBuilder (class)": "class-cake.database.functionsbuilder.html", "FunctionsBuilder::__call()()": "class-cake.database.functionsbuilder.html#__call()", "FunctionsBuilder::aggregate()()": "class-cake.database.functionsbuilder.html#aggregate()", "FunctionsBuilder::avg()()": "class-cake.database.functionsbuilder.html#avg()", "FunctionsBuilder::cast()()": "class-cake.database.functionsbuilder.html#cast()", "FunctionsBuilder::coalesce()()": "class-cake.database.functionsbuilder.html#coalesce()", "FunctionsBuilder::concat()()": "class-cake.database.functionsbuilder.html#concat()", "FunctionsBuilder::count()()": "class-cake.database.functionsbuilder.html#count()", "FunctionsBuilder::dateAdd()()": "class-cake.database.functionsbuilder.html#dateAdd()", "FunctionsBuilder::dateDiff()()": "class-cake.database.functionsbuilder.html#dateDiff()", "FunctionsBuilder::datePart()()": "class-cake.database.functionsbuilder.html#datePart()", "FunctionsBuilder::dayOfWeek()()": "class-cake.database.functionsbuilder.html#dayOfWeek()", "FunctionsBuilder::extract()()": "class-cake.database.functionsbuilder.html#extract()", "FunctionsBuilder::lag()()": "class-cake.database.functionsbuilder.html#lag()", "FunctionsBuilder::lead()()": "class-cake.database.functionsbuilder.html#lead()", "FunctionsBuilder::max()()": "class-cake.database.functionsbuilder.html#max()", "FunctionsBuilder::min()()": "class-cake.database.functionsbuilder.html#min()", "FunctionsBuilder::now()()": "class-cake.database.functionsbuilder.html#now()", "FunctionsBuilder::rand()()": "class-cake.database.functionsbuilder.html#rand()", "FunctionsBuilder::rowNumber()()": "class-cake.database.functionsbuilder.html#rowNumber()", "FunctionsBuilder::sum()()": "class-cake.database.functionsbuilder.html#sum()", "FunctionsBuilder::toLiteralParam()()": "class-cake.database.functionsbuilder.html#toLiteralParam()", "FunctionsBuilder::weekday()()": "class-cake.database.functionsbuilder.html#weekday()", "GoneException (class)": "class-cake.http.exception.goneexception.html", "Hash (class)": "class-cake.utility.hash.html", "Hash::_filter()()": "class-cake.utility.hash.html#_filter()", "Hash::_matches()()": "class-cake.utility.hash.html#_matches()", "Hash::_matchToken()()": "class-cake.utility.hash.html#_matchToken()", "Hash::_merge()()": "class-cake.utility.hash.html#_merge()", "Hash::_simpleOp()()": "class-cake.utility.hash.html#_simpleOp()", "Hash::_splitConditions()()": "class-cake.utility.hash.html#_splitConditions()", "Hash::_squash()()": "class-cake.utility.hash.html#_squash()", "Hash::apply()()": "class-cake.utility.hash.html#apply()", "Hash::check()()": "class-cake.utility.hash.html#check()", "Hash::combine()()": "class-cake.utility.hash.html#combine()", "Hash::contains()()": "class-cake.utility.hash.html#contains()", "Hash::diff()()": "class-cake.utility.hash.html#diff()", "Hash::dimensions()()": "class-cake.utility.hash.html#dimensions()", "Hash::expand()()": "class-cake.utility.hash.html#expand()", "Hash::extract()()": "class-cake.utility.hash.html#extract()", "Hash::filter()()": "class-cake.utility.hash.html#filter()", "Hash::flatten()()": "class-cake.utility.hash.html#flatten()", "Hash::format()()": "class-cake.utility.hash.html#format()", "Hash::get()()": "class-cake.utility.hash.html#get()", "Hash::insert()()": "class-cake.utility.hash.html#insert()", "Hash::map()()": "class-cake.utility.hash.html#map()", "Hash::maxDimensions()()": "class-cake.utility.hash.html#maxDimensions()", "Hash::merge()()": "class-cake.utility.hash.html#merge()", "Hash::mergeDiff()()": "class-cake.utility.hash.html#mergeDiff()", "Hash::nest()()": "class-cake.utility.hash.html#nest()", "Hash::normalize()()": "class-cake.utility.hash.html#normalize()", "Hash::numeric()()": "class-cake.utility.hash.html#numeric()", "Hash::reduce()()": "class-cake.utility.hash.html#reduce()", "Hash::remove()()": "class-cake.utility.hash.html#remove()", "Hash::sort()()": "class-cake.utility.hash.html#sort()", "HasMany (class)": "class-cake.orm.association.hasmany.html", "HasMany::$_bindingKey": "class-cake.orm.association.hasmany.html#$_bindingKey", "HasMany::$_cascadeCallbacks": "class-cake.orm.association.hasmany.html#$_cascadeCallbacks", "HasMany::$_className": "class-cake.orm.association.hasmany.html#$_className", "HasMany::$_conditions": "class-cake.orm.association.hasmany.html#$_conditions", "HasMany::$_dependent": "class-cake.orm.association.hasmany.html#$_dependent", "HasMany::$_finder": "class-cake.orm.association.hasmany.html#$_finder", "HasMany::$_foreignKey": "class-cake.orm.association.hasmany.html#$_foreignKey", "HasMany::$_joinType": "class-cake.orm.association.hasmany.html#$_joinType", "HasMany::$_name": "class-cake.orm.association.hasmany.html#$_name", "HasMany::$_propertyName": "class-cake.orm.association.hasmany.html#$_propertyName", "HasMany::$_saveStrategy": "class-cake.orm.association.hasmany.html#$_saveStrategy", "HasMany::$_sort": "class-cake.orm.association.hasmany.html#$_sort", "HasMany::$_sourceTable": "class-cake.orm.association.hasmany.html#$_sourceTable", "HasMany::$_strategy": "class-cake.orm.association.hasmany.html#$_strategy", "HasMany::$_tableLocator": "class-cake.orm.association.hasmany.html#$_tableLocator", "HasMany::$_targetTable": "class-cake.orm.association.hasmany.html#$_targetTable", "HasMany::$_validStrategies": "class-cake.orm.association.hasmany.html#$_validStrategies", "HasMany::$defaultTable": "class-cake.orm.association.hasmany.html#$defaultTable", "HasMany::__call()()": "class-cake.orm.association.hasmany.html#__call()", "HasMany::__construct()()": "class-cake.orm.association.hasmany.html#__construct()", "HasMany::__get()()": "class-cake.orm.association.hasmany.html#__get()", "HasMany::__isset()()": "class-cake.orm.association.hasmany.html#__isset()", "HasMany::_appendFields()()": "class-cake.orm.association.hasmany.html#_appendFields()", "HasMany::_appendNotMatching()()": "class-cake.orm.association.hasmany.html#_appendNotMatching()", "HasMany::_bindNewAssociations()()": "class-cake.orm.association.hasmany.html#_bindNewAssociations()", "HasMany::_camelize()()": "class-cake.orm.association.hasmany.html#_camelize()", "HasMany::_dispatchBeforeFind()()": "class-cake.orm.association.hasmany.html#_dispatchBeforeFind()", "HasMany::_entityName()()": "class-cake.orm.association.hasmany.html#_entityName()", "HasMany::_extractFinder()()": "class-cake.orm.association.hasmany.html#_extractFinder()", "HasMany::_fixtureName()()": "class-cake.orm.association.hasmany.html#_fixtureName()", "HasMany::_foreignKeyAcceptsNull()()": "class-cake.orm.association.hasmany.html#_foreignKeyAcceptsNull()", "HasMany::_formatAssociationResults()()": "class-cake.orm.association.hasmany.html#_formatAssociationResults()", "HasMany::_joinCondition()()": "class-cake.orm.association.hasmany.html#_joinCondition()", "HasMany::_modelKey()()": "class-cake.orm.association.hasmany.html#_modelKey()", "HasMany::_modelNameFromKey()()": "class-cake.orm.association.hasmany.html#_modelNameFromKey()", "HasMany::_options()()": "class-cake.orm.association.hasmany.html#_options()", "HasMany::_pluginNamespace()()": "class-cake.orm.association.hasmany.html#_pluginNamespace()", "HasMany::_pluginPath()()": "class-cake.orm.association.hasmany.html#_pluginPath()", "HasMany::_pluralHumanName()()": "class-cake.orm.association.hasmany.html#_pluralHumanName()", "HasMany::_propertyName()()": "class-cake.orm.association.hasmany.html#_propertyName()", "HasMany::_saveTarget()()": "class-cake.orm.association.hasmany.html#_saveTarget()", "HasMany::_singularHumanName()()": "class-cake.orm.association.hasmany.html#_singularHumanName()", "HasMany::_singularName()()": "class-cake.orm.association.hasmany.html#_singularName()", "HasMany::_unlink()()": "class-cake.orm.association.hasmany.html#_unlink()", "HasMany::_unlinkAssociated()()": "class-cake.orm.association.hasmany.html#_unlinkAssociated()", "HasMany::_variableName()()": "class-cake.orm.association.hasmany.html#_variableName()", "HasMany::attachTo()()": "class-cake.orm.association.hasmany.html#attachTo()", "HasMany::canBeJoined()()": "class-cake.orm.association.hasmany.html#canBeJoined()", "HasMany::cascadeDelete()()": "class-cake.orm.association.hasmany.html#cascadeDelete()", "HasMany::defaultRowValue()()": "class-cake.orm.association.hasmany.html#defaultRowValue()", "HasMany::deleteAll()()": "class-cake.orm.association.hasmany.html#deleteAll()", "HasMany::eagerLoader()()": "class-cake.orm.association.hasmany.html#eagerLoader()", "HasMany::exists()()": "class-cake.orm.association.hasmany.html#exists()", "HasMany::fetchTable()()": "class-cake.orm.association.hasmany.html#fetchTable()", "HasMany::find()()": "class-cake.orm.association.hasmany.html#find()", "HasMany::getBindingKey()()": "class-cake.orm.association.hasmany.html#getBindingKey()", "HasMany::getCascadeCallbacks()()": "class-cake.orm.association.hasmany.html#getCascadeCallbacks()", "HasMany::getClassName()()": "class-cake.orm.association.hasmany.html#getClassName()", "HasMany::getConditions()()": "class-cake.orm.association.hasmany.html#getConditions()", "HasMany::getDependent()()": "class-cake.orm.association.hasmany.html#getDependent()", "HasMany::getFinder()()": "class-cake.orm.association.hasmany.html#getFinder()", "HasMany::getForeignKey()()": "class-cake.orm.association.hasmany.html#getForeignKey()", "HasMany::getJoinType()()": "class-cake.orm.association.hasmany.html#getJoinType()", "HasMany::getName()()": "class-cake.orm.association.hasmany.html#getName()", "HasMany::getProperty()()": "class-cake.orm.association.hasmany.html#getProperty()", "HasMany::getSaveStrategy()()": "class-cake.orm.association.hasmany.html#getSaveStrategy()", "HasMany::getSort()()": "class-cake.orm.association.hasmany.html#getSort()", "HasMany::getSource()()": "class-cake.orm.association.hasmany.html#getSource()", "HasMany::getStrategy()()": "class-cake.orm.association.hasmany.html#getStrategy()", "HasMany::getTableLocator()()": "class-cake.orm.association.hasmany.html#getTableLocator()", "HasMany::getTarget()()": "class-cake.orm.association.hasmany.html#getTarget()", "HasMany::isOwningSide()()": "class-cake.orm.association.hasmany.html#isOwningSide()", "HasMany::link()()": "class-cake.orm.association.hasmany.html#link()", "HasMany::replace()()": "class-cake.orm.association.hasmany.html#replace()", "HasMany::requiresKeys()()": "class-cake.orm.association.hasmany.html#requiresKeys()", "HasMany::saveAssociated()()": "class-cake.orm.association.hasmany.html#saveAssociated()", "HasMany::setBindingKey()()": "class-cake.orm.association.hasmany.html#setBindingKey()", "HasMany::setCascadeCallbacks()()": "class-cake.orm.association.hasmany.html#setCascadeCallbacks()", "HasMany::setClassName()()": "class-cake.orm.association.hasmany.html#setClassName()", "HasMany::setConditions()()": "class-cake.orm.association.hasmany.html#setConditions()", "HasMany::setDependent()()": "class-cake.orm.association.hasmany.html#setDependent()", "HasMany::setFinder()()": "class-cake.orm.association.hasmany.html#setFinder()", "HasMany::setForeignKey()()": "class-cake.orm.association.hasmany.html#setForeignKey()", "HasMany::setJoinType()()": "class-cake.orm.association.hasmany.html#setJoinType()", "HasMany::setName()()": "class-cake.orm.association.hasmany.html#setName()", "HasMany::setProperty()()": "class-cake.orm.association.hasmany.html#setProperty()", "HasMany::setSaveStrategy()()": "class-cake.orm.association.hasmany.html#setSaveStrategy()", "HasMany::setSort()()": "class-cake.orm.association.hasmany.html#setSort()", "HasMany::setSource()()": "class-cake.orm.association.hasmany.html#setSource()", "HasMany::setStrategy()()": "class-cake.orm.association.hasmany.html#setStrategy()", "HasMany::setTableLocator()()": "class-cake.orm.association.hasmany.html#setTableLocator()", "HasMany::setTarget()()": "class-cake.orm.association.hasmany.html#setTarget()", "HasMany::transformRow()()": "class-cake.orm.association.hasmany.html#transformRow()", "HasMany::type()()": "class-cake.orm.association.hasmany.html#type()", "HasMany::unlink()()": "class-cake.orm.association.hasmany.html#unlink()", "HasMany::updateAll()()": "class-cake.orm.association.hasmany.html#updateAll()", "HasOne (class)": "class-cake.orm.association.hasone.html", "HasOne::$_bindingKey": "class-cake.orm.association.hasone.html#$_bindingKey", "HasOne::$_cascadeCallbacks": "class-cake.orm.association.hasone.html#$_cascadeCallbacks", "HasOne::$_className": "class-cake.orm.association.hasone.html#$_className", "HasOne::$_conditions": "class-cake.orm.association.hasone.html#$_conditions", "HasOne::$_dependent": "class-cake.orm.association.hasone.html#$_dependent", "HasOne::$_finder": "class-cake.orm.association.hasone.html#$_finder", "HasOne::$_foreignKey": "class-cake.orm.association.hasone.html#$_foreignKey", "HasOne::$_joinType": "class-cake.orm.association.hasone.html#$_joinType", "HasOne::$_name": "class-cake.orm.association.hasone.html#$_name", "HasOne::$_propertyName": "class-cake.orm.association.hasone.html#$_propertyName", "HasOne::$_sourceTable": "class-cake.orm.association.hasone.html#$_sourceTable", "HasOne::$_strategy": "class-cake.orm.association.hasone.html#$_strategy", "HasOne::$_tableLocator": "class-cake.orm.association.hasone.html#$_tableLocator", "HasOne::$_targetTable": "class-cake.orm.association.hasone.html#$_targetTable", "HasOne::$_validStrategies": "class-cake.orm.association.hasone.html#$_validStrategies", "HasOne::$defaultTable": "class-cake.orm.association.hasone.html#$defaultTable", "HasOne::__call()()": "class-cake.orm.association.hasone.html#__call()", "HasOne::__construct()()": "class-cake.orm.association.hasone.html#__construct()", "HasOne::__get()()": "class-cake.orm.association.hasone.html#__get()", "HasOne::__isset()()": "class-cake.orm.association.hasone.html#__isset()", "HasOne::_appendFields()()": "class-cake.orm.association.hasone.html#_appendFields()", "HasOne::_appendNotMatching()()": "class-cake.orm.association.hasone.html#_appendNotMatching()", "HasOne::_bindNewAssociations()()": "class-cake.orm.association.hasone.html#_bindNewAssociations()", "HasOne::_camelize()()": "class-cake.orm.association.hasone.html#_camelize()", "HasOne::_dispatchBeforeFind()()": "class-cake.orm.association.hasone.html#_dispatchBeforeFind()", "HasOne::_entityName()()": "class-cake.orm.association.hasone.html#_entityName()", "HasOne::_extractFinder()()": "class-cake.orm.association.hasone.html#_extractFinder()", "HasOne::_fixtureName()()": "class-cake.orm.association.hasone.html#_fixtureName()", "HasOne::_formatAssociationResults()()": "class-cake.orm.association.hasone.html#_formatAssociationResults()", "HasOne::_joinCondition()()": "class-cake.orm.association.hasone.html#_joinCondition()", "HasOne::_modelKey()()": "class-cake.orm.association.hasone.html#_modelKey()", "HasOne::_modelNameFromKey()()": "class-cake.orm.association.hasone.html#_modelNameFromKey()", "HasOne::_options()()": "class-cake.orm.association.hasone.html#_options()", "HasOne::_pluginNamespace()()": "class-cake.orm.association.hasone.html#_pluginNamespace()", "HasOne::_pluginPath()()": "class-cake.orm.association.hasone.html#_pluginPath()", "HasOne::_pluralHumanName()()": "class-cake.orm.association.hasone.html#_pluralHumanName()", "HasOne::_propertyName()()": "class-cake.orm.association.hasone.html#_propertyName()", "HasOne::_singularHumanName()()": "class-cake.orm.association.hasone.html#_singularHumanName()", "HasOne::_singularName()()": "class-cake.orm.association.hasone.html#_singularName()", "HasOne::_variableName()()": "class-cake.orm.association.hasone.html#_variableName()", "HasOne::attachTo()()": "class-cake.orm.association.hasone.html#attachTo()", "HasOne::canBeJoined()()": "class-cake.orm.association.hasone.html#canBeJoined()", "HasOne::cascadeDelete()()": "class-cake.orm.association.hasone.html#cascadeDelete()", "HasOne::defaultRowValue()()": "class-cake.orm.association.hasone.html#defaultRowValue()", "HasOne::deleteAll()()": "class-cake.orm.association.hasone.html#deleteAll()", "HasOne::eagerLoader()()": "class-cake.orm.association.hasone.html#eagerLoader()", "HasOne::exists()()": "class-cake.orm.association.hasone.html#exists()", "HasOne::fetchTable()()": "class-cake.orm.association.hasone.html#fetchTable()", "HasOne::find()()": "class-cake.orm.association.hasone.html#find()", "HasOne::getBindingKey()()": "class-cake.orm.association.hasone.html#getBindingKey()", "HasOne::getCascadeCallbacks()()": "class-cake.orm.association.hasone.html#getCascadeCallbacks()", "HasOne::getClassName()()": "class-cake.orm.association.hasone.html#getClassName()", "HasOne::getConditions()()": "class-cake.orm.association.hasone.html#getConditions()", "HasOne::getDependent()()": "class-cake.orm.association.hasone.html#getDependent()", "HasOne::getFinder()()": "class-cake.orm.association.hasone.html#getFinder()", "HasOne::getForeignKey()()": "class-cake.orm.association.hasone.html#getForeignKey()", "HasOne::getJoinType()()": "class-cake.orm.association.hasone.html#getJoinType()", "HasOne::getName()()": "class-cake.orm.association.hasone.html#getName()", "HasOne::getProperty()()": "class-cake.orm.association.hasone.html#getProperty()", "HasOne::getSource()()": "class-cake.orm.association.hasone.html#getSource()", "HasOne::getStrategy()()": "class-cake.orm.association.hasone.html#getStrategy()", "HasOne::getTableLocator()()": "class-cake.orm.association.hasone.html#getTableLocator()", "HasOne::getTarget()()": "class-cake.orm.association.hasone.html#getTarget()", "HasOne::isOwningSide()()": "class-cake.orm.association.hasone.html#isOwningSide()", "HasOne::requiresKeys()()": "class-cake.orm.association.hasone.html#requiresKeys()", "HasOne::saveAssociated()()": "class-cake.orm.association.hasone.html#saveAssociated()", "HasOne::setBindingKey()()": "class-cake.orm.association.hasone.html#setBindingKey()", "HasOne::setCascadeCallbacks()()": "class-cake.orm.association.hasone.html#setCascadeCallbacks()", "HasOne::setClassName()()": "class-cake.orm.association.hasone.html#setClassName()", "HasOne::setConditions()()": "class-cake.orm.association.hasone.html#setConditions()", "HasOne::setDependent()()": "class-cake.orm.association.hasone.html#setDependent()", "HasOne::setFinder()()": "class-cake.orm.association.hasone.html#setFinder()", "HasOne::setForeignKey()()": "class-cake.orm.association.hasone.html#setForeignKey()", "HasOne::setJoinType()()": "class-cake.orm.association.hasone.html#setJoinType()", "HasOne::setName()()": "class-cake.orm.association.hasone.html#setName()", "HasOne::setProperty()()": "class-cake.orm.association.hasone.html#setProperty()", "HasOne::setSource()()": "class-cake.orm.association.hasone.html#setSource()", "HasOne::setStrategy()()": "class-cake.orm.association.hasone.html#setStrategy()", "HasOne::setTableLocator()()": "class-cake.orm.association.hasone.html#setTableLocator()", "HasOne::setTarget()()": "class-cake.orm.association.hasone.html#setTarget()", "HasOne::transformRow()()": "class-cake.orm.association.hasone.html#transformRow()", "HasOne::type()()": "class-cake.orm.association.hasone.html#type()", "HasOne::updateAll()()": "class-cake.orm.association.hasone.html#updateAll()", "HeaderContains (class)": "class-cake.testsuite.constraint.response.headercontains.html", "HeaderContains::$headerName": "class-cake.testsuite.constraint.response.headercontains.html#$headerName", "HeaderContains::$response": "class-cake.testsuite.constraint.response.headercontains.html#$response", "HeaderContains::__construct()()": "class-cake.testsuite.constraint.response.headercontains.html#__construct()", "HeaderContains::_getBodyAsString()()": "class-cake.testsuite.constraint.response.headercontains.html#_getBodyAsString()", "HeaderContains::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.headercontains.html#additionalFailureDescription()", "HeaderContains::count()()": "class-cake.testsuite.constraint.response.headercontains.html#count()", "HeaderContains::evaluate()()": "class-cake.testsuite.constraint.response.headercontains.html#evaluate()", "HeaderContains::exporter()()": "class-cake.testsuite.constraint.response.headercontains.html#exporter()", "HeaderContains::fail()()": "class-cake.testsuite.constraint.response.headercontains.html#fail()", "HeaderContains::failureDescription()()": "class-cake.testsuite.constraint.response.headercontains.html#failureDescription()", "HeaderContains::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.headercontains.html#failureDescriptionInContext()", "HeaderContains::matches()()": "class-cake.testsuite.constraint.response.headercontains.html#matches()", "HeaderContains::reduce()()": "class-cake.testsuite.constraint.response.headercontains.html#reduce()", "HeaderContains::toString()()": "class-cake.testsuite.constraint.response.headercontains.html#toString()", "HeaderContains::toStringInContext()()": "class-cake.testsuite.constraint.response.headercontains.html#toStringInContext()", "HeaderEquals (class)": "class-cake.testsuite.constraint.response.headerequals.html", "HeaderEquals::$headerName": "class-cake.testsuite.constraint.response.headerequals.html#$headerName", "HeaderEquals::$response": "class-cake.testsuite.constraint.response.headerequals.html#$response", "HeaderEquals::__construct()()": "class-cake.testsuite.constraint.response.headerequals.html#__construct()", "HeaderEquals::_getBodyAsString()()": "class-cake.testsuite.constraint.response.headerequals.html#_getBodyAsString()", "HeaderEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.headerequals.html#additionalFailureDescription()", "HeaderEquals::count()()": "class-cake.testsuite.constraint.response.headerequals.html#count()", "HeaderEquals::evaluate()()": "class-cake.testsuite.constraint.response.headerequals.html#evaluate()", "HeaderEquals::exporter()()": "class-cake.testsuite.constraint.response.headerequals.html#exporter()", "HeaderEquals::fail()()": "class-cake.testsuite.constraint.response.headerequals.html#fail()", "HeaderEquals::failureDescription()()": "class-cake.testsuite.constraint.response.headerequals.html#failureDescription()", "HeaderEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.headerequals.html#failureDescriptionInContext()", "HeaderEquals::matches()()": "class-cake.testsuite.constraint.response.headerequals.html#matches()", "HeaderEquals::reduce()()": "class-cake.testsuite.constraint.response.headerequals.html#reduce()", "HeaderEquals::toString()()": "class-cake.testsuite.constraint.response.headerequals.html#toString()", "HeaderEquals::toStringInContext()()": "class-cake.testsuite.constraint.response.headerequals.html#toStringInContext()", "HeaderNotContains (class)": "class-cake.testsuite.constraint.response.headernotcontains.html", "HeaderNotContains::$headerName": "class-cake.testsuite.constraint.response.headernotcontains.html#$headerName", "HeaderNotContains::$response": "class-cake.testsuite.constraint.response.headernotcontains.html#$response", "HeaderNotContains::__construct()()": "class-cake.testsuite.constraint.response.headernotcontains.html#__construct()", "HeaderNotContains::_getBodyAsString()()": "class-cake.testsuite.constraint.response.headernotcontains.html#_getBodyAsString()", "HeaderNotContains::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.headernotcontains.html#additionalFailureDescription()", "HeaderNotContains::count()()": "class-cake.testsuite.constraint.response.headernotcontains.html#count()", "HeaderNotContains::evaluate()()": "class-cake.testsuite.constraint.response.headernotcontains.html#evaluate()", "HeaderNotContains::exporter()()": "class-cake.testsuite.constraint.response.headernotcontains.html#exporter()", "HeaderNotContains::fail()()": "class-cake.testsuite.constraint.response.headernotcontains.html#fail()", "HeaderNotContains::failureDescription()()": "class-cake.testsuite.constraint.response.headernotcontains.html#failureDescription()", "HeaderNotContains::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.headernotcontains.html#failureDescriptionInContext()", "HeaderNotContains::matches()()": "class-cake.testsuite.constraint.response.headernotcontains.html#matches()", "HeaderNotContains::reduce()()": "class-cake.testsuite.constraint.response.headernotcontains.html#reduce()", "HeaderNotContains::toString()()": "class-cake.testsuite.constraint.response.headernotcontains.html#toString()", "HeaderNotContains::toStringInContext()()": "class-cake.testsuite.constraint.response.headernotcontains.html#toStringInContext()", "HeaderNotSet (class)": "class-cake.testsuite.constraint.response.headernotset.html", "HeaderNotSet::$headerName": "class-cake.testsuite.constraint.response.headernotset.html#$headerName", "HeaderNotSet::$response": "class-cake.testsuite.constraint.response.headernotset.html#$response", "HeaderNotSet::__construct()()": "class-cake.testsuite.constraint.response.headernotset.html#__construct()", "HeaderNotSet::_getBodyAsString()()": "class-cake.testsuite.constraint.response.headernotset.html#_getBodyAsString()", "HeaderNotSet::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.headernotset.html#additionalFailureDescription()", "HeaderNotSet::count()()": "class-cake.testsuite.constraint.response.headernotset.html#count()", "HeaderNotSet::evaluate()()": "class-cake.testsuite.constraint.response.headernotset.html#evaluate()", "HeaderNotSet::exporter()()": "class-cake.testsuite.constraint.response.headernotset.html#exporter()", "HeaderNotSet::fail()()": "class-cake.testsuite.constraint.response.headernotset.html#fail()", "HeaderNotSet::failureDescription()()": "class-cake.testsuite.constraint.response.headernotset.html#failureDescription()", "HeaderNotSet::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.headernotset.html#failureDescriptionInContext()", "HeaderNotSet::matches()()": "class-cake.testsuite.constraint.response.headernotset.html#matches()", "HeaderNotSet::reduce()()": "class-cake.testsuite.constraint.response.headernotset.html#reduce()", "HeaderNotSet::toString()()": "class-cake.testsuite.constraint.response.headernotset.html#toString()", "HeaderNotSet::toStringInContext()()": "class-cake.testsuite.constraint.response.headernotset.html#toStringInContext()", "HeaderSet (class)": "class-cake.testsuite.constraint.response.headerset.html", "HeaderSet::$headerName": "class-cake.testsuite.constraint.response.headerset.html#$headerName", "HeaderSet::$response": "class-cake.testsuite.constraint.response.headerset.html#$response", "HeaderSet::__construct()()": "class-cake.testsuite.constraint.response.headerset.html#__construct()", "HeaderSet::_getBodyAsString()()": "class-cake.testsuite.constraint.response.headerset.html#_getBodyAsString()", "HeaderSet::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.headerset.html#additionalFailureDescription()", "HeaderSet::count()()": "class-cake.testsuite.constraint.response.headerset.html#count()", "HeaderSet::evaluate()()": "class-cake.testsuite.constraint.response.headerset.html#evaluate()", "HeaderSet::exporter()()": "class-cake.testsuite.constraint.response.headerset.html#exporter()", "HeaderSet::fail()()": "class-cake.testsuite.constraint.response.headerset.html#fail()", "HeaderSet::failureDescription()()": "class-cake.testsuite.constraint.response.headerset.html#failureDescription()", "HeaderSet::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.headerset.html#failureDescriptionInContext()", "HeaderSet::matches()()": "class-cake.testsuite.constraint.response.headerset.html#matches()", "HeaderSet::reduce()()": "class-cake.testsuite.constraint.response.headerset.html#reduce()", "HeaderSet::toString()()": "class-cake.testsuite.constraint.response.headerset.html#toString()", "HeaderSet::toStringInContext()()": "class-cake.testsuite.constraint.response.headerset.html#toStringInContext()", "HelpCommand (class)": "class-cake.console.command.helpcommand.html", "HelpCommand::$commands": "class-cake.console.command.helpcommand.html#$commands", "HelpCommand::$name": "class-cake.console.command.helpcommand.html#$name", "HelpCommand::abort()()": "class-cake.console.command.helpcommand.html#abort()", "HelpCommand::asText()()": "class-cake.console.command.helpcommand.html#asText()", "HelpCommand::asXml()()": "class-cake.console.command.helpcommand.html#asXml()", "HelpCommand::buildOptionParser()()": "class-cake.console.command.helpcommand.html#buildOptionParser()", "HelpCommand::defaultName()()": "class-cake.console.command.helpcommand.html#defaultName()", "HelpCommand::displayHelp()()": "class-cake.console.command.helpcommand.html#displayHelp()", "HelpCommand::execute()()": "class-cake.console.command.helpcommand.html#execute()", "HelpCommand::executeCommand()()": "class-cake.console.command.helpcommand.html#executeCommand()", "HelpCommand::getDescription()()": "class-cake.console.command.helpcommand.html#getDescription()", "HelpCommand::getName()()": "class-cake.console.command.helpcommand.html#getName()", "HelpCommand::getOptionParser()()": "class-cake.console.command.helpcommand.html#getOptionParser()", "HelpCommand::getRootName()()": "class-cake.console.command.helpcommand.html#getRootName()", "HelpCommand::getShortestName()()": "class-cake.console.command.helpcommand.html#getShortestName()", "HelpCommand::initialize()()": "class-cake.console.command.helpcommand.html#initialize()", "HelpCommand::outputPaths()()": "class-cake.console.command.helpcommand.html#outputPaths()", "HelpCommand::run()()": "class-cake.console.command.helpcommand.html#run()", "HelpCommand::setCommandCollection()()": "class-cake.console.command.helpcommand.html#setCommandCollection()", "HelpCommand::setName()()": "class-cake.console.command.helpcommand.html#setName()", "HelpCommand::setOutputLevel()()": "class-cake.console.command.helpcommand.html#setOutputLevel()", "Helper (class)": "class-cake.console.helper.html", "Helper::$_config": "class-cake.console.helper.html#$_config", "Helper::$_configInitialized": "class-cake.view.helper.html#$_configInitialized", "Helper::$_defaultConfig": "class-cake.console.helper.html#$_defaultConfig", "Helper::$_helperMap": "class-cake.view.helper.html#$_helperMap", "Helper::$_io": "class-cake.console.helper.html#$_io", "Helper::$_View": "class-cake.view.helper.html#$_View", "Helper::$helpers": "class-cake.view.helper.html#$helpers", "Helper::__call()()": "class-cake.view.helper.html#__call()", "Helper::__construct()()": "class-cake.view.helper.html#__construct()", "Helper::__debugInfo()()": "class-cake.view.helper.html#__debugInfo()", "Helper::__get()()": "class-cake.view.helper.html#__get()", "Helper::_configDelete()()": "class-cake.view.helper.html#_configDelete()", "Helper::_configRead()()": "class-cake.view.helper.html#_configRead()", "Helper::_configWrite()()": "class-cake.view.helper.html#_configWrite()", "Helper::_confirm()()": "class-cake.view.helper.html#_confirm()", "Helper::addClass()()": "class-cake.view.helper.html#addClass()", "Helper::configShallow()()": "class-cake.console.helper.html#configShallow()", "Helper::getConfig()()": "class-cake.console.helper.html#getConfig()", "Helper::getConfigOrFail()()": "class-cake.view.helper.html#getConfigOrFail()", "Helper::getView()()": "class-cake.view.helper.html#getView()", "Helper::implementedEvents()()": "class-cake.view.helper.html#implementedEvents()", "Helper::initialize()()": "class-cake.view.helper.html#initialize()", "Helper::output()()": "class-cake.console.helper.html#output()", "Helper::setConfig()()": "class-cake.view.helper.html#setConfig()", "HelperRegistry (class)": "class-cake.console.helperregistry.html", "HelperRegistry::$_eventClass": "class-cake.view.helperregistry.html#$_eventClass", "HelperRegistry::$_eventManager": "class-cake.view.helperregistry.html#$_eventManager", "HelperRegistry::$_io": "class-cake.console.helperregistry.html#$_io", "HelperRegistry::$_loaded": "class-cake.view.helperregistry.html#$_loaded", "HelperRegistry::$_View": "class-cake.view.helperregistry.html#$_View", "HelperRegistry::__construct()()": "class-cake.view.helperregistry.html#__construct()", "HelperRegistry::__debugInfo()()": "class-cake.console.helperregistry.html#__debugInfo()", "HelperRegistry::__get()()": "class-cake.console.helperregistry.html#__get()", "HelperRegistry::__isset()()": "class-cake.console.helperregistry.html#__isset()", "HelperRegistry::__set()()": "class-cake.console.helperregistry.html#__set()", "HelperRegistry::__unset()()": "class-cake.console.helperregistry.html#__unset()", "HelperRegistry::_checkDuplicate()()": "class-cake.view.helperregistry.html#_checkDuplicate()", "HelperRegistry::_create()()": "class-cake.view.helperregistry.html#_create()", "HelperRegistry::_resolveClassName()()": "class-cake.console.helperregistry.html#_resolveClassName()", "HelperRegistry::_throwMissingClassError()()": "class-cake.view.helperregistry.html#_throwMissingClassError()", "HelperRegistry::count()()": "class-cake.console.helperregistry.html#count()", "HelperRegistry::dispatchEvent()()": "class-cake.view.helperregistry.html#dispatchEvent()", "HelperRegistry::get()()": "class-cake.view.helperregistry.html#get()", "HelperRegistry::getEventManager()()": "class-cake.view.helperregistry.html#getEventManager()", "HelperRegistry::getIterator()()": "class-cake.console.helperregistry.html#getIterator()", "HelperRegistry::has()()": "class-cake.view.helperregistry.html#has()", "HelperRegistry::load()()": "class-cake.view.helperregistry.html#load()", "HelperRegistry::loaded()()": "class-cake.console.helperregistry.html#loaded()", "HelperRegistry::normalizeArray()()": "class-cake.view.helperregistry.html#normalizeArray()", "HelperRegistry::reset()()": "class-cake.view.helperregistry.html#reset()", "HelperRegistry::set()()": "class-cake.view.helperregistry.html#set()", "HelperRegistry::setEventManager()()": "class-cake.view.helperregistry.html#setEventManager()", "HelperRegistry::setIo()()": "class-cake.console.helperregistry.html#setIo()", "HelperRegistry::unload()()": "class-cake.view.helperregistry.html#unload()", "HelpFormatter (class)": "class-cake.console.helpformatter.html", "HelpFormatter::$_alias": "class-cake.console.helpformatter.html#$_alias", "HelpFormatter::$_maxArgs": "class-cake.console.helpformatter.html#$_maxArgs", "HelpFormatter::$_maxOptions": "class-cake.console.helpformatter.html#$_maxOptions", "HelpFormatter::$_parser": "class-cake.console.helpformatter.html#$_parser", "HelpFormatter::__construct()()": "class-cake.console.helpformatter.html#__construct()", "HelpFormatter::_generateUsage()()": "class-cake.console.helpformatter.html#_generateUsage()", "HelpFormatter::_getMaxLength()()": "class-cake.console.helpformatter.html#_getMaxLength()", "HelpFormatter::setAlias()()": "class-cake.console.helpformatter.html#setAlias()", "HelpFormatter::text()()": "class-cake.console.helpformatter.html#text()", "HelpFormatter::xml()()": "class-cake.console.helpformatter.html#xml()", "HtmlErrorRenderer (class)": "class-cake.error.renderer.htmlerrorrenderer.html", "HtmlErrorRenderer::render()()": "class-cake.error.renderer.htmlerrorrenderer.html#render()", "HtmlErrorRenderer::write()()": "class-cake.error.renderer.htmlerrorrenderer.html#write()", "HtmlFormatter (class)": "class-cake.error.debug.htmlformatter.html", "HtmlFormatter::$id": "class-cake.error.debug.htmlformatter.html#$id", "HtmlFormatter::$outputHeader": "class-cake.error.debug.htmlformatter.html#$outputHeader", "HtmlFormatter::__construct()()": "class-cake.error.debug.htmlformatter.html#__construct()", "HtmlFormatter::dump()()": "class-cake.error.debug.htmlformatter.html#dump()", "HtmlFormatter::dumpHeader()()": "class-cake.error.debug.htmlformatter.html#dumpHeader()", "HtmlFormatter::environmentMatches()()": "class-cake.error.debug.htmlformatter.html#environmentMatches()", "HtmlFormatter::export()()": "class-cake.error.debug.htmlformatter.html#export()", "HtmlFormatter::exportArray()()": "class-cake.error.debug.htmlformatter.html#exportArray()", "HtmlFormatter::exportObject()()": "class-cake.error.debug.htmlformatter.html#exportObject()", "HtmlFormatter::formatWrapper()()": "class-cake.error.debug.htmlformatter.html#formatWrapper()", "HtmlFormatter::style()()": "class-cake.error.debug.htmlformatter.html#style()", "HtmlHelper (class)": "class-cake.view.helper.htmlhelper.html", "HtmlHelper::$_config": "class-cake.view.helper.htmlhelper.html#$_config", "HtmlHelper::$_configInitialized": "class-cake.view.helper.htmlhelper.html#$_configInitialized", "HtmlHelper::$_defaultConfig": "class-cake.view.helper.htmlhelper.html#$_defaultConfig", "HtmlHelper::$_helperMap": "class-cake.view.helper.htmlhelper.html#$_helperMap", "HtmlHelper::$_includedAssets": "class-cake.view.helper.htmlhelper.html#$_includedAssets", "HtmlHelper::$_scriptBlockOptions": "class-cake.view.helper.htmlhelper.html#$_scriptBlockOptions", "HtmlHelper::$_templater": "class-cake.view.helper.htmlhelper.html#$_templater", "HtmlHelper::$_View": "class-cake.view.helper.htmlhelper.html#$_View", "HtmlHelper::$helpers": "class-cake.view.helper.htmlhelper.html#$helpers", "HtmlHelper::$Url": "class-cake.view.helper.htmlhelper.html#$Url", "HtmlHelper::__call()()": "class-cake.view.helper.htmlhelper.html#__call()", "HtmlHelper::__construct()()": "class-cake.view.helper.htmlhelper.html#__construct()", "HtmlHelper::__debugInfo()()": "class-cake.view.helper.htmlhelper.html#__debugInfo()", "HtmlHelper::__get()()": "class-cake.view.helper.htmlhelper.html#__get()", "HtmlHelper::_configDelete()()": "class-cake.view.helper.htmlhelper.html#_configDelete()", "HtmlHelper::_configRead()()": "class-cake.view.helper.htmlhelper.html#_configRead()", "HtmlHelper::_configWrite()()": "class-cake.view.helper.htmlhelper.html#_configWrite()", "HtmlHelper::_confirm()()": "class-cake.view.helper.htmlhelper.html#_confirm()", "HtmlHelper::_nestedListItem()()": "class-cake.view.helper.htmlhelper.html#_nestedListItem()", "HtmlHelper::_renderCells()()": "class-cake.view.helper.htmlhelper.html#_renderCells()", "HtmlHelper::addClass()()": "class-cake.view.helper.htmlhelper.html#addClass()", "HtmlHelper::charset()()": "class-cake.view.helper.htmlhelper.html#charset()", "HtmlHelper::configShallow()()": "class-cake.view.helper.htmlhelper.html#configShallow()", "HtmlHelper::css()()": "class-cake.view.helper.htmlhelper.html#css()", "HtmlHelper::div()()": "class-cake.view.helper.htmlhelper.html#div()", "HtmlHelper::formatTemplate()()": "class-cake.view.helper.htmlhelper.html#formatTemplate()", "HtmlHelper::getConfig()()": "class-cake.view.helper.htmlhelper.html#getConfig()", "HtmlHelper::getConfigOrFail()()": "class-cake.view.helper.htmlhelper.html#getConfigOrFail()", "HtmlHelper::getTemplates()()": "class-cake.view.helper.htmlhelper.html#getTemplates()", "HtmlHelper::getView()()": "class-cake.view.helper.htmlhelper.html#getView()", "HtmlHelper::image()()": "class-cake.view.helper.htmlhelper.html#image()", "HtmlHelper::implementedEvents()()": "class-cake.view.helper.htmlhelper.html#implementedEvents()", "HtmlHelper::initialize()()": "class-cake.view.helper.htmlhelper.html#initialize()", "HtmlHelper::link()()": "class-cake.view.helper.htmlhelper.html#link()", "HtmlHelper::linkFromPath()()": "class-cake.view.helper.htmlhelper.html#linkFromPath()", "HtmlHelper::media()()": "class-cake.view.helper.htmlhelper.html#media()", "HtmlHelper::meta()()": "class-cake.view.helper.htmlhelper.html#meta()", "HtmlHelper::nestedList()()": "class-cake.view.helper.htmlhelper.html#nestedList()", "HtmlHelper::para()()": "class-cake.view.helper.htmlhelper.html#para()", "HtmlHelper::script()()": "class-cake.view.helper.htmlhelper.html#script()", "HtmlHelper::scriptBlock()()": "class-cake.view.helper.htmlhelper.html#scriptBlock()", "HtmlHelper::scriptEnd()()": "class-cake.view.helper.htmlhelper.html#scriptEnd()", "HtmlHelper::scriptStart()()": "class-cake.view.helper.htmlhelper.html#scriptStart()", "HtmlHelper::setConfig()()": "class-cake.view.helper.htmlhelper.html#setConfig()", "HtmlHelper::setTemplates()()": "class-cake.view.helper.htmlhelper.html#setTemplates()", "HtmlHelper::style()()": "class-cake.view.helper.htmlhelper.html#style()", "HtmlHelper::tableCell()()": "class-cake.view.helper.htmlhelper.html#tableCell()", "HtmlHelper::tableCells()()": "class-cake.view.helper.htmlhelper.html#tableCells()", "HtmlHelper::tableHeaders()()": "class-cake.view.helper.htmlhelper.html#tableHeaders()", "HtmlHelper::tableRow()()": "class-cake.view.helper.htmlhelper.html#tableRow()", "HtmlHelper::tag()()": "class-cake.view.helper.htmlhelper.html#tag()", "HtmlHelper::templater()()": "class-cake.view.helper.htmlhelper.html#templater()", "Http (namespace)": "namespace-cake.http.html", "Http\\Client (namespace)": "namespace-cake.http.client.html", "Http\\Client\\Adapter (namespace)": "namespace-cake.http.client.adapter.html", "Http\\Client\\Auth (namespace)": "namespace-cake.http.client.auth.html", "Http\\Client\\Exception (namespace)": "namespace-cake.http.client.exception.html", "Http\\Cookie (namespace)": "namespace-cake.http.cookie.html", "Http\\Exception (namespace)": "namespace-cake.http.exception.html", "Http\\Middleware (namespace)": "namespace-cake.http.middleware.html", "Http\\Session (namespace)": "namespace-cake.http.session.html", "Http\\TestSuite (namespace)": "namespace-cake.http.testsuite.html", "HttpApplicationInterface (interface)": "interface-cake.core.httpapplicationinterface.html", "HttpClientTrait (trait)": "trait-cake.http.testsuite.httpclienttrait.html", "HttpException (class)": "class-cake.http.exception.httpexception.html", "HttpsEnforcerMiddleware (class)": "class-cake.http.middleware.httpsenforcermiddleware.html", "HttpsEnforcerMiddleware::$config": "class-cake.http.middleware.httpsenforcermiddleware.html#$config", "HttpsEnforcerMiddleware::__construct()()": "class-cake.http.middleware.httpsenforcermiddleware.html#__construct()", "HttpsEnforcerMiddleware::addHsts()()": "class-cake.http.middleware.httpsenforcermiddleware.html#addHsts()", "HttpsEnforcerMiddleware::process()()": "class-cake.http.middleware.httpsenforcermiddleware.html#process()", "I18n (class)": "class-cake.i18n.i18n.html", "I18n (namespace)": "namespace-cake.i18n.html", "I18n::$_collection": "class-cake.i18n.i18n.html#$_collection", "I18n::$_defaultLocale": "class-cake.i18n.i18n.html#$_defaultLocale", "I18n::clear()()": "class-cake.i18n.i18n.html#clear()", "I18n::config()()": "class-cake.i18n.i18n.html#config()", "I18n::getDefaultFormatter()()": "class-cake.i18n.i18n.html#getDefaultFormatter()", "I18n::getDefaultLocale()()": "class-cake.i18n.i18n.html#getDefaultLocale()", "I18n::getLocale()()": "class-cake.i18n.i18n.html#getLocale()", "I18n::getTranslator()()": "class-cake.i18n.i18n.html#getTranslator()", "I18n::setDefaultFormatter()()": "class-cake.i18n.i18n.html#setDefaultFormatter()", "I18n::setLocale()()": "class-cake.i18n.i18n.html#setLocale()", "I18n::setTranslator()()": "class-cake.i18n.i18n.html#setTranslator()", "I18n::translators()()": "class-cake.i18n.i18n.html#translators()", "I18n::useFallback()()": "class-cake.i18n.i18n.html#useFallback()", "I18n\\Exception (namespace)": "namespace-cake.i18n.exception.html", "I18n\\Formatter (namespace)": "namespace-cake.i18n.formatter.html", "I18n\\Middleware (namespace)": "namespace-cake.i18n.middleware.html", "I18n\\Parser (namespace)": "namespace-cake.i18n.parser.html", "I18nCommand (class)": "class-cake.command.i18ncommand.html", "I18nCommand::$_modelFactories": "class-cake.command.i18ncommand.html#$_modelFactories", "I18nCommand::$_modelType": "class-cake.command.i18ncommand.html#$_modelType", "I18nCommand::$_tableLocator": "class-cake.command.i18ncommand.html#$_tableLocator", "I18nCommand::$defaultTable": "class-cake.command.i18ncommand.html#$defaultTable", "I18nCommand::$modelClass": "class-cake.command.i18ncommand.html#$modelClass", "I18nCommand::$name": "class-cake.command.i18ncommand.html#$name", "I18nCommand::__construct()()": "class-cake.command.i18ncommand.html#__construct()", "I18nCommand::_setModelClass()()": "class-cake.command.i18ncommand.html#_setModelClass()", "I18nCommand::abort()()": "class-cake.command.i18ncommand.html#abort()", "I18nCommand::buildOptionParser()()": "class-cake.command.i18ncommand.html#buildOptionParser()", "I18nCommand::defaultName()()": "class-cake.command.i18ncommand.html#defaultName()", "I18nCommand::displayHelp()()": "class-cake.command.i18ncommand.html#displayHelp()", "I18nCommand::execute()()": "class-cake.command.i18ncommand.html#execute()", "I18nCommand::executeCommand()()": "class-cake.command.i18ncommand.html#executeCommand()", "I18nCommand::fetchTable()()": "class-cake.command.i18ncommand.html#fetchTable()", "I18nCommand::getDescription()()": "class-cake.command.i18ncommand.html#getDescription()", "I18nCommand::getModelType()()": "class-cake.command.i18ncommand.html#getModelType()", "I18nCommand::getName()()": "class-cake.command.i18ncommand.html#getName()", "I18nCommand::getOptionParser()()": "class-cake.command.i18ncommand.html#getOptionParser()", "I18nCommand::getRootName()()": "class-cake.command.i18ncommand.html#getRootName()", "I18nCommand::getTableLocator()()": "class-cake.command.i18ncommand.html#getTableLocator()", "I18nCommand::initialize()()": "class-cake.command.i18ncommand.html#initialize()", "I18nCommand::loadModel()()": "class-cake.command.i18ncommand.html#loadModel()", "I18nCommand::log()()": "class-cake.command.i18ncommand.html#log()", "I18nCommand::modelFactory()()": "class-cake.command.i18ncommand.html#modelFactory()", "I18nCommand::run()()": "class-cake.command.i18ncommand.html#run()", "I18nCommand::setModelType()()": "class-cake.command.i18ncommand.html#setModelType()", "I18nCommand::setName()()": "class-cake.command.i18ncommand.html#setName()", "I18nCommand::setOutputLevel()()": "class-cake.command.i18ncommand.html#setOutputLevel()", "I18nCommand::setTableLocator()()": "class-cake.command.i18ncommand.html#setTableLocator()", "I18nDateTimeInterface (interface)": "interface-cake.i18n.i18ndatetimeinterface.html", "I18nException (class)": "class-cake.i18n.exception.i18nexception.html", "I18nExtractCommand (class)": "class-cake.command.i18nextractcommand.html", "I18nExtractCommand::$_countMarkerError": "class-cake.command.i18nextractcommand.html#$_countMarkerError", "I18nExtractCommand::$_exclude": "class-cake.command.i18nextractcommand.html#$_exclude", "I18nExtractCommand::$_extractCore": "class-cake.command.i18nextractcommand.html#$_extractCore", "I18nExtractCommand::$_file": "class-cake.command.i18nextractcommand.html#$_file", "I18nExtractCommand::$_files": "class-cake.command.i18nextractcommand.html#$_files", "I18nExtractCommand::$_markerError": "class-cake.command.i18nextractcommand.html#$_markerError", "I18nExtractCommand::$_merge": "class-cake.command.i18nextractcommand.html#$_merge", "I18nExtractCommand::$_modelFactories": "class-cake.command.i18nextractcommand.html#$_modelFactories", "I18nExtractCommand::$_modelType": "class-cake.command.i18nextractcommand.html#$_modelType", "I18nExtractCommand::$_output": "class-cake.command.i18nextractcommand.html#$_output", "I18nExtractCommand::$_paths": "class-cake.command.i18nextractcommand.html#$_paths", "I18nExtractCommand::$_storage": "class-cake.command.i18nextractcommand.html#$_storage", "I18nExtractCommand::$_tableLocator": "class-cake.command.i18nextractcommand.html#$_tableLocator", "I18nExtractCommand::$_tokens": "class-cake.command.i18nextractcommand.html#$_tokens", "I18nExtractCommand::$_translations": "class-cake.command.i18nextractcommand.html#$_translations", "I18nExtractCommand::$defaultTable": "class-cake.command.i18nextractcommand.html#$defaultTable", "I18nExtractCommand::$modelClass": "class-cake.command.i18nextractcommand.html#$modelClass", "I18nExtractCommand::$name": "class-cake.command.i18nextractcommand.html#$name", "I18nExtractCommand::__construct()()": "class-cake.command.i18nextractcommand.html#__construct()", "I18nExtractCommand::_addTranslation()()": "class-cake.command.i18nextractcommand.html#_addTranslation()", "I18nExtractCommand::_buildFiles()()": "class-cake.command.i18nextractcommand.html#_buildFiles()", "I18nExtractCommand::_extract()()": "class-cake.command.i18nextractcommand.html#_extract()", "I18nExtractCommand::_extractTokens()()": "class-cake.command.i18nextractcommand.html#_extractTokens()", "I18nExtractCommand::_formatString()()": "class-cake.command.i18nextractcommand.html#_formatString()", "I18nExtractCommand::_getPaths()()": "class-cake.command.i18nextractcommand.html#_getPaths()", "I18nExtractCommand::_getStrings()()": "class-cake.command.i18nextractcommand.html#_getStrings()", "I18nExtractCommand::_isExtractingApp()()": "class-cake.command.i18nextractcommand.html#_isExtractingApp()", "I18nExtractCommand::_isPathUsable()()": "class-cake.command.i18nextractcommand.html#_isPathUsable()", "I18nExtractCommand::_markerError()()": "class-cake.command.i18nextractcommand.html#_markerError()", "I18nExtractCommand::_parse()()": "class-cake.command.i18nextractcommand.html#_parse()", "I18nExtractCommand::_searchFiles()()": "class-cake.command.i18nextractcommand.html#_searchFiles()", "I18nExtractCommand::_setModelClass()()": "class-cake.command.i18nextractcommand.html#_setModelClass()", "I18nExtractCommand::_store()()": "class-cake.command.i18nextractcommand.html#_store()", "I18nExtractCommand::_writeFiles()()": "class-cake.command.i18nextractcommand.html#_writeFiles()", "I18nExtractCommand::_writeHeader()()": "class-cake.command.i18nextractcommand.html#_writeHeader()", "I18nExtractCommand::abort()()": "class-cake.command.i18nextractcommand.html#abort()", "I18nExtractCommand::buildOptionParser()()": "class-cake.command.i18nextractcommand.html#buildOptionParser()", "I18nExtractCommand::checkUnchanged()()": "class-cake.command.i18nextractcommand.html#checkUnchanged()", "I18nExtractCommand::defaultName()()": "class-cake.command.i18nextractcommand.html#defaultName()", "I18nExtractCommand::displayHelp()()": "class-cake.command.i18nextractcommand.html#displayHelp()", "I18nExtractCommand::execute()()": "class-cake.command.i18nextractcommand.html#execute()", "I18nExtractCommand::executeCommand()()": "class-cake.command.i18nextractcommand.html#executeCommand()", "I18nExtractCommand::fetchTable()()": "class-cake.command.i18nextractcommand.html#fetchTable()", "I18nExtractCommand::getDescription()()": "class-cake.command.i18nextractcommand.html#getDescription()", "I18nExtractCommand::getModelType()()": "class-cake.command.i18nextractcommand.html#getModelType()", "I18nExtractCommand::getName()()": "class-cake.command.i18nextractcommand.html#getName()", "I18nExtractCommand::getOptionParser()()": "class-cake.command.i18nextractcommand.html#getOptionParser()", "I18nExtractCommand::getRootName()()": "class-cake.command.i18nextractcommand.html#getRootName()", "I18nExtractCommand::getTableLocator()()": "class-cake.command.i18nextractcommand.html#getTableLocator()", "I18nExtractCommand::initialize()()": "class-cake.command.i18nextractcommand.html#initialize()", "I18nExtractCommand::loadModel()()": "class-cake.command.i18nextractcommand.html#loadModel()", "I18nExtractCommand::log()()": "class-cake.command.i18nextractcommand.html#log()", "I18nExtractCommand::modelFactory()()": "class-cake.command.i18nextractcommand.html#modelFactory()", "I18nExtractCommand::run()()": "class-cake.command.i18nextractcommand.html#run()", "I18nExtractCommand::setModelType()()": "class-cake.command.i18nextractcommand.html#setModelType()", "I18nExtractCommand::setName()()": "class-cake.command.i18nextractcommand.html#setName()", "I18nExtractCommand::setOutputLevel()()": "class-cake.command.i18nextractcommand.html#setOutputLevel()", "I18nExtractCommand::setTableLocator()()": "class-cake.command.i18nextractcommand.html#setTableLocator()", "I18nInitCommand (class)": "class-cake.command.i18ninitcommand.html", "I18nInitCommand::$_modelFactories": "class-cake.command.i18ninitcommand.html#$_modelFactories", "I18nInitCommand::$_modelType": "class-cake.command.i18ninitcommand.html#$_modelType", "I18nInitCommand::$_tableLocator": "class-cake.command.i18ninitcommand.html#$_tableLocator", "I18nInitCommand::$defaultTable": "class-cake.command.i18ninitcommand.html#$defaultTable", "I18nInitCommand::$modelClass": "class-cake.command.i18ninitcommand.html#$modelClass", "I18nInitCommand::$name": "class-cake.command.i18ninitcommand.html#$name", "I18nInitCommand::__construct()()": "class-cake.command.i18ninitcommand.html#__construct()", "I18nInitCommand::_setModelClass()()": "class-cake.command.i18ninitcommand.html#_setModelClass()", "I18nInitCommand::abort()()": "class-cake.command.i18ninitcommand.html#abort()", "I18nInitCommand::buildOptionParser()()": "class-cake.command.i18ninitcommand.html#buildOptionParser()", "I18nInitCommand::defaultName()()": "class-cake.command.i18ninitcommand.html#defaultName()", "I18nInitCommand::displayHelp()()": "class-cake.command.i18ninitcommand.html#displayHelp()", "I18nInitCommand::execute()()": "class-cake.command.i18ninitcommand.html#execute()", "I18nInitCommand::executeCommand()()": "class-cake.command.i18ninitcommand.html#executeCommand()", "I18nInitCommand::fetchTable()()": "class-cake.command.i18ninitcommand.html#fetchTable()", "I18nInitCommand::getDescription()()": "class-cake.command.i18ninitcommand.html#getDescription()", "I18nInitCommand::getModelType()()": "class-cake.command.i18ninitcommand.html#getModelType()", "I18nInitCommand::getName()()": "class-cake.command.i18ninitcommand.html#getName()", "I18nInitCommand::getOptionParser()()": "class-cake.command.i18ninitcommand.html#getOptionParser()", "I18nInitCommand::getRootName()()": "class-cake.command.i18ninitcommand.html#getRootName()", "I18nInitCommand::getTableLocator()()": "class-cake.command.i18ninitcommand.html#getTableLocator()", "I18nInitCommand::initialize()()": "class-cake.command.i18ninitcommand.html#initialize()", "I18nInitCommand::loadModel()()": "class-cake.command.i18ninitcommand.html#loadModel()", "I18nInitCommand::log()()": "class-cake.command.i18ninitcommand.html#log()", "I18nInitCommand::modelFactory()()": "class-cake.command.i18ninitcommand.html#modelFactory()", "I18nInitCommand::run()()": "class-cake.command.i18ninitcommand.html#run()", "I18nInitCommand::setModelType()()": "class-cake.command.i18ninitcommand.html#setModelType()", "I18nInitCommand::setName()()": "class-cake.command.i18ninitcommand.html#setName()", "I18nInitCommand::setOutputLevel()()": "class-cake.command.i18ninitcommand.html#setOutputLevel()", "I18nInitCommand::setTableLocator()()": "class-cake.command.i18ninitcommand.html#setTableLocator()", "IcuFormatter (class)": "class-cake.i18n.formatter.icuformatter.html", "IcuFormatter::format()()": "class-cake.i18n.formatter.icuformatter.html#format()", "IdentifierExpression (class)": "class-cake.database.expression.identifierexpression.html", "IdentifierExpression::$_identifier": "class-cake.database.expression.identifierexpression.html#$_identifier", "IdentifierExpression::$collation": "class-cake.database.expression.identifierexpression.html#$collation", "IdentifierExpression::__construct()()": "class-cake.database.expression.identifierexpression.html#__construct()", "IdentifierExpression::getCollation()()": "class-cake.database.expression.identifierexpression.html#getCollation()", "IdentifierExpression::getIdentifier()()": "class-cake.database.expression.identifierexpression.html#getIdentifier()", "IdentifierExpression::setCollation()()": "class-cake.database.expression.identifierexpression.html#setCollation()", "IdentifierExpression::setIdentifier()()": "class-cake.database.expression.identifierexpression.html#setIdentifier()", "IdentifierExpression::sql()()": "class-cake.database.expression.identifierexpression.html#sql()", "IdentifierExpression::traverse()()": "class-cake.database.expression.identifierexpression.html#traverse()", "IdentifierQuoter (class)": "class-cake.database.identifierquoter.html", "IdentifierQuoter::$_driver": "class-cake.database.identifierquoter.html#$_driver", "IdentifierQuoter::__construct()()": "class-cake.database.identifierquoter.html#__construct()", "IdentifierQuoter::_basicQuoter()()": "class-cake.database.identifierquoter.html#_basicQuoter()", "IdentifierQuoter::_quoteComparison()()": "class-cake.database.identifierquoter.html#_quoteComparison()", "IdentifierQuoter::_quoteIdentifierExpression()()": "class-cake.database.identifierquoter.html#_quoteIdentifierExpression()", "IdentifierQuoter::_quoteInsert()()": "class-cake.database.identifierquoter.html#_quoteInsert()", "IdentifierQuoter::_quoteJoins()()": "class-cake.database.identifierquoter.html#_quoteJoins()", "IdentifierQuoter::_quoteOrderBy()()": "class-cake.database.identifierquoter.html#_quoteOrderBy()", "IdentifierQuoter::_quoteParts()()": "class-cake.database.identifierquoter.html#_quoteParts()", "IdentifierQuoter::_quoteUpdate()()": "class-cake.database.identifierquoter.html#_quoteUpdate()", "IdentifierQuoter::quote()()": "class-cake.database.identifierquoter.html#quote()", "IdentifierQuoter::quoteExpression()()": "class-cake.database.identifierquoter.html#quoteExpression()", "IdGeneratorTrait (trait)": "trait-cake.view.helper.idgeneratortrait.html", "InflectedRoute (class)": "class-cake.routing.route.inflectedroute.html", "InflectedRoute::$_compiledRoute": "class-cake.routing.route.inflectedroute.html#$_compiledRoute", "InflectedRoute::$_extensions": "class-cake.routing.route.inflectedroute.html#$_extensions", "InflectedRoute::$_greedy": "class-cake.routing.route.inflectedroute.html#$_greedy", "InflectedRoute::$_inflectedDefaults": "class-cake.routing.route.inflectedroute.html#$_inflectedDefaults", "InflectedRoute::$_name": "class-cake.routing.route.inflectedroute.html#$_name", "InflectedRoute::$braceKeys": "class-cake.routing.route.inflectedroute.html#$braceKeys", "InflectedRoute::$defaults": "class-cake.routing.route.inflectedroute.html#$defaults", "InflectedRoute::$keys": "class-cake.routing.route.inflectedroute.html#$keys", "InflectedRoute::$middleware": "class-cake.routing.route.inflectedroute.html#$middleware", "InflectedRoute::$options": "class-cake.routing.route.inflectedroute.html#$options", "InflectedRoute::$template": "class-cake.routing.route.inflectedroute.html#$template", "InflectedRoute::__construct()()": "class-cake.routing.route.inflectedroute.html#__construct()", "InflectedRoute::__set_state()()": "class-cake.routing.route.inflectedroute.html#__set_state()", "InflectedRoute::_matchMethod()()": "class-cake.routing.route.inflectedroute.html#_matchMethod()", "InflectedRoute::_parseArgs()()": "class-cake.routing.route.inflectedroute.html#_parseArgs()", "InflectedRoute::_parseExtension()()": "class-cake.routing.route.inflectedroute.html#_parseExtension()", "InflectedRoute::_persistParams()()": "class-cake.routing.route.inflectedroute.html#_persistParams()", "InflectedRoute::_underscore()()": "class-cake.routing.route.inflectedroute.html#_underscore()", "InflectedRoute::_writeRoute()()": "class-cake.routing.route.inflectedroute.html#_writeRoute()", "InflectedRoute::_writeUrl()()": "class-cake.routing.route.inflectedroute.html#_writeUrl()", "InflectedRoute::compile()()": "class-cake.routing.route.inflectedroute.html#compile()", "InflectedRoute::compiled()()": "class-cake.routing.route.inflectedroute.html#compiled()", "InflectedRoute::getExtensions()()": "class-cake.routing.route.inflectedroute.html#getExtensions()", "InflectedRoute::getMiddleware()()": "class-cake.routing.route.inflectedroute.html#getMiddleware()", "InflectedRoute::getName()()": "class-cake.routing.route.inflectedroute.html#getName()", "InflectedRoute::hostMatches()()": "class-cake.routing.route.inflectedroute.html#hostMatches()", "InflectedRoute::match()()": "class-cake.routing.route.inflectedroute.html#match()", "InflectedRoute::normalizeAndValidateMethods()()": "class-cake.routing.route.inflectedroute.html#normalizeAndValidateMethods()", "InflectedRoute::parse()()": "class-cake.routing.route.inflectedroute.html#parse()", "InflectedRoute::parseRequest()()": "class-cake.routing.route.inflectedroute.html#parseRequest()", "InflectedRoute::setExtensions()()": "class-cake.routing.route.inflectedroute.html#setExtensions()", "InflectedRoute::setHost()()": "class-cake.routing.route.inflectedroute.html#setHost()", "InflectedRoute::setMethods()()": "class-cake.routing.route.inflectedroute.html#setMethods()", "InflectedRoute::setMiddleware()()": "class-cake.routing.route.inflectedroute.html#setMiddleware()", "InflectedRoute::setPass()()": "class-cake.routing.route.inflectedroute.html#setPass()", "InflectedRoute::setPatterns()()": "class-cake.routing.route.inflectedroute.html#setPatterns()", "InflectedRoute::setPersist()()": "class-cake.routing.route.inflectedroute.html#setPersist()", "InflectedRoute::staticPath()()": "class-cake.routing.route.inflectedroute.html#staticPath()", "Inflector (class)": "class-cake.utility.inflector.html", "Inflector::$_cache": "class-cake.utility.inflector.html#$_cache", "Inflector::$_initialState": "class-cake.utility.inflector.html#$_initialState", "Inflector::$_irregular": "class-cake.utility.inflector.html#$_irregular", "Inflector::$_plural": "class-cake.utility.inflector.html#$_plural", "Inflector::$_singular": "class-cake.utility.inflector.html#$_singular", "Inflector::$_uninflected": "class-cake.utility.inflector.html#$_uninflected", "Inflector::_cache()()": "class-cake.utility.inflector.html#_cache()", "Inflector::camelize()()": "class-cake.utility.inflector.html#camelize()", "Inflector::classify()()": "class-cake.utility.inflector.html#classify()", "Inflector::dasherize()()": "class-cake.utility.inflector.html#dasherize()", "Inflector::delimit()()": "class-cake.utility.inflector.html#delimit()", "Inflector::humanize()()": "class-cake.utility.inflector.html#humanize()", "Inflector::pluralize()()": "class-cake.utility.inflector.html#pluralize()", "Inflector::reset()()": "class-cake.utility.inflector.html#reset()", "Inflector::rules()()": "class-cake.utility.inflector.html#rules()", "Inflector::singularize()()": "class-cake.utility.inflector.html#singularize()", "Inflector::tableize()()": "class-cake.utility.inflector.html#tableize()", "Inflector::underscore()()": "class-cake.utility.inflector.html#underscore()", "Inflector::variable()()": "class-cake.utility.inflector.html#variable()", "IniConfig (class)": "class-cake.core.configure.engine.iniconfig.html", "IniConfig::$_extension": "class-cake.core.configure.engine.iniconfig.html#$_extension", "IniConfig::$_path": "class-cake.core.configure.engine.iniconfig.html#$_path", "IniConfig::$_section": "class-cake.core.configure.engine.iniconfig.html#$_section", "IniConfig::__construct()()": "class-cake.core.configure.engine.iniconfig.html#__construct()", "IniConfig::_getFilePath()()": "class-cake.core.configure.engine.iniconfig.html#_getFilePath()", "IniConfig::_parseNestedValues()()": "class-cake.core.configure.engine.iniconfig.html#_parseNestedValues()", "IniConfig::_value()()": "class-cake.core.configure.engine.iniconfig.html#_value()", "IniConfig::dump()()": "class-cake.core.configure.engine.iniconfig.html#dump()", "IniConfig::read()()": "class-cake.core.configure.engine.iniconfig.html#read()", "InsertIterator (class)": "class-cake.collection.iterator.insertiterator.html", "InsertIterator::$_path": "class-cake.collection.iterator.insertiterator.html#$_path", "InsertIterator::$_target": "class-cake.collection.iterator.insertiterator.html#$_target", "InsertIterator::$_validValues": "class-cake.collection.iterator.insertiterator.html#$_validValues", "InsertIterator::$_values": "class-cake.collection.iterator.insertiterator.html#$_values", "InsertIterator::__construct()()": "class-cake.collection.iterator.insertiterator.html#__construct()", "InsertIterator::__debugInfo()()": "class-cake.collection.iterator.insertiterator.html#__debugInfo()", "InsertIterator::__serialize()()": "class-cake.collection.iterator.insertiterator.html#__serialize()", "InsertIterator::__unserialize()()": "class-cake.collection.iterator.insertiterator.html#__unserialize()", "InsertIterator::_createMatcherFilter()()": "class-cake.collection.iterator.insertiterator.html#_createMatcherFilter()", "InsertIterator::_extract()()": "class-cake.collection.iterator.insertiterator.html#_extract()", "InsertIterator::_propertyExtractor()()": "class-cake.collection.iterator.insertiterator.html#_propertyExtractor()", "InsertIterator::_simpleExtract()()": "class-cake.collection.iterator.insertiterator.html#_simpleExtract()", "InsertIterator::append()()": "class-cake.collection.iterator.insertiterator.html#append()", "InsertIterator::appendItem()()": "class-cake.collection.iterator.insertiterator.html#appendItem()", "InsertIterator::avg()()": "class-cake.collection.iterator.insertiterator.html#avg()", "InsertIterator::buffered()()": "class-cake.collection.iterator.insertiterator.html#buffered()", "InsertIterator::cartesianProduct()()": "class-cake.collection.iterator.insertiterator.html#cartesianProduct()", "InsertIterator::chunk()()": "class-cake.collection.iterator.insertiterator.html#chunk()", "InsertIterator::chunkWithKeys()()": "class-cake.collection.iterator.insertiterator.html#chunkWithKeys()", "InsertIterator::combine()()": "class-cake.collection.iterator.insertiterator.html#combine()", "InsertIterator::compile()()": "class-cake.collection.iterator.insertiterator.html#compile()", "InsertIterator::contains()()": "class-cake.collection.iterator.insertiterator.html#contains()", "InsertIterator::count()()": "class-cake.collection.iterator.insertiterator.html#count()", "InsertIterator::countBy()()": "class-cake.collection.iterator.insertiterator.html#countBy()", "InsertIterator::countKeys()()": "class-cake.collection.iterator.insertiterator.html#countKeys()", "InsertIterator::current()()": "class-cake.collection.iterator.insertiterator.html#current()", "InsertIterator::each()()": "class-cake.collection.iterator.insertiterator.html#each()", "InsertIterator::every()()": "class-cake.collection.iterator.insertiterator.html#every()", "InsertIterator::extract()()": "class-cake.collection.iterator.insertiterator.html#extract()", "InsertIterator::filter()()": "class-cake.collection.iterator.insertiterator.html#filter()", "InsertIterator::first()()": "class-cake.collection.iterator.insertiterator.html#first()", "InsertIterator::firstMatch()()": "class-cake.collection.iterator.insertiterator.html#firstMatch()", "InsertIterator::groupBy()()": "class-cake.collection.iterator.insertiterator.html#groupBy()", "InsertIterator::indexBy()()": "class-cake.collection.iterator.insertiterator.html#indexBy()", "InsertIterator::insert()()": "class-cake.collection.iterator.insertiterator.html#insert()", "InsertIterator::isEmpty()()": "class-cake.collection.iterator.insertiterator.html#isEmpty()", "InsertIterator::jsonSerialize()()": "class-cake.collection.iterator.insertiterator.html#jsonSerialize()", "InsertIterator::last()()": "class-cake.collection.iterator.insertiterator.html#last()", "InsertIterator::lazy()()": "class-cake.collection.iterator.insertiterator.html#lazy()", "InsertIterator::listNested()()": "class-cake.collection.iterator.insertiterator.html#listNested()", "InsertIterator::map()()": "class-cake.collection.iterator.insertiterator.html#map()", "InsertIterator::match()()": "class-cake.collection.iterator.insertiterator.html#match()", "InsertIterator::max()()": "class-cake.collection.iterator.insertiterator.html#max()", "InsertIterator::median()()": "class-cake.collection.iterator.insertiterator.html#median()", "InsertIterator::min()()": "class-cake.collection.iterator.insertiterator.html#min()", "InsertIterator::nest()()": "class-cake.collection.iterator.insertiterator.html#nest()", "InsertIterator::newCollection()()": "class-cake.collection.iterator.insertiterator.html#newCollection()", "InsertIterator::next()()": "class-cake.collection.iterator.insertiterator.html#next()", "InsertIterator::optimizeUnwrap()()": "class-cake.collection.iterator.insertiterator.html#optimizeUnwrap()", "InsertIterator::prepend()()": "class-cake.collection.iterator.insertiterator.html#prepend()", "InsertIterator::prependItem()()": "class-cake.collection.iterator.insertiterator.html#prependItem()", "InsertIterator::reduce()()": "class-cake.collection.iterator.insertiterator.html#reduce()", "InsertIterator::reject()()": "class-cake.collection.iterator.insertiterator.html#reject()", "InsertIterator::rewind()()": "class-cake.collection.iterator.insertiterator.html#rewind()", "InsertIterator::sample()()": "class-cake.collection.iterator.insertiterator.html#sample()", "InsertIterator::serialize()()": "class-cake.collection.iterator.insertiterator.html#serialize()", "InsertIterator::shuffle()()": "class-cake.collection.iterator.insertiterator.html#shuffle()", "InsertIterator::skip()()": "class-cake.collection.iterator.insertiterator.html#skip()", "InsertIterator::some()()": "class-cake.collection.iterator.insertiterator.html#some()", "InsertIterator::sortBy()()": "class-cake.collection.iterator.insertiterator.html#sortBy()", "InsertIterator::stopWhen()()": "class-cake.collection.iterator.insertiterator.html#stopWhen()", "InsertIterator::sumOf()()": "class-cake.collection.iterator.insertiterator.html#sumOf()", "InsertIterator::take()()": "class-cake.collection.iterator.insertiterator.html#take()", "InsertIterator::takeLast()()": "class-cake.collection.iterator.insertiterator.html#takeLast()", "InsertIterator::through()()": "class-cake.collection.iterator.insertiterator.html#through()", "InsertIterator::toArray()()": "class-cake.collection.iterator.insertiterator.html#toArray()", "InsertIterator::toList()()": "class-cake.collection.iterator.insertiterator.html#toList()", "InsertIterator::transpose()()": "class-cake.collection.iterator.insertiterator.html#transpose()", "InsertIterator::unfold()()": "class-cake.collection.iterator.insertiterator.html#unfold()", "InsertIterator::unserialize()()": "class-cake.collection.iterator.insertiterator.html#unserialize()", "InsertIterator::unwrap()()": "class-cake.collection.iterator.insertiterator.html#unwrap()", "InsertIterator::zip()()": "class-cake.collection.iterator.insertiterator.html#zip()", "InsertIterator::zipWith()()": "class-cake.collection.iterator.insertiterator.html#zipWith()", "InstanceConfigTrait (trait)": "trait-cake.core.instanceconfigtrait.html", "IntegerType (class)": "class-cake.database.type.integertype.html", "IntegerType::$_name": "class-cake.database.type.integertype.html#$_name", "IntegerType::__construct()()": "class-cake.database.type.integertype.html#__construct()", "IntegerType::checkNumeric()()": "class-cake.database.type.integertype.html#checkNumeric()", "IntegerType::getBaseType()()": "class-cake.database.type.integertype.html#getBaseType()", "IntegerType::getName()()": "class-cake.database.type.integertype.html#getName()", "IntegerType::manyToPHP()()": "class-cake.database.type.integertype.html#manyToPHP()", "IntegerType::marshal()()": "class-cake.database.type.integertype.html#marshal()", "IntegerType::newId()()": "class-cake.database.type.integertype.html#newId()", "IntegerType::toDatabase()()": "class-cake.database.type.integertype.html#toDatabase()", "IntegerType::toPHP()()": "class-cake.database.type.integertype.html#toPHP()", "IntegerType::toStatement()()": "class-cake.database.type.integertype.html#toStatement()", "IntegrationTestCase (class)": "class-cake.testsuite.integrationtestcase.html", "IntegrationTestCase::$_appArgs": "class-cake.testsuite.integrationtestcase.html#$_appArgs", "IntegrationTestCase::$_appClass": "class-cake.testsuite.integrationtestcase.html#$_appClass", "IntegrationTestCase::$_configure": "class-cake.testsuite.integrationtestcase.html#$_configure", "IntegrationTestCase::$_controller": "class-cake.testsuite.integrationtestcase.html#$_controller", "IntegrationTestCase::$_cookie": "class-cake.testsuite.integrationtestcase.html#$_cookie", "IntegrationTestCase::$_cookieEncryptionKey": "class-cake.testsuite.integrationtestcase.html#$_cookieEncryptionKey", "IntegrationTestCase::$_csrfKeyName": "class-cake.testsuite.integrationtestcase.html#$_csrfKeyName", "IntegrationTestCase::$_csrfToken": "class-cake.testsuite.integrationtestcase.html#$_csrfToken", "IntegrationTestCase::$_exception": "class-cake.testsuite.integrationtestcase.html#$_exception", "IntegrationTestCase::$_flashMessages": "class-cake.testsuite.integrationtestcase.html#$_flashMessages", "IntegrationTestCase::$_layoutName": "class-cake.testsuite.integrationtestcase.html#$_layoutName", "IntegrationTestCase::$_request": "class-cake.testsuite.integrationtestcase.html#$_request", "IntegrationTestCase::$_requestSession": "class-cake.testsuite.integrationtestcase.html#$_requestSession", "IntegrationTestCase::$_response": "class-cake.testsuite.integrationtestcase.html#$_response", "IntegrationTestCase::$_retainFlashMessages": "class-cake.testsuite.integrationtestcase.html#$_retainFlashMessages", "IntegrationTestCase::$_securityToken": "class-cake.testsuite.integrationtestcase.html#$_securityToken", "IntegrationTestCase::$_session": "class-cake.testsuite.integrationtestcase.html#$_session", "IntegrationTestCase::$_tableLocator": "class-cake.testsuite.integrationtestcase.html#$_tableLocator", "IntegrationTestCase::$_unlockedFields": "class-cake.testsuite.integrationtestcase.html#$_unlockedFields", "IntegrationTestCase::$_validCiphers": "class-cake.testsuite.integrationtestcase.html#$_validCiphers", "IntegrationTestCase::$_viewName": "class-cake.testsuite.integrationtestcase.html#$_viewName", "IntegrationTestCase::$autoFixtures": "class-cake.testsuite.integrationtestcase.html#$autoFixtures", "IntegrationTestCase::$backupGlobals": "class-cake.testsuite.integrationtestcase.html#$backupGlobals", "IntegrationTestCase::$backupGlobalsBlacklist": "class-cake.testsuite.integrationtestcase.html#$backupGlobalsBlacklist", "IntegrationTestCase::$backupGlobalsExcludeList": "class-cake.testsuite.integrationtestcase.html#$backupGlobalsExcludeList", "IntegrationTestCase::$backupStaticAttributes": "class-cake.testsuite.integrationtestcase.html#$backupStaticAttributes", "IntegrationTestCase::$backupStaticAttributesBlacklist": "class-cake.testsuite.integrationtestcase.html#$backupStaticAttributesBlacklist", "IntegrationTestCase::$backupStaticAttributesExcludeList": "class-cake.testsuite.integrationtestcase.html#$backupStaticAttributesExcludeList", "IntegrationTestCase::$defaultTable": "class-cake.testsuite.integrationtestcase.html#$defaultTable", "IntegrationTestCase::$dropTables": "class-cake.testsuite.integrationtestcase.html#$dropTables", "IntegrationTestCase::$fixtureManager": "class-cake.testsuite.integrationtestcase.html#$fixtureManager", "IntegrationTestCase::$fixtures": "class-cake.testsuite.integrationtestcase.html#$fixtures", "IntegrationTestCase::$fixtureStrategy": "class-cake.testsuite.integrationtestcase.html#$fixtureStrategy", "IntegrationTestCase::$preserveGlobalState": "class-cake.testsuite.integrationtestcase.html#$preserveGlobalState", "IntegrationTestCase::$providedTests": "class-cake.testsuite.integrationtestcase.html#$providedTests", "IntegrationTestCase::$runTestInSeparateProcess": "class-cake.testsuite.integrationtestcase.html#$runTestInSeparateProcess", "IntegrationTestCase::__construct()()": "class-cake.testsuite.integrationtestcase.html#__construct()", "IntegrationTestCase::_addTokens()()": "class-cake.testsuite.integrationtestcase.html#_addTokens()", "IntegrationTestCase::_assertAttributes()()": "class-cake.testsuite.integrationtestcase.html#_assertAttributes()", "IntegrationTestCase::_buildRequest()()": "class-cake.testsuite.integrationtestcase.html#_buildRequest()", "IntegrationTestCase::_castToString()()": "class-cake.testsuite.integrationtestcase.html#_castToString()", "IntegrationTestCase::_checkCipher()()": "class-cake.testsuite.integrationtestcase.html#_checkCipher()", "IntegrationTestCase::_decode()()": "class-cake.testsuite.integrationtestcase.html#_decode()", "IntegrationTestCase::_decrypt()()": "class-cake.testsuite.integrationtestcase.html#_decrypt()", "IntegrationTestCase::_encrypt()()": "class-cake.testsuite.integrationtestcase.html#_encrypt()", "IntegrationTestCase::_explode()()": "class-cake.testsuite.integrationtestcase.html#_explode()", "IntegrationTestCase::_getBodyAsString()()": "class-cake.testsuite.integrationtestcase.html#_getBodyAsString()", "IntegrationTestCase::_getCookieEncryptionKey()()": "class-cake.testsuite.integrationtestcase.html#_getCookieEncryptionKey()", "IntegrationTestCase::_getTableClassName()()": "class-cake.testsuite.integrationtestcase.html#_getTableClassName()", "IntegrationTestCase::_handleError()()": "class-cake.testsuite.integrationtestcase.html#_handleError()", "IntegrationTestCase::_implode()()": "class-cake.testsuite.integrationtestcase.html#_implode()", "IntegrationTestCase::_makeDispatcher()()": "class-cake.testsuite.integrationtestcase.html#_makeDispatcher()", "IntegrationTestCase::_normalizePath()()": "class-cake.testsuite.integrationtestcase.html#_normalizePath()", "IntegrationTestCase::_sendRequest()()": "class-cake.testsuite.integrationtestcase.html#_sendRequest()", "IntegrationTestCase::_url()()": "class-cake.testsuite.integrationtestcase.html#_url()", "IntegrationTestCase::addFixture()()": "class-cake.testsuite.integrationtestcase.html#addFixture()", "IntegrationTestCase::addToAssertionCount()()": "class-cake.testsuite.integrationtestcase.html#addToAssertionCount()", "IntegrationTestCase::addWarning()()": "class-cake.testsuite.integrationtestcase.html#addWarning()", "IntegrationTestCase::any()()": "class-cake.testsuite.integrationtestcase.html#any()", "IntegrationTestCase::anything()()": "class-cake.testsuite.integrationtestcase.html#anything()", "IntegrationTestCase::arrayHasKey()()": "class-cake.testsuite.integrationtestcase.html#arrayHasKey()", "IntegrationTestCase::assertArrayHasKey()()": "class-cake.testsuite.integrationtestcase.html#assertArrayHasKey()", "IntegrationTestCase::assertArrayNotHasKey()()": "class-cake.testsuite.integrationtestcase.html#assertArrayNotHasKey()", "IntegrationTestCase::assertClassHasAttribute()()": "class-cake.testsuite.integrationtestcase.html#assertClassHasAttribute()", "IntegrationTestCase::assertClassHasStaticAttribute()()": "class-cake.testsuite.integrationtestcase.html#assertClassHasStaticAttribute()", "IntegrationTestCase::assertClassNotHasAttribute()()": "class-cake.testsuite.integrationtestcase.html#assertClassNotHasAttribute()", "IntegrationTestCase::assertClassNotHasStaticAttribute()()": "class-cake.testsuite.integrationtestcase.html#assertClassNotHasStaticAttribute()", "IntegrationTestCase::assertContains()()": "class-cake.testsuite.integrationtestcase.html#assertContains()", "IntegrationTestCase::assertContainsEquals()()": "class-cake.testsuite.integrationtestcase.html#assertContainsEquals()", "IntegrationTestCase::assertContainsOnly()()": "class-cake.testsuite.integrationtestcase.html#assertContainsOnly()", "IntegrationTestCase::assertContainsOnlyInstancesOf()()": "class-cake.testsuite.integrationtestcase.html#assertContainsOnlyInstancesOf()", "IntegrationTestCase::assertContentType()()": "class-cake.testsuite.integrationtestcase.html#assertContentType()", "IntegrationTestCase::assertCookie()()": "class-cake.testsuite.integrationtestcase.html#assertCookie()", "IntegrationTestCase::assertCookieEncrypted()()": "class-cake.testsuite.integrationtestcase.html#assertCookieEncrypted()", "IntegrationTestCase::assertCookieNotSet()()": "class-cake.testsuite.integrationtestcase.html#assertCookieNotSet()", "IntegrationTestCase::assertCount()()": "class-cake.testsuite.integrationtestcase.html#assertCount()", "IntegrationTestCase::assertDirectoryDoesNotExist()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryDoesNotExist()", "IntegrationTestCase::assertDirectoryExists()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryExists()", "IntegrationTestCase::assertDirectoryIsNotReadable()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryIsNotReadable()", "IntegrationTestCase::assertDirectoryIsNotWritable()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryIsNotWritable()", "IntegrationTestCase::assertDirectoryIsReadable()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryIsReadable()", "IntegrationTestCase::assertDirectoryIsWritable()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryIsWritable()", "IntegrationTestCase::assertDirectoryNotExists()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryNotExists()", "IntegrationTestCase::assertDirectoryNotIsReadable()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryNotIsReadable()", "IntegrationTestCase::assertDirectoryNotIsWritable()()": "class-cake.testsuite.integrationtestcase.html#assertDirectoryNotIsWritable()", "IntegrationTestCase::assertDoesNotMatchRegularExpression()()": "class-cake.testsuite.integrationtestcase.html#assertDoesNotMatchRegularExpression()", "IntegrationTestCase::assertEmpty()()": "class-cake.testsuite.integrationtestcase.html#assertEmpty()", "IntegrationTestCase::assertEquals()()": "class-cake.testsuite.integrationtestcase.html#assertEquals()", "IntegrationTestCase::assertEqualsCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#assertEqualsCanonicalizing()", "IntegrationTestCase::assertEqualsIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertEqualsIgnoringCase()", "IntegrationTestCase::assertEqualsSql()()": "class-cake.testsuite.integrationtestcase.html#assertEqualsSql()", "IntegrationTestCase::assertEqualsWithDelta()()": "class-cake.testsuite.integrationtestcase.html#assertEqualsWithDelta()", "IntegrationTestCase::assertEqualXMLStructure()()": "class-cake.testsuite.integrationtestcase.html#assertEqualXMLStructure()", "IntegrationTestCase::assertEventFired()()": "class-cake.testsuite.integrationtestcase.html#assertEventFired()", "IntegrationTestCase::assertEventFiredWith()()": "class-cake.testsuite.integrationtestcase.html#assertEventFiredWith()", "IntegrationTestCase::assertFalse()()": "class-cake.testsuite.integrationtestcase.html#assertFalse()", "IntegrationTestCase::assertFileDoesNotExist()()": "class-cake.testsuite.integrationtestcase.html#assertFileDoesNotExist()", "IntegrationTestCase::assertFileEquals()()": "class-cake.testsuite.integrationtestcase.html#assertFileEquals()", "IntegrationTestCase::assertFileEqualsCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#assertFileEqualsCanonicalizing()", "IntegrationTestCase::assertFileEqualsIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertFileEqualsIgnoringCase()", "IntegrationTestCase::assertFileExists()()": "class-cake.testsuite.integrationtestcase.html#assertFileExists()", "IntegrationTestCase::assertFileIsNotReadable()()": "class-cake.testsuite.integrationtestcase.html#assertFileIsNotReadable()", "IntegrationTestCase::assertFileIsNotWritable()()": "class-cake.testsuite.integrationtestcase.html#assertFileIsNotWritable()", "IntegrationTestCase::assertFileIsReadable()()": "class-cake.testsuite.integrationtestcase.html#assertFileIsReadable()", "IntegrationTestCase::assertFileIsWritable()()": "class-cake.testsuite.integrationtestcase.html#assertFileIsWritable()", "IntegrationTestCase::assertFileNotEquals()()": "class-cake.testsuite.integrationtestcase.html#assertFileNotEquals()", "IntegrationTestCase::assertFileNotEqualsCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#assertFileNotEqualsCanonicalizing()", "IntegrationTestCase::assertFileNotEqualsIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertFileNotEqualsIgnoringCase()", "IntegrationTestCase::assertFileNotExists()()": "class-cake.testsuite.integrationtestcase.html#assertFileNotExists()", "IntegrationTestCase::assertFileNotIsReadable()()": "class-cake.testsuite.integrationtestcase.html#assertFileNotIsReadable()", "IntegrationTestCase::assertFileNotIsWritable()()": "class-cake.testsuite.integrationtestcase.html#assertFileNotIsWritable()", "IntegrationTestCase::assertFileResponse()()": "class-cake.testsuite.integrationtestcase.html#assertFileResponse()", "IntegrationTestCase::assertFinite()()": "class-cake.testsuite.integrationtestcase.html#assertFinite()", "IntegrationTestCase::assertFlashElement()()": "class-cake.testsuite.integrationtestcase.html#assertFlashElement()", "IntegrationTestCase::assertFlashElementAt()()": "class-cake.testsuite.integrationtestcase.html#assertFlashElementAt()", "IntegrationTestCase::assertFlashMessage()()": "class-cake.testsuite.integrationtestcase.html#assertFlashMessage()", "IntegrationTestCase::assertFlashMessageAt()()": "class-cake.testsuite.integrationtestcase.html#assertFlashMessageAt()", "IntegrationTestCase::assertGreaterThan()()": "class-cake.testsuite.integrationtestcase.html#assertGreaterThan()", "IntegrationTestCase::assertGreaterThanOrEqual()()": "class-cake.testsuite.integrationtestcase.html#assertGreaterThanOrEqual()", "IntegrationTestCase::assertHeader()()": "class-cake.testsuite.integrationtestcase.html#assertHeader()", "IntegrationTestCase::assertHeaderContains()()": "class-cake.testsuite.integrationtestcase.html#assertHeaderContains()", "IntegrationTestCase::assertHeaderNotContains()()": "class-cake.testsuite.integrationtestcase.html#assertHeaderNotContains()", "IntegrationTestCase::assertHtml()()": "class-cake.testsuite.integrationtestcase.html#assertHtml()", "IntegrationTestCase::assertInfinite()()": "class-cake.testsuite.integrationtestcase.html#assertInfinite()", "IntegrationTestCase::assertInstanceOf()()": "class-cake.testsuite.integrationtestcase.html#assertInstanceOf()", "IntegrationTestCase::assertIsArray()()": "class-cake.testsuite.integrationtestcase.html#assertIsArray()", "IntegrationTestCase::assertIsBool()()": "class-cake.testsuite.integrationtestcase.html#assertIsBool()", "IntegrationTestCase::assertIsCallable()()": "class-cake.testsuite.integrationtestcase.html#assertIsCallable()", "IntegrationTestCase::assertIsClosedResource()()": "class-cake.testsuite.integrationtestcase.html#assertIsClosedResource()", "IntegrationTestCase::assertIsFloat()()": "class-cake.testsuite.integrationtestcase.html#assertIsFloat()", "IntegrationTestCase::assertIsInt()()": "class-cake.testsuite.integrationtestcase.html#assertIsInt()", "IntegrationTestCase::assertIsIterable()()": "class-cake.testsuite.integrationtestcase.html#assertIsIterable()", "IntegrationTestCase::assertIsNotArray()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotArray()", "IntegrationTestCase::assertIsNotBool()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotBool()", "IntegrationTestCase::assertIsNotCallable()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotCallable()", "IntegrationTestCase::assertIsNotClosedResource()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotClosedResource()", "IntegrationTestCase::assertIsNotFloat()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotFloat()", "IntegrationTestCase::assertIsNotInt()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotInt()", "IntegrationTestCase::assertIsNotIterable()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotIterable()", "IntegrationTestCase::assertIsNotNumeric()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotNumeric()", "IntegrationTestCase::assertIsNotObject()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotObject()", "IntegrationTestCase::assertIsNotReadable()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotReadable()", "IntegrationTestCase::assertIsNotResource()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotResource()", "IntegrationTestCase::assertIsNotScalar()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotScalar()", "IntegrationTestCase::assertIsNotString()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotString()", "IntegrationTestCase::assertIsNotWritable()()": "class-cake.testsuite.integrationtestcase.html#assertIsNotWritable()", "IntegrationTestCase::assertIsNumeric()()": "class-cake.testsuite.integrationtestcase.html#assertIsNumeric()", "IntegrationTestCase::assertIsObject()()": "class-cake.testsuite.integrationtestcase.html#assertIsObject()", "IntegrationTestCase::assertIsReadable()()": "class-cake.testsuite.integrationtestcase.html#assertIsReadable()", "IntegrationTestCase::assertIsResource()()": "class-cake.testsuite.integrationtestcase.html#assertIsResource()", "IntegrationTestCase::assertIsScalar()()": "class-cake.testsuite.integrationtestcase.html#assertIsScalar()", "IntegrationTestCase::assertIsString()()": "class-cake.testsuite.integrationtestcase.html#assertIsString()", "IntegrationTestCase::assertIsWritable()()": "class-cake.testsuite.integrationtestcase.html#assertIsWritable()", "IntegrationTestCase::assertJson()()": "class-cake.testsuite.integrationtestcase.html#assertJson()", "IntegrationTestCase::assertJsonFileEqualsJsonFile()()": "class-cake.testsuite.integrationtestcase.html#assertJsonFileEqualsJsonFile()", "IntegrationTestCase::assertJsonFileNotEqualsJsonFile()()": "class-cake.testsuite.integrationtestcase.html#assertJsonFileNotEqualsJsonFile()", "IntegrationTestCase::assertJsonStringEqualsJsonFile()()": "class-cake.testsuite.integrationtestcase.html#assertJsonStringEqualsJsonFile()", "IntegrationTestCase::assertJsonStringEqualsJsonString()()": "class-cake.testsuite.integrationtestcase.html#assertJsonStringEqualsJsonString()", "IntegrationTestCase::assertJsonStringNotEqualsJsonFile()()": "class-cake.testsuite.integrationtestcase.html#assertJsonStringNotEqualsJsonFile()", "IntegrationTestCase::assertJsonStringNotEqualsJsonString()()": "class-cake.testsuite.integrationtestcase.html#assertJsonStringNotEqualsJsonString()", "IntegrationTestCase::assertLayout()()": "class-cake.testsuite.integrationtestcase.html#assertLayout()", "IntegrationTestCase::assertLessThan()()": "class-cake.testsuite.integrationtestcase.html#assertLessThan()", "IntegrationTestCase::assertLessThanOrEqual()()": "class-cake.testsuite.integrationtestcase.html#assertLessThanOrEqual()", "IntegrationTestCase::assertMatchesRegularExpression()()": "class-cake.testsuite.integrationtestcase.html#assertMatchesRegularExpression()", "IntegrationTestCase::assertNan()()": "class-cake.testsuite.integrationtestcase.html#assertNan()", "IntegrationTestCase::assertNoRedirect()()": "class-cake.testsuite.integrationtestcase.html#assertNoRedirect()", "IntegrationTestCase::assertNotContains()()": "class-cake.testsuite.integrationtestcase.html#assertNotContains()", "IntegrationTestCase::assertNotContainsEquals()()": "class-cake.testsuite.integrationtestcase.html#assertNotContainsEquals()", "IntegrationTestCase::assertNotContainsOnly()()": "class-cake.testsuite.integrationtestcase.html#assertNotContainsOnly()", "IntegrationTestCase::assertNotCount()()": "class-cake.testsuite.integrationtestcase.html#assertNotCount()", "IntegrationTestCase::assertNotEmpty()()": "class-cake.testsuite.integrationtestcase.html#assertNotEmpty()", "IntegrationTestCase::assertNotEquals()()": "class-cake.testsuite.integrationtestcase.html#assertNotEquals()", "IntegrationTestCase::assertNotEqualsCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#assertNotEqualsCanonicalizing()", "IntegrationTestCase::assertNotEqualsIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertNotEqualsIgnoringCase()", "IntegrationTestCase::assertNotEqualsWithDelta()()": "class-cake.testsuite.integrationtestcase.html#assertNotEqualsWithDelta()", "IntegrationTestCase::assertNotFalse()()": "class-cake.testsuite.integrationtestcase.html#assertNotFalse()", "IntegrationTestCase::assertNotInstanceOf()()": "class-cake.testsuite.integrationtestcase.html#assertNotInstanceOf()", "IntegrationTestCase::assertNotIsReadable()()": "class-cake.testsuite.integrationtestcase.html#assertNotIsReadable()", "IntegrationTestCase::assertNotIsWritable()()": "class-cake.testsuite.integrationtestcase.html#assertNotIsWritable()", "IntegrationTestCase::assertNotNull()()": "class-cake.testsuite.integrationtestcase.html#assertNotNull()", "IntegrationTestCase::assertNotRegExp()()": "class-cake.testsuite.integrationtestcase.html#assertNotRegExp()", "IntegrationTestCase::assertNotSame()()": "class-cake.testsuite.integrationtestcase.html#assertNotSame()", "IntegrationTestCase::assertNotSameSize()()": "class-cake.testsuite.integrationtestcase.html#assertNotSameSize()", "IntegrationTestCase::assertNotTrue()()": "class-cake.testsuite.integrationtestcase.html#assertNotTrue()", "IntegrationTestCase::assertNotWithinRange()()": "class-cake.testsuite.integrationtestcase.html#assertNotWithinRange()", "IntegrationTestCase::assertNull()()": "class-cake.testsuite.integrationtestcase.html#assertNull()", "IntegrationTestCase::assertObjectEquals()()": "class-cake.testsuite.integrationtestcase.html#assertObjectEquals()", "IntegrationTestCase::assertObjectHasAttribute()()": "class-cake.testsuite.integrationtestcase.html#assertObjectHasAttribute()", "IntegrationTestCase::assertObjectNotHasAttribute()()": "class-cake.testsuite.integrationtestcase.html#assertObjectNotHasAttribute()", "IntegrationTestCase::assertPathEquals()()": "class-cake.testsuite.integrationtestcase.html#assertPathEquals()", "IntegrationTestCase::assertPostConditions()()": "class-cake.testsuite.integrationtestcase.html#assertPostConditions()", "IntegrationTestCase::assertPreConditions()()": "class-cake.testsuite.integrationtestcase.html#assertPreConditions()", "IntegrationTestCase::assertRedirect()()": "class-cake.testsuite.integrationtestcase.html#assertRedirect()", "IntegrationTestCase::assertRedirectContains()()": "class-cake.testsuite.integrationtestcase.html#assertRedirectContains()", "IntegrationTestCase::assertRedirectEquals()()": "class-cake.testsuite.integrationtestcase.html#assertRedirectEquals()", "IntegrationTestCase::assertRedirectNotContains()()": "class-cake.testsuite.integrationtestcase.html#assertRedirectNotContains()", "IntegrationTestCase::assertRegExp()()": "class-cake.testsuite.integrationtestcase.html#assertRegExp()", "IntegrationTestCase::assertRegExpSql()()": "class-cake.testsuite.integrationtestcase.html#assertRegExpSql()", "IntegrationTestCase::assertResponseCode()()": "class-cake.testsuite.integrationtestcase.html#assertResponseCode()", "IntegrationTestCase::assertResponseContains()()": "class-cake.testsuite.integrationtestcase.html#assertResponseContains()", "IntegrationTestCase::assertResponseEmpty()()": "class-cake.testsuite.integrationtestcase.html#assertResponseEmpty()", "IntegrationTestCase::assertResponseEquals()()": "class-cake.testsuite.integrationtestcase.html#assertResponseEquals()", "IntegrationTestCase::assertResponseError()()": "class-cake.testsuite.integrationtestcase.html#assertResponseError()", "IntegrationTestCase::assertResponseFailure()()": "class-cake.testsuite.integrationtestcase.html#assertResponseFailure()", "IntegrationTestCase::assertResponseNotContains()()": "class-cake.testsuite.integrationtestcase.html#assertResponseNotContains()", "IntegrationTestCase::assertResponseNotEmpty()()": "class-cake.testsuite.integrationtestcase.html#assertResponseNotEmpty()", "IntegrationTestCase::assertResponseNotEquals()()": "class-cake.testsuite.integrationtestcase.html#assertResponseNotEquals()", "IntegrationTestCase::assertResponseNotRegExp()()": "class-cake.testsuite.integrationtestcase.html#assertResponseNotRegExp()", "IntegrationTestCase::assertResponseOk()()": "class-cake.testsuite.integrationtestcase.html#assertResponseOk()", "IntegrationTestCase::assertResponseRegExp()()": "class-cake.testsuite.integrationtestcase.html#assertResponseRegExp()", "IntegrationTestCase::assertResponseSuccess()()": "class-cake.testsuite.integrationtestcase.html#assertResponseSuccess()", "IntegrationTestCase::assertSame()()": "class-cake.testsuite.integrationtestcase.html#assertSame()", "IntegrationTestCase::assertSameSize()()": "class-cake.testsuite.integrationtestcase.html#assertSameSize()", "IntegrationTestCase::assertSession()()": "class-cake.testsuite.integrationtestcase.html#assertSession()", "IntegrationTestCase::assertSessionHasKey()()": "class-cake.testsuite.integrationtestcase.html#assertSessionHasKey()", "IntegrationTestCase::assertSessionNotHasKey()()": "class-cake.testsuite.integrationtestcase.html#assertSessionNotHasKey()", "IntegrationTestCase::assertStringContainsString()()": "class-cake.testsuite.integrationtestcase.html#assertStringContainsString()", "IntegrationTestCase::assertStringContainsStringIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertStringContainsStringIgnoringCase()", "IntegrationTestCase::assertStringEndsNotWith()()": "class-cake.testsuite.integrationtestcase.html#assertStringEndsNotWith()", "IntegrationTestCase::assertStringEndsWith()()": "class-cake.testsuite.integrationtestcase.html#assertStringEndsWith()", "IntegrationTestCase::assertStringEqualsFile()()": "class-cake.testsuite.integrationtestcase.html#assertStringEqualsFile()", "IntegrationTestCase::assertStringEqualsFileCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#assertStringEqualsFileCanonicalizing()", "IntegrationTestCase::assertStringEqualsFileIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertStringEqualsFileIgnoringCase()", "IntegrationTestCase::assertStringMatchesFormat()()": "class-cake.testsuite.integrationtestcase.html#assertStringMatchesFormat()", "IntegrationTestCase::assertStringMatchesFormatFile()()": "class-cake.testsuite.integrationtestcase.html#assertStringMatchesFormatFile()", "IntegrationTestCase::assertStringNotContainsString()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotContainsString()", "IntegrationTestCase::assertStringNotContainsStringIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotContainsStringIgnoringCase()", "IntegrationTestCase::assertStringNotEqualsFile()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotEqualsFile()", "IntegrationTestCase::assertStringNotEqualsFileCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotEqualsFileCanonicalizing()", "IntegrationTestCase::assertStringNotEqualsFileIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotEqualsFileIgnoringCase()", "IntegrationTestCase::assertStringNotMatchesFormat()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotMatchesFormat()", "IntegrationTestCase::assertStringNotMatchesFormatFile()()": "class-cake.testsuite.integrationtestcase.html#assertStringNotMatchesFormatFile()", "IntegrationTestCase::assertStringStartsNotWith()()": "class-cake.testsuite.integrationtestcase.html#assertStringStartsNotWith()", "IntegrationTestCase::assertStringStartsWith()()": "class-cake.testsuite.integrationtestcase.html#assertStringStartsWith()", "IntegrationTestCase::assertTemplate()()": "class-cake.testsuite.integrationtestcase.html#assertTemplate()", "IntegrationTestCase::assertTextContains()()": "class-cake.testsuite.integrationtestcase.html#assertTextContains()", "IntegrationTestCase::assertTextEndsNotWith()()": "class-cake.testsuite.integrationtestcase.html#assertTextEndsNotWith()", "IntegrationTestCase::assertTextEndsWith()()": "class-cake.testsuite.integrationtestcase.html#assertTextEndsWith()", "IntegrationTestCase::assertTextEquals()()": "class-cake.testsuite.integrationtestcase.html#assertTextEquals()", "IntegrationTestCase::assertTextNotContains()()": "class-cake.testsuite.integrationtestcase.html#assertTextNotContains()", "IntegrationTestCase::assertTextNotEquals()()": "class-cake.testsuite.integrationtestcase.html#assertTextNotEquals()", "IntegrationTestCase::assertTextStartsNotWith()()": "class-cake.testsuite.integrationtestcase.html#assertTextStartsNotWith()", "IntegrationTestCase::assertTextStartsWith()()": "class-cake.testsuite.integrationtestcase.html#assertTextStartsWith()", "IntegrationTestCase::assertThat()()": "class-cake.testsuite.integrationtestcase.html#assertThat()", "IntegrationTestCase::assertTrue()()": "class-cake.testsuite.integrationtestcase.html#assertTrue()", "IntegrationTestCase::assertWithinRange()()": "class-cake.testsuite.integrationtestcase.html#assertWithinRange()", "IntegrationTestCase::assertXmlFileEqualsXmlFile()()": "class-cake.testsuite.integrationtestcase.html#assertXmlFileEqualsXmlFile()", "IntegrationTestCase::assertXmlFileNotEqualsXmlFile()()": "class-cake.testsuite.integrationtestcase.html#assertXmlFileNotEqualsXmlFile()", "IntegrationTestCase::assertXmlStringEqualsXmlFile()()": "class-cake.testsuite.integrationtestcase.html#assertXmlStringEqualsXmlFile()", "IntegrationTestCase::assertXmlStringEqualsXmlString()()": "class-cake.testsuite.integrationtestcase.html#assertXmlStringEqualsXmlString()", "IntegrationTestCase::assertXmlStringNotEqualsXmlFile()()": "class-cake.testsuite.integrationtestcase.html#assertXmlStringNotEqualsXmlFile()", "IntegrationTestCase::assertXmlStringNotEqualsXmlString()()": "class-cake.testsuite.integrationtestcase.html#assertXmlStringNotEqualsXmlString()", "IntegrationTestCase::at()()": "class-cake.testsuite.integrationtestcase.html#at()", "IntegrationTestCase::atLeast()()": "class-cake.testsuite.integrationtestcase.html#atLeast()", "IntegrationTestCase::atLeastOnce()()": "class-cake.testsuite.integrationtestcase.html#atLeastOnce()", "IntegrationTestCase::atMost()()": "class-cake.testsuite.integrationtestcase.html#atMost()", "IntegrationTestCase::callback()()": "class-cake.testsuite.integrationtestcase.html#callback()", "IntegrationTestCase::classHasAttribute()()": "class-cake.testsuite.integrationtestcase.html#classHasAttribute()", "IntegrationTestCase::classHasStaticAttribute()()": "class-cake.testsuite.integrationtestcase.html#classHasStaticAttribute()", "IntegrationTestCase::cleanup()()": "class-cake.testsuite.integrationtestcase.html#cleanup()", "IntegrationTestCase::cleanupContainer()()": "class-cake.testsuite.integrationtestcase.html#cleanupContainer()", "IntegrationTestCase::clearPlugins()()": "class-cake.testsuite.integrationtestcase.html#clearPlugins()", "IntegrationTestCase::configApplication()()": "class-cake.testsuite.integrationtestcase.html#configApplication()", "IntegrationTestCase::configRequest()()": "class-cake.testsuite.integrationtestcase.html#configRequest()", "IntegrationTestCase::containsEqual()()": "class-cake.testsuite.integrationtestcase.html#containsEqual()", "IntegrationTestCase::containsIdentical()()": "class-cake.testsuite.integrationtestcase.html#containsIdentical()", "IntegrationTestCase::containsOnly()()": "class-cake.testsuite.integrationtestcase.html#containsOnly()", "IntegrationTestCase::containsOnlyInstancesOf()()": "class-cake.testsuite.integrationtestcase.html#containsOnlyInstancesOf()", "IntegrationTestCase::controllerSpy()()": "class-cake.testsuite.integrationtestcase.html#controllerSpy()", "IntegrationTestCase::cookie()()": "class-cake.testsuite.integrationtestcase.html#cookie()", "IntegrationTestCase::cookieEncrypted()()": "class-cake.testsuite.integrationtestcase.html#cookieEncrypted()", "IntegrationTestCase::count()()": "class-cake.testsuite.integrationtestcase.html#count()", "IntegrationTestCase::countOf()()": "class-cake.testsuite.integrationtestcase.html#countOf()", "IntegrationTestCase::createApp()()": "class-cake.testsuite.integrationtestcase.html#createApp()", "IntegrationTestCase::createConfiguredMock()()": "class-cake.testsuite.integrationtestcase.html#createConfiguredMock()", "IntegrationTestCase::createMock()()": "class-cake.testsuite.integrationtestcase.html#createMock()", "IntegrationTestCase::createPartialMock()()": "class-cake.testsuite.integrationtestcase.html#createPartialMock()", "IntegrationTestCase::createResult()()": "class-cake.testsuite.integrationtestcase.html#createResult()", "IntegrationTestCase::createStub()()": "class-cake.testsuite.integrationtestcase.html#createStub()", "IntegrationTestCase::createTestProxy()()": "class-cake.testsuite.integrationtestcase.html#createTestProxy()", "IntegrationTestCase::dataName()()": "class-cake.testsuite.integrationtestcase.html#dataName()", "IntegrationTestCase::delete()()": "class-cake.testsuite.integrationtestcase.html#delete()", "IntegrationTestCase::deprecated()()": "class-cake.testsuite.integrationtestcase.html#deprecated()", "IntegrationTestCase::directoryExists()()": "class-cake.testsuite.integrationtestcase.html#directoryExists()", "IntegrationTestCase::disableErrorHandlerMiddleware()()": "class-cake.testsuite.integrationtestcase.html#disableErrorHandlerMiddleware()", "IntegrationTestCase::doesNotPerformAssertions()()": "class-cake.testsuite.integrationtestcase.html#doesNotPerformAssertions()", "IntegrationTestCase::doubledTypes()()": "class-cake.testsuite.integrationtestcase.html#doubledTypes()", "IntegrationTestCase::enableCsrfToken()()": "class-cake.testsuite.integrationtestcase.html#enableCsrfToken()", "IntegrationTestCase::enableRetainFlashMessages()()": "class-cake.testsuite.integrationtestcase.html#enableRetainFlashMessages()", "IntegrationTestCase::enableSecurityToken()()": "class-cake.testsuite.integrationtestcase.html#enableSecurityToken()", "IntegrationTestCase::equalTo()()": "class-cake.testsuite.integrationtestcase.html#equalTo()", "IntegrationTestCase::equalToCanonicalizing()()": "class-cake.testsuite.integrationtestcase.html#equalToCanonicalizing()", "IntegrationTestCase::equalToIgnoringCase()()": "class-cake.testsuite.integrationtestcase.html#equalToIgnoringCase()", "IntegrationTestCase::equalToWithDelta()()": "class-cake.testsuite.integrationtestcase.html#equalToWithDelta()", "IntegrationTestCase::exactly()()": "class-cake.testsuite.integrationtestcase.html#exactly()", "IntegrationTestCase::expectDeprecation()()": "class-cake.testsuite.integrationtestcase.html#expectDeprecation()", "IntegrationTestCase::expectDeprecationMessage()()": "class-cake.testsuite.integrationtestcase.html#expectDeprecationMessage()", "IntegrationTestCase::expectDeprecationMessageMatches()()": "class-cake.testsuite.integrationtestcase.html#expectDeprecationMessageMatches()", "IntegrationTestCase::expectError()()": "class-cake.testsuite.integrationtestcase.html#expectError()", "IntegrationTestCase::expectErrorMessage()()": "class-cake.testsuite.integrationtestcase.html#expectErrorMessage()", "IntegrationTestCase::expectErrorMessageMatches()()": "class-cake.testsuite.integrationtestcase.html#expectErrorMessageMatches()", "IntegrationTestCase::expectException()()": "class-cake.testsuite.integrationtestcase.html#expectException()", "IntegrationTestCase::expectExceptionCode()()": "class-cake.testsuite.integrationtestcase.html#expectExceptionCode()", "IntegrationTestCase::expectExceptionMessage()()": "class-cake.testsuite.integrationtestcase.html#expectExceptionMessage()", "IntegrationTestCase::expectExceptionMessageMatches()()": "class-cake.testsuite.integrationtestcase.html#expectExceptionMessageMatches()", "IntegrationTestCase::expectExceptionObject()()": "class-cake.testsuite.integrationtestcase.html#expectExceptionObject()", "IntegrationTestCase::expectNotice()()": "class-cake.testsuite.integrationtestcase.html#expectNotice()", "IntegrationTestCase::expectNoticeMessage()()": "class-cake.testsuite.integrationtestcase.html#expectNoticeMessage()", "IntegrationTestCase::expectNoticeMessageMatches()()": "class-cake.testsuite.integrationtestcase.html#expectNoticeMessageMatches()", "IntegrationTestCase::expectNotToPerformAssertions()()": "class-cake.testsuite.integrationtestcase.html#expectNotToPerformAssertions()", "IntegrationTestCase::expectOutputRegex()()": "class-cake.testsuite.integrationtestcase.html#expectOutputRegex()", "IntegrationTestCase::expectOutputString()()": "class-cake.testsuite.integrationtestcase.html#expectOutputString()", "IntegrationTestCase::expectWarning()()": "class-cake.testsuite.integrationtestcase.html#expectWarning()", "IntegrationTestCase::expectWarningMessage()()": "class-cake.testsuite.integrationtestcase.html#expectWarningMessage()", "IntegrationTestCase::expectWarningMessageMatches()()": "class-cake.testsuite.integrationtestcase.html#expectWarningMessageMatches()", "IntegrationTestCase::extractExceptionMessage()()": "class-cake.testsuite.integrationtestcase.html#extractExceptionMessage()", "IntegrationTestCase::extractVerboseMessage()()": "class-cake.testsuite.integrationtestcase.html#extractVerboseMessage()", "IntegrationTestCase::fail()()": "class-cake.testsuite.integrationtestcase.html#fail()", "IntegrationTestCase::fetchTable()()": "class-cake.testsuite.integrationtestcase.html#fetchTable()", "IntegrationTestCase::fileExists()()": "class-cake.testsuite.integrationtestcase.html#fileExists()", "IntegrationTestCase::get()()": "class-cake.testsuite.integrationtestcase.html#get()", "IntegrationTestCase::getActualOutput()()": "class-cake.testsuite.integrationtestcase.html#getActualOutput()", "IntegrationTestCase::getActualOutputForAssertion()()": "class-cake.testsuite.integrationtestcase.html#getActualOutputForAssertion()", "IntegrationTestCase::getCount()()": "class-cake.testsuite.integrationtestcase.html#getCount()", "IntegrationTestCase::getDataSetAsString()()": "class-cake.testsuite.integrationtestcase.html#getDataSetAsString()", "IntegrationTestCase::getExpectedException()()": "class-cake.testsuite.integrationtestcase.html#getExpectedException()", "IntegrationTestCase::getExpectedExceptionCode()()": "class-cake.testsuite.integrationtestcase.html#getExpectedExceptionCode()", "IntegrationTestCase::getExpectedExceptionMessage()()": "class-cake.testsuite.integrationtestcase.html#getExpectedExceptionMessage()", "IntegrationTestCase::getExpectedExceptionMessageRegExp()()": "class-cake.testsuite.integrationtestcase.html#getExpectedExceptionMessageRegExp()", "IntegrationTestCase::getFixtures()()": "class-cake.testsuite.integrationtestcase.html#getFixtures()", "IntegrationTestCase::getFixtureStrategy()()": "class-cake.testsuite.integrationtestcase.html#getFixtureStrategy()", "IntegrationTestCase::getGroups()()": "class-cake.testsuite.integrationtestcase.html#getGroups()", "IntegrationTestCase::getMockBuilder()()": "class-cake.testsuite.integrationtestcase.html#getMockBuilder()", "IntegrationTestCase::getMockClass()()": "class-cake.testsuite.integrationtestcase.html#getMockClass()", "IntegrationTestCase::getMockForAbstractClass()()": "class-cake.testsuite.integrationtestcase.html#getMockForAbstractClass()", "IntegrationTestCase::getMockForModel()()": "class-cake.testsuite.integrationtestcase.html#getMockForModel()", "IntegrationTestCase::getMockForTrait()()": "class-cake.testsuite.integrationtestcase.html#getMockForTrait()", "IntegrationTestCase::getMockFromWsdl()()": "class-cake.testsuite.integrationtestcase.html#getMockFromWsdl()", "IntegrationTestCase::getName()()": "class-cake.testsuite.integrationtestcase.html#getName()", "IntegrationTestCase::getNumAssertions()()": "class-cake.testsuite.integrationtestcase.html#getNumAssertions()", "IntegrationTestCase::getObjectForTrait()()": "class-cake.testsuite.integrationtestcase.html#getObjectForTrait()", "IntegrationTestCase::getProvidedData()()": "class-cake.testsuite.integrationtestcase.html#getProvidedData()", "IntegrationTestCase::getResult()()": "class-cake.testsuite.integrationtestcase.html#getResult()", "IntegrationTestCase::getSession()()": "class-cake.testsuite.integrationtestcase.html#getSession()", "IntegrationTestCase::getSize()()": "class-cake.testsuite.integrationtestcase.html#getSize()", "IntegrationTestCase::getStatus()()": "class-cake.testsuite.integrationtestcase.html#getStatus()", "IntegrationTestCase::getStatusMessage()()": "class-cake.testsuite.integrationtestcase.html#getStatusMessage()", "IntegrationTestCase::getTableLocator()()": "class-cake.testsuite.integrationtestcase.html#getTableLocator()", "IntegrationTestCase::getTestResultObject()()": "class-cake.testsuite.integrationtestcase.html#getTestResultObject()", "IntegrationTestCase::greaterThan()()": "class-cake.testsuite.integrationtestcase.html#greaterThan()", "IntegrationTestCase::greaterThanOrEqual()()": "class-cake.testsuite.integrationtestcase.html#greaterThanOrEqual()", "IntegrationTestCase::hasExpectationOnOutput()()": "class-cake.testsuite.integrationtestcase.html#hasExpectationOnOutput()", "IntegrationTestCase::hasFailed()()": "class-cake.testsuite.integrationtestcase.html#hasFailed()", "IntegrationTestCase::hasOutput()()": "class-cake.testsuite.integrationtestcase.html#hasOutput()", "IntegrationTestCase::hasSize()()": "class-cake.testsuite.integrationtestcase.html#hasSize()", "IntegrationTestCase::head()()": "class-cake.testsuite.integrationtestcase.html#head()", "IntegrationTestCase::identicalTo()()": "class-cake.testsuite.integrationtestcase.html#identicalTo()", "IntegrationTestCase::iniSet()()": "class-cake.testsuite.integrationtestcase.html#iniSet()", "IntegrationTestCase::isEmpty()()": "class-cake.testsuite.integrationtestcase.html#isEmpty()", "IntegrationTestCase::isFalse()()": "class-cake.testsuite.integrationtestcase.html#isFalse()", "IntegrationTestCase::isFinite()()": "class-cake.testsuite.integrationtestcase.html#isFinite()", "IntegrationTestCase::isInfinite()()": "class-cake.testsuite.integrationtestcase.html#isInfinite()", "IntegrationTestCase::isInIsolation()()": "class-cake.testsuite.integrationtestcase.html#isInIsolation()", "IntegrationTestCase::isInstanceOf()()": "class-cake.testsuite.integrationtestcase.html#isInstanceOf()", "IntegrationTestCase::isJson()()": "class-cake.testsuite.integrationtestcase.html#isJson()", "IntegrationTestCase::isLarge()()": "class-cake.testsuite.integrationtestcase.html#isLarge()", "IntegrationTestCase::isMedium()()": "class-cake.testsuite.integrationtestcase.html#isMedium()", "IntegrationTestCase::isNan()()": "class-cake.testsuite.integrationtestcase.html#isNan()", "IntegrationTestCase::isNull()()": "class-cake.testsuite.integrationtestcase.html#isNull()", "IntegrationTestCase::isReadable()()": "class-cake.testsuite.integrationtestcase.html#isReadable()", "IntegrationTestCase::isSmall()()": "class-cake.testsuite.integrationtestcase.html#isSmall()", "IntegrationTestCase::isTrue()()": "class-cake.testsuite.integrationtestcase.html#isTrue()", "IntegrationTestCase::isType()()": "class-cake.testsuite.integrationtestcase.html#isType()", "IntegrationTestCase::isWritable()()": "class-cake.testsuite.integrationtestcase.html#isWritable()", "IntegrationTestCase::lessThan()()": "class-cake.testsuite.integrationtestcase.html#lessThan()", "IntegrationTestCase::lessThanOrEqual()()": "class-cake.testsuite.integrationtestcase.html#lessThanOrEqual()", "IntegrationTestCase::loadFixtures()()": "class-cake.testsuite.integrationtestcase.html#loadFixtures()", "IntegrationTestCase::loadPlugins()()": "class-cake.testsuite.integrationtestcase.html#loadPlugins()", "IntegrationTestCase::loadRoutes()()": "class-cake.testsuite.integrationtestcase.html#loadRoutes()", "IntegrationTestCase::logicalAnd()()": "class-cake.testsuite.integrationtestcase.html#logicalAnd()", "IntegrationTestCase::logicalNot()()": "class-cake.testsuite.integrationtestcase.html#logicalNot()", "IntegrationTestCase::logicalOr()()": "class-cake.testsuite.integrationtestcase.html#logicalOr()", "IntegrationTestCase::logicalXor()()": "class-cake.testsuite.integrationtestcase.html#logicalXor()", "IntegrationTestCase::markAsRisky()()": "class-cake.testsuite.integrationtestcase.html#markAsRisky()", "IntegrationTestCase::markTestIncomplete()()": "class-cake.testsuite.integrationtestcase.html#markTestIncomplete()", "IntegrationTestCase::markTestSkipped()()": "class-cake.testsuite.integrationtestcase.html#markTestSkipped()", "IntegrationTestCase::matches()()": "class-cake.testsuite.integrationtestcase.html#matches()", "IntegrationTestCase::matchesRegularExpression()()": "class-cake.testsuite.integrationtestcase.html#matchesRegularExpression()", "IntegrationTestCase::mockService()()": "class-cake.testsuite.integrationtestcase.html#mockService()", "IntegrationTestCase::modifyContainer()()": "class-cake.testsuite.integrationtestcase.html#modifyContainer()", "IntegrationTestCase::never()()": "class-cake.testsuite.integrationtestcase.html#never()", "IntegrationTestCase::objectEquals()()": "class-cake.testsuite.integrationtestcase.html#objectEquals()", "IntegrationTestCase::objectHasAttribute()()": "class-cake.testsuite.integrationtestcase.html#objectHasAttribute()", "IntegrationTestCase::once()()": "class-cake.testsuite.integrationtestcase.html#once()", "IntegrationTestCase::onConsecutiveCalls()()": "class-cake.testsuite.integrationtestcase.html#onConsecutiveCalls()", "IntegrationTestCase::onNotSuccessfulTest()()": "class-cake.testsuite.integrationtestcase.html#onNotSuccessfulTest()", "IntegrationTestCase::options()()": "class-cake.testsuite.integrationtestcase.html#options()", "IntegrationTestCase::patch()()": "class-cake.testsuite.integrationtestcase.html#patch()", "IntegrationTestCase::post()()": "class-cake.testsuite.integrationtestcase.html#post()", "IntegrationTestCase::prophesize()()": "class-cake.testsuite.integrationtestcase.html#prophesize()", "IntegrationTestCase::provides()()": "class-cake.testsuite.integrationtestcase.html#provides()", "IntegrationTestCase::put()()": "class-cake.testsuite.integrationtestcase.html#put()", "IntegrationTestCase::recordDoubledType()()": "class-cake.testsuite.integrationtestcase.html#recordDoubledType()", "IntegrationTestCase::registerComparator()()": "class-cake.testsuite.integrationtestcase.html#registerComparator()", "IntegrationTestCase::registerMockObject()()": "class-cake.testsuite.integrationtestcase.html#registerMockObject()", "IntegrationTestCase::removeMockService()()": "class-cake.testsuite.integrationtestcase.html#removeMockService()", "IntegrationTestCase::removePlugins()()": "class-cake.testsuite.integrationtestcase.html#removePlugins()", "IntegrationTestCase::requires()()": "class-cake.testsuite.integrationtestcase.html#requires()", "IntegrationTestCase::resetCount()()": "class-cake.testsuite.integrationtestcase.html#resetCount()", "IntegrationTestCase::returnArgument()()": "class-cake.testsuite.integrationtestcase.html#returnArgument()", "IntegrationTestCase::returnCallback()()": "class-cake.testsuite.integrationtestcase.html#returnCallback()", "IntegrationTestCase::returnSelf()()": "class-cake.testsuite.integrationtestcase.html#returnSelf()", "IntegrationTestCase::returnValue()()": "class-cake.testsuite.integrationtestcase.html#returnValue()", "IntegrationTestCase::returnValueMap()()": "class-cake.testsuite.integrationtestcase.html#returnValueMap()", "IntegrationTestCase::run()()": "class-cake.testsuite.integrationtestcase.html#run()", "IntegrationTestCase::runBare()()": "class-cake.testsuite.integrationtestcase.html#runBare()", "IntegrationTestCase::runTest()()": "class-cake.testsuite.integrationtestcase.html#runTest()", "IntegrationTestCase::session()()": "class-cake.testsuite.integrationtestcase.html#session()", "IntegrationTestCase::setAppNamespace()()": "class-cake.testsuite.integrationtestcase.html#setAppNamespace()", "IntegrationTestCase::setBackupGlobals()()": "class-cake.testsuite.integrationtestcase.html#setBackupGlobals()", "IntegrationTestCase::setBackupStaticAttributes()()": "class-cake.testsuite.integrationtestcase.html#setBackupStaticAttributes()", "IntegrationTestCase::setBeStrictAboutChangesToGlobalState()()": "class-cake.testsuite.integrationtestcase.html#setBeStrictAboutChangesToGlobalState()", "IntegrationTestCase::setDependencies()()": "class-cake.testsuite.integrationtestcase.html#setDependencies()", "IntegrationTestCase::setDependencyInput()()": "class-cake.testsuite.integrationtestcase.html#setDependencyInput()", "IntegrationTestCase::setGroups()()": "class-cake.testsuite.integrationtestcase.html#setGroups()", "IntegrationTestCase::setInIsolation()()": "class-cake.testsuite.integrationtestcase.html#setInIsolation()", "IntegrationTestCase::setLocale()()": "class-cake.testsuite.integrationtestcase.html#setLocale()", "IntegrationTestCase::setName()()": "class-cake.testsuite.integrationtestcase.html#setName()", "IntegrationTestCase::setOutputCallback()()": "class-cake.testsuite.integrationtestcase.html#setOutputCallback()", "IntegrationTestCase::setPreserveGlobalState()()": "class-cake.testsuite.integrationtestcase.html#setPreserveGlobalState()", "IntegrationTestCase::setRegisterMockObjectsFromTestArgumentsRecursively()()": "class-cake.testsuite.integrationtestcase.html#setRegisterMockObjectsFromTestArgumentsRecursively()", "IntegrationTestCase::setResult()()": "class-cake.testsuite.integrationtestcase.html#setResult()", "IntegrationTestCase::setRunClassInSeparateProcess()()": "class-cake.testsuite.integrationtestcase.html#setRunClassInSeparateProcess()", "IntegrationTestCase::setRunTestInSeparateProcess()()": "class-cake.testsuite.integrationtestcase.html#setRunTestInSeparateProcess()", "IntegrationTestCase::setTableLocator()()": "class-cake.testsuite.integrationtestcase.html#setTableLocator()", "IntegrationTestCase::setTestResultObject()()": "class-cake.testsuite.integrationtestcase.html#setTestResultObject()", "IntegrationTestCase::setUnlockedFields()()": "class-cake.testsuite.integrationtestcase.html#setUnlockedFields()", "IntegrationTestCase::setUp()()": "class-cake.testsuite.integrationtestcase.html#setUp()", "IntegrationTestCase::setUpBeforeClass()()": "class-cake.testsuite.integrationtestcase.html#setUpBeforeClass()", "IntegrationTestCase::setupFixtures()()": "class-cake.testsuite.integrationtestcase.html#setupFixtures()", "IntegrationTestCase::skipIf()()": "class-cake.testsuite.integrationtestcase.html#skipIf()", "IntegrationTestCase::skipUnless()()": "class-cake.testsuite.integrationtestcase.html#skipUnless()", "IntegrationTestCase::sortId()()": "class-cake.testsuite.integrationtestcase.html#sortId()", "IntegrationTestCase::stringContains()()": "class-cake.testsuite.integrationtestcase.html#stringContains()", "IntegrationTestCase::stringEndsWith()()": "class-cake.testsuite.integrationtestcase.html#stringEndsWith()", "IntegrationTestCase::stringStartsWith()()": "class-cake.testsuite.integrationtestcase.html#stringStartsWith()", "IntegrationTestCase::tearDown()()": "class-cake.testsuite.integrationtestcase.html#tearDown()", "IntegrationTestCase::tearDownAfterClass()()": "class-cake.testsuite.integrationtestcase.html#tearDownAfterClass()", "IntegrationTestCase::teardownFixtures()()": "class-cake.testsuite.integrationtestcase.html#teardownFixtures()", "IntegrationTestCase::throwException()()": "class-cake.testsuite.integrationtestcase.html#throwException()", "IntegrationTestCase::toString()()": "class-cake.testsuite.integrationtestcase.html#toString()", "IntegrationTestCase::useHttpServer()()": "class-cake.testsuite.integrationtestcase.html#useHttpServer()", "IntegrationTestCase::usesDataProvider()()": "class-cake.testsuite.integrationtestcase.html#usesDataProvider()", "IntegrationTestCase::viewVariable()()": "class-cake.testsuite.integrationtestcase.html#viewVariable()", "IntegrationTestCase::withErrorReporting()()": "class-cake.testsuite.integrationtestcase.html#withErrorReporting()", "IntegrationTestTrait (trait)": "trait-cake.testsuite.integrationtesttrait.html", "InternalErrorException (class)": "class-cake.http.exception.internalerrorexception.html", "InvalidArgumentException (class)": "class-cake.cache.invalidargumentexception.html", "InvalidCsrfTokenException (class)": "class-cake.http.exception.invalidcsrftokenexception.html", "InvalidParameterException (class)": "class-cake.controller.exception.invalidparameterexception.html", "InvalidPrimaryKeyException (class)": "class-cake.datasource.exception.invalidprimarykeyexception.html", "InvalidPropertyInterface (interface)": "interface-cake.datasource.invalidpropertyinterface.html", "IsUnique (class)": "class-cake.orm.rule.isunique.html", "IsUnique::$_fields": "class-cake.orm.rule.isunique.html#$_fields", "IsUnique::$_options": "class-cake.orm.rule.isunique.html#$_options", "IsUnique::__construct()()": "class-cake.orm.rule.isunique.html#__construct()", "IsUnique::__invoke()()": "class-cake.orm.rule.isunique.html#__invoke()", "IsUnique::_alias()()": "class-cake.orm.rule.isunique.html#_alias()", "JsonConfig (class)": "class-cake.core.configure.engine.jsonconfig.html", "JsonConfig::$_extension": "class-cake.core.configure.engine.jsonconfig.html#$_extension", "JsonConfig::$_path": "class-cake.core.configure.engine.jsonconfig.html#$_path", "JsonConfig::__construct()()": "class-cake.core.configure.engine.jsonconfig.html#__construct()", "JsonConfig::_getFilePath()()": "class-cake.core.configure.engine.jsonconfig.html#_getFilePath()", "JsonConfig::dump()()": "class-cake.core.configure.engine.jsonconfig.html#dump()", "JsonConfig::read()()": "class-cake.core.configure.engine.jsonconfig.html#read()", "JsonFormatter (class)": "class-cake.log.formatter.jsonformatter.html", "JsonFormatter::$_config": "class-cake.log.formatter.jsonformatter.html#$_config", "JsonFormatter::$_configInitialized": "class-cake.log.formatter.jsonformatter.html#$_configInitialized", "JsonFormatter::$_defaultConfig": "class-cake.log.formatter.jsonformatter.html#$_defaultConfig", "JsonFormatter::__construct()()": "class-cake.log.formatter.jsonformatter.html#__construct()", "JsonFormatter::_configDelete()()": "class-cake.log.formatter.jsonformatter.html#_configDelete()", "JsonFormatter::_configRead()()": "class-cake.log.formatter.jsonformatter.html#_configRead()", "JsonFormatter::_configWrite()()": "class-cake.log.formatter.jsonformatter.html#_configWrite()", "JsonFormatter::configShallow()()": "class-cake.log.formatter.jsonformatter.html#configShallow()", "JsonFormatter::format()()": "class-cake.log.formatter.jsonformatter.html#format()", "JsonFormatter::getConfig()()": "class-cake.log.formatter.jsonformatter.html#getConfig()", "JsonFormatter::getConfigOrFail()()": "class-cake.log.formatter.jsonformatter.html#getConfigOrFail()", "JsonFormatter::setConfig()()": "class-cake.log.formatter.jsonformatter.html#setConfig()", "JsonType (class)": "class-cake.database.type.jsontype.html", "JsonType::$_encodingOptions": "class-cake.database.type.jsontype.html#$_encodingOptions", "JsonType::$_name": "class-cake.database.type.jsontype.html#$_name", "JsonType::__construct()()": "class-cake.database.type.jsontype.html#__construct()", "JsonType::getBaseType()()": "class-cake.database.type.jsontype.html#getBaseType()", "JsonType::getName()()": "class-cake.database.type.jsontype.html#getName()", "JsonType::manyToPHP()()": "class-cake.database.type.jsontype.html#manyToPHP()", "JsonType::marshal()()": "class-cake.database.type.jsontype.html#marshal()", "JsonType::newId()()": "class-cake.database.type.jsontype.html#newId()", "JsonType::setEncodingOptions()()": "class-cake.database.type.jsontype.html#setEncodingOptions()", "JsonType::toDatabase()()": "class-cake.database.type.jsontype.html#toDatabase()", "JsonType::toPHP()()": "class-cake.database.type.jsontype.html#toPHP()", "JsonType::toStatement()()": "class-cake.database.type.jsontype.html#toStatement()", "JsonView (class)": "class-cake.view.jsonview.html", "JsonView::$_config": "class-cake.view.jsonview.html#$_config", "JsonView::$_configInitialized": "class-cake.view.jsonview.html#$_configInitialized", "JsonView::$_current": "class-cake.view.jsonview.html#$_current", "JsonView::$_currentType": "class-cake.view.jsonview.html#$_currentType", "JsonView::$_defaultConfig": "class-cake.view.jsonview.html#$_defaultConfig", "JsonView::$_eventClass": "class-cake.view.jsonview.html#$_eventClass", "JsonView::$_eventManager": "class-cake.view.jsonview.html#$_eventManager", "JsonView::$_ext": "class-cake.view.jsonview.html#$_ext", "JsonView::$_helpers": "class-cake.view.jsonview.html#$_helpers", "JsonView::$_parents": "class-cake.view.jsonview.html#$_parents", "JsonView::$_passedVars": "class-cake.view.jsonview.html#$_passedVars", "JsonView::$_paths": "class-cake.view.jsonview.html#$_paths", "JsonView::$_pathsForPlugin": "class-cake.view.jsonview.html#$_pathsForPlugin", "JsonView::$_responseType": "class-cake.view.jsonview.html#$_responseType", "JsonView::$_stack": "class-cake.view.jsonview.html#$_stack", "JsonView::$_viewBlockClass": "class-cake.view.jsonview.html#$_viewBlockClass", "JsonView::$autoLayout": "class-cake.view.jsonview.html#$autoLayout", "JsonView::$Blocks": "class-cake.view.jsonview.html#$Blocks", "JsonView::$Breadcrumbs": "class-cake.view.jsonview.html#$Breadcrumbs", "JsonView::$elementCache": "class-cake.view.jsonview.html#$elementCache", "JsonView::$Flash": "class-cake.view.jsonview.html#$Flash", "JsonView::$Form": "class-cake.view.jsonview.html#$Form", "JsonView::$helpers": "class-cake.view.jsonview.html#$helpers", "JsonView::$Html": "class-cake.view.jsonview.html#$Html", "JsonView::$layout": "class-cake.view.jsonview.html#$layout", "JsonView::$layoutPath": "class-cake.view.jsonview.html#$layoutPath", "JsonView::$name": "class-cake.view.jsonview.html#$name", "JsonView::$Number": "class-cake.view.jsonview.html#$Number", "JsonView::$Paginator": "class-cake.view.jsonview.html#$Paginator", "JsonView::$plugin": "class-cake.view.jsonview.html#$plugin", "JsonView::$request": "class-cake.view.jsonview.html#$request", "JsonView::$response": "class-cake.view.jsonview.html#$response", "JsonView::$subDir": "class-cake.view.jsonview.html#$subDir", "JsonView::$template": "class-cake.view.jsonview.html#$template", "JsonView::$templatePath": "class-cake.view.jsonview.html#$templatePath", "JsonView::$Text": "class-cake.view.jsonview.html#$Text", "JsonView::$theme": "class-cake.view.jsonview.html#$theme", "JsonView::$Time": "class-cake.view.jsonview.html#$Time", "JsonView::$Url": "class-cake.view.jsonview.html#$Url", "JsonView::$viewVars": "class-cake.view.jsonview.html#$viewVars", "JsonView::__construct()()": "class-cake.view.jsonview.html#__construct()", "JsonView::__get()()": "class-cake.view.jsonview.html#__get()", "JsonView::_checkFilePath()()": "class-cake.view.jsonview.html#_checkFilePath()", "JsonView::_configDelete()()": "class-cake.view.jsonview.html#_configDelete()", "JsonView::_configRead()()": "class-cake.view.jsonview.html#_configRead()", "JsonView::_configWrite()()": "class-cake.view.jsonview.html#_configWrite()", "JsonView::_createCell()()": "class-cake.view.jsonview.html#_createCell()", "JsonView::_dataToSerialize()()": "class-cake.view.jsonview.html#_dataToSerialize()", "JsonView::_elementCache()()": "class-cake.view.jsonview.html#_elementCache()", "JsonView::_evaluate()()": "class-cake.view.jsonview.html#_evaluate()", "JsonView::_getElementFileName()()": "class-cake.view.jsonview.html#_getElementFileName()", "JsonView::_getLayoutFileName()()": "class-cake.view.jsonview.html#_getLayoutFileName()", "JsonView::_getSubPaths()()": "class-cake.view.jsonview.html#_getSubPaths()", "JsonView::_getTemplateFileName()()": "class-cake.view.jsonview.html#_getTemplateFileName()", "JsonView::_inflectTemplateFileName()()": "class-cake.view.jsonview.html#_inflectTemplateFileName()", "JsonView::_paths()()": "class-cake.view.jsonview.html#_paths()", "JsonView::_render()()": "class-cake.view.jsonview.html#_render()", "JsonView::_renderElement()()": "class-cake.view.jsonview.html#_renderElement()", "JsonView::_serialize()()": "class-cake.view.jsonview.html#_serialize()", "JsonView::append()()": "class-cake.view.jsonview.html#append()", "JsonView::assign()()": "class-cake.view.jsonview.html#assign()", "JsonView::blocks()()": "class-cake.view.jsonview.html#blocks()", "JsonView::cache()()": "class-cake.view.jsonview.html#cache()", "JsonView::cell()()": "class-cake.view.jsonview.html#cell()", "JsonView::configShallow()()": "class-cake.view.jsonview.html#configShallow()", "JsonView::contentType()()": "class-cake.view.jsonview.html#contentType()", "JsonView::disableAutoLayout()()": "class-cake.view.jsonview.html#disableAutoLayout()", "JsonView::dispatchEvent()()": "class-cake.view.jsonview.html#dispatchEvent()", "JsonView::element()()": "class-cake.view.jsonview.html#element()", "JsonView::elementExists()()": "class-cake.view.jsonview.html#elementExists()", "JsonView::enableAutoLayout()()": "class-cake.view.jsonview.html#enableAutoLayout()", "JsonView::end()()": "class-cake.view.jsonview.html#end()", "JsonView::exists()()": "class-cake.view.jsonview.html#exists()", "JsonView::extend()()": "class-cake.view.jsonview.html#extend()", "JsonView::fetch()()": "class-cake.view.jsonview.html#fetch()", "JsonView::get()()": "class-cake.view.jsonview.html#get()", "JsonView::getConfig()()": "class-cake.view.jsonview.html#getConfig()", "JsonView::getConfigOrFail()()": "class-cake.view.jsonview.html#getConfigOrFail()", "JsonView::getCurrentType()()": "class-cake.view.jsonview.html#getCurrentType()", "JsonView::getElementPaths()()": "class-cake.view.jsonview.html#getElementPaths()", "JsonView::getEventManager()()": "class-cake.view.jsonview.html#getEventManager()", "JsonView::getLayout()()": "class-cake.view.jsonview.html#getLayout()", "JsonView::getLayoutPath()()": "class-cake.view.jsonview.html#getLayoutPath()", "JsonView::getLayoutPaths()()": "class-cake.view.jsonview.html#getLayoutPaths()", "JsonView::getName()()": "class-cake.view.jsonview.html#getName()", "JsonView::getPlugin()()": "class-cake.view.jsonview.html#getPlugin()", "JsonView::getRequest()()": "class-cake.view.jsonview.html#getRequest()", "JsonView::getResponse()()": "class-cake.view.jsonview.html#getResponse()", "JsonView::getSubDir()()": "class-cake.view.jsonview.html#getSubDir()", "JsonView::getTemplate()()": "class-cake.view.jsonview.html#getTemplate()", "JsonView::getTemplatePath()()": "class-cake.view.jsonview.html#getTemplatePath()", "JsonView::getTheme()()": "class-cake.view.jsonview.html#getTheme()", "JsonView::getVars()()": "class-cake.view.jsonview.html#getVars()", "JsonView::helpers()()": "class-cake.view.jsonview.html#helpers()", "JsonView::initialize()()": "class-cake.view.jsonview.html#initialize()", "JsonView::isAutoLayoutEnabled()()": "class-cake.view.jsonview.html#isAutoLayoutEnabled()", "JsonView::loadHelper()()": "class-cake.view.jsonview.html#loadHelper()", "JsonView::loadHelpers()()": "class-cake.view.jsonview.html#loadHelpers()", "JsonView::log()()": "class-cake.view.jsonview.html#log()", "JsonView::pluginSplit()()": "class-cake.view.jsonview.html#pluginSplit()", "JsonView::prepend()()": "class-cake.view.jsonview.html#prepend()", "JsonView::render()()": "class-cake.view.jsonview.html#render()", "JsonView::renderLayout()()": "class-cake.view.jsonview.html#renderLayout()", "JsonView::reset()()": "class-cake.view.jsonview.html#reset()", "JsonView::set()()": "class-cake.view.jsonview.html#set()", "JsonView::setConfig()()": "class-cake.view.jsonview.html#setConfig()", "JsonView::setContentType()()": "class-cake.view.jsonview.html#setContentType()", "JsonView::setElementCache()()": "class-cake.view.jsonview.html#setElementCache()", "JsonView::setEventManager()()": "class-cake.view.jsonview.html#setEventManager()", "JsonView::setLayout()()": "class-cake.view.jsonview.html#setLayout()", "JsonView::setLayoutPath()()": "class-cake.view.jsonview.html#setLayoutPath()", "JsonView::setPlugin()()": "class-cake.view.jsonview.html#setPlugin()", "JsonView::setRequest()()": "class-cake.view.jsonview.html#setRequest()", "JsonView::setResponse()()": "class-cake.view.jsonview.html#setResponse()", "JsonView::setSubDir()()": "class-cake.view.jsonview.html#setSubDir()", "JsonView::setTemplate()()": "class-cake.view.jsonview.html#setTemplate()", "JsonView::setTemplatePath()()": "class-cake.view.jsonview.html#setTemplatePath()", "JsonView::setTheme()()": "class-cake.view.jsonview.html#setTheme()", "JsonView::start()()": "class-cake.view.jsonview.html#start()", "LabelWidget (class)": "class-cake.view.widget.labelwidget.html", "LabelWidget::$_labelTemplate": "class-cake.view.widget.labelwidget.html#$_labelTemplate", "LabelWidget::$_templates": "class-cake.view.widget.labelwidget.html#$_templates", "LabelWidget::__construct()()": "class-cake.view.widget.labelwidget.html#__construct()", "LabelWidget::render()()": "class-cake.view.widget.labelwidget.html#render()", "LabelWidget::secureFields()()": "class-cake.view.widget.labelwidget.html#secureFields()", "LayoutFileEquals (class)": "class-cake.testsuite.constraint.view.layoutfileequals.html", "LayoutFileEquals::$filename": "class-cake.testsuite.constraint.view.layoutfileequals.html#$filename", "LayoutFileEquals::__construct()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#__construct()", "LayoutFileEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#additionalFailureDescription()", "LayoutFileEquals::count()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#count()", "LayoutFileEquals::evaluate()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#evaluate()", "LayoutFileEquals::exporter()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#exporter()", "LayoutFileEquals::fail()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#fail()", "LayoutFileEquals::failureDescription()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#failureDescription()", "LayoutFileEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#failureDescriptionInContext()", "LayoutFileEquals::matches()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#matches()", "LayoutFileEquals::reduce()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#reduce()", "LayoutFileEquals::toString()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#toString()", "LayoutFileEquals::toStringInContext()()": "class-cake.testsuite.constraint.view.layoutfileequals.html#toStringInContext()", "LazyEagerLoader (class)": "class-cake.orm.lazyeagerloader.html", "LazyEagerLoader::_getPropertyMap()()": "class-cake.orm.lazyeagerloader.html#_getPropertyMap()", "LazyEagerLoader::_getQuery()()": "class-cake.orm.lazyeagerloader.html#_getQuery()", "LazyEagerLoader::_injectResults()()": "class-cake.orm.lazyeagerloader.html#_injectResults()", "LazyEagerLoader::loadInto()()": "class-cake.orm.lazyeagerloader.html#loadInto()", "LegacyCommandRunner (class)": "class-cake.console.testsuite.legacycommandrunner.html", "LegacyCommandRunner::run()()": "class-cake.console.testsuite.legacycommandrunner.html#run()", "LegacyShellDispatcher (class)": "class-cake.console.testsuite.legacyshelldispatcher.html", "LegacyShellDispatcher::$_aliases": "class-cake.console.testsuite.legacyshelldispatcher.html#$_aliases", "LegacyShellDispatcher::$_io": "class-cake.console.testsuite.legacyshelldispatcher.html#$_io", "LegacyShellDispatcher::$args": "class-cake.console.testsuite.legacyshelldispatcher.html#$args", "LegacyShellDispatcher::__construct()()": "class-cake.console.testsuite.legacyshelldispatcher.html#__construct()", "LegacyShellDispatcher::_bootstrap()()": "class-cake.console.testsuite.legacyshelldispatcher.html#_bootstrap()", "LegacyShellDispatcher::_createShell()()": "class-cake.console.testsuite.legacyshelldispatcher.html#_createShell()", "LegacyShellDispatcher::_dispatch()()": "class-cake.console.testsuite.legacyshelldispatcher.html#_dispatch()", "LegacyShellDispatcher::_handleAlias()()": "class-cake.console.testsuite.legacyshelldispatcher.html#_handleAlias()", "LegacyShellDispatcher::_initEnvironment()()": "class-cake.console.testsuite.legacyshelldispatcher.html#_initEnvironment()", "LegacyShellDispatcher::_shellExists()()": "class-cake.console.testsuite.legacyshelldispatcher.html#_shellExists()", "LegacyShellDispatcher::addShortPluginAliases()()": "class-cake.console.testsuite.legacyshelldispatcher.html#addShortPluginAliases()", "LegacyShellDispatcher::alias()()": "class-cake.console.testsuite.legacyshelldispatcher.html#alias()", "LegacyShellDispatcher::dispatch()()": "class-cake.console.testsuite.legacyshelldispatcher.html#dispatch()", "LegacyShellDispatcher::findShell()()": "class-cake.console.testsuite.legacyshelldispatcher.html#findShell()", "LegacyShellDispatcher::help()()": "class-cake.console.testsuite.legacyshelldispatcher.html#help()", "LegacyShellDispatcher::resetAliases()()": "class-cake.console.testsuite.legacyshelldispatcher.html#resetAliases()", "LegacyShellDispatcher::run()()": "class-cake.console.testsuite.legacyshelldispatcher.html#run()", "LegacyShellDispatcher::shiftArgs()()": "class-cake.console.testsuite.legacyshelldispatcher.html#shiftArgs()", "LegacyShellDispatcher::version()()": "class-cake.console.testsuite.legacyshelldispatcher.html#version()", "LegacySyslogFormatter (class)": "class-cake.log.formatter.legacysyslogformatter.html", "LegacySyslogFormatter::$_config": "class-cake.log.formatter.legacysyslogformatter.html#$_config", "LegacySyslogFormatter::$_configInitialized": "class-cake.log.formatter.legacysyslogformatter.html#$_configInitialized", "LegacySyslogFormatter::$_defaultConfig": "class-cake.log.formatter.legacysyslogformatter.html#$_defaultConfig", "LegacySyslogFormatter::__construct()()": "class-cake.log.formatter.legacysyslogformatter.html#__construct()", "LegacySyslogFormatter::_configDelete()()": "class-cake.log.formatter.legacysyslogformatter.html#_configDelete()", "LegacySyslogFormatter::_configRead()()": "class-cake.log.formatter.legacysyslogformatter.html#_configRead()", "LegacySyslogFormatter::_configWrite()()": "class-cake.log.formatter.legacysyslogformatter.html#_configWrite()", "LegacySyslogFormatter::configShallow()()": "class-cake.log.formatter.legacysyslogformatter.html#configShallow()", "LegacySyslogFormatter::format()()": "class-cake.log.formatter.legacysyslogformatter.html#format()", "LegacySyslogFormatter::getConfig()()": "class-cake.log.formatter.legacysyslogformatter.html#getConfig()", "LegacySyslogFormatter::getConfigOrFail()()": "class-cake.log.formatter.legacysyslogformatter.html#getConfigOrFail()", "LegacySyslogFormatter::setConfig()()": "class-cake.log.formatter.legacysyslogformatter.html#setConfig()", "LinkConstraint (class)": "class-cake.orm.rule.linkconstraint.html", "LinkConstraint::$_association": "class-cake.orm.rule.linkconstraint.html#$_association", "LinkConstraint::$_requiredLinkState": "class-cake.orm.rule.linkconstraint.html#$_requiredLinkState", "LinkConstraint::__construct()()": "class-cake.orm.rule.linkconstraint.html#__construct()", "LinkConstraint::__invoke()()": "class-cake.orm.rule.linkconstraint.html#__invoke()", "LinkConstraint::_aliasFields()()": "class-cake.orm.rule.linkconstraint.html#_aliasFields()", "LinkConstraint::_buildConditions()()": "class-cake.orm.rule.linkconstraint.html#_buildConditions()", "LinkConstraint::_countLinks()()": "class-cake.orm.rule.linkconstraint.html#_countLinks()", "LocaleSelectorMiddleware (class)": "class-cake.i18n.middleware.localeselectormiddleware.html", "LocaleSelectorMiddleware::$locales": "class-cake.i18n.middleware.localeselectormiddleware.html#$locales", "LocaleSelectorMiddleware::__construct()()": "class-cake.i18n.middleware.localeselectormiddleware.html#__construct()", "LocaleSelectorMiddleware::process()()": "class-cake.i18n.middleware.localeselectormiddleware.html#process()", "LocatorAwareTrait (trait)": "trait-cake.orm.locator.locatorawaretrait.html", "LocatorInterface (interface)": "interface-cake.datasource.locator.locatorinterface.html", "Log (class)": "class-cake.log.log.html", "Log (namespace)": "namespace-cake.log.html", "Log::$_config": "class-cake.log.log.html#$_config", "Log::$_dirtyConfig": "class-cake.log.log.html#$_dirtyConfig", "Log::$_dsnClassMap": "class-cake.log.log.html#$_dsnClassMap", "Log::$_levelMap": "class-cake.log.log.html#$_levelMap", "Log::$_levels": "class-cake.log.log.html#$_levels", "Log::$_registry": "class-cake.log.log.html#$_registry", "Log::_init()()": "class-cake.log.log.html#_init()", "Log::_loadConfig()()": "class-cake.log.log.html#_loadConfig()", "Log::alert()()": "class-cake.log.log.html#alert()", "Log::configured()()": "class-cake.log.log.html#configured()", "Log::critical()()": "class-cake.log.log.html#critical()", "Log::debug()()": "class-cake.log.log.html#debug()", "Log::drop()()": "class-cake.log.log.html#drop()", "Log::emergency()()": "class-cake.log.log.html#emergency()", "Log::engine()()": "class-cake.log.log.html#engine()", "Log::error()()": "class-cake.log.log.html#error()", "Log::getConfig()()": "class-cake.log.log.html#getConfig()", "Log::getConfigOrFail()()": "class-cake.log.log.html#getConfigOrFail()", "Log::getDsnClassMap()()": "class-cake.log.log.html#getDsnClassMap()", "Log::info()()": "class-cake.log.log.html#info()", "Log::levels()()": "class-cake.log.log.html#levels()", "Log::notice()()": "class-cake.log.log.html#notice()", "Log::parseDsn()()": "class-cake.log.log.html#parseDsn()", "Log::reset()()": "class-cake.log.log.html#reset()", "Log::setConfig()()": "class-cake.log.log.html#setConfig()", "Log::setDsnClassMap()()": "class-cake.log.log.html#setDsnClassMap()", "Log::warning()()": "class-cake.log.log.html#warning()", "Log::write()()": "class-cake.log.log.html#write()", "Log\\Engine (namespace)": "namespace-cake.log.engine.html", "Log\\Formatter (namespace)": "namespace-cake.log.formatter.html", "LogEngineRegistry (class)": "class-cake.log.logengineregistry.html", "LogEngineRegistry::$_loaded": "class-cake.log.logengineregistry.html#$_loaded", "LogEngineRegistry::__debugInfo()()": "class-cake.log.logengineregistry.html#__debugInfo()", "LogEngineRegistry::__get()()": "class-cake.log.logengineregistry.html#__get()", "LogEngineRegistry::__isset()()": "class-cake.log.logengineregistry.html#__isset()", "LogEngineRegistry::__set()()": "class-cake.log.logengineregistry.html#__set()", "LogEngineRegistry::__unset()()": "class-cake.log.logengineregistry.html#__unset()", "LogEngineRegistry::_checkDuplicate()()": "class-cake.log.logengineregistry.html#_checkDuplicate()", "LogEngineRegistry::_create()()": "class-cake.log.logengineregistry.html#_create()", "LogEngineRegistry::_resolveClassName()()": "class-cake.log.logengineregistry.html#_resolveClassName()", "LogEngineRegistry::_throwMissingClassError()()": "class-cake.log.logengineregistry.html#_throwMissingClassError()", "LogEngineRegistry::count()()": "class-cake.log.logengineregistry.html#count()", "LogEngineRegistry::get()()": "class-cake.log.logengineregistry.html#get()", "LogEngineRegistry::getIterator()()": "class-cake.log.logengineregistry.html#getIterator()", "LogEngineRegistry::has()()": "class-cake.log.logengineregistry.html#has()", "LogEngineRegistry::load()()": "class-cake.log.logengineregistry.html#load()", "LogEngineRegistry::loaded()()": "class-cake.log.logengineregistry.html#loaded()", "LogEngineRegistry::normalizeArray()()": "class-cake.log.logengineregistry.html#normalizeArray()", "LogEngineRegistry::reset()()": "class-cake.log.logengineregistry.html#reset()", "LogEngineRegistry::set()()": "class-cake.log.logengineregistry.html#set()", "LogEngineRegistry::unload()()": "class-cake.log.logengineregistry.html#unload()", "LoggedQuery (class)": "class-cake.database.log.loggedquery.html", "LoggedQuery::$driver": "class-cake.database.log.loggedquery.html#$driver", "LoggedQuery::$error": "class-cake.database.log.loggedquery.html#$error", "LoggedQuery::$numRows": "class-cake.database.log.loggedquery.html#$numRows", "LoggedQuery::$params": "class-cake.database.log.loggedquery.html#$params", "LoggedQuery::$query": "class-cake.database.log.loggedquery.html#$query", "LoggedQuery::$took": "class-cake.database.log.loggedquery.html#$took", "LoggedQuery::__toString()()": "class-cake.database.log.loggedquery.html#__toString()", "LoggedQuery::getContext()()": "class-cake.database.log.loggedquery.html#getContext()", "LoggedQuery::interpolate()()": "class-cake.database.log.loggedquery.html#interpolate()", "LoggedQuery::jsonSerialize()()": "class-cake.database.log.loggedquery.html#jsonSerialize()", "LoggingStatement (class)": "class-cake.database.log.loggingstatement.html", "LoggingStatement::$_compiledParams": "class-cake.database.log.loggingstatement.html#$_compiledParams", "LoggingStatement::$_driver": "class-cake.database.log.loggingstatement.html#$_driver", "LoggingStatement::$_hasExecuted": "class-cake.database.log.loggingstatement.html#$_hasExecuted", "LoggingStatement::$_logger": "class-cake.database.log.loggingstatement.html#$_logger", "LoggingStatement::$_statement": "class-cake.database.log.loggingstatement.html#$_statement", "LoggingStatement::$loggedQuery": "class-cake.database.log.loggingstatement.html#$loggedQuery", "LoggingStatement::$queryString": "class-cake.database.log.loggingstatement.html#$queryString", "LoggingStatement::$startTime": "class-cake.database.log.loggingstatement.html#$startTime", "LoggingStatement::__construct()()": "class-cake.database.log.loggingstatement.html#__construct()", "LoggingStatement::__get()()": "class-cake.database.log.loggingstatement.html#__get()", "LoggingStatement::_log()()": "class-cake.database.log.loggingstatement.html#_log()", "LoggingStatement::bind()()": "class-cake.database.log.loggingstatement.html#bind()", "LoggingStatement::bindValue()()": "class-cake.database.log.loggingstatement.html#bindValue()", "LoggingStatement::cast()()": "class-cake.database.log.loggingstatement.html#cast()", "LoggingStatement::closeCursor()()": "class-cake.database.log.loggingstatement.html#closeCursor()", "LoggingStatement::columnCount()()": "class-cake.database.log.loggingstatement.html#columnCount()", "LoggingStatement::count()()": "class-cake.database.log.loggingstatement.html#count()", "LoggingStatement::errorCode()()": "class-cake.database.log.loggingstatement.html#errorCode()", "LoggingStatement::errorInfo()()": "class-cake.database.log.loggingstatement.html#errorInfo()", "LoggingStatement::execute()()": "class-cake.database.log.loggingstatement.html#execute()", "LoggingStatement::fetch()()": "class-cake.database.log.loggingstatement.html#fetch()", "LoggingStatement::fetchAll()()": "class-cake.database.log.loggingstatement.html#fetchAll()", "LoggingStatement::fetchAssoc()()": "class-cake.database.log.loggingstatement.html#fetchAssoc()", "LoggingStatement::fetchColumn()()": "class-cake.database.log.loggingstatement.html#fetchColumn()", "LoggingStatement::getInnerStatement()()": "class-cake.database.log.loggingstatement.html#getInnerStatement()", "LoggingStatement::getIterator()()": "class-cake.database.log.loggingstatement.html#getIterator()", "LoggingStatement::getLogger()()": "class-cake.database.log.loggingstatement.html#getLogger()", "LoggingStatement::lastInsertId()()": "class-cake.database.log.loggingstatement.html#lastInsertId()", "LoggingStatement::matchTypes()()": "class-cake.database.log.loggingstatement.html#matchTypes()", "LoggingStatement::rowCount()()": "class-cake.database.log.loggingstatement.html#rowCount()", "LoggingStatement::setLogger()()": "class-cake.database.log.loggingstatement.html#setLogger()", "LogTrait (trait)": "trait-cake.log.logtrait.html", "MailConstraintBase (class)": "class-cake.testsuite.constraint.email.mailconstraintbase.html", "MailConstraintBase::$at": "class-cake.testsuite.constraint.email.mailconstraintbase.html#$at", "MailConstraintBase::__construct()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#__construct()", "MailConstraintBase::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#additionalFailureDescription()", "MailConstraintBase::count()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#count()", "MailConstraintBase::evaluate()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#evaluate()", "MailConstraintBase::exporter()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#exporter()", "MailConstraintBase::fail()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#fail()", "MailConstraintBase::failureDescription()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#failureDescription()", "MailConstraintBase::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#failureDescriptionInContext()", "MailConstraintBase::getMessages()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#getMessages()", "MailConstraintBase::matches()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#matches()", "MailConstraintBase::reduce()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#reduce()", "MailConstraintBase::toString()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#toString()", "MailConstraintBase::toStringInContext()()": "class-cake.testsuite.constraint.email.mailconstraintbase.html#toStringInContext()", "MailContains (class)": "class-cake.testsuite.constraint.email.mailcontains.html", "MailContains::$at": "class-cake.testsuite.constraint.email.mailcontains.html#$at", "MailContains::$type": "class-cake.testsuite.constraint.email.mailcontains.html#$type", "MailContains::__construct()()": "class-cake.testsuite.constraint.email.mailcontains.html#__construct()", "MailContains::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailcontains.html#additionalFailureDescription()", "MailContains::count()()": "class-cake.testsuite.constraint.email.mailcontains.html#count()", "MailContains::evaluate()()": "class-cake.testsuite.constraint.email.mailcontains.html#evaluate()", "MailContains::exporter()()": "class-cake.testsuite.constraint.email.mailcontains.html#exporter()", "MailContains::fail()()": "class-cake.testsuite.constraint.email.mailcontains.html#fail()", "MailContains::failureDescription()()": "class-cake.testsuite.constraint.email.mailcontains.html#failureDescription()", "MailContains::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailcontains.html#failureDescriptionInContext()", "MailContains::getAssertedMessages()()": "class-cake.testsuite.constraint.email.mailcontains.html#getAssertedMessages()", "MailContains::getMessages()()": "class-cake.testsuite.constraint.email.mailcontains.html#getMessages()", "MailContains::getTypeMethod()()": "class-cake.testsuite.constraint.email.mailcontains.html#getTypeMethod()", "MailContains::matches()()": "class-cake.testsuite.constraint.email.mailcontains.html#matches()", "MailContains::reduce()()": "class-cake.testsuite.constraint.email.mailcontains.html#reduce()", "MailContains::toString()()": "class-cake.testsuite.constraint.email.mailcontains.html#toString()", "MailContains::toStringInContext()()": "class-cake.testsuite.constraint.email.mailcontains.html#toStringInContext()", "MailContainsAttachment (class)": "class-cake.testsuite.constraint.email.mailcontainsattachment.html", "MailContainsAttachment::$at": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#$at", "MailContainsAttachment::$type": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#$type", "MailContainsAttachment::__construct()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#__construct()", "MailContainsAttachment::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#additionalFailureDescription()", "MailContainsAttachment::count()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#count()", "MailContainsAttachment::evaluate()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#evaluate()", "MailContainsAttachment::exporter()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#exporter()", "MailContainsAttachment::fail()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#fail()", "MailContainsAttachment::failureDescription()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#failureDescription()", "MailContainsAttachment::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#failureDescriptionInContext()", "MailContainsAttachment::getAssertedMessages()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#getAssertedMessages()", "MailContainsAttachment::getMessages()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#getMessages()", "MailContainsAttachment::getTypeMethod()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#getTypeMethod()", "MailContainsAttachment::matches()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#matches()", "MailContainsAttachment::reduce()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#reduce()", "MailContainsAttachment::toString()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#toString()", "MailContainsAttachment::toStringInContext()()": "class-cake.testsuite.constraint.email.mailcontainsattachment.html#toStringInContext()", "MailContainsHtml (class)": "class-cake.testsuite.constraint.email.mailcontainshtml.html", "MailContainsHtml::$at": "class-cake.testsuite.constraint.email.mailcontainshtml.html#$at", "MailContainsHtml::$type": "class-cake.testsuite.constraint.email.mailcontainshtml.html#$type", "MailContainsHtml::__construct()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#__construct()", "MailContainsHtml::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#additionalFailureDescription()", "MailContainsHtml::count()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#count()", "MailContainsHtml::evaluate()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#evaluate()", "MailContainsHtml::exporter()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#exporter()", "MailContainsHtml::fail()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#fail()", "MailContainsHtml::failureDescription()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#failureDescription()", "MailContainsHtml::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#failureDescriptionInContext()", "MailContainsHtml::getAssertedMessages()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#getAssertedMessages()", "MailContainsHtml::getMessages()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#getMessages()", "MailContainsHtml::getTypeMethod()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#getTypeMethod()", "MailContainsHtml::matches()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#matches()", "MailContainsHtml::reduce()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#reduce()", "MailContainsHtml::toString()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#toString()", "MailContainsHtml::toStringInContext()()": "class-cake.testsuite.constraint.email.mailcontainshtml.html#toStringInContext()", "MailContainsText (class)": "class-cake.testsuite.constraint.email.mailcontainstext.html", "MailContainsText::$at": "class-cake.testsuite.constraint.email.mailcontainstext.html#$at", "MailContainsText::$type": "class-cake.testsuite.constraint.email.mailcontainstext.html#$type", "MailContainsText::__construct()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#__construct()", "MailContainsText::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#additionalFailureDescription()", "MailContainsText::count()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#count()", "MailContainsText::evaluate()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#evaluate()", "MailContainsText::exporter()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#exporter()", "MailContainsText::fail()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#fail()", "MailContainsText::failureDescription()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#failureDescription()", "MailContainsText::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#failureDescriptionInContext()", "MailContainsText::getAssertedMessages()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#getAssertedMessages()", "MailContainsText::getMessages()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#getMessages()", "MailContainsText::getTypeMethod()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#getTypeMethod()", "MailContainsText::matches()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#matches()", "MailContainsText::reduce()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#reduce()", "MailContainsText::toString()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#toString()", "MailContainsText::toStringInContext()()": "class-cake.testsuite.constraint.email.mailcontainstext.html#toStringInContext()", "MailCount (class)": "class-cake.testsuite.constraint.email.mailcount.html", "MailCount::$at": "class-cake.testsuite.constraint.email.mailcount.html#$at", "MailCount::__construct()()": "class-cake.testsuite.constraint.email.mailcount.html#__construct()", "MailCount::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailcount.html#additionalFailureDescription()", "MailCount::count()()": "class-cake.testsuite.constraint.email.mailcount.html#count()", "MailCount::evaluate()()": "class-cake.testsuite.constraint.email.mailcount.html#evaluate()", "MailCount::exporter()()": "class-cake.testsuite.constraint.email.mailcount.html#exporter()", "MailCount::fail()()": "class-cake.testsuite.constraint.email.mailcount.html#fail()", "MailCount::failureDescription()()": "class-cake.testsuite.constraint.email.mailcount.html#failureDescription()", "MailCount::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailcount.html#failureDescriptionInContext()", "MailCount::getMessages()()": "class-cake.testsuite.constraint.email.mailcount.html#getMessages()", "MailCount::matches()()": "class-cake.testsuite.constraint.email.mailcount.html#matches()", "MailCount::reduce()()": "class-cake.testsuite.constraint.email.mailcount.html#reduce()", "MailCount::toString()()": "class-cake.testsuite.constraint.email.mailcount.html#toString()", "MailCount::toStringInContext()()": "class-cake.testsuite.constraint.email.mailcount.html#toStringInContext()", "Mailer (class)": "class-cake.mailer.mailer.html", "Mailer (namespace)": "namespace-cake.mailer.html", "Mailer::$_config": "class-cake.mailer.mailer.html#$_config", "Mailer::$_dsnClassMap": "class-cake.mailer.mailer.html#$_dsnClassMap", "Mailer::$_modelFactories": "class-cake.mailer.mailer.html#$_modelFactories", "Mailer::$_modelType": "class-cake.mailer.mailer.html#$_modelType", "Mailer::$_tableLocator": "class-cake.mailer.mailer.html#$_tableLocator", "Mailer::$clonedInstances": "class-cake.mailer.mailer.html#$clonedInstances", "Mailer::$defaultTable": "class-cake.mailer.mailer.html#$defaultTable", "Mailer::$logConfig": "class-cake.mailer.mailer.html#$logConfig", "Mailer::$message": "class-cake.mailer.mailer.html#$message", "Mailer::$messageClass": "class-cake.mailer.mailer.html#$messageClass", "Mailer::$modelClass": "class-cake.mailer.mailer.html#$modelClass", "Mailer::$name": "class-cake.mailer.mailer.html#$name", "Mailer::$renderer": "class-cake.mailer.mailer.html#$renderer", "Mailer::$transport": "class-cake.mailer.mailer.html#$transport", "Mailer::__call()()": "class-cake.mailer.mailer.html#__call()", "Mailer::__construct()()": "class-cake.mailer.mailer.html#__construct()", "Mailer::_setModelClass()()": "class-cake.mailer.mailer.html#_setModelClass()", "Mailer::addAttachments()()": "class-cake.mailer.mailer.html#addAttachments()", "Mailer::addBcc()()": "class-cake.mailer.mailer.html#addBcc()", "Mailer::addCc()()": "class-cake.mailer.mailer.html#addCc()", "Mailer::addHeaders()()": "class-cake.mailer.mailer.html#addHeaders()", "Mailer::addReplyTo()()": "class-cake.mailer.mailer.html#addReplyTo()", "Mailer::addTo()()": "class-cake.mailer.mailer.html#addTo()", "Mailer::configured()()": "class-cake.mailer.mailer.html#configured()", "Mailer::deliver()()": "class-cake.mailer.mailer.html#deliver()", "Mailer::drop()()": "class-cake.mailer.mailer.html#drop()", "Mailer::fetchTable()()": "class-cake.mailer.mailer.html#fetchTable()", "Mailer::flatten()()": "class-cake.mailer.mailer.html#flatten()", "Mailer::getAttachments()()": "class-cake.mailer.mailer.html#getAttachments()", "Mailer::getBcc()()": "class-cake.mailer.mailer.html#getBcc()", "Mailer::getBody()()": "class-cake.mailer.mailer.html#getBody()", "Mailer::getCc()()": "class-cake.mailer.mailer.html#getCc()", "Mailer::getCharset()()": "class-cake.mailer.mailer.html#getCharset()", "Mailer::getConfig()()": "class-cake.mailer.mailer.html#getConfig()", "Mailer::getConfigOrFail()()": "class-cake.mailer.mailer.html#getConfigOrFail()", "Mailer::getDomain()()": "class-cake.mailer.mailer.html#getDomain()", "Mailer::getDsnClassMap()()": "class-cake.mailer.mailer.html#getDsnClassMap()", "Mailer::getEmailFormat()()": "class-cake.mailer.mailer.html#getEmailFormat()", "Mailer::getFrom()()": "class-cake.mailer.mailer.html#getFrom()", "Mailer::getHeaderCharset()()": "class-cake.mailer.mailer.html#getHeaderCharset()", "Mailer::getHeaders()()": "class-cake.mailer.mailer.html#getHeaders()", "Mailer::getMessage()()": "class-cake.mailer.mailer.html#getMessage()", "Mailer::getMessageId()()": "class-cake.mailer.mailer.html#getMessageId()", "Mailer::getModelType()()": "class-cake.mailer.mailer.html#getModelType()", "Mailer::getReadReceipt()()": "class-cake.mailer.mailer.html#getReadReceipt()", "Mailer::getRenderer()()": "class-cake.mailer.mailer.html#getRenderer()", "Mailer::getReplyTo()()": "class-cake.mailer.mailer.html#getReplyTo()", "Mailer::getReturnPath()()": "class-cake.mailer.mailer.html#getReturnPath()", "Mailer::getSender()()": "class-cake.mailer.mailer.html#getSender()", "Mailer::getSubject()()": "class-cake.mailer.mailer.html#getSubject()", "Mailer::getTableLocator()()": "class-cake.mailer.mailer.html#getTableLocator()", "Mailer::getTo()()": "class-cake.mailer.mailer.html#getTo()", "Mailer::getTransport()()": "class-cake.mailer.mailer.html#getTransport()", "Mailer::implementedEvents()()": "class-cake.mailer.mailer.html#implementedEvents()", "Mailer::loadModel()()": "class-cake.mailer.mailer.html#loadModel()", "Mailer::logDelivery()()": "class-cake.mailer.mailer.html#logDelivery()", "Mailer::modelFactory()()": "class-cake.mailer.mailer.html#modelFactory()", "Mailer::parseDsn()()": "class-cake.mailer.mailer.html#parseDsn()", "Mailer::render()()": "class-cake.mailer.mailer.html#render()", "Mailer::reset()()": "class-cake.mailer.mailer.html#reset()", "Mailer::restore()()": "class-cake.mailer.mailer.html#restore()", "Mailer::send()()": "class-cake.mailer.mailer.html#send()", "Mailer::set()()": "class-cake.mailer.mailer.html#set()", "Mailer::setAttachments()()": "class-cake.mailer.mailer.html#setAttachments()", "Mailer::setBcc()()": "class-cake.mailer.mailer.html#setBcc()", "Mailer::setCc()()": "class-cake.mailer.mailer.html#setCc()", "Mailer::setCharset()()": "class-cake.mailer.mailer.html#setCharset()", "Mailer::setConfig()()": "class-cake.mailer.mailer.html#setConfig()", "Mailer::setDomain()()": "class-cake.mailer.mailer.html#setDomain()", "Mailer::setDsnClassMap()()": "class-cake.mailer.mailer.html#setDsnClassMap()", "Mailer::setEmailFormat()()": "class-cake.mailer.mailer.html#setEmailFormat()", "Mailer::setFrom()()": "class-cake.mailer.mailer.html#setFrom()", "Mailer::setHeaderCharset()()": "class-cake.mailer.mailer.html#setHeaderCharset()", "Mailer::setHeaders()()": "class-cake.mailer.mailer.html#setHeaders()", "Mailer::setLogConfig()()": "class-cake.mailer.mailer.html#setLogConfig()", "Mailer::setMessage()()": "class-cake.mailer.mailer.html#setMessage()", "Mailer::setMessageId()()": "class-cake.mailer.mailer.html#setMessageId()", "Mailer::setModelType()()": "class-cake.mailer.mailer.html#setModelType()", "Mailer::setProfile()()": "class-cake.mailer.mailer.html#setProfile()", "Mailer::setReadReceipt()()": "class-cake.mailer.mailer.html#setReadReceipt()", "Mailer::setRenderer()()": "class-cake.mailer.mailer.html#setRenderer()", "Mailer::setReplyTo()()": "class-cake.mailer.mailer.html#setReplyTo()", "Mailer::setReturnPath()()": "class-cake.mailer.mailer.html#setReturnPath()", "Mailer::setSender()()": "class-cake.mailer.mailer.html#setSender()", "Mailer::setSubject()()": "class-cake.mailer.mailer.html#setSubject()", "Mailer::setTableLocator()()": "class-cake.mailer.mailer.html#setTableLocator()", "Mailer::setTo()()": "class-cake.mailer.mailer.html#setTo()", "Mailer::setTransport()()": "class-cake.mailer.mailer.html#setTransport()", "Mailer::setViewVars()()": "class-cake.mailer.mailer.html#setViewVars()", "Mailer::viewBuilder()()": "class-cake.mailer.mailer.html#viewBuilder()", "Mailer\\Exception (namespace)": "namespace-cake.mailer.exception.html", "Mailer\\Transport (namespace)": "namespace-cake.mailer.transport.html", "MailerAwareTrait (trait)": "trait-cake.mailer.mailerawaretrait.html", "MailSentFrom (class)": "class-cake.testsuite.constraint.email.mailsentfrom.html", "MailSentFrom::$at": "class-cake.testsuite.constraint.email.mailsentfrom.html#$at", "MailSentFrom::$method": "class-cake.testsuite.constraint.email.mailsentfrom.html#$method", "MailSentFrom::__construct()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#__construct()", "MailSentFrom::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#additionalFailureDescription()", "MailSentFrom::count()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#count()", "MailSentFrom::evaluate()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#evaluate()", "MailSentFrom::exporter()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#exporter()", "MailSentFrom::fail()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#fail()", "MailSentFrom::failureDescription()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#failureDescription()", "MailSentFrom::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#failureDescriptionInContext()", "MailSentFrom::getMessages()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#getMessages()", "MailSentFrom::matches()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#matches()", "MailSentFrom::reduce()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#reduce()", "MailSentFrom::toString()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#toString()", "MailSentFrom::toStringInContext()()": "class-cake.testsuite.constraint.email.mailsentfrom.html#toStringInContext()", "MailSentTo (class)": "class-cake.testsuite.constraint.email.mailsentto.html", "MailSentTo::$at": "class-cake.testsuite.constraint.email.mailsentto.html#$at", "MailSentTo::$method": "class-cake.testsuite.constraint.email.mailsentto.html#$method", "MailSentTo::__construct()()": "class-cake.testsuite.constraint.email.mailsentto.html#__construct()", "MailSentTo::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailsentto.html#additionalFailureDescription()", "MailSentTo::count()()": "class-cake.testsuite.constraint.email.mailsentto.html#count()", "MailSentTo::evaluate()()": "class-cake.testsuite.constraint.email.mailsentto.html#evaluate()", "MailSentTo::exporter()()": "class-cake.testsuite.constraint.email.mailsentto.html#exporter()", "MailSentTo::fail()()": "class-cake.testsuite.constraint.email.mailsentto.html#fail()", "MailSentTo::failureDescription()()": "class-cake.testsuite.constraint.email.mailsentto.html#failureDescription()", "MailSentTo::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailsentto.html#failureDescriptionInContext()", "MailSentTo::getMessages()()": "class-cake.testsuite.constraint.email.mailsentto.html#getMessages()", "MailSentTo::matches()()": "class-cake.testsuite.constraint.email.mailsentto.html#matches()", "MailSentTo::reduce()()": "class-cake.testsuite.constraint.email.mailsentto.html#reduce()", "MailSentTo::toString()()": "class-cake.testsuite.constraint.email.mailsentto.html#toString()", "MailSentTo::toStringInContext()()": "class-cake.testsuite.constraint.email.mailsentto.html#toStringInContext()", "MailSentWith (class)": "class-cake.testsuite.constraint.email.mailsentwith.html", "MailSentWith::$at": "class-cake.testsuite.constraint.email.mailsentwith.html#$at", "MailSentWith::$method": "class-cake.testsuite.constraint.email.mailsentwith.html#$method", "MailSentWith::__construct()()": "class-cake.testsuite.constraint.email.mailsentwith.html#__construct()", "MailSentWith::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailsentwith.html#additionalFailureDescription()", "MailSentWith::count()()": "class-cake.testsuite.constraint.email.mailsentwith.html#count()", "MailSentWith::evaluate()()": "class-cake.testsuite.constraint.email.mailsentwith.html#evaluate()", "MailSentWith::exporter()()": "class-cake.testsuite.constraint.email.mailsentwith.html#exporter()", "MailSentWith::fail()()": "class-cake.testsuite.constraint.email.mailsentwith.html#fail()", "MailSentWith::failureDescription()()": "class-cake.testsuite.constraint.email.mailsentwith.html#failureDescription()", "MailSentWith::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailsentwith.html#failureDescriptionInContext()", "MailSentWith::getMessages()()": "class-cake.testsuite.constraint.email.mailsentwith.html#getMessages()", "MailSentWith::matches()()": "class-cake.testsuite.constraint.email.mailsentwith.html#matches()", "MailSentWith::reduce()()": "class-cake.testsuite.constraint.email.mailsentwith.html#reduce()", "MailSentWith::toString()()": "class-cake.testsuite.constraint.email.mailsentwith.html#toString()", "MailSentWith::toStringInContext()()": "class-cake.testsuite.constraint.email.mailsentwith.html#toStringInContext()", "MailSubjectContains (class)": "class-cake.testsuite.constraint.email.mailsubjectcontains.html", "MailSubjectContains::$at": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#$at", "MailSubjectContains::__construct()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#__construct()", "MailSubjectContains::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#additionalFailureDescription()", "MailSubjectContains::count()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#count()", "MailSubjectContains::evaluate()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#evaluate()", "MailSubjectContains::exporter()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#exporter()", "MailSubjectContains::fail()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#fail()", "MailSubjectContains::failureDescription()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#failureDescription()", "MailSubjectContains::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#failureDescriptionInContext()", "MailSubjectContains::getAssertedMessages()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#getAssertedMessages()", "MailSubjectContains::getMessages()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#getMessages()", "MailSubjectContains::matches()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#matches()", "MailSubjectContains::reduce()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#reduce()", "MailSubjectContains::toString()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#toString()", "MailSubjectContains::toStringInContext()()": "class-cake.testsuite.constraint.email.mailsubjectcontains.html#toStringInContext()", "MailTransport (class)": "class-cake.mailer.transport.mailtransport.html", "MailTransport::$_config": "class-cake.mailer.transport.mailtransport.html#$_config", "MailTransport::$_configInitialized": "class-cake.mailer.transport.mailtransport.html#$_configInitialized", "MailTransport::$_defaultConfig": "class-cake.mailer.transport.mailtransport.html#$_defaultConfig", "MailTransport::__construct()()": "class-cake.mailer.transport.mailtransport.html#__construct()", "MailTransport::_configDelete()()": "class-cake.mailer.transport.mailtransport.html#_configDelete()", "MailTransport::_configRead()()": "class-cake.mailer.transport.mailtransport.html#_configRead()", "MailTransport::_configWrite()()": "class-cake.mailer.transport.mailtransport.html#_configWrite()", "MailTransport::_mail()()": "class-cake.mailer.transport.mailtransport.html#_mail()", "MailTransport::checkRecipient()()": "class-cake.mailer.transport.mailtransport.html#checkRecipient()", "MailTransport::configShallow()()": "class-cake.mailer.transport.mailtransport.html#configShallow()", "MailTransport::getConfig()()": "class-cake.mailer.transport.mailtransport.html#getConfig()", "MailTransport::getConfigOrFail()()": "class-cake.mailer.transport.mailtransport.html#getConfigOrFail()", "MailTransport::send()()": "class-cake.mailer.transport.mailtransport.html#send()", "MailTransport::setConfig()()": "class-cake.mailer.transport.mailtransport.html#setConfig()", "MapReduce (class)": "class-cake.collection.iterator.mapreduce.html", "MapReduce::$_counter": "class-cake.collection.iterator.mapreduce.html#$_counter", "MapReduce::$_data": "class-cake.collection.iterator.mapreduce.html#$_data", "MapReduce::$_executed": "class-cake.collection.iterator.mapreduce.html#$_executed", "MapReduce::$_intermediate": "class-cake.collection.iterator.mapreduce.html#$_intermediate", "MapReduce::$_mapper": "class-cake.collection.iterator.mapreduce.html#$_mapper", "MapReduce::$_reducer": "class-cake.collection.iterator.mapreduce.html#$_reducer", "MapReduce::$_result": "class-cake.collection.iterator.mapreduce.html#$_result", "MapReduce::__construct()()": "class-cake.collection.iterator.mapreduce.html#__construct()", "MapReduce::_execute()()": "class-cake.collection.iterator.mapreduce.html#_execute()", "MapReduce::emit()()": "class-cake.collection.iterator.mapreduce.html#emit()", "MapReduce::emitIntermediate()()": "class-cake.collection.iterator.mapreduce.html#emitIntermediate()", "MapReduce::getIterator()()": "class-cake.collection.iterator.mapreduce.html#getIterator()", "Marshaller (class)": "class-cake.orm.marshaller.html", "Marshaller::$_table": "class-cake.orm.marshaller.html#$_table", "Marshaller::__construct()()": "class-cake.orm.marshaller.html#__construct()", "Marshaller::_belongsToMany()()": "class-cake.orm.marshaller.html#_belongsToMany()", "Marshaller::_buildPropertyMap()()": "class-cake.orm.marshaller.html#_buildPropertyMap()", "Marshaller::_loadAssociatedByIds()()": "class-cake.orm.marshaller.html#_loadAssociatedByIds()", "Marshaller::_marshalAssociation()()": "class-cake.orm.marshaller.html#_marshalAssociation()", "Marshaller::_mergeAssociation()()": "class-cake.orm.marshaller.html#_mergeAssociation()", "Marshaller::_mergeBelongsToMany()()": "class-cake.orm.marshaller.html#_mergeBelongsToMany()", "Marshaller::_mergeJoinData()()": "class-cake.orm.marshaller.html#_mergeJoinData()", "Marshaller::_normalizeAssociations()()": "class-cake.orm.marshaller.html#_normalizeAssociations()", "Marshaller::_prepareDataAndOptions()()": "class-cake.orm.marshaller.html#_prepareDataAndOptions()", "Marshaller::_validate()()": "class-cake.orm.marshaller.html#_validate()", "Marshaller::dispatchAfterMarshal()()": "class-cake.orm.marshaller.html#dispatchAfterMarshal()", "Marshaller::many()()": "class-cake.orm.marshaller.html#many()", "Marshaller::merge()()": "class-cake.orm.marshaller.html#merge()", "Marshaller::mergeMany()()": "class-cake.orm.marshaller.html#mergeMany()", "Marshaller::one()()": "class-cake.orm.marshaller.html#one()", "MemcachedEngine (class)": "class-cake.cache.engine.memcachedengine.html", "MemcachedEngine::$_compiledGroupNames": "class-cake.cache.engine.memcachedengine.html#$_compiledGroupNames", "MemcachedEngine::$_config": "class-cake.cache.engine.memcachedengine.html#$_config", "MemcachedEngine::$_configInitialized": "class-cake.cache.engine.memcachedengine.html#$_configInitialized", "MemcachedEngine::$_defaultConfig": "class-cake.cache.engine.memcachedengine.html#$_defaultConfig", "MemcachedEngine::$_groupPrefix": "class-cake.cache.engine.memcachedengine.html#$_groupPrefix", "MemcachedEngine::$_Memcached": "class-cake.cache.engine.memcachedengine.html#$_Memcached", "MemcachedEngine::$_serializers": "class-cake.cache.engine.memcachedengine.html#$_serializers", "MemcachedEngine::_configDelete()()": "class-cake.cache.engine.memcachedengine.html#_configDelete()", "MemcachedEngine::_configRead()()": "class-cake.cache.engine.memcachedengine.html#_configRead()", "MemcachedEngine::_configWrite()()": "class-cake.cache.engine.memcachedengine.html#_configWrite()", "MemcachedEngine::_key()()": "class-cake.cache.engine.memcachedengine.html#_key()", "MemcachedEngine::_setOptions()()": "class-cake.cache.engine.memcachedengine.html#_setOptions()", "MemcachedEngine::add()()": "class-cake.cache.engine.memcachedengine.html#add()", "MemcachedEngine::clear()()": "class-cake.cache.engine.memcachedengine.html#clear()", "MemcachedEngine::clearGroup()()": "class-cake.cache.engine.memcachedengine.html#clearGroup()", "MemcachedEngine::configShallow()()": "class-cake.cache.engine.memcachedengine.html#configShallow()", "MemcachedEngine::decrement()()": "class-cake.cache.engine.memcachedengine.html#decrement()", "MemcachedEngine::delete()()": "class-cake.cache.engine.memcachedengine.html#delete()", "MemcachedEngine::deleteMultiple()()": "class-cake.cache.engine.memcachedengine.html#deleteMultiple()", "MemcachedEngine::duration()()": "class-cake.cache.engine.memcachedengine.html#duration()", "MemcachedEngine::ensureValidKey()()": "class-cake.cache.engine.memcachedengine.html#ensureValidKey()", "MemcachedEngine::ensureValidType()()": "class-cake.cache.engine.memcachedengine.html#ensureValidType()", "MemcachedEngine::get()()": "class-cake.cache.engine.memcachedengine.html#get()", "MemcachedEngine::getConfig()()": "class-cake.cache.engine.memcachedengine.html#getConfig()", "MemcachedEngine::getConfigOrFail()()": "class-cake.cache.engine.memcachedengine.html#getConfigOrFail()", "MemcachedEngine::getMultiple()()": "class-cake.cache.engine.memcachedengine.html#getMultiple()", "MemcachedEngine::getOption()()": "class-cake.cache.engine.memcachedengine.html#getOption()", "MemcachedEngine::groups()()": "class-cake.cache.engine.memcachedengine.html#groups()", "MemcachedEngine::has()()": "class-cake.cache.engine.memcachedengine.html#has()", "MemcachedEngine::increment()()": "class-cake.cache.engine.memcachedengine.html#increment()", "MemcachedEngine::init()()": "class-cake.cache.engine.memcachedengine.html#init()", "MemcachedEngine::parseServerString()()": "class-cake.cache.engine.memcachedengine.html#parseServerString()", "MemcachedEngine::set()()": "class-cake.cache.engine.memcachedengine.html#set()", "MemcachedEngine::setConfig()()": "class-cake.cache.engine.memcachedengine.html#setConfig()", "MemcachedEngine::setMultiple()()": "class-cake.cache.engine.memcachedengine.html#setMultiple()", "MemcachedEngine::warning()()": "class-cake.cache.engine.memcachedengine.html#warning()", "MemoryStorage (class)": "class-cake.auth.storage.memorystorage.html", "MemoryStorage::$_redirectUrl": "class-cake.auth.storage.memorystorage.html#$_redirectUrl", "MemoryStorage::$_user": "class-cake.auth.storage.memorystorage.html#$_user", "MemoryStorage::delete()()": "class-cake.auth.storage.memorystorage.html#delete()", "MemoryStorage::read()()": "class-cake.auth.storage.memorystorage.html#read()", "MemoryStorage::redirectUrl()()": "class-cake.auth.storage.memorystorage.html#redirectUrl()", "MemoryStorage::write()()": "class-cake.auth.storage.memorystorage.html#write()", "MergeVariablesTrait (trait)": "trait-cake.utility.mergevariablestrait.html", "Message (class)": "class-cake.http.client.message.html", "Message::$_cookies": "class-cake.http.client.message.html#$_cookies", "Message::$appCharset": "class-cake.mailer.message.html#$appCharset", "Message::$attachments": "class-cake.mailer.message.html#$attachments", "Message::$bcc": "class-cake.mailer.message.html#$bcc", "Message::$boundary": "class-cake.mailer.message.html#$boundary", "Message::$cc": "class-cake.mailer.message.html#$cc", "Message::$charset": "class-cake.mailer.message.html#$charset", "Message::$charset8bit": "class-cake.mailer.message.html#$charset8bit", "Message::$contentTypeCharset": "class-cake.mailer.message.html#$contentTypeCharset", "Message::$domain": "class-cake.mailer.message.html#$domain", "Message::$emailFormat": "class-cake.mailer.message.html#$emailFormat", "Message::$emailFormatAvailable": "class-cake.mailer.message.html#$emailFormatAvailable", "Message::$emailPattern": "class-cake.mailer.message.html#$emailPattern", "Message::$from": "class-cake.mailer.message.html#$from", "Message::$headerCharset": "class-cake.mailer.message.html#$headerCharset", "Message::$headers": "class-cake.mailer.message.html#$headers", "Message::$htmlMessage": "class-cake.mailer.message.html#$htmlMessage", "Message::$message": "class-cake.mailer.message.html#$message", "Message::$messageId": "class-cake.mailer.message.html#$messageId", "Message::$priority": "class-cake.mailer.message.html#$priority", "Message::$readReceipt": "class-cake.mailer.message.html#$readReceipt", "Message::$replyTo": "class-cake.mailer.message.html#$replyTo", "Message::$returnPath": "class-cake.mailer.message.html#$returnPath", "Message::$sender": "class-cake.mailer.message.html#$sender", "Message::$subject": "class-cake.mailer.message.html#$subject", "Message::$textMessage": "class-cake.mailer.message.html#$textMessage", "Message::$to": "class-cake.mailer.message.html#$to", "Message::$transferEncoding": "class-cake.mailer.message.html#$transferEncoding", "Message::$transferEncodingAvailable": "class-cake.mailer.message.html#$transferEncodingAvailable", "Message::__construct()()": "class-cake.mailer.message.html#__construct()", "Message::__serialize()()": "class-cake.mailer.message.html#__serialize()", "Message::__unserialize()()": "class-cake.mailer.message.html#__unserialize()", "Message::addAttachments()()": "class-cake.mailer.message.html#addAttachments()", "Message::addBcc()()": "class-cake.mailer.message.html#addBcc()", "Message::addCc()()": "class-cake.mailer.message.html#addCc()", "Message::addEmail()()": "class-cake.mailer.message.html#addEmail()", "Message::addHeaders()()": "class-cake.mailer.message.html#addHeaders()", "Message::addReplyTo()()": "class-cake.mailer.message.html#addReplyTo()", "Message::addTo()()": "class-cake.mailer.message.html#addTo()", "Message::attachFiles()()": "class-cake.mailer.message.html#attachFiles()", "Message::attachInlineFiles()()": "class-cake.mailer.message.html#attachInlineFiles()", "Message::cookies()()": "class-cake.http.client.message.html#cookies()", "Message::createBoundary()()": "class-cake.mailer.message.html#createBoundary()", "Message::createFromArray()()": "class-cake.mailer.message.html#createFromArray()", "Message::decodeForHeader()()": "class-cake.mailer.message.html#decodeForHeader()", "Message::encodeForHeader()()": "class-cake.mailer.message.html#encodeForHeader()", "Message::encodeString()()": "class-cake.mailer.message.html#encodeString()", "Message::formatAddress()()": "class-cake.mailer.message.html#formatAddress()", "Message::generateMessage()()": "class-cake.mailer.message.html#generateMessage()", "Message::getAttachments()()": "class-cake.mailer.message.html#getAttachments()", "Message::getBcc()()": "class-cake.mailer.message.html#getBcc()", "Message::getBody()()": "class-cake.mailer.message.html#getBody()", "Message::getBodyHtml()()": "class-cake.mailer.message.html#getBodyHtml()", "Message::getBodyString()()": "class-cake.mailer.message.html#getBodyString()", "Message::getBodyText()()": "class-cake.mailer.message.html#getBodyText()", "Message::getBodyTypes()()": "class-cake.mailer.message.html#getBodyTypes()", "Message::getCc()()": "class-cake.mailer.message.html#getCc()", "Message::getCharset()()": "class-cake.mailer.message.html#getCharset()", "Message::getContentTransferEncoding()()": "class-cake.mailer.message.html#getContentTransferEncoding()", "Message::getContentTypeCharset()()": "class-cake.mailer.message.html#getContentTypeCharset()", "Message::getDomain()()": "class-cake.mailer.message.html#getDomain()", "Message::getEmailFormat()()": "class-cake.mailer.message.html#getEmailFormat()", "Message::getEmailPattern()()": "class-cake.mailer.message.html#getEmailPattern()", "Message::getFrom()()": "class-cake.mailer.message.html#getFrom()", "Message::getHeaderCharset()()": "class-cake.mailer.message.html#getHeaderCharset()", "Message::getHeaders()()": "class-cake.mailer.message.html#getHeaders()", "Message::getHeadersString()()": "class-cake.mailer.message.html#getHeadersString()", "Message::getMessageId()()": "class-cake.mailer.message.html#getMessageId()", "Message::getOriginalSubject()()": "class-cake.mailer.message.html#getOriginalSubject()", "Message::getPriority()()": "class-cake.mailer.message.html#getPriority()", "Message::getReadReceipt()()": "class-cake.mailer.message.html#getReadReceipt()", "Message::getReplyTo()()": "class-cake.mailer.message.html#getReplyTo()", "Message::getReturnPath()()": "class-cake.mailer.message.html#getReturnPath()", "Message::getSender()()": "class-cake.mailer.message.html#getSender()", "Message::getSubject()()": "class-cake.mailer.message.html#getSubject()", "Message::getTo()()": "class-cake.mailer.message.html#getTo()", "Message::getTransferEncoding()()": "class-cake.mailer.message.html#getTransferEncoding()", "Message::jsonSerialize()()": "class-cake.mailer.message.html#jsonSerialize()", "Message::readFile()()": "class-cake.mailer.message.html#readFile()", "Message::reset()()": "class-cake.mailer.message.html#reset()", "Message::serialize()()": "class-cake.mailer.message.html#serialize()", "Message::setAttachments()()": "class-cake.mailer.message.html#setAttachments()", "Message::setBcc()()": "class-cake.mailer.message.html#setBcc()", "Message::setBody()()": "class-cake.mailer.message.html#setBody()", "Message::setBodyHtml()()": "class-cake.mailer.message.html#setBodyHtml()", "Message::setBodyText()()": "class-cake.mailer.message.html#setBodyText()", "Message::setCc()()": "class-cake.mailer.message.html#setCc()", "Message::setCharset()()": "class-cake.mailer.message.html#setCharset()", "Message::setConfig()()": "class-cake.mailer.message.html#setConfig()", "Message::setDomain()()": "class-cake.mailer.message.html#setDomain()", "Message::setEmail()()": "class-cake.mailer.message.html#setEmail()", "Message::setEmailFormat()()": "class-cake.mailer.message.html#setEmailFormat()", "Message::setEmailPattern()()": "class-cake.mailer.message.html#setEmailPattern()", "Message::setEmailSingle()()": "class-cake.mailer.message.html#setEmailSingle()", "Message::setFrom()()": "class-cake.mailer.message.html#setFrom()", "Message::setHeaderCharset()()": "class-cake.mailer.message.html#setHeaderCharset()", "Message::setHeaders()()": "class-cake.mailer.message.html#setHeaders()", "Message::setMessageId()()": "class-cake.mailer.message.html#setMessageId()", "Message::setPriority()()": "class-cake.mailer.message.html#setPriority()", "Message::setReadReceipt()()": "class-cake.mailer.message.html#setReadReceipt()", "Message::setReplyTo()()": "class-cake.mailer.message.html#setReplyTo()", "Message::setReturnPath()()": "class-cake.mailer.message.html#setReturnPath()", "Message::setSender()()": "class-cake.mailer.message.html#setSender()", "Message::setSubject()()": "class-cake.mailer.message.html#setSubject()", "Message::setTo()()": "class-cake.mailer.message.html#setTo()", "Message::setTransferEncoding()()": "class-cake.mailer.message.html#setTransferEncoding()", "Message::unserialize()()": "class-cake.mailer.message.html#unserialize()", "Message::validateEmail()()": "class-cake.mailer.message.html#validateEmail()", "Message::wrap()()": "class-cake.mailer.message.html#wrap()", "MessagesFileLoader (class)": "class-cake.i18n.messagesfileloader.html", "MessagesFileLoader::$_extension": "class-cake.i18n.messagesfileloader.html#$_extension", "MessagesFileLoader::$_locale": "class-cake.i18n.messagesfileloader.html#$_locale", "MessagesFileLoader::$_name": "class-cake.i18n.messagesfileloader.html#$_name", "MessagesFileLoader::__construct()()": "class-cake.i18n.messagesfileloader.html#__construct()", "MessagesFileLoader::__invoke()()": "class-cake.i18n.messagesfileloader.html#__invoke()", "MessagesFileLoader::translationsFolders()()": "class-cake.i18n.messagesfileloader.html#translationsFolders()", "MethodNotAllowedException (class)": "class-cake.http.exception.methodnotallowedexception.html", "MiddlewareApplication (class)": "class-cake.http.middlewareapplication.html", "MiddlewareApplication::bootstrap()()": "class-cake.http.middlewareapplication.html#bootstrap()", "MiddlewareApplication::handle()()": "class-cake.http.middlewareapplication.html#handle()", "MiddlewareApplication::middleware()()": "class-cake.http.middlewareapplication.html#middleware()", "MiddlewareDispatcher (class)": "class-cake.testsuite.middlewaredispatcher.html", "MiddlewareDispatcher::$app": "class-cake.testsuite.middlewaredispatcher.html#$app", "MiddlewareDispatcher::__construct()()": "class-cake.testsuite.middlewaredispatcher.html#__construct()", "MiddlewareDispatcher::_createRequest()()": "class-cake.testsuite.middlewaredispatcher.html#_createRequest()", "MiddlewareDispatcher::execute()()": "class-cake.testsuite.middlewaredispatcher.html#execute()", "MiddlewareDispatcher::resolveRoute()()": "class-cake.testsuite.middlewaredispatcher.html#resolveRoute()", "MiddlewareDispatcher::resolveUrl()()": "class-cake.testsuite.middlewaredispatcher.html#resolveUrl()", "MiddlewareQueue (class)": "class-cake.http.middlewarequeue.html", "MiddlewareQueue::$position": "class-cake.http.middlewarequeue.html#$position", "MiddlewareQueue::$queue": "class-cake.http.middlewarequeue.html#$queue", "MiddlewareQueue::__construct()()": "class-cake.http.middlewarequeue.html#__construct()", "MiddlewareQueue::add()()": "class-cake.http.middlewarequeue.html#add()", "MiddlewareQueue::count()()": "class-cake.http.middlewarequeue.html#count()", "MiddlewareQueue::current()()": "class-cake.http.middlewarequeue.html#current()", "MiddlewareQueue::insertAfter()()": "class-cake.http.middlewarequeue.html#insertAfter()", "MiddlewareQueue::insertAt()()": "class-cake.http.middlewarequeue.html#insertAt()", "MiddlewareQueue::insertBefore()()": "class-cake.http.middlewarequeue.html#insertBefore()", "MiddlewareQueue::key()()": "class-cake.http.middlewarequeue.html#key()", "MiddlewareQueue::next()()": "class-cake.http.middlewarequeue.html#next()", "MiddlewareQueue::prepend()()": "class-cake.http.middlewarequeue.html#prepend()", "MiddlewareQueue::push()()": "class-cake.http.middlewarequeue.html#push()", "MiddlewareQueue::resolve()()": "class-cake.http.middlewarequeue.html#resolve()", "MiddlewareQueue::rewind()()": "class-cake.http.middlewarequeue.html#rewind()", "MiddlewareQueue::seek()()": "class-cake.http.middlewarequeue.html#seek()", "MiddlewareQueue::valid()()": "class-cake.http.middlewarequeue.html#valid()", "MissingActionException (class)": "class-cake.controller.exception.missingactionexception.html", "MissingBehaviorException (class)": "class-cake.orm.exception.missingbehaviorexception.html", "MissingCellException (class)": "class-cake.view.exception.missingcellexception.html", "MissingCellTemplateException (class)": "class-cake.view.exception.missingcelltemplateexception.html", "MissingComponentException (class)": "class-cake.controller.exception.missingcomponentexception.html", "MissingConnectionException (class)": "class-cake.database.exception.missingconnectionexception.html", "MissingConsoleInputException (class)": "class-cake.console.testsuite.missingconsoleinputexception.html", "MissingControllerException (class)": "class-cake.http.exception.missingcontrollerexception.html", "MissingDatasourceConfigException (class)": "class-cake.datasource.exception.missingdatasourceconfigexception.html", "MissingDatasourceException (class)": "class-cake.datasource.exception.missingdatasourceexception.html", "MissingDispatcherFilterException (class)": "class-cake.routing.exception.missingdispatcherfilterexception.html", "MissingDriverException (class)": "class-cake.database.exception.missingdriverexception.html", "MissingElementException (class)": "class-cake.view.exception.missingelementexception.html", "MissingEntityException (class)": "class-cake.orm.exception.missingentityexception.html", "MissingExtensionException (class)": "class-cake.database.exception.missingextensionexception.html", "MissingHelperException (class)": "class-cake.console.exception.missinghelperexception.html", "MissingLayoutException (class)": "class-cake.view.exception.missinglayoutexception.html", "MissingMailerException (class)": "class-cake.mailer.exception.missingmailerexception.html", "MissingModelException (class)": "class-cake.datasource.exception.missingmodelexception.html", "MissingOptionException (class)": "class-cake.console.exception.missingoptionexception.html", "MissingPluginException (class)": "class-cake.core.exception.missingpluginexception.html", "MissingResponseException (class)": "class-cake.http.client.exception.missingresponseexception.html", "MissingRouteException (class)": "class-cake.routing.exception.missingrouteexception.html", "MissingShellException (class)": "class-cake.console.exception.missingshellexception.html", "MissingShellMethodException (class)": "class-cake.console.exception.missingshellmethodexception.html", "MissingTableClassException (class)": "class-cake.orm.exception.missingtableclassexception.html", "MissingTaskException (class)": "class-cake.console.exception.missingtaskexception.html", "MissingTemplateException (class)": "class-cake.view.exception.missingtemplateexception.html", "MissingViewException (class)": "class-cake.view.exception.missingviewexception.html", "Mock (class)": "class-cake.http.client.adapter.mock.html", "Mock::$responses": "class-cake.http.client.adapter.mock.html#$responses", "Mock::addResponse()()": "class-cake.http.client.adapter.mock.html#addResponse()", "Mock::send()()": "class-cake.http.client.adapter.mock.html#send()", "Mock::urlMatches()()": "class-cake.http.client.adapter.mock.html#urlMatches()", "ModelAwareTrait (trait)": "trait-cake.datasource.modelawaretrait.html", "MoFileParser (class)": "class-cake.i18n.parser.mofileparser.html", "MoFileParser::_readLong()()": "class-cake.i18n.parser.mofileparser.html#_readLong()", "MoFileParser::parse()()": "class-cake.i18n.parser.mofileparser.html#parse()", "MultiCheckboxWidget (class)": "class-cake.view.widget.multicheckboxwidget.html", "MultiCheckboxWidget::$_idPrefix": "class-cake.view.widget.multicheckboxwidget.html#$_idPrefix", "MultiCheckboxWidget::$_idSuffixes": "class-cake.view.widget.multicheckboxwidget.html#$_idSuffixes", "MultiCheckboxWidget::$_label": "class-cake.view.widget.multicheckboxwidget.html#$_label", "MultiCheckboxWidget::$_templates": "class-cake.view.widget.multicheckboxwidget.html#$_templates", "MultiCheckboxWidget::$defaults": "class-cake.view.widget.multicheckboxwidget.html#$defaults", "MultiCheckboxWidget::__construct()()": "class-cake.view.widget.multicheckboxwidget.html#__construct()", "MultiCheckboxWidget::_clearIds()()": "class-cake.view.widget.multicheckboxwidget.html#_clearIds()", "MultiCheckboxWidget::_domId()()": "class-cake.view.widget.multicheckboxwidget.html#_domId()", "MultiCheckboxWidget::_id()()": "class-cake.view.widget.multicheckboxwidget.html#_id()", "MultiCheckboxWidget::_idSuffix()()": "class-cake.view.widget.multicheckboxwidget.html#_idSuffix()", "MultiCheckboxWidget::_isDisabled()()": "class-cake.view.widget.multicheckboxwidget.html#_isDisabled()", "MultiCheckboxWidget::_isSelected()()": "class-cake.view.widget.multicheckboxwidget.html#_isSelected()", "MultiCheckboxWidget::_renderInput()()": "class-cake.view.widget.multicheckboxwidget.html#_renderInput()", "MultiCheckboxWidget::_renderInputs()()": "class-cake.view.widget.multicheckboxwidget.html#_renderInputs()", "MultiCheckboxWidget::mergeDefaults()()": "class-cake.view.widget.multicheckboxwidget.html#mergeDefaults()", "MultiCheckboxWidget::render()()": "class-cake.view.widget.multicheckboxwidget.html#render()", "MultiCheckboxWidget::secureFields()()": "class-cake.view.widget.multicheckboxwidget.html#secureFields()", "MultiCheckboxWidget::setMaxLength()()": "class-cake.view.widget.multicheckboxwidget.html#setMaxLength()", "MultiCheckboxWidget::setRequired()()": "class-cake.view.widget.multicheckboxwidget.html#setRequired()", "MultiCheckboxWidget::setStep()()": "class-cake.view.widget.multicheckboxwidget.html#setStep()", "Mysql (class)": "class-cake.database.driver.mysql.html", "Mysql::$_autoQuoting": "class-cake.database.driver.mysql.html#$_autoQuoting", "Mysql::$_baseConfig": "class-cake.database.driver.mysql.html#$_baseConfig", "Mysql::$_config": "class-cake.database.driver.mysql.html#$_config", "Mysql::$_connection": "class-cake.database.driver.mysql.html#$_connection", "Mysql::$_endQuote": "class-cake.database.driver.mysql.html#$_endQuote", "Mysql::$_schemaDialect": "class-cake.database.driver.mysql.html#$_schemaDialect", "Mysql::$_startQuote": "class-cake.database.driver.mysql.html#$_startQuote", "Mysql::$_version": "class-cake.database.driver.mysql.html#$_version", "Mysql::$connectRetries": "class-cake.database.driver.mysql.html#$connectRetries", "Mysql::$featureVersions": "class-cake.database.driver.mysql.html#$featureVersions", "Mysql::$serverType": "class-cake.database.driver.mysql.html#$serverType", "Mysql::__construct()()": "class-cake.database.driver.mysql.html#__construct()", "Mysql::__debugInfo()()": "class-cake.database.driver.mysql.html#__debugInfo()", "Mysql::__destruct()()": "class-cake.database.driver.mysql.html#__destruct()", "Mysql::_connect()()": "class-cake.database.driver.mysql.html#_connect()", "Mysql::_deleteQueryTranslator()()": "class-cake.database.driver.mysql.html#_deleteQueryTranslator()", "Mysql::_expressionTranslators()()": "class-cake.database.driver.mysql.html#_expressionTranslators()", "Mysql::_insertQueryTranslator()()": "class-cake.database.driver.mysql.html#_insertQueryTranslator()", "Mysql::_removeAliasesFromConditions()()": "class-cake.database.driver.mysql.html#_removeAliasesFromConditions()", "Mysql::_selectQueryTranslator()()": "class-cake.database.driver.mysql.html#_selectQueryTranslator()", "Mysql::_transformDistinct()()": "class-cake.database.driver.mysql.html#_transformDistinct()", "Mysql::_updateQueryTranslator()()": "class-cake.database.driver.mysql.html#_updateQueryTranslator()", "Mysql::beginTransaction()()": "class-cake.database.driver.mysql.html#beginTransaction()", "Mysql::commitTransaction()()": "class-cake.database.driver.mysql.html#commitTransaction()", "Mysql::compileQuery()()": "class-cake.database.driver.mysql.html#compileQuery()", "Mysql::connect()()": "class-cake.database.driver.mysql.html#connect()", "Mysql::disableAutoQuoting()()": "class-cake.database.driver.mysql.html#disableAutoQuoting()", "Mysql::disableForeignKeySQL()()": "class-cake.database.driver.mysql.html#disableForeignKeySQL()", "Mysql::disconnect()()": "class-cake.database.driver.mysql.html#disconnect()", "Mysql::enableAutoQuoting()()": "class-cake.database.driver.mysql.html#enableAutoQuoting()", "Mysql::enabled()()": "class-cake.database.driver.mysql.html#enabled()", "Mysql::enableForeignKeySQL()()": "class-cake.database.driver.mysql.html#enableForeignKeySQL()", "Mysql::getConnection()()": "class-cake.database.driver.mysql.html#getConnection()", "Mysql::getConnectRetries()()": "class-cake.database.driver.mysql.html#getConnectRetries()", "Mysql::getMaxAliasLength()()": "class-cake.database.driver.mysql.html#getMaxAliasLength()", "Mysql::inTransaction()()": "class-cake.database.driver.mysql.html#inTransaction()", "Mysql::isAutoQuotingEnabled()()": "class-cake.database.driver.mysql.html#isAutoQuotingEnabled()", "Mysql::isConnected()()": "class-cake.database.driver.mysql.html#isConnected()", "Mysql::isMariadb()()": "class-cake.database.driver.mysql.html#isMariadb()", "Mysql::lastInsertId()()": "class-cake.database.driver.mysql.html#lastInsertId()", "Mysql::newCompiler()()": "class-cake.database.driver.mysql.html#newCompiler()", "Mysql::newTableSchema()()": "class-cake.database.driver.mysql.html#newTableSchema()", "Mysql::prepare()()": "class-cake.database.driver.mysql.html#prepare()", "Mysql::queryTranslator()()": "class-cake.database.driver.mysql.html#queryTranslator()", "Mysql::quote()()": "class-cake.database.driver.mysql.html#quote()", "Mysql::quoteIdentifier()()": "class-cake.database.driver.mysql.html#quoteIdentifier()", "Mysql::releaseSavePointSQL()()": "class-cake.database.driver.mysql.html#releaseSavePointSQL()", "Mysql::rollbackSavePointSQL()()": "class-cake.database.driver.mysql.html#rollbackSavePointSQL()", "Mysql::rollbackTransaction()()": "class-cake.database.driver.mysql.html#rollbackTransaction()", "Mysql::savePointSQL()()": "class-cake.database.driver.mysql.html#savePointSQL()", "Mysql::schema()()": "class-cake.database.driver.mysql.html#schema()", "Mysql::schemaDialect()()": "class-cake.database.driver.mysql.html#schemaDialect()", "Mysql::schemaValue()()": "class-cake.database.driver.mysql.html#schemaValue()", "Mysql::setConnection()()": "class-cake.database.driver.mysql.html#setConnection()", "Mysql::supports()()": "class-cake.database.driver.mysql.html#supports()", "Mysql::supportsCTEs()()": "class-cake.database.driver.mysql.html#supportsCTEs()", "Mysql::supportsDynamicConstraints()()": "class-cake.database.driver.mysql.html#supportsDynamicConstraints()", "Mysql::supportsNativeJson()()": "class-cake.database.driver.mysql.html#supportsNativeJson()", "Mysql::supportsQuoting()()": "class-cake.database.driver.mysql.html#supportsQuoting()", "Mysql::supportsSavePoints()()": "class-cake.database.driver.mysql.html#supportsSavePoints()", "Mysql::supportsWindowFunctions()()": "class-cake.database.driver.mysql.html#supportsWindowFunctions()", "Mysql::version()()": "class-cake.database.driver.mysql.html#version()", "MysqlSchemaDialect (class)": "class-cake.database.schema.mysqlschemadialect.html", "MysqlSchemaDialect::$_driver": "class-cake.database.schema.mysqlschemadialect.html#$_driver", "MysqlSchemaDialect::__construct()()": "class-cake.database.schema.mysqlschemadialect.html#__construct()", "MysqlSchemaDialect::_applyTypeSpecificColumnConversion()()": "class-cake.database.schema.mysqlschemadialect.html#_applyTypeSpecificColumnConversion()", "MysqlSchemaDialect::_convertColumn()()": "class-cake.database.schema.mysqlschemadialect.html#_convertColumn()", "MysqlSchemaDialect::_convertConstraintColumns()()": "class-cake.database.schema.mysqlschemadialect.html#_convertConstraintColumns()", "MysqlSchemaDialect::_convertOnClause()()": "class-cake.database.schema.mysqlschemadialect.html#_convertOnClause()", "MysqlSchemaDialect::_foreignOnClause()()": "class-cake.database.schema.mysqlschemadialect.html#_foreignOnClause()", "MysqlSchemaDialect::_getTypeSpecificColumnSql()()": "class-cake.database.schema.mysqlschemadialect.html#_getTypeSpecificColumnSql()", "MysqlSchemaDialect::_keySql()()": "class-cake.database.schema.mysqlschemadialect.html#_keySql()", "MysqlSchemaDialect::addConstraintSql()()": "class-cake.database.schema.mysqlschemadialect.html#addConstraintSql()", "MysqlSchemaDialect::columnSql()()": "class-cake.database.schema.mysqlschemadialect.html#columnSql()", "MysqlSchemaDialect::constraintSql()()": "class-cake.database.schema.mysqlschemadialect.html#constraintSql()", "MysqlSchemaDialect::convertColumnDescription()()": "class-cake.database.schema.mysqlschemadialect.html#convertColumnDescription()", "MysqlSchemaDialect::convertForeignKeyDescription()()": "class-cake.database.schema.mysqlschemadialect.html#convertForeignKeyDescription()", "MysqlSchemaDialect::convertIndexDescription()()": "class-cake.database.schema.mysqlschemadialect.html#convertIndexDescription()", "MysqlSchemaDialect::convertOptionsDescription()()": "class-cake.database.schema.mysqlschemadialect.html#convertOptionsDescription()", "MysqlSchemaDialect::createTableSql()()": "class-cake.database.schema.mysqlschemadialect.html#createTableSql()", "MysqlSchemaDialect::describeColumnSql()()": "class-cake.database.schema.mysqlschemadialect.html#describeColumnSql()", "MysqlSchemaDialect::describeForeignKeySql()()": "class-cake.database.schema.mysqlschemadialect.html#describeForeignKeySql()", "MysqlSchemaDialect::describeIndexSql()()": "class-cake.database.schema.mysqlschemadialect.html#describeIndexSql()", "MysqlSchemaDialect::describeOptionsSql()()": "class-cake.database.schema.mysqlschemadialect.html#describeOptionsSql()", "MysqlSchemaDialect::dropConstraintSql()()": "class-cake.database.schema.mysqlschemadialect.html#dropConstraintSql()", "MysqlSchemaDialect::dropTableSql()()": "class-cake.database.schema.mysqlschemadialect.html#dropTableSql()", "MysqlSchemaDialect::indexSql()()": "class-cake.database.schema.mysqlschemadialect.html#indexSql()", "MysqlSchemaDialect::listTablesSql()()": "class-cake.database.schema.mysqlschemadialect.html#listTablesSql()", "MysqlSchemaDialect::listTablesWithoutViewsSql()()": "class-cake.database.schema.mysqlschemadialect.html#listTablesWithoutViewsSql()", "MysqlSchemaDialect::truncateTableSql()()": "class-cake.database.schema.mysqlschemadialect.html#truncateTableSql()", "MysqlStatement (class)": "class-cake.database.statement.mysqlstatement.html", "MysqlStatement::$_bufferResults": "class-cake.database.statement.mysqlstatement.html#$_bufferResults", "MysqlStatement::$_driver": "class-cake.database.statement.mysqlstatement.html#$_driver", "MysqlStatement::$_hasExecuted": "class-cake.database.statement.mysqlstatement.html#$_hasExecuted", "MysqlStatement::$_statement": "class-cake.database.statement.mysqlstatement.html#$_statement", "MysqlStatement::$queryString": "class-cake.database.statement.mysqlstatement.html#$queryString", "MysqlStatement::__construct()()": "class-cake.database.statement.mysqlstatement.html#__construct()", "MysqlStatement::__get()()": "class-cake.database.statement.mysqlstatement.html#__get()", "MysqlStatement::bind()()": "class-cake.database.statement.mysqlstatement.html#bind()", "MysqlStatement::bindValue()()": "class-cake.database.statement.mysqlstatement.html#bindValue()", "MysqlStatement::bufferResults()()": "class-cake.database.statement.mysqlstatement.html#bufferResults()", "MysqlStatement::cast()()": "class-cake.database.statement.mysqlstatement.html#cast()", "MysqlStatement::closeCursor()()": "class-cake.database.statement.mysqlstatement.html#closeCursor()", "MysqlStatement::columnCount()()": "class-cake.database.statement.mysqlstatement.html#columnCount()", "MysqlStatement::count()()": "class-cake.database.statement.mysqlstatement.html#count()", "MysqlStatement::errorCode()()": "class-cake.database.statement.mysqlstatement.html#errorCode()", "MysqlStatement::errorInfo()()": "class-cake.database.statement.mysqlstatement.html#errorInfo()", "MysqlStatement::execute()()": "class-cake.database.statement.mysqlstatement.html#execute()", "MysqlStatement::fetch()()": "class-cake.database.statement.mysqlstatement.html#fetch()", "MysqlStatement::fetchAll()()": "class-cake.database.statement.mysqlstatement.html#fetchAll()", "MysqlStatement::fetchAssoc()()": "class-cake.database.statement.mysqlstatement.html#fetchAssoc()", "MysqlStatement::fetchColumn()()": "class-cake.database.statement.mysqlstatement.html#fetchColumn()", "MysqlStatement::getInnerStatement()()": "class-cake.database.statement.mysqlstatement.html#getInnerStatement()", "MysqlStatement::getIterator()()": "class-cake.database.statement.mysqlstatement.html#getIterator()", "MysqlStatement::lastInsertId()()": "class-cake.database.statement.mysqlstatement.html#lastInsertId()", "MysqlStatement::matchTypes()()": "class-cake.database.statement.mysqlstatement.html#matchTypes()", "MysqlStatement::rowCount()()": "class-cake.database.statement.mysqlstatement.html#rowCount()", "NegotiationRequiredView (class)": "class-cake.view.negotiationrequiredview.html", "NegotiationRequiredView::$_config": "class-cake.view.negotiationrequiredview.html#$_config", "NegotiationRequiredView::$_configInitialized": "class-cake.view.negotiationrequiredview.html#$_configInitialized", "NegotiationRequiredView::$_current": "class-cake.view.negotiationrequiredview.html#$_current", "NegotiationRequiredView::$_currentType": "class-cake.view.negotiationrequiredview.html#$_currentType", "NegotiationRequiredView::$_defaultConfig": "class-cake.view.negotiationrequiredview.html#$_defaultConfig", "NegotiationRequiredView::$_eventClass": "class-cake.view.negotiationrequiredview.html#$_eventClass", "NegotiationRequiredView::$_eventManager": "class-cake.view.negotiationrequiredview.html#$_eventManager", "NegotiationRequiredView::$_ext": "class-cake.view.negotiationrequiredview.html#$_ext", "NegotiationRequiredView::$_helpers": "class-cake.view.negotiationrequiredview.html#$_helpers", "NegotiationRequiredView::$_parents": "class-cake.view.negotiationrequiredview.html#$_parents", "NegotiationRequiredView::$_passedVars": "class-cake.view.negotiationrequiredview.html#$_passedVars", "NegotiationRequiredView::$_paths": "class-cake.view.negotiationrequiredview.html#$_paths", "NegotiationRequiredView::$_pathsForPlugin": "class-cake.view.negotiationrequiredview.html#$_pathsForPlugin", "NegotiationRequiredView::$_stack": "class-cake.view.negotiationrequiredview.html#$_stack", "NegotiationRequiredView::$_viewBlockClass": "class-cake.view.negotiationrequiredview.html#$_viewBlockClass", "NegotiationRequiredView::$autoLayout": "class-cake.view.negotiationrequiredview.html#$autoLayout", "NegotiationRequiredView::$Blocks": "class-cake.view.negotiationrequiredview.html#$Blocks", "NegotiationRequiredView::$Breadcrumbs": "class-cake.view.negotiationrequiredview.html#$Breadcrumbs", "NegotiationRequiredView::$elementCache": "class-cake.view.negotiationrequiredview.html#$elementCache", "NegotiationRequiredView::$Flash": "class-cake.view.negotiationrequiredview.html#$Flash", "NegotiationRequiredView::$Form": "class-cake.view.negotiationrequiredview.html#$Form", "NegotiationRequiredView::$helpers": "class-cake.view.negotiationrequiredview.html#$helpers", "NegotiationRequiredView::$Html": "class-cake.view.negotiationrequiredview.html#$Html", "NegotiationRequiredView::$layout": "class-cake.view.negotiationrequiredview.html#$layout", "NegotiationRequiredView::$layoutPath": "class-cake.view.negotiationrequiredview.html#$layoutPath", "NegotiationRequiredView::$name": "class-cake.view.negotiationrequiredview.html#$name", "NegotiationRequiredView::$Number": "class-cake.view.negotiationrequiredview.html#$Number", "NegotiationRequiredView::$Paginator": "class-cake.view.negotiationrequiredview.html#$Paginator", "NegotiationRequiredView::$plugin": "class-cake.view.negotiationrequiredview.html#$plugin", "NegotiationRequiredView::$request": "class-cake.view.negotiationrequiredview.html#$request", "NegotiationRequiredView::$response": "class-cake.view.negotiationrequiredview.html#$response", "NegotiationRequiredView::$subDir": "class-cake.view.negotiationrequiredview.html#$subDir", "NegotiationRequiredView::$template": "class-cake.view.negotiationrequiredview.html#$template", "NegotiationRequiredView::$templatePath": "class-cake.view.negotiationrequiredview.html#$templatePath", "NegotiationRequiredView::$Text": "class-cake.view.negotiationrequiredview.html#$Text", "NegotiationRequiredView::$theme": "class-cake.view.negotiationrequiredview.html#$theme", "NegotiationRequiredView::$Time": "class-cake.view.negotiationrequiredview.html#$Time", "NegotiationRequiredView::$Url": "class-cake.view.negotiationrequiredview.html#$Url", "NegotiationRequiredView::$viewVars": "class-cake.view.negotiationrequiredview.html#$viewVars", "NegotiationRequiredView::__construct()()": "class-cake.view.negotiationrequiredview.html#__construct()", "NegotiationRequiredView::__get()()": "class-cake.view.negotiationrequiredview.html#__get()", "NegotiationRequiredView::_checkFilePath()()": "class-cake.view.negotiationrequiredview.html#_checkFilePath()", "NegotiationRequiredView::_configDelete()()": "class-cake.view.negotiationrequiredview.html#_configDelete()", "NegotiationRequiredView::_configRead()()": "class-cake.view.negotiationrequiredview.html#_configRead()", "NegotiationRequiredView::_configWrite()()": "class-cake.view.negotiationrequiredview.html#_configWrite()", "NegotiationRequiredView::_createCell()()": "class-cake.view.negotiationrequiredview.html#_createCell()", "NegotiationRequiredView::_elementCache()()": "class-cake.view.negotiationrequiredview.html#_elementCache()", "NegotiationRequiredView::_evaluate()()": "class-cake.view.negotiationrequiredview.html#_evaluate()", "NegotiationRequiredView::_getElementFileName()()": "class-cake.view.negotiationrequiredview.html#_getElementFileName()", "NegotiationRequiredView::_getLayoutFileName()()": "class-cake.view.negotiationrequiredview.html#_getLayoutFileName()", "NegotiationRequiredView::_getSubPaths()()": "class-cake.view.negotiationrequiredview.html#_getSubPaths()", "NegotiationRequiredView::_getTemplateFileName()()": "class-cake.view.negotiationrequiredview.html#_getTemplateFileName()", "NegotiationRequiredView::_inflectTemplateFileName()()": "class-cake.view.negotiationrequiredview.html#_inflectTemplateFileName()", "NegotiationRequiredView::_paths()()": "class-cake.view.negotiationrequiredview.html#_paths()", "NegotiationRequiredView::_render()()": "class-cake.view.negotiationrequiredview.html#_render()", "NegotiationRequiredView::_renderElement()()": "class-cake.view.negotiationrequiredview.html#_renderElement()", "NegotiationRequiredView::append()()": "class-cake.view.negotiationrequiredview.html#append()", "NegotiationRequiredView::assign()()": "class-cake.view.negotiationrequiredview.html#assign()", "NegotiationRequiredView::blocks()()": "class-cake.view.negotiationrequiredview.html#blocks()", "NegotiationRequiredView::cache()()": "class-cake.view.negotiationrequiredview.html#cache()", "NegotiationRequiredView::cell()()": "class-cake.view.negotiationrequiredview.html#cell()", "NegotiationRequiredView::configShallow()()": "class-cake.view.negotiationrequiredview.html#configShallow()", "NegotiationRequiredView::contentType()()": "class-cake.view.negotiationrequiredview.html#contentType()", "NegotiationRequiredView::disableAutoLayout()()": "class-cake.view.negotiationrequiredview.html#disableAutoLayout()", "NegotiationRequiredView::dispatchEvent()()": "class-cake.view.negotiationrequiredview.html#dispatchEvent()", "NegotiationRequiredView::element()()": "class-cake.view.negotiationrequiredview.html#element()", "NegotiationRequiredView::elementExists()()": "class-cake.view.negotiationrequiredview.html#elementExists()", "NegotiationRequiredView::enableAutoLayout()()": "class-cake.view.negotiationrequiredview.html#enableAutoLayout()", "NegotiationRequiredView::end()()": "class-cake.view.negotiationrequiredview.html#end()", "NegotiationRequiredView::exists()()": "class-cake.view.negotiationrequiredview.html#exists()", "NegotiationRequiredView::extend()()": "class-cake.view.negotiationrequiredview.html#extend()", "NegotiationRequiredView::fetch()()": "class-cake.view.negotiationrequiredview.html#fetch()", "NegotiationRequiredView::get()()": "class-cake.view.negotiationrequiredview.html#get()", "NegotiationRequiredView::getConfig()()": "class-cake.view.negotiationrequiredview.html#getConfig()", "NegotiationRequiredView::getConfigOrFail()()": "class-cake.view.negotiationrequiredview.html#getConfigOrFail()", "NegotiationRequiredView::getCurrentType()()": "class-cake.view.negotiationrequiredview.html#getCurrentType()", "NegotiationRequiredView::getElementPaths()()": "class-cake.view.negotiationrequiredview.html#getElementPaths()", "NegotiationRequiredView::getEventManager()()": "class-cake.view.negotiationrequiredview.html#getEventManager()", "NegotiationRequiredView::getLayout()()": "class-cake.view.negotiationrequiredview.html#getLayout()", "NegotiationRequiredView::getLayoutPath()()": "class-cake.view.negotiationrequiredview.html#getLayoutPath()", "NegotiationRequiredView::getLayoutPaths()()": "class-cake.view.negotiationrequiredview.html#getLayoutPaths()", "NegotiationRequiredView::getName()()": "class-cake.view.negotiationrequiredview.html#getName()", "NegotiationRequiredView::getPlugin()()": "class-cake.view.negotiationrequiredview.html#getPlugin()", "NegotiationRequiredView::getRequest()()": "class-cake.view.negotiationrequiredview.html#getRequest()", "NegotiationRequiredView::getResponse()()": "class-cake.view.negotiationrequiredview.html#getResponse()", "NegotiationRequiredView::getSubDir()()": "class-cake.view.negotiationrequiredview.html#getSubDir()", "NegotiationRequiredView::getTemplate()()": "class-cake.view.negotiationrequiredview.html#getTemplate()", "NegotiationRequiredView::getTemplatePath()()": "class-cake.view.negotiationrequiredview.html#getTemplatePath()", "NegotiationRequiredView::getTheme()()": "class-cake.view.negotiationrequiredview.html#getTheme()", "NegotiationRequiredView::getVars()()": "class-cake.view.negotiationrequiredview.html#getVars()", "NegotiationRequiredView::helpers()()": "class-cake.view.negotiationrequiredview.html#helpers()", "NegotiationRequiredView::initialize()()": "class-cake.view.negotiationrequiredview.html#initialize()", "NegotiationRequiredView::isAutoLayoutEnabled()()": "class-cake.view.negotiationrequiredview.html#isAutoLayoutEnabled()", "NegotiationRequiredView::loadHelper()()": "class-cake.view.negotiationrequiredview.html#loadHelper()", "NegotiationRequiredView::loadHelpers()()": "class-cake.view.negotiationrequiredview.html#loadHelpers()", "NegotiationRequiredView::log()()": "class-cake.view.negotiationrequiredview.html#log()", "NegotiationRequiredView::pluginSplit()()": "class-cake.view.negotiationrequiredview.html#pluginSplit()", "NegotiationRequiredView::prepend()()": "class-cake.view.negotiationrequiredview.html#prepend()", "NegotiationRequiredView::render()()": "class-cake.view.negotiationrequiredview.html#render()", "NegotiationRequiredView::renderLayout()()": "class-cake.view.negotiationrequiredview.html#renderLayout()", "NegotiationRequiredView::reset()()": "class-cake.view.negotiationrequiredview.html#reset()", "NegotiationRequiredView::set()()": "class-cake.view.negotiationrequiredview.html#set()", "NegotiationRequiredView::setConfig()()": "class-cake.view.negotiationrequiredview.html#setConfig()", "NegotiationRequiredView::setContentType()()": "class-cake.view.negotiationrequiredview.html#setContentType()", "NegotiationRequiredView::setElementCache()()": "class-cake.view.negotiationrequiredview.html#setElementCache()", "NegotiationRequiredView::setEventManager()()": "class-cake.view.negotiationrequiredview.html#setEventManager()", "NegotiationRequiredView::setLayout()()": "class-cake.view.negotiationrequiredview.html#setLayout()", "NegotiationRequiredView::setLayoutPath()()": "class-cake.view.negotiationrequiredview.html#setLayoutPath()", "NegotiationRequiredView::setPlugin()()": "class-cake.view.negotiationrequiredview.html#setPlugin()", "NegotiationRequiredView::setRequest()()": "class-cake.view.negotiationrequiredview.html#setRequest()", "NegotiationRequiredView::setResponse()()": "class-cake.view.negotiationrequiredview.html#setResponse()", "NegotiationRequiredView::setSubDir()()": "class-cake.view.negotiationrequiredview.html#setSubDir()", "NegotiationRequiredView::setTemplate()()": "class-cake.view.negotiationrequiredview.html#setTemplate()", "NegotiationRequiredView::setTemplatePath()()": "class-cake.view.negotiationrequiredview.html#setTemplatePath()", "NegotiationRequiredView::setTheme()()": "class-cake.view.negotiationrequiredview.html#setTheme()", "NegotiationRequiredView::start()()": "class-cake.view.negotiationrequiredview.html#start()", "NestedTransactionRollbackException (class)": "class-cake.database.exception.nestedtransactionrollbackexception.html", "NestingLabelWidget (class)": "class-cake.view.widget.nestinglabelwidget.html", "NestingLabelWidget::$_labelTemplate": "class-cake.view.widget.nestinglabelwidget.html#$_labelTemplate", "NestingLabelWidget::$_templates": "class-cake.view.widget.nestinglabelwidget.html#$_templates", "NestingLabelWidget::__construct()()": "class-cake.view.widget.nestinglabelwidget.html#__construct()", "NestingLabelWidget::render()()": "class-cake.view.widget.nestinglabelwidget.html#render()", "NestingLabelWidget::secureFields()()": "class-cake.view.widget.nestinglabelwidget.html#secureFields()", "NestIterator (class)": "class-cake.collection.iterator.nestiterator.html", "NestIterator::$_nestKey": "class-cake.collection.iterator.nestiterator.html#$_nestKey", "NestIterator::__construct()()": "class-cake.collection.iterator.nestiterator.html#__construct()", "NestIterator::__debugInfo()()": "class-cake.collection.iterator.nestiterator.html#__debugInfo()", "NestIterator::__serialize()()": "class-cake.collection.iterator.nestiterator.html#__serialize()", "NestIterator::__unserialize()()": "class-cake.collection.iterator.nestiterator.html#__unserialize()", "NestIterator::_createMatcherFilter()()": "class-cake.collection.iterator.nestiterator.html#_createMatcherFilter()", "NestIterator::_extract()()": "class-cake.collection.iterator.nestiterator.html#_extract()", "NestIterator::_propertyExtractor()()": "class-cake.collection.iterator.nestiterator.html#_propertyExtractor()", "NestIterator::_simpleExtract()()": "class-cake.collection.iterator.nestiterator.html#_simpleExtract()", "NestIterator::append()()": "class-cake.collection.iterator.nestiterator.html#append()", "NestIterator::appendItem()()": "class-cake.collection.iterator.nestiterator.html#appendItem()", "NestIterator::avg()()": "class-cake.collection.iterator.nestiterator.html#avg()", "NestIterator::buffered()()": "class-cake.collection.iterator.nestiterator.html#buffered()", "NestIterator::cartesianProduct()()": "class-cake.collection.iterator.nestiterator.html#cartesianProduct()", "NestIterator::chunk()()": "class-cake.collection.iterator.nestiterator.html#chunk()", "NestIterator::chunkWithKeys()()": "class-cake.collection.iterator.nestiterator.html#chunkWithKeys()", "NestIterator::combine()()": "class-cake.collection.iterator.nestiterator.html#combine()", "NestIterator::compile()()": "class-cake.collection.iterator.nestiterator.html#compile()", "NestIterator::contains()()": "class-cake.collection.iterator.nestiterator.html#contains()", "NestIterator::count()()": "class-cake.collection.iterator.nestiterator.html#count()", "NestIterator::countBy()()": "class-cake.collection.iterator.nestiterator.html#countBy()", "NestIterator::countKeys()()": "class-cake.collection.iterator.nestiterator.html#countKeys()", "NestIterator::each()()": "class-cake.collection.iterator.nestiterator.html#each()", "NestIterator::every()()": "class-cake.collection.iterator.nestiterator.html#every()", "NestIterator::extract()()": "class-cake.collection.iterator.nestiterator.html#extract()", "NestIterator::filter()()": "class-cake.collection.iterator.nestiterator.html#filter()", "NestIterator::first()()": "class-cake.collection.iterator.nestiterator.html#first()", "NestIterator::firstMatch()()": "class-cake.collection.iterator.nestiterator.html#firstMatch()", "NestIterator::getChildren()()": "class-cake.collection.iterator.nestiterator.html#getChildren()", "NestIterator::groupBy()()": "class-cake.collection.iterator.nestiterator.html#groupBy()", "NestIterator::hasChildren()()": "class-cake.collection.iterator.nestiterator.html#hasChildren()", "NestIterator::indexBy()()": "class-cake.collection.iterator.nestiterator.html#indexBy()", "NestIterator::insert()()": "class-cake.collection.iterator.nestiterator.html#insert()", "NestIterator::isEmpty()()": "class-cake.collection.iterator.nestiterator.html#isEmpty()", "NestIterator::jsonSerialize()()": "class-cake.collection.iterator.nestiterator.html#jsonSerialize()", "NestIterator::last()()": "class-cake.collection.iterator.nestiterator.html#last()", "NestIterator::lazy()()": "class-cake.collection.iterator.nestiterator.html#lazy()", "NestIterator::listNested()()": "class-cake.collection.iterator.nestiterator.html#listNested()", "NestIterator::map()()": "class-cake.collection.iterator.nestiterator.html#map()", "NestIterator::match()()": "class-cake.collection.iterator.nestiterator.html#match()", "NestIterator::max()()": "class-cake.collection.iterator.nestiterator.html#max()", "NestIterator::median()()": "class-cake.collection.iterator.nestiterator.html#median()", "NestIterator::min()()": "class-cake.collection.iterator.nestiterator.html#min()", "NestIterator::nest()()": "class-cake.collection.iterator.nestiterator.html#nest()", "NestIterator::newCollection()()": "class-cake.collection.iterator.nestiterator.html#newCollection()", "NestIterator::optimizeUnwrap()()": "class-cake.collection.iterator.nestiterator.html#optimizeUnwrap()", "NestIterator::prepend()()": "class-cake.collection.iterator.nestiterator.html#prepend()", "NestIterator::prependItem()()": "class-cake.collection.iterator.nestiterator.html#prependItem()", "NestIterator::reduce()()": "class-cake.collection.iterator.nestiterator.html#reduce()", "NestIterator::reject()()": "class-cake.collection.iterator.nestiterator.html#reject()", "NestIterator::sample()()": "class-cake.collection.iterator.nestiterator.html#sample()", "NestIterator::serialize()()": "class-cake.collection.iterator.nestiterator.html#serialize()", "NestIterator::shuffle()()": "class-cake.collection.iterator.nestiterator.html#shuffle()", "NestIterator::skip()()": "class-cake.collection.iterator.nestiterator.html#skip()", "NestIterator::some()()": "class-cake.collection.iterator.nestiterator.html#some()", "NestIterator::sortBy()()": "class-cake.collection.iterator.nestiterator.html#sortBy()", "NestIterator::stopWhen()()": "class-cake.collection.iterator.nestiterator.html#stopWhen()", "NestIterator::sumOf()()": "class-cake.collection.iterator.nestiterator.html#sumOf()", "NestIterator::take()()": "class-cake.collection.iterator.nestiterator.html#take()", "NestIterator::takeLast()()": "class-cake.collection.iterator.nestiterator.html#takeLast()", "NestIterator::through()()": "class-cake.collection.iterator.nestiterator.html#through()", "NestIterator::toArray()()": "class-cake.collection.iterator.nestiterator.html#toArray()", "NestIterator::toList()()": "class-cake.collection.iterator.nestiterator.html#toList()", "NestIterator::transpose()()": "class-cake.collection.iterator.nestiterator.html#transpose()", "NestIterator::unfold()()": "class-cake.collection.iterator.nestiterator.html#unfold()", "NestIterator::unserialize()()": "class-cake.collection.iterator.nestiterator.html#unserialize()", "NestIterator::unwrap()()": "class-cake.collection.iterator.nestiterator.html#unwrap()", "NestIterator::zip()()": "class-cake.collection.iterator.nestiterator.html#zip()", "NestIterator::zipWith()()": "class-cake.collection.iterator.nestiterator.html#zipWith()", "Network (namespace)": "namespace-cake.network.html", "Network\\Exception (namespace)": "namespace-cake.network.exception.html", "NetworkException (class)": "class-cake.http.client.exception.networkexception.html", "NoChildrenIterator (class)": "class-cake.collection.iterator.nochildreniterator.html", "NoChildrenIterator::__construct()()": "class-cake.collection.iterator.nochildreniterator.html#__construct()", "NoChildrenIterator::__debugInfo()()": "class-cake.collection.iterator.nochildreniterator.html#__debugInfo()", "NoChildrenIterator::__serialize()()": "class-cake.collection.iterator.nochildreniterator.html#__serialize()", "NoChildrenIterator::__unserialize()()": "class-cake.collection.iterator.nochildreniterator.html#__unserialize()", "NoChildrenIterator::_createMatcherFilter()()": "class-cake.collection.iterator.nochildreniterator.html#_createMatcherFilter()", "NoChildrenIterator::_extract()()": "class-cake.collection.iterator.nochildreniterator.html#_extract()", "NoChildrenIterator::_propertyExtractor()()": "class-cake.collection.iterator.nochildreniterator.html#_propertyExtractor()", "NoChildrenIterator::_simpleExtract()()": "class-cake.collection.iterator.nochildreniterator.html#_simpleExtract()", "NoChildrenIterator::append()()": "class-cake.collection.iterator.nochildreniterator.html#append()", "NoChildrenIterator::appendItem()()": "class-cake.collection.iterator.nochildreniterator.html#appendItem()", "NoChildrenIterator::avg()()": "class-cake.collection.iterator.nochildreniterator.html#avg()", "NoChildrenIterator::buffered()()": "class-cake.collection.iterator.nochildreniterator.html#buffered()", "NoChildrenIterator::cartesianProduct()()": "class-cake.collection.iterator.nochildreniterator.html#cartesianProduct()", "NoChildrenIterator::chunk()()": "class-cake.collection.iterator.nochildreniterator.html#chunk()", "NoChildrenIterator::chunkWithKeys()()": "class-cake.collection.iterator.nochildreniterator.html#chunkWithKeys()", "NoChildrenIterator::combine()()": "class-cake.collection.iterator.nochildreniterator.html#combine()", "NoChildrenIterator::compile()()": "class-cake.collection.iterator.nochildreniterator.html#compile()", "NoChildrenIterator::contains()()": "class-cake.collection.iterator.nochildreniterator.html#contains()", "NoChildrenIterator::count()()": "class-cake.collection.iterator.nochildreniterator.html#count()", "NoChildrenIterator::countBy()()": "class-cake.collection.iterator.nochildreniterator.html#countBy()", "NoChildrenIterator::countKeys()()": "class-cake.collection.iterator.nochildreniterator.html#countKeys()", "NoChildrenIterator::each()()": "class-cake.collection.iterator.nochildreniterator.html#each()", "NoChildrenIterator::every()()": "class-cake.collection.iterator.nochildreniterator.html#every()", "NoChildrenIterator::extract()()": "class-cake.collection.iterator.nochildreniterator.html#extract()", "NoChildrenIterator::filter()()": "class-cake.collection.iterator.nochildreniterator.html#filter()", "NoChildrenIterator::first()()": "class-cake.collection.iterator.nochildreniterator.html#first()", "NoChildrenIterator::firstMatch()()": "class-cake.collection.iterator.nochildreniterator.html#firstMatch()", "NoChildrenIterator::getChildren()()": "class-cake.collection.iterator.nochildreniterator.html#getChildren()", "NoChildrenIterator::groupBy()()": "class-cake.collection.iterator.nochildreniterator.html#groupBy()", "NoChildrenIterator::hasChildren()()": "class-cake.collection.iterator.nochildreniterator.html#hasChildren()", "NoChildrenIterator::indexBy()()": "class-cake.collection.iterator.nochildreniterator.html#indexBy()", "NoChildrenIterator::insert()()": "class-cake.collection.iterator.nochildreniterator.html#insert()", "NoChildrenIterator::isEmpty()()": "class-cake.collection.iterator.nochildreniterator.html#isEmpty()", "NoChildrenIterator::jsonSerialize()()": "class-cake.collection.iterator.nochildreniterator.html#jsonSerialize()", "NoChildrenIterator::last()()": "class-cake.collection.iterator.nochildreniterator.html#last()", "NoChildrenIterator::lazy()()": "class-cake.collection.iterator.nochildreniterator.html#lazy()", "NoChildrenIterator::listNested()()": "class-cake.collection.iterator.nochildreniterator.html#listNested()", "NoChildrenIterator::map()()": "class-cake.collection.iterator.nochildreniterator.html#map()", "NoChildrenIterator::match()()": "class-cake.collection.iterator.nochildreniterator.html#match()", "NoChildrenIterator::max()()": "class-cake.collection.iterator.nochildreniterator.html#max()", "NoChildrenIterator::median()()": "class-cake.collection.iterator.nochildreniterator.html#median()", "NoChildrenIterator::min()()": "class-cake.collection.iterator.nochildreniterator.html#min()", "NoChildrenIterator::nest()()": "class-cake.collection.iterator.nochildreniterator.html#nest()", "NoChildrenIterator::newCollection()()": "class-cake.collection.iterator.nochildreniterator.html#newCollection()", "NoChildrenIterator::optimizeUnwrap()()": "class-cake.collection.iterator.nochildreniterator.html#optimizeUnwrap()", "NoChildrenIterator::prepend()()": "class-cake.collection.iterator.nochildreniterator.html#prepend()", "NoChildrenIterator::prependItem()()": "class-cake.collection.iterator.nochildreniterator.html#prependItem()", "NoChildrenIterator::reduce()()": "class-cake.collection.iterator.nochildreniterator.html#reduce()", "NoChildrenIterator::reject()()": "class-cake.collection.iterator.nochildreniterator.html#reject()", "NoChildrenIterator::sample()()": "class-cake.collection.iterator.nochildreniterator.html#sample()", "NoChildrenIterator::serialize()()": "class-cake.collection.iterator.nochildreniterator.html#serialize()", "NoChildrenIterator::shuffle()()": "class-cake.collection.iterator.nochildreniterator.html#shuffle()", "NoChildrenIterator::skip()()": "class-cake.collection.iterator.nochildreniterator.html#skip()", "NoChildrenIterator::some()()": "class-cake.collection.iterator.nochildreniterator.html#some()", "NoChildrenIterator::sortBy()()": "class-cake.collection.iterator.nochildreniterator.html#sortBy()", "NoChildrenIterator::stopWhen()()": "class-cake.collection.iterator.nochildreniterator.html#stopWhen()", "NoChildrenIterator::sumOf()()": "class-cake.collection.iterator.nochildreniterator.html#sumOf()", "NoChildrenIterator::take()()": "class-cake.collection.iterator.nochildreniterator.html#take()", "NoChildrenIterator::takeLast()()": "class-cake.collection.iterator.nochildreniterator.html#takeLast()", "NoChildrenIterator::through()()": "class-cake.collection.iterator.nochildreniterator.html#through()", "NoChildrenIterator::toArray()()": "class-cake.collection.iterator.nochildreniterator.html#toArray()", "NoChildrenIterator::toList()()": "class-cake.collection.iterator.nochildreniterator.html#toList()", "NoChildrenIterator::transpose()()": "class-cake.collection.iterator.nochildreniterator.html#transpose()", "NoChildrenIterator::unfold()()": "class-cake.collection.iterator.nochildreniterator.html#unfold()", "NoChildrenIterator::unserialize()()": "class-cake.collection.iterator.nochildreniterator.html#unserialize()", "NoChildrenIterator::unwrap()()": "class-cake.collection.iterator.nochildreniterator.html#unwrap()", "NoChildrenIterator::zip()()": "class-cake.collection.iterator.nochildreniterator.html#zip()", "NoChildrenIterator::zipWith()()": "class-cake.collection.iterator.nochildreniterator.html#zipWith()", "NodeInterface (interface)": "interface-cake.error.debug.nodeinterface.html", "NoMailSent (class)": "class-cake.testsuite.constraint.email.nomailsent.html", "NoMailSent::$at": "class-cake.testsuite.constraint.email.nomailsent.html#$at", "NoMailSent::__construct()()": "class-cake.testsuite.constraint.email.nomailsent.html#__construct()", "NoMailSent::additionalFailureDescription()()": "class-cake.testsuite.constraint.email.nomailsent.html#additionalFailureDescription()", "NoMailSent::count()()": "class-cake.testsuite.constraint.email.nomailsent.html#count()", "NoMailSent::evaluate()()": "class-cake.testsuite.constraint.email.nomailsent.html#evaluate()", "NoMailSent::exporter()()": "class-cake.testsuite.constraint.email.nomailsent.html#exporter()", "NoMailSent::fail()()": "class-cake.testsuite.constraint.email.nomailsent.html#fail()", "NoMailSent::failureDescription()()": "class-cake.testsuite.constraint.email.nomailsent.html#failureDescription()", "NoMailSent::failureDescriptionInContext()()": "class-cake.testsuite.constraint.email.nomailsent.html#failureDescriptionInContext()", "NoMailSent::getMessages()()": "class-cake.testsuite.constraint.email.nomailsent.html#getMessages()", "NoMailSent::matches()()": "class-cake.testsuite.constraint.email.nomailsent.html#matches()", "NoMailSent::reduce()()": "class-cake.testsuite.constraint.email.nomailsent.html#reduce()", "NoMailSent::toString()()": "class-cake.testsuite.constraint.email.nomailsent.html#toString()", "NoMailSent::toStringInContext()()": "class-cake.testsuite.constraint.email.nomailsent.html#toStringInContext()", "NotAcceptableException (class)": "class-cake.http.exception.notacceptableexception.html", "NotFoundException (class)": "class-cake.http.exception.notfoundexception.html", "NotImplementedException (class)": "class-cake.http.exception.notimplementedexception.html", "NullContext (class)": "class-cake.view.form.nullcontext.html", "NullContext::__construct()()": "class-cake.view.form.nullcontext.html#__construct()", "NullContext::attributes()()": "class-cake.view.form.nullcontext.html#attributes()", "NullContext::error()()": "class-cake.view.form.nullcontext.html#error()", "NullContext::fieldNames()()": "class-cake.view.form.nullcontext.html#fieldNames()", "NullContext::getMaxLength()()": "class-cake.view.form.nullcontext.html#getMaxLength()", "NullContext::getPrimaryKey()()": "class-cake.view.form.nullcontext.html#getPrimaryKey()", "NullContext::getRequiredMessage()()": "class-cake.view.form.nullcontext.html#getRequiredMessage()", "NullContext::hasError()()": "class-cake.view.form.nullcontext.html#hasError()", "NullContext::isCreate()()": "class-cake.view.form.nullcontext.html#isCreate()", "NullContext::isPrimaryKey()()": "class-cake.view.form.nullcontext.html#isPrimaryKey()", "NullContext::isRequired()()": "class-cake.view.form.nullcontext.html#isRequired()", "NullContext::primaryKey()()": "class-cake.view.form.nullcontext.html#primaryKey()", "NullContext::type()()": "class-cake.view.form.nullcontext.html#type()", "NullContext::val()()": "class-cake.view.form.nullcontext.html#val()", "NullEngine (class)": "class-cake.cache.engine.nullengine.html", "NullEngine::$_config": "class-cake.cache.engine.nullengine.html#$_config", "NullEngine::$_configInitialized": "class-cake.cache.engine.nullengine.html#$_configInitialized", "NullEngine::$_defaultConfig": "class-cake.cache.engine.nullengine.html#$_defaultConfig", "NullEngine::$_groupPrefix": "class-cake.cache.engine.nullengine.html#$_groupPrefix", "NullEngine::_configDelete()()": "class-cake.cache.engine.nullengine.html#_configDelete()", "NullEngine::_configRead()()": "class-cake.cache.engine.nullengine.html#_configRead()", "NullEngine::_configWrite()()": "class-cake.cache.engine.nullengine.html#_configWrite()", "NullEngine::_key()()": "class-cake.cache.engine.nullengine.html#_key()", "NullEngine::add()()": "class-cake.cache.engine.nullengine.html#add()", "NullEngine::clear()()": "class-cake.cache.engine.nullengine.html#clear()", "NullEngine::clearGroup()()": "class-cake.cache.engine.nullengine.html#clearGroup()", "NullEngine::configShallow()()": "class-cake.cache.engine.nullengine.html#configShallow()", "NullEngine::decrement()()": "class-cake.cache.engine.nullengine.html#decrement()", "NullEngine::delete()()": "class-cake.cache.engine.nullengine.html#delete()", "NullEngine::deleteMultiple()()": "class-cake.cache.engine.nullengine.html#deleteMultiple()", "NullEngine::duration()()": "class-cake.cache.engine.nullengine.html#duration()", "NullEngine::ensureValidKey()()": "class-cake.cache.engine.nullengine.html#ensureValidKey()", "NullEngine::ensureValidType()()": "class-cake.cache.engine.nullengine.html#ensureValidType()", "NullEngine::get()()": "class-cake.cache.engine.nullengine.html#get()", "NullEngine::getConfig()()": "class-cake.cache.engine.nullengine.html#getConfig()", "NullEngine::getConfigOrFail()()": "class-cake.cache.engine.nullengine.html#getConfigOrFail()", "NullEngine::getMultiple()()": "class-cake.cache.engine.nullengine.html#getMultiple()", "NullEngine::groups()()": "class-cake.cache.engine.nullengine.html#groups()", "NullEngine::has()()": "class-cake.cache.engine.nullengine.html#has()", "NullEngine::increment()()": "class-cake.cache.engine.nullengine.html#increment()", "NullEngine::init()()": "class-cake.cache.engine.nullengine.html#init()", "NullEngine::set()()": "class-cake.cache.engine.nullengine.html#set()", "NullEngine::setConfig()()": "class-cake.cache.engine.nullengine.html#setConfig()", "NullEngine::setMultiple()()": "class-cake.cache.engine.nullengine.html#setMultiple()", "NullEngine::warning()()": "class-cake.cache.engine.nullengine.html#warning()", "Number (class)": "class-cake.i18n.number.html", "Number::$_defaultCurrency": "class-cake.i18n.number.html#$_defaultCurrency", "Number::$_defaultCurrencyFormat": "class-cake.i18n.number.html#$_defaultCurrencyFormat", "Number::$_formatters": "class-cake.i18n.number.html#$_formatters", "Number::_setAttributes()()": "class-cake.i18n.number.html#_setAttributes()", "Number::config()()": "class-cake.i18n.number.html#config()", "Number::currency()()": "class-cake.i18n.number.html#currency()", "Number::defaultCurrency()()": "class-cake.i18n.number.html#defaultCurrency()", "Number::format()()": "class-cake.i18n.number.html#format()", "Number::formatDelta()()": "class-cake.i18n.number.html#formatDelta()", "Number::formatter()()": "class-cake.i18n.number.html#formatter()", "Number::getDefaultCurrency()()": "class-cake.i18n.number.html#getDefaultCurrency()", "Number::getDefaultCurrencyFormat()()": "class-cake.i18n.number.html#getDefaultCurrencyFormat()", "Number::ordinal()()": "class-cake.i18n.number.html#ordinal()", "Number::parseFloat()()": "class-cake.i18n.number.html#parseFloat()", "Number::precision()()": "class-cake.i18n.number.html#precision()", "Number::setDefaultCurrency()()": "class-cake.i18n.number.html#setDefaultCurrency()", "Number::setDefaultCurrencyFormat()()": "class-cake.i18n.number.html#setDefaultCurrencyFormat()", "Number::toPercentage()()": "class-cake.i18n.number.html#toPercentage()", "Number::toReadableSize()()": "class-cake.i18n.number.html#toReadableSize()", "NumberHelper (class)": "class-cake.view.helper.numberhelper.html", "NumberHelper::$_config": "class-cake.view.helper.numberhelper.html#$_config", "NumberHelper::$_configInitialized": "class-cake.view.helper.numberhelper.html#$_configInitialized", "NumberHelper::$_defaultConfig": "class-cake.view.helper.numberhelper.html#$_defaultConfig", "NumberHelper::$_engine": "class-cake.view.helper.numberhelper.html#$_engine", "NumberHelper::$_helperMap": "class-cake.view.helper.numberhelper.html#$_helperMap", "NumberHelper::$_View": "class-cake.view.helper.numberhelper.html#$_View", "NumberHelper::$helpers": "class-cake.view.helper.numberhelper.html#$helpers", "NumberHelper::__call()()": "class-cake.view.helper.numberhelper.html#__call()", "NumberHelper::__construct()()": "class-cake.view.helper.numberhelper.html#__construct()", "NumberHelper::__debugInfo()()": "class-cake.view.helper.numberhelper.html#__debugInfo()", "NumberHelper::__get()()": "class-cake.view.helper.numberhelper.html#__get()", "NumberHelper::_configDelete()()": "class-cake.view.helper.numberhelper.html#_configDelete()", "NumberHelper::_configRead()()": "class-cake.view.helper.numberhelper.html#_configRead()", "NumberHelper::_configWrite()()": "class-cake.view.helper.numberhelper.html#_configWrite()", "NumberHelper::_confirm()()": "class-cake.view.helper.numberhelper.html#_confirm()", "NumberHelper::addClass()()": "class-cake.view.helper.numberhelper.html#addClass()", "NumberHelper::configShallow()()": "class-cake.view.helper.numberhelper.html#configShallow()", "NumberHelper::currency()()": "class-cake.view.helper.numberhelper.html#currency()", "NumberHelper::defaultCurrency()()": "class-cake.view.helper.numberhelper.html#defaultCurrency()", "NumberHelper::format()()": "class-cake.view.helper.numberhelper.html#format()", "NumberHelper::formatDelta()()": "class-cake.view.helper.numberhelper.html#formatDelta()", "NumberHelper::getConfig()()": "class-cake.view.helper.numberhelper.html#getConfig()", "NumberHelper::getConfigOrFail()()": "class-cake.view.helper.numberhelper.html#getConfigOrFail()", "NumberHelper::getView()()": "class-cake.view.helper.numberhelper.html#getView()", "NumberHelper::implementedEvents()()": "class-cake.view.helper.numberhelper.html#implementedEvents()", "NumberHelper::initialize()()": "class-cake.view.helper.numberhelper.html#initialize()", "NumberHelper::ordinal()()": "class-cake.view.helper.numberhelper.html#ordinal()", "NumberHelper::precision()()": "class-cake.view.helper.numberhelper.html#precision()", "NumberHelper::setConfig()()": "class-cake.view.helper.numberhelper.html#setConfig()", "NumberHelper::toPercentage()()": "class-cake.view.helper.numberhelper.html#toPercentage()", "NumberHelper::toReadableSize()()": "class-cake.view.helper.numberhelper.html#toReadableSize()", "NumericPaginator (class)": "class-cake.datasource.paging.numericpaginator.html", "NumericPaginator::$_config": "class-cake.datasource.paging.numericpaginator.html#$_config", "NumericPaginator::$_configInitialized": "class-cake.datasource.paging.numericpaginator.html#$_configInitialized", "NumericPaginator::$_defaultConfig": "class-cake.datasource.paging.numericpaginator.html#$_defaultConfig", "NumericPaginator::$_pagingParams": "class-cake.datasource.paging.numericpaginator.html#$_pagingParams", "NumericPaginator::_configDelete()()": "class-cake.datasource.paging.numericpaginator.html#_configDelete()", "NumericPaginator::_configRead()()": "class-cake.datasource.paging.numericpaginator.html#_configRead()", "NumericPaginator::_configWrite()()": "class-cake.datasource.paging.numericpaginator.html#_configWrite()", "NumericPaginator::_extractFinder()()": "class-cake.datasource.paging.numericpaginator.html#_extractFinder()", "NumericPaginator::_prefix()()": "class-cake.datasource.paging.numericpaginator.html#_prefix()", "NumericPaginator::_removeAliases()()": "class-cake.datasource.paging.numericpaginator.html#_removeAliases()", "NumericPaginator::addPageCountParams()()": "class-cake.datasource.paging.numericpaginator.html#addPageCountParams()", "NumericPaginator::addPrevNextParams()()": "class-cake.datasource.paging.numericpaginator.html#addPrevNextParams()", "NumericPaginator::addSortingParams()()": "class-cake.datasource.paging.numericpaginator.html#addSortingParams()", "NumericPaginator::addStartEndParams()()": "class-cake.datasource.paging.numericpaginator.html#addStartEndParams()", "NumericPaginator::buildParams()()": "class-cake.datasource.paging.numericpaginator.html#buildParams()", "NumericPaginator::checkLimit()()": "class-cake.datasource.paging.numericpaginator.html#checkLimit()", "NumericPaginator::configShallow()()": "class-cake.datasource.paging.numericpaginator.html#configShallow()", "NumericPaginator::extractData()()": "class-cake.datasource.paging.numericpaginator.html#extractData()", "NumericPaginator::getAllowedParameters()()": "class-cake.datasource.paging.numericpaginator.html#getAllowedParameters()", "NumericPaginator::getConfig()()": "class-cake.datasource.paging.numericpaginator.html#getConfig()", "NumericPaginator::getConfigOrFail()()": "class-cake.datasource.paging.numericpaginator.html#getConfigOrFail()", "NumericPaginator::getCount()()": "class-cake.datasource.paging.numericpaginator.html#getCount()", "NumericPaginator::getDefaults()()": "class-cake.datasource.paging.numericpaginator.html#getDefaults()", "NumericPaginator::getPagingParams()()": "class-cake.datasource.paging.numericpaginator.html#getPagingParams()", "NumericPaginator::getQuery()()": "class-cake.datasource.paging.numericpaginator.html#getQuery()", "NumericPaginator::getSortableFields()()": "class-cake.datasource.paging.numericpaginator.html#getSortableFields()", "NumericPaginator::mergeOptions()()": "class-cake.datasource.paging.numericpaginator.html#mergeOptions()", "NumericPaginator::paginate()()": "class-cake.datasource.paging.numericpaginator.html#paginate()", "NumericPaginator::setConfig()()": "class-cake.datasource.paging.numericpaginator.html#setConfig()", "NumericPaginator::validateSort()()": "class-cake.datasource.paging.numericpaginator.html#validateSort()", "Oauth (class)": "class-cake.http.client.auth.oauth.html", "Oauth::_buildAuth()()": "class-cake.http.client.auth.oauth.html#_buildAuth()", "Oauth::_encode()()": "class-cake.http.client.auth.oauth.html#_encode()", "Oauth::_hmacSha1()()": "class-cake.http.client.auth.oauth.html#_hmacSha1()", "Oauth::_normalizeData()()": "class-cake.http.client.auth.oauth.html#_normalizeData()", "Oauth::_normalizedParams()()": "class-cake.http.client.auth.oauth.html#_normalizedParams()", "Oauth::_normalizedUrl()()": "class-cake.http.client.auth.oauth.html#_normalizedUrl()", "Oauth::_plaintext()()": "class-cake.http.client.auth.oauth.html#_plaintext()", "Oauth::_rsaSha1()()": "class-cake.http.client.auth.oauth.html#_rsaSha1()", "Oauth::authentication()()": "class-cake.http.client.auth.oauth.html#authentication()", "Oauth::baseString()()": "class-cake.http.client.auth.oauth.html#baseString()", "Oauth::checkSslError()()": "class-cake.http.client.auth.oauth.html#checkSslError()", "ObjectRegistry (class)": "class-cake.core.objectregistry.html", "ObjectRegistry::$_loaded": "class-cake.core.objectregistry.html#$_loaded", "ObjectRegistry::__debugInfo()()": "class-cake.core.objectregistry.html#__debugInfo()", "ObjectRegistry::__get()()": "class-cake.core.objectregistry.html#__get()", "ObjectRegistry::__isset()()": "class-cake.core.objectregistry.html#__isset()", "ObjectRegistry::__set()()": "class-cake.core.objectregistry.html#__set()", "ObjectRegistry::__unset()()": "class-cake.core.objectregistry.html#__unset()", "ObjectRegistry::_checkDuplicate()()": "class-cake.core.objectregistry.html#_checkDuplicate()", "ObjectRegistry::_create()()": "class-cake.core.objectregistry.html#_create()", "ObjectRegistry::_resolveClassName()()": "class-cake.core.objectregistry.html#_resolveClassName()", "ObjectRegistry::_throwMissingClassError()()": "class-cake.core.objectregistry.html#_throwMissingClassError()", "ObjectRegistry::count()()": "class-cake.core.objectregistry.html#count()", "ObjectRegistry::get()()": "class-cake.core.objectregistry.html#get()", "ObjectRegistry::getIterator()()": "class-cake.core.objectregistry.html#getIterator()", "ObjectRegistry::has()()": "class-cake.core.objectregistry.html#has()", "ObjectRegistry::load()()": "class-cake.core.objectregistry.html#load()", "ObjectRegistry::loaded()()": "class-cake.core.objectregistry.html#loaded()", "ObjectRegistry::normalizeArray()()": "class-cake.core.objectregistry.html#normalizeArray()", "ObjectRegistry::reset()()": "class-cake.core.objectregistry.html#reset()", "ObjectRegistry::set()()": "class-cake.core.objectregistry.html#set()", "ObjectRegistry::unload()()": "class-cake.core.objectregistry.html#unload()", "OpenSsl (class)": "class-cake.utility.crypto.openssl.html", "OpenSsl::decrypt()()": "class-cake.utility.crypto.openssl.html#decrypt()", "OpenSsl::encrypt()()": "class-cake.utility.crypto.openssl.html#encrypt()", "OptionalConvertInterface (interface)": "interface-cake.database.type.optionalconvertinterface.html", "OrderByExpression (class)": "class-cake.database.expression.orderbyexpression.html", "OrderByExpression::$_conditions": "class-cake.database.expression.orderbyexpression.html#$_conditions", "OrderByExpression::$_conjunction": "class-cake.database.expression.orderbyexpression.html#$_conjunction", "OrderByExpression::$_typeMap": "class-cake.database.expression.orderbyexpression.html#$_typeMap", "OrderByExpression::__clone()()": "class-cake.database.expression.orderbyexpression.html#__clone()", "OrderByExpression::__construct()()": "class-cake.database.expression.orderbyexpression.html#__construct()", "OrderByExpression::_addConditions()()": "class-cake.database.expression.orderbyexpression.html#_addConditions()", "OrderByExpression::_calculateType()()": "class-cake.database.expression.orderbyexpression.html#_calculateType()", "OrderByExpression::_parseCondition()()": "class-cake.database.expression.orderbyexpression.html#_parseCondition()", "OrderByExpression::add()()": "class-cake.database.expression.orderbyexpression.html#add()", "OrderByExpression::addCase()()": "class-cake.database.expression.orderbyexpression.html#addCase()", "OrderByExpression::and()()": "class-cake.database.expression.orderbyexpression.html#and()", "OrderByExpression::and_()()": "class-cake.database.expression.orderbyexpression.html#and_()", "OrderByExpression::between()()": "class-cake.database.expression.orderbyexpression.html#between()", "OrderByExpression::case()()": "class-cake.database.expression.orderbyexpression.html#case()", "OrderByExpression::count()()": "class-cake.database.expression.orderbyexpression.html#count()", "OrderByExpression::eq()()": "class-cake.database.expression.orderbyexpression.html#eq()", "OrderByExpression::equalFields()()": "class-cake.database.expression.orderbyexpression.html#equalFields()", "OrderByExpression::exists()()": "class-cake.database.expression.orderbyexpression.html#exists()", "OrderByExpression::getConjunction()()": "class-cake.database.expression.orderbyexpression.html#getConjunction()", "OrderByExpression::getDefaultTypes()()": "class-cake.database.expression.orderbyexpression.html#getDefaultTypes()", "OrderByExpression::getTypeMap()()": "class-cake.database.expression.orderbyexpression.html#getTypeMap()", "OrderByExpression::gt()()": "class-cake.database.expression.orderbyexpression.html#gt()", "OrderByExpression::gte()()": "class-cake.database.expression.orderbyexpression.html#gte()", "OrderByExpression::hasNestedExpression()()": "class-cake.database.expression.orderbyexpression.html#hasNestedExpression()", "OrderByExpression::in()()": "class-cake.database.expression.orderbyexpression.html#in()", "OrderByExpression::isCallable()()": "class-cake.database.expression.orderbyexpression.html#isCallable()", "OrderByExpression::isNotNull()()": "class-cake.database.expression.orderbyexpression.html#isNotNull()", "OrderByExpression::isNull()()": "class-cake.database.expression.orderbyexpression.html#isNull()", "OrderByExpression::iterateParts()()": "class-cake.database.expression.orderbyexpression.html#iterateParts()", "OrderByExpression::like()()": "class-cake.database.expression.orderbyexpression.html#like()", "OrderByExpression::lt()()": "class-cake.database.expression.orderbyexpression.html#lt()", "OrderByExpression::lte()()": "class-cake.database.expression.orderbyexpression.html#lte()", "OrderByExpression::not()()": "class-cake.database.expression.orderbyexpression.html#not()", "OrderByExpression::notEq()()": "class-cake.database.expression.orderbyexpression.html#notEq()", "OrderByExpression::notExists()()": "class-cake.database.expression.orderbyexpression.html#notExists()", "OrderByExpression::notIn()()": "class-cake.database.expression.orderbyexpression.html#notIn()", "OrderByExpression::notInOrNull()()": "class-cake.database.expression.orderbyexpression.html#notInOrNull()", "OrderByExpression::notLike()()": "class-cake.database.expression.orderbyexpression.html#notLike()", "OrderByExpression::or()()": "class-cake.database.expression.orderbyexpression.html#or()", "OrderByExpression::or_()()": "class-cake.database.expression.orderbyexpression.html#or_()", "OrderByExpression::setConjunction()()": "class-cake.database.expression.orderbyexpression.html#setConjunction()", "OrderByExpression::setDefaultTypes()()": "class-cake.database.expression.orderbyexpression.html#setDefaultTypes()", "OrderByExpression::setTypeMap()()": "class-cake.database.expression.orderbyexpression.html#setTypeMap()", "OrderByExpression::sql()()": "class-cake.database.expression.orderbyexpression.html#sql()", "OrderByExpression::traverse()()": "class-cake.database.expression.orderbyexpression.html#traverse()", "OrderClauseExpression (class)": "class-cake.database.expression.orderclauseexpression.html", "OrderClauseExpression::$_direction": "class-cake.database.expression.orderclauseexpression.html#$_direction", "OrderClauseExpression::$_field": "class-cake.database.expression.orderclauseexpression.html#$_field", "OrderClauseExpression::__clone()()": "class-cake.database.expression.orderclauseexpression.html#__clone()", "OrderClauseExpression::__construct()()": "class-cake.database.expression.orderclauseexpression.html#__construct()", "OrderClauseExpression::getField()()": "class-cake.database.expression.orderclauseexpression.html#getField()", "OrderClauseExpression::setField()()": "class-cake.database.expression.orderclauseexpression.html#setField()", "OrderClauseExpression::sql()()": "class-cake.database.expression.orderclauseexpression.html#sql()", "OrderClauseExpression::traverse()()": "class-cake.database.expression.orderclauseexpression.html#traverse()", "ORM (namespace)": "namespace-cake.orm.html", "ORM\\Association (namespace)": "namespace-cake.orm.association.html", "ORM\\Association\\Loader (namespace)": "namespace-cake.orm.association.loader.html", "ORM\\Behavior (namespace)": "namespace-cake.orm.behavior.html", "ORM\\Behavior\\Translate (namespace)": "namespace-cake.orm.behavior.translate.html", "ORM\\Exception (namespace)": "namespace-cake.orm.exception.html", "ORM\\Locator (namespace)": "namespace-cake.orm.locator.html", "ORM\\Rule (namespace)": "namespace-cake.orm.rule.html", "Package (class)": "class-cake.i18n.package.html", "Package::$fallback": "class-cake.i18n.package.html#$fallback", "Package::$formatter": "class-cake.i18n.package.html#$formatter", "Package::$messages": "class-cake.i18n.package.html#$messages", "Package::__construct()()": "class-cake.i18n.package.html#__construct()", "Package::addMessage()()": "class-cake.i18n.package.html#addMessage()", "Package::addMessages()()": "class-cake.i18n.package.html#addMessages()", "Package::getFallback()()": "class-cake.i18n.package.html#getFallback()", "Package::getFormatter()()": "class-cake.i18n.package.html#getFormatter()", "Package::getMessage()()": "class-cake.i18n.package.html#getMessage()", "Package::getMessages()()": "class-cake.i18n.package.html#getMessages()", "Package::setFallback()()": "class-cake.i18n.package.html#setFallback()", "Package::setFormatter()()": "class-cake.i18n.package.html#setFormatter()", "Package::setMessages()()": "class-cake.i18n.package.html#setMessages()", "PackageLocator (class)": "class-cake.i18n.packagelocator.html", "PackageLocator::$converted": "class-cake.i18n.packagelocator.html#$converted", "PackageLocator::$registry": "class-cake.i18n.packagelocator.html#$registry", "PackageLocator::__construct()()": "class-cake.i18n.packagelocator.html#__construct()", "PackageLocator::get()()": "class-cake.i18n.packagelocator.html#get()", "PackageLocator::has()()": "class-cake.i18n.packagelocator.html#has()", "PackageLocator::set()()": "class-cake.i18n.packagelocator.html#set()", "PageOutOfBoundsException (class)": "class-cake.datasource.paging.exception.pageoutofboundsexception.html", "PaginatorComponent (class)": "class-cake.controller.component.paginatorcomponent.html", "PaginatorComponent::$_componentMap": "class-cake.controller.component.paginatorcomponent.html#$_componentMap", "PaginatorComponent::$_config": "class-cake.controller.component.paginatorcomponent.html#$_config", "PaginatorComponent::$_configInitialized": "class-cake.controller.component.paginatorcomponent.html#$_configInitialized", "PaginatorComponent::$_defaultConfig": "class-cake.controller.component.paginatorcomponent.html#$_defaultConfig", "PaginatorComponent::$_paginator": "class-cake.controller.component.paginatorcomponent.html#$_paginator", "PaginatorComponent::$_registry": "class-cake.controller.component.paginatorcomponent.html#$_registry", "PaginatorComponent::$components": "class-cake.controller.component.paginatorcomponent.html#$components", "PaginatorComponent::__call()()": "class-cake.controller.component.paginatorcomponent.html#__call()", "PaginatorComponent::__construct()()": "class-cake.controller.component.paginatorcomponent.html#__construct()", "PaginatorComponent::__debugInfo()()": "class-cake.controller.component.paginatorcomponent.html#__debugInfo()", "PaginatorComponent::__get()()": "class-cake.controller.component.paginatorcomponent.html#__get()", "PaginatorComponent::_configDelete()()": "class-cake.controller.component.paginatorcomponent.html#_configDelete()", "PaginatorComponent::_configRead()()": "class-cake.controller.component.paginatorcomponent.html#_configRead()", "PaginatorComponent::_configWrite()()": "class-cake.controller.component.paginatorcomponent.html#_configWrite()", "PaginatorComponent::_setPagingParams()()": "class-cake.controller.component.paginatorcomponent.html#_setPagingParams()", "PaginatorComponent::configShallow()()": "class-cake.controller.component.paginatorcomponent.html#configShallow()", "PaginatorComponent::getConfig()()": "class-cake.controller.component.paginatorcomponent.html#getConfig()", "PaginatorComponent::getConfigOrFail()()": "class-cake.controller.component.paginatorcomponent.html#getConfigOrFail()", "PaginatorComponent::getController()()": "class-cake.controller.component.paginatorcomponent.html#getController()", "PaginatorComponent::getPaginator()()": "class-cake.controller.component.paginatorcomponent.html#getPaginator()", "PaginatorComponent::implementedEvents()()": "class-cake.controller.component.paginatorcomponent.html#implementedEvents()", "PaginatorComponent::initialize()()": "class-cake.controller.component.paginatorcomponent.html#initialize()", "PaginatorComponent::log()()": "class-cake.controller.component.paginatorcomponent.html#log()", "PaginatorComponent::mergeOptions()()": "class-cake.controller.component.paginatorcomponent.html#mergeOptions()", "PaginatorComponent::paginate()()": "class-cake.controller.component.paginatorcomponent.html#paginate()", "PaginatorComponent::setConfig()()": "class-cake.controller.component.paginatorcomponent.html#setConfig()", "PaginatorComponent::setPaginator()()": "class-cake.controller.component.paginatorcomponent.html#setPaginator()", "PaginatorHelper (class)": "class-cake.view.helper.paginatorhelper.html", "PaginatorHelper::$_config": "class-cake.view.helper.paginatorhelper.html#$_config", "PaginatorHelper::$_configInitialized": "class-cake.view.helper.paginatorhelper.html#$_configInitialized", "PaginatorHelper::$_defaultConfig": "class-cake.view.helper.paginatorhelper.html#$_defaultConfig", "PaginatorHelper::$_defaultModel": "class-cake.view.helper.paginatorhelper.html#$_defaultModel", "PaginatorHelper::$_helperMap": "class-cake.view.helper.paginatorhelper.html#$_helperMap", "PaginatorHelper::$_templater": "class-cake.view.helper.paginatorhelper.html#$_templater", "PaginatorHelper::$_View": "class-cake.view.helper.paginatorhelper.html#$_View", "PaginatorHelper::$Form": "class-cake.view.helper.paginatorhelper.html#$Form", "PaginatorHelper::$helpers": "class-cake.view.helper.paginatorhelper.html#$helpers", "PaginatorHelper::$Html": "class-cake.view.helper.paginatorhelper.html#$Html", "PaginatorHelper::$Number": "class-cake.view.helper.paginatorhelper.html#$Number", "PaginatorHelper::$Url": "class-cake.view.helper.paginatorhelper.html#$Url", "PaginatorHelper::__call()()": "class-cake.view.helper.paginatorhelper.html#__call()", "PaginatorHelper::__construct()()": "class-cake.view.helper.paginatorhelper.html#__construct()", "PaginatorHelper::__debugInfo()()": "class-cake.view.helper.paginatorhelper.html#__debugInfo()", "PaginatorHelper::__get()()": "class-cake.view.helper.paginatorhelper.html#__get()", "PaginatorHelper::_configDelete()()": "class-cake.view.helper.paginatorhelper.html#_configDelete()", "PaginatorHelper::_configRead()()": "class-cake.view.helper.paginatorhelper.html#_configRead()", "PaginatorHelper::_configWrite()()": "class-cake.view.helper.paginatorhelper.html#_configWrite()", "PaginatorHelper::_confirm()()": "class-cake.view.helper.paginatorhelper.html#_confirm()", "PaginatorHelper::_firstNumber()()": "class-cake.view.helper.paginatorhelper.html#_firstNumber()", "PaginatorHelper::_formatNumber()()": "class-cake.view.helper.paginatorhelper.html#_formatNumber()", "PaginatorHelper::_getNumbersStartAndEnd()()": "class-cake.view.helper.paginatorhelper.html#_getNumbersStartAndEnd()", "PaginatorHelper::_hasPage()()": "class-cake.view.helper.paginatorhelper.html#_hasPage()", "PaginatorHelper::_lastNumber()()": "class-cake.view.helper.paginatorhelper.html#_lastNumber()", "PaginatorHelper::_modulusNumbers()()": "class-cake.view.helper.paginatorhelper.html#_modulusNumbers()", "PaginatorHelper::_numbers()()": "class-cake.view.helper.paginatorhelper.html#_numbers()", "PaginatorHelper::_removeAlias()()": "class-cake.view.helper.paginatorhelper.html#_removeAlias()", "PaginatorHelper::_toggledLink()()": "class-cake.view.helper.paginatorhelper.html#_toggledLink()", "PaginatorHelper::addClass()()": "class-cake.view.helper.paginatorhelper.html#addClass()", "PaginatorHelper::configShallow()()": "class-cake.view.helper.paginatorhelper.html#configShallow()", "PaginatorHelper::counter()()": "class-cake.view.helper.paginatorhelper.html#counter()", "PaginatorHelper::current()()": "class-cake.view.helper.paginatorhelper.html#current()", "PaginatorHelper::defaultModel()()": "class-cake.view.helper.paginatorhelper.html#defaultModel()", "PaginatorHelper::first()()": "class-cake.view.helper.paginatorhelper.html#first()", "PaginatorHelper::formatTemplate()()": "class-cake.view.helper.paginatorhelper.html#formatTemplate()", "PaginatorHelper::generateUrl()()": "class-cake.view.helper.paginatorhelper.html#generateUrl()", "PaginatorHelper::generateUrlParams()()": "class-cake.view.helper.paginatorhelper.html#generateUrlParams()", "PaginatorHelper::getConfig()()": "class-cake.view.helper.paginatorhelper.html#getConfig()", "PaginatorHelper::getConfigOrFail()()": "class-cake.view.helper.paginatorhelper.html#getConfigOrFail()", "PaginatorHelper::getTemplates()()": "class-cake.view.helper.paginatorhelper.html#getTemplates()", "PaginatorHelper::getView()()": "class-cake.view.helper.paginatorhelper.html#getView()", "PaginatorHelper::hasNext()()": "class-cake.view.helper.paginatorhelper.html#hasNext()", "PaginatorHelper::hasPage()()": "class-cake.view.helper.paginatorhelper.html#hasPage()", "PaginatorHelper::hasPrev()()": "class-cake.view.helper.paginatorhelper.html#hasPrev()", "PaginatorHelper::implementedEvents()()": "class-cake.view.helper.paginatorhelper.html#implementedEvents()", "PaginatorHelper::initialize()()": "class-cake.view.helper.paginatorhelper.html#initialize()", "PaginatorHelper::last()()": "class-cake.view.helper.paginatorhelper.html#last()", "PaginatorHelper::limitControl()()": "class-cake.view.helper.paginatorhelper.html#limitControl()", "PaginatorHelper::meta()()": "class-cake.view.helper.paginatorhelper.html#meta()", "PaginatorHelper::next()()": "class-cake.view.helper.paginatorhelper.html#next()", "PaginatorHelper::numbers()()": "class-cake.view.helper.paginatorhelper.html#numbers()", "PaginatorHelper::options()()": "class-cake.view.helper.paginatorhelper.html#options()", "PaginatorHelper::param()()": "class-cake.view.helper.paginatorhelper.html#param()", "PaginatorHelper::params()()": "class-cake.view.helper.paginatorhelper.html#params()", "PaginatorHelper::prev()()": "class-cake.view.helper.paginatorhelper.html#prev()", "PaginatorHelper::setConfig()()": "class-cake.view.helper.paginatorhelper.html#setConfig()", "PaginatorHelper::setTemplates()()": "class-cake.view.helper.paginatorhelper.html#setTemplates()", "PaginatorHelper::sort()()": "class-cake.view.helper.paginatorhelper.html#sort()", "PaginatorHelper::sortDir()()": "class-cake.view.helper.paginatorhelper.html#sortDir()", "PaginatorHelper::sortKey()()": "class-cake.view.helper.paginatorhelper.html#sortKey()", "PaginatorHelper::templater()()": "class-cake.view.helper.paginatorhelper.html#templater()", "PaginatorHelper::total()()": "class-cake.view.helper.paginatorhelper.html#total()", "PaginatorInterface (interface)": "interface-cake.datasource.paging.paginatorinterface.html", "PasswordHasherFactory (class)": "class-cake.auth.passwordhasherfactory.html", "PasswordHasherFactory::build()()": "class-cake.auth.passwordhasherfactory.html#build()", "PDOStatement (class)": "class-cake.database.statement.pdostatement.html", "PDOStatement::$_driver": "class-cake.database.statement.pdostatement.html#$_driver", "PDOStatement::$_hasExecuted": "class-cake.database.statement.pdostatement.html#$_hasExecuted", "PDOStatement::$_statement": "class-cake.database.statement.pdostatement.html#$_statement", "PDOStatement::$queryString": "class-cake.database.statement.pdostatement.html#$queryString", "PDOStatement::__construct()()": "class-cake.database.statement.pdostatement.html#__construct()", "PDOStatement::__get()()": "class-cake.database.statement.pdostatement.html#__get()", "PDOStatement::bind()()": "class-cake.database.statement.pdostatement.html#bind()", "PDOStatement::bindValue()()": "class-cake.database.statement.pdostatement.html#bindValue()", "PDOStatement::cast()()": "class-cake.database.statement.pdostatement.html#cast()", "PDOStatement::closeCursor()()": "class-cake.database.statement.pdostatement.html#closeCursor()", "PDOStatement::columnCount()()": "class-cake.database.statement.pdostatement.html#columnCount()", "PDOStatement::count()()": "class-cake.database.statement.pdostatement.html#count()", "PDOStatement::errorCode()()": "class-cake.database.statement.pdostatement.html#errorCode()", "PDOStatement::errorInfo()()": "class-cake.database.statement.pdostatement.html#errorInfo()", "PDOStatement::execute()()": "class-cake.database.statement.pdostatement.html#execute()", "PDOStatement::fetch()()": "class-cake.database.statement.pdostatement.html#fetch()", "PDOStatement::fetchAll()()": "class-cake.database.statement.pdostatement.html#fetchAll()", "PDOStatement::fetchAssoc()()": "class-cake.database.statement.pdostatement.html#fetchAssoc()", "PDOStatement::fetchColumn()()": "class-cake.database.statement.pdostatement.html#fetchColumn()", "PDOStatement::getInnerStatement()()": "class-cake.database.statement.pdostatement.html#getInnerStatement()", "PDOStatement::getIterator()()": "class-cake.database.statement.pdostatement.html#getIterator()", "PDOStatement::lastInsertId()()": "class-cake.database.statement.pdostatement.html#lastInsertId()", "PDOStatement::matchTypes()()": "class-cake.database.statement.pdostatement.html#matchTypes()", "PDOStatement::rowCount()()": "class-cake.database.statement.pdostatement.html#rowCount()", "PersistenceFailedException (class)": "class-cake.orm.exception.persistencefailedexception.html", "PhpConfig (class)": "class-cake.core.configure.engine.phpconfig.html", "PhpConfig::$_extension": "class-cake.core.configure.engine.phpconfig.html#$_extension", "PhpConfig::$_path": "class-cake.core.configure.engine.phpconfig.html#$_path", "PhpConfig::__construct()()": "class-cake.core.configure.engine.phpconfig.html#__construct()", "PhpConfig::_getFilePath()()": "class-cake.core.configure.engine.phpconfig.html#_getFilePath()", "PhpConfig::dump()()": "class-cake.core.configure.engine.phpconfig.html#dump()", "PhpConfig::read()()": "class-cake.core.configure.engine.phpconfig.html#read()", "PhpError (class)": "class-cake.error.phperror.html", "PhpError::__construct()()": "class-cake.error.phperror.html#__construct()", "PhpError::getCode()()": "class-cake.error.phperror.html#getCode()", "PhpError::getFile()()": "class-cake.error.phperror.html#getFile()", "PhpError::getLabel()()": "class-cake.error.phperror.html#getLabel()", "PhpError::getLine()()": "class-cake.error.phperror.html#getLine()", "PhpError::getLogLevel()()": "class-cake.error.phperror.html#getLogLevel()", "PhpError::getMessage()()": "class-cake.error.phperror.html#getMessage()", "PhpError::getTrace()()": "class-cake.error.phperror.html#getTrace()", "PhpError::getTraceAsString()()": "class-cake.error.phperror.html#getTraceAsString()", "PHPUnitExtension (class)": "class-cake.testsuite.fixture.phpunitextension.html", "PHPUnitExtension::executeBeforeFirstTest()()": "class-cake.testsuite.fixture.phpunitextension.html#executeBeforeFirstTest()", "Plugin (class)": "class-cake.core.plugin.html", "Plugin::$plugins": "class-cake.core.plugin.html#$plugins", "Plugin::classPath()()": "class-cake.core.plugin.html#classPath()", "Plugin::configPath()()": "class-cake.core.plugin.html#configPath()", "Plugin::getCollection()()": "class-cake.core.plugin.html#getCollection()", "Plugin::isLoaded()()": "class-cake.core.plugin.html#isLoaded()", "Plugin::loaded()()": "class-cake.core.plugin.html#loaded()", "Plugin::path()()": "class-cake.core.plugin.html#path()", "Plugin::templatePath()()": "class-cake.core.plugin.html#templatePath()", "PluginApplicationInterface (interface)": "interface-cake.core.pluginapplicationinterface.html", "PluginAssetsCopyCommand (class)": "class-cake.command.pluginassetscopycommand.html", "PluginAssetsCopyCommand::$_modelFactories": "class-cake.command.pluginassetscopycommand.html#$_modelFactories", "PluginAssetsCopyCommand::$_modelType": "class-cake.command.pluginassetscopycommand.html#$_modelType", "PluginAssetsCopyCommand::$_tableLocator": "class-cake.command.pluginassetscopycommand.html#$_tableLocator", "PluginAssetsCopyCommand::$args": "class-cake.command.pluginassetscopycommand.html#$args", "PluginAssetsCopyCommand::$defaultTable": "class-cake.command.pluginassetscopycommand.html#$defaultTable", "PluginAssetsCopyCommand::$io": "class-cake.command.pluginassetscopycommand.html#$io", "PluginAssetsCopyCommand::$modelClass": "class-cake.command.pluginassetscopycommand.html#$modelClass", "PluginAssetsCopyCommand::$name": "class-cake.command.pluginassetscopycommand.html#$name", "PluginAssetsCopyCommand::__construct()()": "class-cake.command.pluginassetscopycommand.html#__construct()", "PluginAssetsCopyCommand::_copyDirectory()()": "class-cake.command.pluginassetscopycommand.html#_copyDirectory()", "PluginAssetsCopyCommand::_createDirectory()()": "class-cake.command.pluginassetscopycommand.html#_createDirectory()", "PluginAssetsCopyCommand::_createSymlink()()": "class-cake.command.pluginassetscopycommand.html#_createSymlink()", "PluginAssetsCopyCommand::_list()()": "class-cake.command.pluginassetscopycommand.html#_list()", "PluginAssetsCopyCommand::_process()()": "class-cake.command.pluginassetscopycommand.html#_process()", "PluginAssetsCopyCommand::_remove()()": "class-cake.command.pluginassetscopycommand.html#_remove()", "PluginAssetsCopyCommand::_setModelClass()()": "class-cake.command.pluginassetscopycommand.html#_setModelClass()", "PluginAssetsCopyCommand::abort()()": "class-cake.command.pluginassetscopycommand.html#abort()", "PluginAssetsCopyCommand::buildOptionParser()()": "class-cake.command.pluginassetscopycommand.html#buildOptionParser()", "PluginAssetsCopyCommand::defaultName()()": "class-cake.command.pluginassetscopycommand.html#defaultName()", "PluginAssetsCopyCommand::displayHelp()()": "class-cake.command.pluginassetscopycommand.html#displayHelp()", "PluginAssetsCopyCommand::execute()()": "class-cake.command.pluginassetscopycommand.html#execute()", "PluginAssetsCopyCommand::executeCommand()()": "class-cake.command.pluginassetscopycommand.html#executeCommand()", "PluginAssetsCopyCommand::fetchTable()()": "class-cake.command.pluginassetscopycommand.html#fetchTable()", "PluginAssetsCopyCommand::getDescription()()": "class-cake.command.pluginassetscopycommand.html#getDescription()", "PluginAssetsCopyCommand::getModelType()()": "class-cake.command.pluginassetscopycommand.html#getModelType()", "PluginAssetsCopyCommand::getName()()": "class-cake.command.pluginassetscopycommand.html#getName()", "PluginAssetsCopyCommand::getOptionParser()()": "class-cake.command.pluginassetscopycommand.html#getOptionParser()", "PluginAssetsCopyCommand::getRootName()()": "class-cake.command.pluginassetscopycommand.html#getRootName()", "PluginAssetsCopyCommand::getTableLocator()()": "class-cake.command.pluginassetscopycommand.html#getTableLocator()", "PluginAssetsCopyCommand::initialize()()": "class-cake.command.pluginassetscopycommand.html#initialize()", "PluginAssetsCopyCommand::loadModel()()": "class-cake.command.pluginassetscopycommand.html#loadModel()", "PluginAssetsCopyCommand::log()()": "class-cake.command.pluginassetscopycommand.html#log()", "PluginAssetsCopyCommand::modelFactory()()": "class-cake.command.pluginassetscopycommand.html#modelFactory()", "PluginAssetsCopyCommand::run()()": "class-cake.command.pluginassetscopycommand.html#run()", "PluginAssetsCopyCommand::setModelType()()": "class-cake.command.pluginassetscopycommand.html#setModelType()", "PluginAssetsCopyCommand::setName()()": "class-cake.command.pluginassetscopycommand.html#setName()", "PluginAssetsCopyCommand::setOutputLevel()()": "class-cake.command.pluginassetscopycommand.html#setOutputLevel()", "PluginAssetsCopyCommand::setTableLocator()()": "class-cake.command.pluginassetscopycommand.html#setTableLocator()", "PluginAssetsRemoveCommand (class)": "class-cake.command.pluginassetsremovecommand.html", "PluginAssetsRemoveCommand::$_modelFactories": "class-cake.command.pluginassetsremovecommand.html#$_modelFactories", "PluginAssetsRemoveCommand::$_modelType": "class-cake.command.pluginassetsremovecommand.html#$_modelType", "PluginAssetsRemoveCommand::$_tableLocator": "class-cake.command.pluginassetsremovecommand.html#$_tableLocator", "PluginAssetsRemoveCommand::$args": "class-cake.command.pluginassetsremovecommand.html#$args", "PluginAssetsRemoveCommand::$defaultTable": "class-cake.command.pluginassetsremovecommand.html#$defaultTable", "PluginAssetsRemoveCommand::$io": "class-cake.command.pluginassetsremovecommand.html#$io", "PluginAssetsRemoveCommand::$modelClass": "class-cake.command.pluginassetsremovecommand.html#$modelClass", "PluginAssetsRemoveCommand::$name": "class-cake.command.pluginassetsremovecommand.html#$name", "PluginAssetsRemoveCommand::__construct()()": "class-cake.command.pluginassetsremovecommand.html#__construct()", "PluginAssetsRemoveCommand::_copyDirectory()()": "class-cake.command.pluginassetsremovecommand.html#_copyDirectory()", "PluginAssetsRemoveCommand::_createDirectory()()": "class-cake.command.pluginassetsremovecommand.html#_createDirectory()", "PluginAssetsRemoveCommand::_createSymlink()()": "class-cake.command.pluginassetsremovecommand.html#_createSymlink()", "PluginAssetsRemoveCommand::_list()()": "class-cake.command.pluginassetsremovecommand.html#_list()", "PluginAssetsRemoveCommand::_process()()": "class-cake.command.pluginassetsremovecommand.html#_process()", "PluginAssetsRemoveCommand::_remove()()": "class-cake.command.pluginassetsremovecommand.html#_remove()", "PluginAssetsRemoveCommand::_setModelClass()()": "class-cake.command.pluginassetsremovecommand.html#_setModelClass()", "PluginAssetsRemoveCommand::abort()()": "class-cake.command.pluginassetsremovecommand.html#abort()", "PluginAssetsRemoveCommand::buildOptionParser()()": "class-cake.command.pluginassetsremovecommand.html#buildOptionParser()", "PluginAssetsRemoveCommand::defaultName()()": "class-cake.command.pluginassetsremovecommand.html#defaultName()", "PluginAssetsRemoveCommand::displayHelp()()": "class-cake.command.pluginassetsremovecommand.html#displayHelp()", "PluginAssetsRemoveCommand::execute()()": "class-cake.command.pluginassetsremovecommand.html#execute()", "PluginAssetsRemoveCommand::executeCommand()()": "class-cake.command.pluginassetsremovecommand.html#executeCommand()", "PluginAssetsRemoveCommand::fetchTable()()": "class-cake.command.pluginassetsremovecommand.html#fetchTable()", "PluginAssetsRemoveCommand::getDescription()()": "class-cake.command.pluginassetsremovecommand.html#getDescription()", "PluginAssetsRemoveCommand::getModelType()()": "class-cake.command.pluginassetsremovecommand.html#getModelType()", "PluginAssetsRemoveCommand::getName()()": "class-cake.command.pluginassetsremovecommand.html#getName()", "PluginAssetsRemoveCommand::getOptionParser()()": "class-cake.command.pluginassetsremovecommand.html#getOptionParser()", "PluginAssetsRemoveCommand::getRootName()()": "class-cake.command.pluginassetsremovecommand.html#getRootName()", "PluginAssetsRemoveCommand::getTableLocator()()": "class-cake.command.pluginassetsremovecommand.html#getTableLocator()", "PluginAssetsRemoveCommand::initialize()()": "class-cake.command.pluginassetsremovecommand.html#initialize()", "PluginAssetsRemoveCommand::loadModel()()": "class-cake.command.pluginassetsremovecommand.html#loadModel()", "PluginAssetsRemoveCommand::log()()": "class-cake.command.pluginassetsremovecommand.html#log()", "PluginAssetsRemoveCommand::modelFactory()()": "class-cake.command.pluginassetsremovecommand.html#modelFactory()", "PluginAssetsRemoveCommand::run()()": "class-cake.command.pluginassetsremovecommand.html#run()", "PluginAssetsRemoveCommand::setModelType()()": "class-cake.command.pluginassetsremovecommand.html#setModelType()", "PluginAssetsRemoveCommand::setName()()": "class-cake.command.pluginassetsremovecommand.html#setName()", "PluginAssetsRemoveCommand::setOutputLevel()()": "class-cake.command.pluginassetsremovecommand.html#setOutputLevel()", "PluginAssetsRemoveCommand::setTableLocator()()": "class-cake.command.pluginassetsremovecommand.html#setTableLocator()", "PluginAssetsSymlinkCommand (class)": "class-cake.command.pluginassetssymlinkcommand.html", "PluginAssetsSymlinkCommand::$_modelFactories": "class-cake.command.pluginassetssymlinkcommand.html#$_modelFactories", "PluginAssetsSymlinkCommand::$_modelType": "class-cake.command.pluginassetssymlinkcommand.html#$_modelType", "PluginAssetsSymlinkCommand::$_tableLocator": "class-cake.command.pluginassetssymlinkcommand.html#$_tableLocator", "PluginAssetsSymlinkCommand::$args": "class-cake.command.pluginassetssymlinkcommand.html#$args", "PluginAssetsSymlinkCommand::$defaultTable": "class-cake.command.pluginassetssymlinkcommand.html#$defaultTable", "PluginAssetsSymlinkCommand::$io": "class-cake.command.pluginassetssymlinkcommand.html#$io", "PluginAssetsSymlinkCommand::$modelClass": "class-cake.command.pluginassetssymlinkcommand.html#$modelClass", "PluginAssetsSymlinkCommand::$name": "class-cake.command.pluginassetssymlinkcommand.html#$name", "PluginAssetsSymlinkCommand::__construct()()": "class-cake.command.pluginassetssymlinkcommand.html#__construct()", "PluginAssetsSymlinkCommand::_copyDirectory()()": "class-cake.command.pluginassetssymlinkcommand.html#_copyDirectory()", "PluginAssetsSymlinkCommand::_createDirectory()()": "class-cake.command.pluginassetssymlinkcommand.html#_createDirectory()", "PluginAssetsSymlinkCommand::_createSymlink()()": "class-cake.command.pluginassetssymlinkcommand.html#_createSymlink()", "PluginAssetsSymlinkCommand::_list()()": "class-cake.command.pluginassetssymlinkcommand.html#_list()", "PluginAssetsSymlinkCommand::_process()()": "class-cake.command.pluginassetssymlinkcommand.html#_process()", "PluginAssetsSymlinkCommand::_remove()()": "class-cake.command.pluginassetssymlinkcommand.html#_remove()", "PluginAssetsSymlinkCommand::_setModelClass()()": "class-cake.command.pluginassetssymlinkcommand.html#_setModelClass()", "PluginAssetsSymlinkCommand::abort()()": "class-cake.command.pluginassetssymlinkcommand.html#abort()", "PluginAssetsSymlinkCommand::buildOptionParser()()": "class-cake.command.pluginassetssymlinkcommand.html#buildOptionParser()", "PluginAssetsSymlinkCommand::defaultName()()": "class-cake.command.pluginassetssymlinkcommand.html#defaultName()", "PluginAssetsSymlinkCommand::displayHelp()()": "class-cake.command.pluginassetssymlinkcommand.html#displayHelp()", "PluginAssetsSymlinkCommand::execute()()": "class-cake.command.pluginassetssymlinkcommand.html#execute()", "PluginAssetsSymlinkCommand::executeCommand()()": "class-cake.command.pluginassetssymlinkcommand.html#executeCommand()", "PluginAssetsSymlinkCommand::fetchTable()()": "class-cake.command.pluginassetssymlinkcommand.html#fetchTable()", "PluginAssetsSymlinkCommand::getDescription()()": "class-cake.command.pluginassetssymlinkcommand.html#getDescription()", "PluginAssetsSymlinkCommand::getModelType()()": "class-cake.command.pluginassetssymlinkcommand.html#getModelType()", "PluginAssetsSymlinkCommand::getName()()": "class-cake.command.pluginassetssymlinkcommand.html#getName()", "PluginAssetsSymlinkCommand::getOptionParser()()": "class-cake.command.pluginassetssymlinkcommand.html#getOptionParser()", "PluginAssetsSymlinkCommand::getRootName()()": "class-cake.command.pluginassetssymlinkcommand.html#getRootName()", "PluginAssetsSymlinkCommand::getTableLocator()()": "class-cake.command.pluginassetssymlinkcommand.html#getTableLocator()", "PluginAssetsSymlinkCommand::initialize()()": "class-cake.command.pluginassetssymlinkcommand.html#initialize()", "PluginAssetsSymlinkCommand::loadModel()()": "class-cake.command.pluginassetssymlinkcommand.html#loadModel()", "PluginAssetsSymlinkCommand::log()()": "class-cake.command.pluginassetssymlinkcommand.html#log()", "PluginAssetsSymlinkCommand::modelFactory()()": "class-cake.command.pluginassetssymlinkcommand.html#modelFactory()", "PluginAssetsSymlinkCommand::run()()": "class-cake.command.pluginassetssymlinkcommand.html#run()", "PluginAssetsSymlinkCommand::setModelType()()": "class-cake.command.pluginassetssymlinkcommand.html#setModelType()", "PluginAssetsSymlinkCommand::setName()()": "class-cake.command.pluginassetssymlinkcommand.html#setName()", "PluginAssetsSymlinkCommand::setOutputLevel()()": "class-cake.command.pluginassetssymlinkcommand.html#setOutputLevel()", "PluginAssetsSymlinkCommand::setTableLocator()()": "class-cake.command.pluginassetssymlinkcommand.html#setTableLocator()", "PluginAssetsTrait (trait)": "trait-cake.command.pluginassetstrait.html", "PluginCollection (class)": "class-cake.core.plugincollection.html", "PluginCollection::$loopDepth": "class-cake.core.plugincollection.html#$loopDepth", "PluginCollection::$names": "class-cake.core.plugincollection.html#$names", "PluginCollection::$plugins": "class-cake.core.plugincollection.html#$plugins", "PluginCollection::$positions": "class-cake.core.plugincollection.html#$positions", "PluginCollection::__construct()()": "class-cake.core.plugincollection.html#__construct()", "PluginCollection::add()()": "class-cake.core.plugincollection.html#add()", "PluginCollection::clear()()": "class-cake.core.plugincollection.html#clear()", "PluginCollection::count()()": "class-cake.core.plugincollection.html#count()", "PluginCollection::create()()": "class-cake.core.plugincollection.html#create()", "PluginCollection::current()()": "class-cake.core.plugincollection.html#current()", "PluginCollection::findPath()()": "class-cake.core.plugincollection.html#findPath()", "PluginCollection::get()()": "class-cake.core.plugincollection.html#get()", "PluginCollection::has()()": "class-cake.core.plugincollection.html#has()", "PluginCollection::key()()": "class-cake.core.plugincollection.html#key()", "PluginCollection::loadConfig()()": "class-cake.core.plugincollection.html#loadConfig()", "PluginCollection::next()()": "class-cake.core.plugincollection.html#next()", "PluginCollection::remove()()": "class-cake.core.plugincollection.html#remove()", "PluginCollection::rewind()()": "class-cake.core.plugincollection.html#rewind()", "PluginCollection::valid()()": "class-cake.core.plugincollection.html#valid()", "PluginCollection::with()()": "class-cake.core.plugincollection.html#with()", "PluginInterface (interface)": "interface-cake.core.plugininterface.html", "PluginLoadCommand (class)": "class-cake.command.pluginloadcommand.html", "PluginLoadCommand::$_modelFactories": "class-cake.command.pluginloadcommand.html#$_modelFactories", "PluginLoadCommand::$_modelType": "class-cake.command.pluginloadcommand.html#$_modelType", "PluginLoadCommand::$_tableLocator": "class-cake.command.pluginloadcommand.html#$_tableLocator", "PluginLoadCommand::$args": "class-cake.command.pluginloadcommand.html#$args", "PluginLoadCommand::$defaultTable": "class-cake.command.pluginloadcommand.html#$defaultTable", "PluginLoadCommand::$io": "class-cake.command.pluginloadcommand.html#$io", "PluginLoadCommand::$modelClass": "class-cake.command.pluginloadcommand.html#$modelClass", "PluginLoadCommand::$name": "class-cake.command.pluginloadcommand.html#$name", "PluginLoadCommand::__construct()()": "class-cake.command.pluginloadcommand.html#__construct()", "PluginLoadCommand::_setModelClass()()": "class-cake.command.pluginloadcommand.html#_setModelClass()", "PluginLoadCommand::abort()()": "class-cake.command.pluginloadcommand.html#abort()", "PluginLoadCommand::buildOptionParser()()": "class-cake.command.pluginloadcommand.html#buildOptionParser()", "PluginLoadCommand::defaultName()()": "class-cake.command.pluginloadcommand.html#defaultName()", "PluginLoadCommand::displayHelp()()": "class-cake.command.pluginloadcommand.html#displayHelp()", "PluginLoadCommand::execute()()": "class-cake.command.pluginloadcommand.html#execute()", "PluginLoadCommand::executeCommand()()": "class-cake.command.pluginloadcommand.html#executeCommand()", "PluginLoadCommand::fetchTable()()": "class-cake.command.pluginloadcommand.html#fetchTable()", "PluginLoadCommand::getDescription()()": "class-cake.command.pluginloadcommand.html#getDescription()", "PluginLoadCommand::getModelType()()": "class-cake.command.pluginloadcommand.html#getModelType()", "PluginLoadCommand::getName()()": "class-cake.command.pluginloadcommand.html#getName()", "PluginLoadCommand::getOptionParser()()": "class-cake.command.pluginloadcommand.html#getOptionParser()", "PluginLoadCommand::getRootName()()": "class-cake.command.pluginloadcommand.html#getRootName()", "PluginLoadCommand::getTableLocator()()": "class-cake.command.pluginloadcommand.html#getTableLocator()", "PluginLoadCommand::initialize()()": "class-cake.command.pluginloadcommand.html#initialize()", "PluginLoadCommand::loadModel()()": "class-cake.command.pluginloadcommand.html#loadModel()", "PluginLoadCommand::log()()": "class-cake.command.pluginloadcommand.html#log()", "PluginLoadCommand::modelFactory()()": "class-cake.command.pluginloadcommand.html#modelFactory()", "PluginLoadCommand::modifyApplication()()": "class-cake.command.pluginloadcommand.html#modifyApplication()", "PluginLoadCommand::run()()": "class-cake.command.pluginloadcommand.html#run()", "PluginLoadCommand::setModelType()()": "class-cake.command.pluginloadcommand.html#setModelType()", "PluginLoadCommand::setName()()": "class-cake.command.pluginloadcommand.html#setName()", "PluginLoadCommand::setOutputLevel()()": "class-cake.command.pluginloadcommand.html#setOutputLevel()", "PluginLoadCommand::setTableLocator()()": "class-cake.command.pluginloadcommand.html#setTableLocator()", "PluginLoadedCommand (class)": "class-cake.command.pluginloadedcommand.html", "PluginLoadedCommand::$_modelFactories": "class-cake.command.pluginloadedcommand.html#$_modelFactories", "PluginLoadedCommand::$_modelType": "class-cake.command.pluginloadedcommand.html#$_modelType", "PluginLoadedCommand::$_tableLocator": "class-cake.command.pluginloadedcommand.html#$_tableLocator", "PluginLoadedCommand::$defaultTable": "class-cake.command.pluginloadedcommand.html#$defaultTable", "PluginLoadedCommand::$modelClass": "class-cake.command.pluginloadedcommand.html#$modelClass", "PluginLoadedCommand::$name": "class-cake.command.pluginloadedcommand.html#$name", "PluginLoadedCommand::__construct()()": "class-cake.command.pluginloadedcommand.html#__construct()", "PluginLoadedCommand::_setModelClass()()": "class-cake.command.pluginloadedcommand.html#_setModelClass()", "PluginLoadedCommand::abort()()": "class-cake.command.pluginloadedcommand.html#abort()", "PluginLoadedCommand::buildOptionParser()()": "class-cake.command.pluginloadedcommand.html#buildOptionParser()", "PluginLoadedCommand::defaultName()()": "class-cake.command.pluginloadedcommand.html#defaultName()", "PluginLoadedCommand::displayHelp()()": "class-cake.command.pluginloadedcommand.html#displayHelp()", "PluginLoadedCommand::execute()()": "class-cake.command.pluginloadedcommand.html#execute()", "PluginLoadedCommand::executeCommand()()": "class-cake.command.pluginloadedcommand.html#executeCommand()", "PluginLoadedCommand::fetchTable()()": "class-cake.command.pluginloadedcommand.html#fetchTable()", "PluginLoadedCommand::getDescription()()": "class-cake.command.pluginloadedcommand.html#getDescription()", "PluginLoadedCommand::getModelType()()": "class-cake.command.pluginloadedcommand.html#getModelType()", "PluginLoadedCommand::getName()()": "class-cake.command.pluginloadedcommand.html#getName()", "PluginLoadedCommand::getOptionParser()()": "class-cake.command.pluginloadedcommand.html#getOptionParser()", "PluginLoadedCommand::getRootName()()": "class-cake.command.pluginloadedcommand.html#getRootName()", "PluginLoadedCommand::getTableLocator()()": "class-cake.command.pluginloadedcommand.html#getTableLocator()", "PluginLoadedCommand::initialize()()": "class-cake.command.pluginloadedcommand.html#initialize()", "PluginLoadedCommand::loadModel()()": "class-cake.command.pluginloadedcommand.html#loadModel()", "PluginLoadedCommand::log()()": "class-cake.command.pluginloadedcommand.html#log()", "PluginLoadedCommand::modelFactory()()": "class-cake.command.pluginloadedcommand.html#modelFactory()", "PluginLoadedCommand::run()()": "class-cake.command.pluginloadedcommand.html#run()", "PluginLoadedCommand::setModelType()()": "class-cake.command.pluginloadedcommand.html#setModelType()", "PluginLoadedCommand::setName()()": "class-cake.command.pluginloadedcommand.html#setName()", "PluginLoadedCommand::setOutputLevel()()": "class-cake.command.pluginloadedcommand.html#setOutputLevel()", "PluginLoadedCommand::setTableLocator()()": "class-cake.command.pluginloadedcommand.html#setTableLocator()", "PluginShortRoute (class)": "class-cake.routing.route.pluginshortroute.html", "PluginShortRoute::$_compiledRoute": "class-cake.routing.route.pluginshortroute.html#$_compiledRoute", "PluginShortRoute::$_extensions": "class-cake.routing.route.pluginshortroute.html#$_extensions", "PluginShortRoute::$_greedy": "class-cake.routing.route.pluginshortroute.html#$_greedy", "PluginShortRoute::$_inflectedDefaults": "class-cake.routing.route.pluginshortroute.html#$_inflectedDefaults", "PluginShortRoute::$_name": "class-cake.routing.route.pluginshortroute.html#$_name", "PluginShortRoute::$braceKeys": "class-cake.routing.route.pluginshortroute.html#$braceKeys", "PluginShortRoute::$defaults": "class-cake.routing.route.pluginshortroute.html#$defaults", "PluginShortRoute::$keys": "class-cake.routing.route.pluginshortroute.html#$keys", "PluginShortRoute::$middleware": "class-cake.routing.route.pluginshortroute.html#$middleware", "PluginShortRoute::$options": "class-cake.routing.route.pluginshortroute.html#$options", "PluginShortRoute::$template": "class-cake.routing.route.pluginshortroute.html#$template", "PluginShortRoute::__construct()()": "class-cake.routing.route.pluginshortroute.html#__construct()", "PluginShortRoute::__set_state()()": "class-cake.routing.route.pluginshortroute.html#__set_state()", "PluginShortRoute::_matchMethod()()": "class-cake.routing.route.pluginshortroute.html#_matchMethod()", "PluginShortRoute::_parseArgs()()": "class-cake.routing.route.pluginshortroute.html#_parseArgs()", "PluginShortRoute::_parseExtension()()": "class-cake.routing.route.pluginshortroute.html#_parseExtension()", "PluginShortRoute::_persistParams()()": "class-cake.routing.route.pluginshortroute.html#_persistParams()", "PluginShortRoute::_underscore()()": "class-cake.routing.route.pluginshortroute.html#_underscore()", "PluginShortRoute::_writeRoute()()": "class-cake.routing.route.pluginshortroute.html#_writeRoute()", "PluginShortRoute::_writeUrl()()": "class-cake.routing.route.pluginshortroute.html#_writeUrl()", "PluginShortRoute::compile()()": "class-cake.routing.route.pluginshortroute.html#compile()", "PluginShortRoute::compiled()()": "class-cake.routing.route.pluginshortroute.html#compiled()", "PluginShortRoute::getExtensions()()": "class-cake.routing.route.pluginshortroute.html#getExtensions()", "PluginShortRoute::getMiddleware()()": "class-cake.routing.route.pluginshortroute.html#getMiddleware()", "PluginShortRoute::getName()()": "class-cake.routing.route.pluginshortroute.html#getName()", "PluginShortRoute::hostMatches()()": "class-cake.routing.route.pluginshortroute.html#hostMatches()", "PluginShortRoute::match()()": "class-cake.routing.route.pluginshortroute.html#match()", "PluginShortRoute::normalizeAndValidateMethods()()": "class-cake.routing.route.pluginshortroute.html#normalizeAndValidateMethods()", "PluginShortRoute::parse()()": "class-cake.routing.route.pluginshortroute.html#parse()", "PluginShortRoute::parseRequest()()": "class-cake.routing.route.pluginshortroute.html#parseRequest()", "PluginShortRoute::setExtensions()()": "class-cake.routing.route.pluginshortroute.html#setExtensions()", "PluginShortRoute::setHost()()": "class-cake.routing.route.pluginshortroute.html#setHost()", "PluginShortRoute::setMethods()()": "class-cake.routing.route.pluginshortroute.html#setMethods()", "PluginShortRoute::setMiddleware()()": "class-cake.routing.route.pluginshortroute.html#setMiddleware()", "PluginShortRoute::setPass()()": "class-cake.routing.route.pluginshortroute.html#setPass()", "PluginShortRoute::setPatterns()()": "class-cake.routing.route.pluginshortroute.html#setPatterns()", "PluginShortRoute::setPersist()()": "class-cake.routing.route.pluginshortroute.html#setPersist()", "PluginShortRoute::staticPath()()": "class-cake.routing.route.pluginshortroute.html#staticPath()", "PluginUnloadCommand (class)": "class-cake.command.pluginunloadcommand.html", "PluginUnloadCommand::$_modelFactories": "class-cake.command.pluginunloadcommand.html#$_modelFactories", "PluginUnloadCommand::$_modelType": "class-cake.command.pluginunloadcommand.html#$_modelType", "PluginUnloadCommand::$_tableLocator": "class-cake.command.pluginunloadcommand.html#$_tableLocator", "PluginUnloadCommand::$defaultTable": "class-cake.command.pluginunloadcommand.html#$defaultTable", "PluginUnloadCommand::$modelClass": "class-cake.command.pluginunloadcommand.html#$modelClass", "PluginUnloadCommand::$name": "class-cake.command.pluginunloadcommand.html#$name", "PluginUnloadCommand::__construct()()": "class-cake.command.pluginunloadcommand.html#__construct()", "PluginUnloadCommand::_setModelClass()()": "class-cake.command.pluginunloadcommand.html#_setModelClass()", "PluginUnloadCommand::abort()()": "class-cake.command.pluginunloadcommand.html#abort()", "PluginUnloadCommand::buildOptionParser()()": "class-cake.command.pluginunloadcommand.html#buildOptionParser()", "PluginUnloadCommand::defaultName()()": "class-cake.command.pluginunloadcommand.html#defaultName()", "PluginUnloadCommand::displayHelp()()": "class-cake.command.pluginunloadcommand.html#displayHelp()", "PluginUnloadCommand::execute()()": "class-cake.command.pluginunloadcommand.html#execute()", "PluginUnloadCommand::executeCommand()()": "class-cake.command.pluginunloadcommand.html#executeCommand()", "PluginUnloadCommand::fetchTable()()": "class-cake.command.pluginunloadcommand.html#fetchTable()", "PluginUnloadCommand::getDescription()()": "class-cake.command.pluginunloadcommand.html#getDescription()", "PluginUnloadCommand::getModelType()()": "class-cake.command.pluginunloadcommand.html#getModelType()", "PluginUnloadCommand::getName()()": "class-cake.command.pluginunloadcommand.html#getName()", "PluginUnloadCommand::getOptionParser()()": "class-cake.command.pluginunloadcommand.html#getOptionParser()", "PluginUnloadCommand::getRootName()()": "class-cake.command.pluginunloadcommand.html#getRootName()", "PluginUnloadCommand::getTableLocator()()": "class-cake.command.pluginunloadcommand.html#getTableLocator()", "PluginUnloadCommand::initialize()()": "class-cake.command.pluginunloadcommand.html#initialize()", "PluginUnloadCommand::loadModel()()": "class-cake.command.pluginunloadcommand.html#loadModel()", "PluginUnloadCommand::log()()": "class-cake.command.pluginunloadcommand.html#log()", "PluginUnloadCommand::modelFactory()()": "class-cake.command.pluginunloadcommand.html#modelFactory()", "PluginUnloadCommand::modifyApplication()()": "class-cake.command.pluginunloadcommand.html#modifyApplication()", "PluginUnloadCommand::run()()": "class-cake.command.pluginunloadcommand.html#run()", "PluginUnloadCommand::setModelType()()": "class-cake.command.pluginunloadcommand.html#setModelType()", "PluginUnloadCommand::setName()()": "class-cake.command.pluginunloadcommand.html#setName()", "PluginUnloadCommand::setOutputLevel()()": "class-cake.command.pluginunloadcommand.html#setOutputLevel()", "PluginUnloadCommand::setTableLocator()()": "class-cake.command.pluginunloadcommand.html#setTableLocator()", "PluralRules (class)": "class-cake.i18n.pluralrules.html", "PluralRules::$_rulesMap": "class-cake.i18n.pluralrules.html#$_rulesMap", "PluralRules::calculate()()": "class-cake.i18n.pluralrules.html#calculate()", "PoFileParser (class)": "class-cake.i18n.parser.pofileparser.html", "PoFileParser::_addMessage()()": "class-cake.i18n.parser.pofileparser.html#_addMessage()", "PoFileParser::parse()()": "class-cake.i18n.parser.pofileparser.html#parse()", "Postgres (class)": "class-cake.database.driver.postgres.html", "Postgres::$_autoQuoting": "class-cake.database.driver.postgres.html#$_autoQuoting", "Postgres::$_baseConfig": "class-cake.database.driver.postgres.html#$_baseConfig", "Postgres::$_config": "class-cake.database.driver.postgres.html#$_config", "Postgres::$_connection": "class-cake.database.driver.postgres.html#$_connection", "Postgres::$_endQuote": "class-cake.database.driver.postgres.html#$_endQuote", "Postgres::$_schemaDialect": "class-cake.database.driver.postgres.html#$_schemaDialect", "Postgres::$_startQuote": "class-cake.database.driver.postgres.html#$_startQuote", "Postgres::$_version": "class-cake.database.driver.postgres.html#$_version", "Postgres::$connectRetries": "class-cake.database.driver.postgres.html#$connectRetries", "Postgres::__construct()()": "class-cake.database.driver.postgres.html#__construct()", "Postgres::__debugInfo()()": "class-cake.database.driver.postgres.html#__debugInfo()", "Postgres::__destruct()()": "class-cake.database.driver.postgres.html#__destruct()", "Postgres::_connect()()": "class-cake.database.driver.postgres.html#_connect()", "Postgres::_deleteQueryTranslator()()": "class-cake.database.driver.postgres.html#_deleteQueryTranslator()", "Postgres::_expressionTranslators()()": "class-cake.database.driver.postgres.html#_expressionTranslators()", "Postgres::_insertQueryTranslator()()": "class-cake.database.driver.postgres.html#_insertQueryTranslator()", "Postgres::_removeAliasesFromConditions()()": "class-cake.database.driver.postgres.html#_removeAliasesFromConditions()", "Postgres::_selectQueryTranslator()()": "class-cake.database.driver.postgres.html#_selectQueryTranslator()", "Postgres::_transformDistinct()()": "class-cake.database.driver.postgres.html#_transformDistinct()", "Postgres::_transformFunctionExpression()()": "class-cake.database.driver.postgres.html#_transformFunctionExpression()", "Postgres::_transformIdentifierExpression()()": "class-cake.database.driver.postgres.html#_transformIdentifierExpression()", "Postgres::_transformStringExpression()()": "class-cake.database.driver.postgres.html#_transformStringExpression()", "Postgres::_updateQueryTranslator()()": "class-cake.database.driver.postgres.html#_updateQueryTranslator()", "Postgres::beginTransaction()()": "class-cake.database.driver.postgres.html#beginTransaction()", "Postgres::commitTransaction()()": "class-cake.database.driver.postgres.html#commitTransaction()", "Postgres::compileQuery()()": "class-cake.database.driver.postgres.html#compileQuery()", "Postgres::connect()()": "class-cake.database.driver.postgres.html#connect()", "Postgres::disableAutoQuoting()()": "class-cake.database.driver.postgres.html#disableAutoQuoting()", "Postgres::disableForeignKeySQL()()": "class-cake.database.driver.postgres.html#disableForeignKeySQL()", "Postgres::disconnect()()": "class-cake.database.driver.postgres.html#disconnect()", "Postgres::enableAutoQuoting()()": "class-cake.database.driver.postgres.html#enableAutoQuoting()", "Postgres::enabled()()": "class-cake.database.driver.postgres.html#enabled()", "Postgres::enableForeignKeySQL()()": "class-cake.database.driver.postgres.html#enableForeignKeySQL()", "Postgres::getConnection()()": "class-cake.database.driver.postgres.html#getConnection()", "Postgres::getConnectRetries()()": "class-cake.database.driver.postgres.html#getConnectRetries()", "Postgres::getMaxAliasLength()()": "class-cake.database.driver.postgres.html#getMaxAliasLength()", "Postgres::inTransaction()()": "class-cake.database.driver.postgres.html#inTransaction()", "Postgres::isAutoQuotingEnabled()()": "class-cake.database.driver.postgres.html#isAutoQuotingEnabled()", "Postgres::isConnected()()": "class-cake.database.driver.postgres.html#isConnected()", "Postgres::lastInsertId()()": "class-cake.database.driver.postgres.html#lastInsertId()", "Postgres::newCompiler()()": "class-cake.database.driver.postgres.html#newCompiler()", "Postgres::newTableSchema()()": "class-cake.database.driver.postgres.html#newTableSchema()", "Postgres::prepare()()": "class-cake.database.driver.postgres.html#prepare()", "Postgres::queryTranslator()()": "class-cake.database.driver.postgres.html#queryTranslator()", "Postgres::quote()()": "class-cake.database.driver.postgres.html#quote()", "Postgres::quoteIdentifier()()": "class-cake.database.driver.postgres.html#quoteIdentifier()", "Postgres::releaseSavePointSQL()()": "class-cake.database.driver.postgres.html#releaseSavePointSQL()", "Postgres::rollbackSavePointSQL()()": "class-cake.database.driver.postgres.html#rollbackSavePointSQL()", "Postgres::rollbackTransaction()()": "class-cake.database.driver.postgres.html#rollbackTransaction()", "Postgres::savePointSQL()()": "class-cake.database.driver.postgres.html#savePointSQL()", "Postgres::schema()()": "class-cake.database.driver.postgres.html#schema()", "Postgres::schemaDialect()()": "class-cake.database.driver.postgres.html#schemaDialect()", "Postgres::schemaValue()()": "class-cake.database.driver.postgres.html#schemaValue()", "Postgres::setConnection()()": "class-cake.database.driver.postgres.html#setConnection()", "Postgres::setEncoding()()": "class-cake.database.driver.postgres.html#setEncoding()", "Postgres::setSchema()()": "class-cake.database.driver.postgres.html#setSchema()", "Postgres::supports()()": "class-cake.database.driver.postgres.html#supports()", "Postgres::supportsCTEs()()": "class-cake.database.driver.postgres.html#supportsCTEs()", "Postgres::supportsDynamicConstraints()()": "class-cake.database.driver.postgres.html#supportsDynamicConstraints()", "Postgres::supportsQuoting()()": "class-cake.database.driver.postgres.html#supportsQuoting()", "Postgres::supportsSavePoints()()": "class-cake.database.driver.postgres.html#supportsSavePoints()", "Postgres::version()()": "class-cake.database.driver.postgres.html#version()", "PostgresCompiler (class)": "class-cake.database.postgrescompiler.html", "PostgresCompiler::$_deleteParts": "class-cake.database.postgrescompiler.html#$_deleteParts", "PostgresCompiler::$_insertParts": "class-cake.database.postgrescompiler.html#$_insertParts", "PostgresCompiler::$_orderedUnion": "class-cake.database.postgrescompiler.html#$_orderedUnion", "PostgresCompiler::$_quotedSelectAliases": "class-cake.database.postgrescompiler.html#$_quotedSelectAliases", "PostgresCompiler::$_selectParts": "class-cake.database.postgrescompiler.html#$_selectParts", "PostgresCompiler::$_templates": "class-cake.database.postgrescompiler.html#$_templates", "PostgresCompiler::$_updateParts": "class-cake.database.postgrescompiler.html#$_updateParts", "PostgresCompiler::_buildFromPart()()": "class-cake.database.postgrescompiler.html#_buildFromPart()", "PostgresCompiler::_buildHavingPart()()": "class-cake.database.postgrescompiler.html#_buildHavingPart()", "PostgresCompiler::_buildInsertPart()()": "class-cake.database.postgrescompiler.html#_buildInsertPart()", "PostgresCompiler::_buildJoinPart()()": "class-cake.database.postgrescompiler.html#_buildJoinPart()", "PostgresCompiler::_buildModifierPart()()": "class-cake.database.postgrescompiler.html#_buildModifierPart()", "PostgresCompiler::_buildSelectPart()()": "class-cake.database.postgrescompiler.html#_buildSelectPart()", "PostgresCompiler::_buildSetPart()()": "class-cake.database.postgrescompiler.html#_buildSetPart()", "PostgresCompiler::_buildUnionPart()()": "class-cake.database.postgrescompiler.html#_buildUnionPart()", "PostgresCompiler::_buildUpdatePart()()": "class-cake.database.postgrescompiler.html#_buildUpdatePart()", "PostgresCompiler::_buildValuesPart()()": "class-cake.database.postgrescompiler.html#_buildValuesPart()", "PostgresCompiler::_buildWindowPart()()": "class-cake.database.postgrescompiler.html#_buildWindowPart()", "PostgresCompiler::_buildWithPart()()": "class-cake.database.postgrescompiler.html#_buildWithPart()", "PostgresCompiler::_sqlCompiler()()": "class-cake.database.postgrescompiler.html#_sqlCompiler()", "PostgresCompiler::_stringifyExpressions()()": "class-cake.database.postgrescompiler.html#_stringifyExpressions()", "PostgresCompiler::compile()()": "class-cake.database.postgrescompiler.html#compile()", "PostgresSchemaDialect (class)": "class-cake.database.schema.postgresschemadialect.html", "PostgresSchemaDialect::$_driver": "class-cake.database.schema.postgresschemadialect.html#$_driver", "PostgresSchemaDialect::__construct()()": "class-cake.database.schema.postgresschemadialect.html#__construct()", "PostgresSchemaDialect::_applyTypeSpecificColumnConversion()()": "class-cake.database.schema.postgresschemadialect.html#_applyTypeSpecificColumnConversion()", "PostgresSchemaDialect::_convertColumn()()": "class-cake.database.schema.postgresschemadialect.html#_convertColumn()", "PostgresSchemaDialect::_convertConstraint()()": "class-cake.database.schema.postgresschemadialect.html#_convertConstraint()", "PostgresSchemaDialect::_convertConstraintColumns()()": "class-cake.database.schema.postgresschemadialect.html#_convertConstraintColumns()", "PostgresSchemaDialect::_convertOnClause()()": "class-cake.database.schema.postgresschemadialect.html#_convertOnClause()", "PostgresSchemaDialect::_defaultValue()()": "class-cake.database.schema.postgresschemadialect.html#_defaultValue()", "PostgresSchemaDialect::_foreignOnClause()()": "class-cake.database.schema.postgresschemadialect.html#_foreignOnClause()", "PostgresSchemaDialect::_getTypeSpecificColumnSql()()": "class-cake.database.schema.postgresschemadialect.html#_getTypeSpecificColumnSql()", "PostgresSchemaDialect::_keySql()()": "class-cake.database.schema.postgresschemadialect.html#_keySql()", "PostgresSchemaDialect::addConstraintSql()()": "class-cake.database.schema.postgresschemadialect.html#addConstraintSql()", "PostgresSchemaDialect::columnSql()()": "class-cake.database.schema.postgresschemadialect.html#columnSql()", "PostgresSchemaDialect::constraintSql()()": "class-cake.database.schema.postgresschemadialect.html#constraintSql()", "PostgresSchemaDialect::convertColumnDescription()()": "class-cake.database.schema.postgresschemadialect.html#convertColumnDescription()", "PostgresSchemaDialect::convertForeignKeyDescription()()": "class-cake.database.schema.postgresschemadialect.html#convertForeignKeyDescription()", "PostgresSchemaDialect::convertIndexDescription()()": "class-cake.database.schema.postgresschemadialect.html#convertIndexDescription()", "PostgresSchemaDialect::convertOptionsDescription()()": "class-cake.database.schema.postgresschemadialect.html#convertOptionsDescription()", "PostgresSchemaDialect::createTableSql()()": "class-cake.database.schema.postgresschemadialect.html#createTableSql()", "PostgresSchemaDialect::describeColumnSql()()": "class-cake.database.schema.postgresschemadialect.html#describeColumnSql()", "PostgresSchemaDialect::describeForeignKeySql()()": "class-cake.database.schema.postgresschemadialect.html#describeForeignKeySql()", "PostgresSchemaDialect::describeIndexSql()()": "class-cake.database.schema.postgresschemadialect.html#describeIndexSql()", "PostgresSchemaDialect::describeOptionsSql()()": "class-cake.database.schema.postgresschemadialect.html#describeOptionsSql()", "PostgresSchemaDialect::dropConstraintSql()()": "class-cake.database.schema.postgresschemadialect.html#dropConstraintSql()", "PostgresSchemaDialect::dropTableSql()()": "class-cake.database.schema.postgresschemadialect.html#dropTableSql()", "PostgresSchemaDialect::indexSql()()": "class-cake.database.schema.postgresschemadialect.html#indexSql()", "PostgresSchemaDialect::listTablesSql()()": "class-cake.database.schema.postgresschemadialect.html#listTablesSql()", "PostgresSchemaDialect::listTablesWithoutViewsSql()()": "class-cake.database.schema.postgresschemadialect.html#listTablesWithoutViewsSql()", "PostgresSchemaDialect::truncateTableSql()()": "class-cake.database.schema.postgresschemadialect.html#truncateTableSql()", "ProgressHelper (class)": "class-cake.shell.helper.progresshelper.html", "ProgressHelper::$_config": "class-cake.shell.helper.progresshelper.html#$_config", "ProgressHelper::$_configInitialized": "class-cake.shell.helper.progresshelper.html#$_configInitialized", "ProgressHelper::$_defaultConfig": "class-cake.shell.helper.progresshelper.html#$_defaultConfig", "ProgressHelper::$_io": "class-cake.shell.helper.progresshelper.html#$_io", "ProgressHelper::$_progress": "class-cake.shell.helper.progresshelper.html#$_progress", "ProgressHelper::$_total": "class-cake.shell.helper.progresshelper.html#$_total", "ProgressHelper::$_width": "class-cake.shell.helper.progresshelper.html#$_width", "ProgressHelper::__construct()()": "class-cake.shell.helper.progresshelper.html#__construct()", "ProgressHelper::_configDelete()()": "class-cake.shell.helper.progresshelper.html#_configDelete()", "ProgressHelper::_configRead()()": "class-cake.shell.helper.progresshelper.html#_configRead()", "ProgressHelper::_configWrite()()": "class-cake.shell.helper.progresshelper.html#_configWrite()", "ProgressHelper::configShallow()()": "class-cake.shell.helper.progresshelper.html#configShallow()", "ProgressHelper::draw()()": "class-cake.shell.helper.progresshelper.html#draw()", "ProgressHelper::getConfig()()": "class-cake.shell.helper.progresshelper.html#getConfig()", "ProgressHelper::getConfigOrFail()()": "class-cake.shell.helper.progresshelper.html#getConfigOrFail()", "ProgressHelper::increment()()": "class-cake.shell.helper.progresshelper.html#increment()", "ProgressHelper::init()()": "class-cake.shell.helper.progresshelper.html#init()", "ProgressHelper::output()()": "class-cake.shell.helper.progresshelper.html#output()", "ProgressHelper::setConfig()()": "class-cake.shell.helper.progresshelper.html#setConfig()", "PropertyMarshalInterface (interface)": "interface-cake.orm.propertymarshalinterface.html", "PropertyNode (class)": "class-cake.error.debug.propertynode.html", "PropertyNode::__construct()()": "class-cake.error.debug.propertynode.html#__construct()", "PropertyNode::getChildren()()": "class-cake.error.debug.propertynode.html#getChildren()", "PropertyNode::getName()()": "class-cake.error.debug.propertynode.html#getName()", "PropertyNode::getValue()()": "class-cake.error.debug.propertynode.html#getValue()", "PropertyNode::getVisibility()()": "class-cake.error.debug.propertynode.html#getVisibility()", "Query (class)": "class-cake.database.query.html", "Query::$_autoFields": "class-cake.orm.query.html#$_autoFields", "Query::$_beforeFindFired": "class-cake.orm.query.html#$_beforeFindFired", "Query::$_cache": "class-cake.orm.query.html#$_cache", "Query::$_connection": "class-cake.orm.query.html#$_connection", "Query::$_counter": "class-cake.orm.query.html#$_counter", "Query::$_deleteParts": "class-cake.orm.query.html#$_deleteParts", "Query::$_dirty": "class-cake.orm.query.html#$_dirty", "Query::$_eagerLoaded": "class-cake.orm.query.html#$_eagerLoaded", "Query::$_eagerLoader": "class-cake.orm.query.html#$_eagerLoader", "Query::$_formatters": "class-cake.orm.query.html#$_formatters", "Query::$_functionsBuilder": "class-cake.database.query.html#$_functionsBuilder", "Query::$_hasFields": "class-cake.orm.query.html#$_hasFields", "Query::$_hydrate": "class-cake.orm.query.html#$_hydrate", "Query::$_insertParts": "class-cake.database.query.html#$_insertParts", "Query::$_iterator": "class-cake.orm.query.html#$_iterator", "Query::$_mapReduce": "class-cake.orm.query.html#$_mapReduce", "Query::$_options": "class-cake.orm.query.html#$_options", "Query::$_parts": "class-cake.orm.query.html#$_parts", "Query::$_repository": "class-cake.orm.query.html#$_repository", "Query::$_resultDecorators": "class-cake.database.query.html#$_resultDecorators", "Query::$_results": "class-cake.orm.query.html#$_results", "Query::$_resultsCount": "class-cake.orm.query.html#$_resultsCount", "Query::$_selectParts": "class-cake.orm.query.html#$_selectParts", "Query::$_selectTypeMap": "class-cake.database.query.html#$_selectTypeMap", "Query::$_type": "class-cake.database.query.html#$_type", "Query::$_typeMap": "class-cake.orm.query.html#$_typeMap", "Query::$_updateParts": "class-cake.orm.query.html#$_updateParts", "Query::$_useBufferedResults": "class-cake.database.query.html#$_useBufferedResults", "Query::$_valueBinder": "class-cake.orm.query.html#$_valueBinder", "Query::$aliasingEnabled": "class-cake.orm.query.html#$aliasingEnabled", "Query::$typeCastEnabled": "class-cake.database.query.html#$typeCastEnabled", "Query::__call()()": "class-cake.orm.query.html#__call()", "Query::__clone()()": "class-cake.database.query.html#__clone()", "Query::__construct()()": "class-cake.orm.query.html#__construct()", "Query::__debugInfo()()": "class-cake.database.query.html#__debugInfo()", "Query::__toString()()": "class-cake.database.query.html#__toString()", "Query::_addAssociationsToTypeMap()()": "class-cake.orm.query.html#_addAssociationsToTypeMap()", "Query::_addDefaultFields()()": "class-cake.orm.query.html#_addDefaultFields()", "Query::_addDefaultSelectTypes()()": "class-cake.orm.query.html#_addDefaultSelectTypes()", "Query::_conjugate()()": "class-cake.orm.query.html#_conjugate()", "Query::_decorateResults()()": "class-cake.orm.query.html#_decorateResults()", "Query::_decorateStatement()()": "class-cake.database.query.html#_decorateStatement()", "Query::_decoratorClass()()": "class-cake.orm.query.html#_decoratorClass()", "Query::_dirty()()": "class-cake.orm.query.html#_dirty()", "Query::_execute()()": "class-cake.orm.query.html#_execute()", "Query::_expressionsVisitor()()": "class-cake.database.query.html#_expressionsVisitor()", "Query::_makeJoin()()": "class-cake.database.query.html#_makeJoin()", "Query::_performCount()()": "class-cake.orm.query.html#_performCount()", "Query::_transformQuery()()": "class-cake.orm.query.html#_transformQuery()", "Query::addDefaultTypes()()": "class-cake.orm.query.html#addDefaultTypes()", "Query::aliasField()()": "class-cake.orm.query.html#aliasField()", "Query::aliasFields()()": "class-cake.orm.query.html#aliasFields()", "Query::all()()": "class-cake.orm.query.html#all()", "Query::andHaving()()": "class-cake.orm.query.html#andHaving()", "Query::andWhere()()": "class-cake.orm.query.html#andWhere()", "Query::append()()": "class-cake.orm.query.html#append()", "Query::applyOptions()()": "class-cake.orm.query.html#applyOptions()", "Query::bind()()": "class-cake.orm.query.html#bind()", "Query::cache()()": "class-cake.orm.query.html#cache()", "Query::chunk()()": "class-cake.orm.query.html#chunk()", "Query::clause()()": "class-cake.database.query.html#clause()", "Query::cleanCopy()()": "class-cake.orm.query.html#cleanCopy()", "Query::clearContain()()": "class-cake.orm.query.html#clearContain()", "Query::clearResult()()": "class-cake.orm.query.html#clearResult()", "Query::combine()()": "class-cake.orm.query.html#combine()", "Query::contain()()": "class-cake.orm.query.html#contain()", "Query::count()()": "class-cake.orm.query.html#count()", "Query::countBy()()": "class-cake.orm.query.html#countBy()", "Query::counter()()": "class-cake.orm.query.html#counter()", "Query::decorateResults()()": "class-cake.database.query.html#decorateResults()", "Query::delete()()": "class-cake.orm.query.html#delete()", "Query::disableAutoFields()()": "class-cake.orm.query.html#disableAutoFields()", "Query::disableBufferedResults()()": "class-cake.database.query.html#disableBufferedResults()", "Query::disableHydration()()": "class-cake.orm.query.html#disableHydration()", "Query::disableResultsCasting()()": "class-cake.orm.query.html#disableResultsCasting()", "Query::distinct()()": "class-cake.database.query.html#distinct()", "Query::each()()": "class-cake.orm.query.html#each()", "Query::eagerLoaded()()": "class-cake.orm.query.html#eagerLoaded()", "Query::enableAutoFields()()": "class-cake.orm.query.html#enableAutoFields()", "Query::enableBufferedResults()()": "class-cake.database.query.html#enableBufferedResults()", "Query::enableHydration()()": "class-cake.orm.query.html#enableHydration()", "Query::enableResultsCasting()()": "class-cake.orm.query.html#enableResultsCasting()", "Query::epilog()()": "class-cake.orm.query.html#epilog()", "Query::every()()": "class-cake.orm.query.html#every()", "Query::execute()()": "class-cake.orm.query.html#execute()", "Query::expr()()": "class-cake.database.query.html#expr()", "Query::extract()()": "class-cake.orm.query.html#extract()", "Query::filter()()": "class-cake.orm.query.html#filter()", "Query::find()()": "class-cake.orm.query.html#find()", "Query::first()()": "class-cake.orm.query.html#first()", "Query::firstOrFail()()": "class-cake.orm.query.html#firstOrFail()", "Query::formatResults()()": "class-cake.orm.query.html#formatResults()", "Query::from()()": "class-cake.database.query.html#from()", "Query::func()()": "class-cake.database.query.html#func()", "Query::getConnection()()": "class-cake.orm.query.html#getConnection()", "Query::getContain()()": "class-cake.orm.query.html#getContain()", "Query::getDefaultTypes()()": "class-cake.database.query.html#getDefaultTypes()", "Query::getEagerLoader()()": "class-cake.orm.query.html#getEagerLoader()", "Query::getIterator()()": "class-cake.orm.query.html#getIterator()", "Query::getMapReducers()()": "class-cake.orm.query.html#getMapReducers()", "Query::getOptions()()": "class-cake.orm.query.html#getOptions()", "Query::getRepository()()": "class-cake.orm.query.html#getRepository()", "Query::getResultFormatters()()": "class-cake.orm.query.html#getResultFormatters()", "Query::getSelectTypeMap()()": "class-cake.orm.query.html#getSelectTypeMap()", "Query::getTypeMap()()": "class-cake.database.query.html#getTypeMap()", "Query::getValueBinder()()": "class-cake.orm.query.html#getValueBinder()", "Query::group()()": "class-cake.orm.query.html#group()", "Query::groupBy()()": "class-cake.orm.query.html#groupBy()", "Query::having()()": "class-cake.orm.query.html#having()", "Query::identifier()()": "class-cake.database.query.html#identifier()", "Query::indexBy()()": "class-cake.orm.query.html#indexBy()", "Query::innerJoin()()": "class-cake.orm.query.html#innerJoin()", "Query::innerJoinWith()()": "class-cake.orm.query.html#innerJoinWith()", "Query::insert()()": "class-cake.database.query.html#insert()", "Query::into()()": "class-cake.orm.query.html#into()", "Query::isAutoFieldsEnabled()()": "class-cake.orm.query.html#isAutoFieldsEnabled()", "Query::isBufferedResultsEnabled()()": "class-cake.database.query.html#isBufferedResultsEnabled()", "Query::isEagerLoaded()()": "class-cake.orm.query.html#isEagerLoaded()", "Query::isEmpty()()": "class-cake.orm.query.html#isEmpty()", "Query::isHydrationEnabled()()": "class-cake.orm.query.html#isHydrationEnabled()", "Query::isResultsCastingEnabled()()": "class-cake.orm.query.html#isResultsCastingEnabled()", "Query::join()()": "class-cake.orm.query.html#join()", "Query::jsonSerialize()()": "class-cake.orm.query.html#jsonSerialize()", "Query::last()()": "class-cake.orm.query.html#last()", "Query::leftJoin()()": "class-cake.orm.query.html#leftJoin()", "Query::leftJoinWith()()": "class-cake.orm.query.html#leftJoinWith()", "Query::limit()()": "class-cake.orm.query.html#limit()", "Query::map()()": "class-cake.orm.query.html#map()", "Query::mapReduce()()": "class-cake.orm.query.html#mapReduce()", "Query::matching()()": "class-cake.orm.query.html#matching()", "Query::max()()": "class-cake.orm.query.html#max()", "Query::min()()": "class-cake.orm.query.html#min()", "Query::modifier()()": "class-cake.database.query.html#modifier()", "Query::nest()()": "class-cake.orm.query.html#nest()", "Query::newExpr()()": "class-cake.orm.query.html#newExpr()", "Query::notMatching()()": "class-cake.orm.query.html#notMatching()", "Query::offset()()": "class-cake.orm.query.html#offset()", "Query::order()()": "class-cake.database.query.html#order()", "Query::orderAsc()()": "class-cake.orm.query.html#orderAsc()", "Query::orderDesc()()": "class-cake.database.query.html#orderDesc()", "Query::page()()": "class-cake.orm.query.html#page()", "Query::reduce()()": "class-cake.orm.query.html#reduce()", "Query::reject()()": "class-cake.orm.query.html#reject()", "Query::removeJoin()()": "class-cake.orm.query.html#removeJoin()", "Query::repository()()": "class-cake.orm.query.html#repository()", "Query::rightJoin()()": "class-cake.database.query.html#rightJoin()", "Query::rowCountAndClose()()": "class-cake.database.query.html#rowCountAndClose()", "Query::sample()()": "class-cake.orm.query.html#sample()", "Query::select()()": "class-cake.orm.query.html#select()", "Query::selectAllExcept()()": "class-cake.orm.query.html#selectAllExcept()", "Query::set()()": "class-cake.database.query.html#set()", "Query::setConnection()()": "class-cake.database.query.html#setConnection()", "Query::setDefaultTypes()()": "class-cake.database.query.html#setDefaultTypes()", "Query::setEagerLoader()()": "class-cake.orm.query.html#setEagerLoader()", "Query::setResult()()": "class-cake.orm.query.html#setResult()", "Query::setSelectTypeMap()()": "class-cake.orm.query.html#setSelectTypeMap()", "Query::setTypeMap()()": "class-cake.database.query.html#setTypeMap()", "Query::setValueBinder()()": "class-cake.orm.query.html#setValueBinder()", "Query::shuffle()()": "class-cake.orm.query.html#shuffle()", "Query::skip()()": "class-cake.orm.query.html#skip()", "Query::some()()": "class-cake.orm.query.html#some()", "Query::sortBy()()": "class-cake.orm.query.html#sortBy()", "Query::sql()()": "class-cake.orm.query.html#sql()", "Query::stopWhen()()": "class-cake.orm.query.html#stopWhen()", "Query::subquery()()": "class-cake.orm.query.html#subquery()", "Query::sumOf()()": "class-cake.orm.query.html#sumOf()", "Query::take()()": "class-cake.orm.query.html#take()", "Query::toArray()()": "class-cake.orm.query.html#toArray()", "Query::toList()()": "class-cake.orm.query.html#toList()", "Query::traverse()()": "class-cake.database.query.html#traverse()", "Query::traverseExpressions()()": "class-cake.database.query.html#traverseExpressions()", "Query::traverseParts()()": "class-cake.orm.query.html#traverseParts()", "Query::triggerBeforeFind()()": "class-cake.orm.query.html#triggerBeforeFind()", "Query::type()()": "class-cake.database.query.html#type()", "Query::union()()": "class-cake.database.query.html#union()", "Query::unionAll()()": "class-cake.orm.query.html#unionAll()", "Query::update()()": "class-cake.database.query.html#update()", "Query::values()()": "class-cake.database.query.html#values()", "Query::where()()": "class-cake.orm.query.html#where()", "Query::whereInList()()": "class-cake.orm.query.html#whereInList()", "Query::whereNotInList()()": "class-cake.database.query.html#whereNotInList()", "Query::whereNotInListOrNull()()": "class-cake.orm.query.html#whereNotInListOrNull()", "Query::whereNotNull()()": "class-cake.orm.query.html#whereNotNull()", "Query::whereNull()()": "class-cake.orm.query.html#whereNull()", "Query::window()()": "class-cake.database.query.html#window()", "Query::with()()": "class-cake.database.query.html#with()", "Query::zip()()": "class-cake.orm.query.html#zip()", "Query::zipWith()()": "class-cake.orm.query.html#zipWith()", "QueryCacher (class)": "class-cake.datasource.querycacher.html", "QueryCacher::$_config": "class-cake.datasource.querycacher.html#$_config", "QueryCacher::$_key": "class-cake.datasource.querycacher.html#$_key", "QueryCacher::__construct()()": "class-cake.datasource.querycacher.html#__construct()", "QueryCacher::_resolveCacher()()": "class-cake.datasource.querycacher.html#_resolveCacher()", "QueryCacher::_resolveKey()()": "class-cake.datasource.querycacher.html#_resolveKey()", "QueryCacher::fetch()()": "class-cake.datasource.querycacher.html#fetch()", "QueryCacher::store()()": "class-cake.datasource.querycacher.html#store()", "QueryCompiler (class)": "class-cake.database.querycompiler.html", "QueryCompiler::$_deleteParts": "class-cake.database.querycompiler.html#$_deleteParts", "QueryCompiler::$_insertParts": "class-cake.database.querycompiler.html#$_insertParts", "QueryCompiler::$_orderedUnion": "class-cake.database.querycompiler.html#$_orderedUnion", "QueryCompiler::$_quotedSelectAliases": "class-cake.database.querycompiler.html#$_quotedSelectAliases", "QueryCompiler::$_selectParts": "class-cake.database.querycompiler.html#$_selectParts", "QueryCompiler::$_templates": "class-cake.database.querycompiler.html#$_templates", "QueryCompiler::$_updateParts": "class-cake.database.querycompiler.html#$_updateParts", "QueryCompiler::_buildFromPart()()": "class-cake.database.querycompiler.html#_buildFromPart()", "QueryCompiler::_buildInsertPart()()": "class-cake.database.querycompiler.html#_buildInsertPart()", "QueryCompiler::_buildJoinPart()()": "class-cake.database.querycompiler.html#_buildJoinPart()", "QueryCompiler::_buildModifierPart()()": "class-cake.database.querycompiler.html#_buildModifierPart()", "QueryCompiler::_buildSelectPart()()": "class-cake.database.querycompiler.html#_buildSelectPart()", "QueryCompiler::_buildSetPart()()": "class-cake.database.querycompiler.html#_buildSetPart()", "QueryCompiler::_buildUnionPart()()": "class-cake.database.querycompiler.html#_buildUnionPart()", "QueryCompiler::_buildUpdatePart()()": "class-cake.database.querycompiler.html#_buildUpdatePart()", "QueryCompiler::_buildValuesPart()()": "class-cake.database.querycompiler.html#_buildValuesPart()", "QueryCompiler::_buildWindowPart()()": "class-cake.database.querycompiler.html#_buildWindowPart()", "QueryCompiler::_buildWithPart()()": "class-cake.database.querycompiler.html#_buildWithPart()", "QueryCompiler::_sqlCompiler()()": "class-cake.database.querycompiler.html#_sqlCompiler()", "QueryCompiler::_stringifyExpressions()()": "class-cake.database.querycompiler.html#_stringifyExpressions()", "QueryCompiler::compile()()": "class-cake.database.querycompiler.html#compile()", "QueryExpression (class)": "class-cake.database.expression.queryexpression.html", "QueryExpression::$_conditions": "class-cake.database.expression.queryexpression.html#$_conditions", "QueryExpression::$_conjunction": "class-cake.database.expression.queryexpression.html#$_conjunction", "QueryExpression::$_typeMap": "class-cake.database.expression.queryexpression.html#$_typeMap", "QueryExpression::__clone()()": "class-cake.database.expression.queryexpression.html#__clone()", "QueryExpression::__construct()()": "class-cake.database.expression.queryexpression.html#__construct()", "QueryExpression::_addConditions()()": "class-cake.database.expression.queryexpression.html#_addConditions()", "QueryExpression::_calculateType()()": "class-cake.database.expression.queryexpression.html#_calculateType()", "QueryExpression::_parseCondition()()": "class-cake.database.expression.queryexpression.html#_parseCondition()", "QueryExpression::add()()": "class-cake.database.expression.queryexpression.html#add()", "QueryExpression::addCase()()": "class-cake.database.expression.queryexpression.html#addCase()", "QueryExpression::and()()": "class-cake.database.expression.queryexpression.html#and()", "QueryExpression::and_()()": "class-cake.database.expression.queryexpression.html#and_()", "QueryExpression::between()()": "class-cake.database.expression.queryexpression.html#between()", "QueryExpression::case()()": "class-cake.database.expression.queryexpression.html#case()", "QueryExpression::count()()": "class-cake.database.expression.queryexpression.html#count()", "QueryExpression::eq()()": "class-cake.database.expression.queryexpression.html#eq()", "QueryExpression::equalFields()()": "class-cake.database.expression.queryexpression.html#equalFields()", "QueryExpression::exists()()": "class-cake.database.expression.queryexpression.html#exists()", "QueryExpression::getConjunction()()": "class-cake.database.expression.queryexpression.html#getConjunction()", "QueryExpression::getDefaultTypes()()": "class-cake.database.expression.queryexpression.html#getDefaultTypes()", "QueryExpression::getTypeMap()()": "class-cake.database.expression.queryexpression.html#getTypeMap()", "QueryExpression::gt()()": "class-cake.database.expression.queryexpression.html#gt()", "QueryExpression::gte()()": "class-cake.database.expression.queryexpression.html#gte()", "QueryExpression::hasNestedExpression()()": "class-cake.database.expression.queryexpression.html#hasNestedExpression()", "QueryExpression::in()()": "class-cake.database.expression.queryexpression.html#in()", "QueryExpression::isCallable()()": "class-cake.database.expression.queryexpression.html#isCallable()", "QueryExpression::isNotNull()()": "class-cake.database.expression.queryexpression.html#isNotNull()", "QueryExpression::isNull()()": "class-cake.database.expression.queryexpression.html#isNull()", "QueryExpression::iterateParts()()": "class-cake.database.expression.queryexpression.html#iterateParts()", "QueryExpression::like()()": "class-cake.database.expression.queryexpression.html#like()", "QueryExpression::lt()()": "class-cake.database.expression.queryexpression.html#lt()", "QueryExpression::lte()()": "class-cake.database.expression.queryexpression.html#lte()", "QueryExpression::not()()": "class-cake.database.expression.queryexpression.html#not()", "QueryExpression::notEq()()": "class-cake.database.expression.queryexpression.html#notEq()", "QueryExpression::notExists()()": "class-cake.database.expression.queryexpression.html#notExists()", "QueryExpression::notIn()()": "class-cake.database.expression.queryexpression.html#notIn()", "QueryExpression::notInOrNull()()": "class-cake.database.expression.queryexpression.html#notInOrNull()", "QueryExpression::notLike()()": "class-cake.database.expression.queryexpression.html#notLike()", "QueryExpression::or()()": "class-cake.database.expression.queryexpression.html#or()", "QueryExpression::or_()()": "class-cake.database.expression.queryexpression.html#or_()", "QueryExpression::setConjunction()()": "class-cake.database.expression.queryexpression.html#setConjunction()", "QueryExpression::setDefaultTypes()()": "class-cake.database.expression.queryexpression.html#setDefaultTypes()", "QueryExpression::setTypeMap()()": "class-cake.database.expression.queryexpression.html#setTypeMap()", "QueryExpression::sql()()": "class-cake.database.expression.queryexpression.html#sql()", "QueryExpression::traverse()()": "class-cake.database.expression.queryexpression.html#traverse()", "QueryInterface (interface)": "interface-cake.datasource.queryinterface.html", "QueryLogger (class)": "class-cake.database.log.querylogger.html", "QueryLogger::$_config": "class-cake.database.log.querylogger.html#$_config", "QueryLogger::$_configInitialized": "class-cake.database.log.querylogger.html#$_configInitialized", "QueryLogger::$_defaultConfig": "class-cake.database.log.querylogger.html#$_defaultConfig", "QueryLogger::$formatter": "class-cake.database.log.querylogger.html#$formatter", "QueryLogger::__construct()()": "class-cake.database.log.querylogger.html#__construct()", "QueryLogger::_configDelete()()": "class-cake.database.log.querylogger.html#_configDelete()", "QueryLogger::_configRead()()": "class-cake.database.log.querylogger.html#_configRead()", "QueryLogger::_configWrite()()": "class-cake.database.log.querylogger.html#_configWrite()", "QueryLogger::_format()()": "class-cake.database.log.querylogger.html#_format()", "QueryLogger::alert()()": "class-cake.database.log.querylogger.html#alert()", "QueryLogger::configShallow()()": "class-cake.database.log.querylogger.html#configShallow()", "QueryLogger::critical()()": "class-cake.database.log.querylogger.html#critical()", "QueryLogger::debug()()": "class-cake.database.log.querylogger.html#debug()", "QueryLogger::emergency()()": "class-cake.database.log.querylogger.html#emergency()", "QueryLogger::error()()": "class-cake.database.log.querylogger.html#error()", "QueryLogger::getConfig()()": "class-cake.database.log.querylogger.html#getConfig()", "QueryLogger::getConfigOrFail()()": "class-cake.database.log.querylogger.html#getConfigOrFail()", "QueryLogger::info()()": "class-cake.database.log.querylogger.html#info()", "QueryLogger::interpolate()()": "class-cake.database.log.querylogger.html#interpolate()", "QueryLogger::levels()()": "class-cake.database.log.querylogger.html#levels()", "QueryLogger::log()()": "class-cake.database.log.querylogger.html#log()", "QueryLogger::notice()()": "class-cake.database.log.querylogger.html#notice()", "QueryLogger::scopes()()": "class-cake.database.log.querylogger.html#scopes()", "QueryLogger::setConfig()()": "class-cake.database.log.querylogger.html#setConfig()", "QueryLogger::warning()()": "class-cake.database.log.querylogger.html#warning()", "RadioWidget (class)": "class-cake.view.widget.radiowidget.html", "RadioWidget::$_idPrefix": "class-cake.view.widget.radiowidget.html#$_idPrefix", "RadioWidget::$_idSuffixes": "class-cake.view.widget.radiowidget.html#$_idSuffixes", "RadioWidget::$_label": "class-cake.view.widget.radiowidget.html#$_label", "RadioWidget::$_templates": "class-cake.view.widget.radiowidget.html#$_templates", "RadioWidget::$defaults": "class-cake.view.widget.radiowidget.html#$defaults", "RadioWidget::__construct()()": "class-cake.view.widget.radiowidget.html#__construct()", "RadioWidget::_clearIds()()": "class-cake.view.widget.radiowidget.html#_clearIds()", "RadioWidget::_domId()()": "class-cake.view.widget.radiowidget.html#_domId()", "RadioWidget::_id()()": "class-cake.view.widget.radiowidget.html#_id()", "RadioWidget::_idSuffix()()": "class-cake.view.widget.radiowidget.html#_idSuffix()", "RadioWidget::_isDisabled()()": "class-cake.view.widget.radiowidget.html#_isDisabled()", "RadioWidget::_renderInput()()": "class-cake.view.widget.radiowidget.html#_renderInput()", "RadioWidget::_renderLabel()()": "class-cake.view.widget.radiowidget.html#_renderLabel()", "RadioWidget::mergeDefaults()()": "class-cake.view.widget.radiowidget.html#mergeDefaults()", "RadioWidget::render()()": "class-cake.view.widget.radiowidget.html#render()", "RadioWidget::secureFields()()": "class-cake.view.widget.radiowidget.html#secureFields()", "RadioWidget::setMaxLength()()": "class-cake.view.widget.radiowidget.html#setMaxLength()", "RadioWidget::setRequired()()": "class-cake.view.widget.radiowidget.html#setRequired()", "RadioWidget::setStep()()": "class-cake.view.widget.radiowidget.html#setStep()", "ReconnectStrategy (class)": "class-cake.database.retry.reconnectstrategy.html", "ReconnectStrategy::$causes": "class-cake.database.retry.reconnectstrategy.html#$causes", "ReconnectStrategy::$connection": "class-cake.database.retry.reconnectstrategy.html#$connection", "ReconnectStrategy::__construct()()": "class-cake.database.retry.reconnectstrategy.html#__construct()", "ReconnectStrategy::reconnect()()": "class-cake.database.retry.reconnectstrategy.html#reconnect()", "ReconnectStrategy::shouldRetry()()": "class-cake.database.retry.reconnectstrategy.html#shouldRetry()", "RecordNotFoundException (class)": "class-cake.datasource.exception.recordnotfoundexception.html", "RedirectException (class)": "class-cake.routing.exception.redirectexception.html", "RedirectRoute (class)": "class-cake.routing.route.redirectroute.html", "RedirectRoute::$_compiledRoute": "class-cake.routing.route.redirectroute.html#$_compiledRoute", "RedirectRoute::$_extensions": "class-cake.routing.route.redirectroute.html#$_extensions", "RedirectRoute::$_greedy": "class-cake.routing.route.redirectroute.html#$_greedy", "RedirectRoute::$_name": "class-cake.routing.route.redirectroute.html#$_name", "RedirectRoute::$braceKeys": "class-cake.routing.route.redirectroute.html#$braceKeys", "RedirectRoute::$defaults": "class-cake.routing.route.redirectroute.html#$defaults", "RedirectRoute::$keys": "class-cake.routing.route.redirectroute.html#$keys", "RedirectRoute::$middleware": "class-cake.routing.route.redirectroute.html#$middleware", "RedirectRoute::$options": "class-cake.routing.route.redirectroute.html#$options", "RedirectRoute::$redirect": "class-cake.routing.route.redirectroute.html#$redirect", "RedirectRoute::$template": "class-cake.routing.route.redirectroute.html#$template", "RedirectRoute::__construct()()": "class-cake.routing.route.redirectroute.html#__construct()", "RedirectRoute::__set_state()()": "class-cake.routing.route.redirectroute.html#__set_state()", "RedirectRoute::_matchMethod()()": "class-cake.routing.route.redirectroute.html#_matchMethod()", "RedirectRoute::_parseArgs()()": "class-cake.routing.route.redirectroute.html#_parseArgs()", "RedirectRoute::_parseExtension()()": "class-cake.routing.route.redirectroute.html#_parseExtension()", "RedirectRoute::_persistParams()()": "class-cake.routing.route.redirectroute.html#_persistParams()", "RedirectRoute::_writeRoute()()": "class-cake.routing.route.redirectroute.html#_writeRoute()", "RedirectRoute::_writeUrl()()": "class-cake.routing.route.redirectroute.html#_writeUrl()", "RedirectRoute::compile()()": "class-cake.routing.route.redirectroute.html#compile()", "RedirectRoute::compiled()()": "class-cake.routing.route.redirectroute.html#compiled()", "RedirectRoute::getExtensions()()": "class-cake.routing.route.redirectroute.html#getExtensions()", "RedirectRoute::getMiddleware()()": "class-cake.routing.route.redirectroute.html#getMiddleware()", "RedirectRoute::getName()()": "class-cake.routing.route.redirectroute.html#getName()", "RedirectRoute::hostMatches()()": "class-cake.routing.route.redirectroute.html#hostMatches()", "RedirectRoute::match()()": "class-cake.routing.route.redirectroute.html#match()", "RedirectRoute::normalizeAndValidateMethods()()": "class-cake.routing.route.redirectroute.html#normalizeAndValidateMethods()", "RedirectRoute::parse()()": "class-cake.routing.route.redirectroute.html#parse()", "RedirectRoute::parseRequest()()": "class-cake.routing.route.redirectroute.html#parseRequest()", "RedirectRoute::setExtensions()()": "class-cake.routing.route.redirectroute.html#setExtensions()", "RedirectRoute::setHost()()": "class-cake.routing.route.redirectroute.html#setHost()", "RedirectRoute::setMethods()()": "class-cake.routing.route.redirectroute.html#setMethods()", "RedirectRoute::setMiddleware()()": "class-cake.routing.route.redirectroute.html#setMiddleware()", "RedirectRoute::setPass()()": "class-cake.routing.route.redirectroute.html#setPass()", "RedirectRoute::setPatterns()()": "class-cake.routing.route.redirectroute.html#setPatterns()", "RedirectRoute::setPersist()()": "class-cake.routing.route.redirectroute.html#setPersist()", "RedirectRoute::setStatus()()": "class-cake.routing.route.redirectroute.html#setStatus()", "RedirectRoute::staticPath()()": "class-cake.routing.route.redirectroute.html#staticPath()", "RedisEngine (class)": "class-cake.cache.engine.redisengine.html", "RedisEngine::$_config": "class-cake.cache.engine.redisengine.html#$_config", "RedisEngine::$_configInitialized": "class-cake.cache.engine.redisengine.html#$_configInitialized", "RedisEngine::$_defaultConfig": "class-cake.cache.engine.redisengine.html#$_defaultConfig", "RedisEngine::$_groupPrefix": "class-cake.cache.engine.redisengine.html#$_groupPrefix", "RedisEngine::$_Redis": "class-cake.cache.engine.redisengine.html#$_Redis", "RedisEngine::__destruct()()": "class-cake.cache.engine.redisengine.html#__destruct()", "RedisEngine::_configDelete()()": "class-cake.cache.engine.redisengine.html#_configDelete()", "RedisEngine::_configRead()()": "class-cake.cache.engine.redisengine.html#_configRead()", "RedisEngine::_configWrite()()": "class-cake.cache.engine.redisengine.html#_configWrite()", "RedisEngine::_connect()()": "class-cake.cache.engine.redisengine.html#_connect()", "RedisEngine::_key()()": "class-cake.cache.engine.redisengine.html#_key()", "RedisEngine::add()()": "class-cake.cache.engine.redisengine.html#add()", "RedisEngine::clear()()": "class-cake.cache.engine.redisengine.html#clear()", "RedisEngine::clearBlocking()()": "class-cake.cache.engine.redisengine.html#clearBlocking()", "RedisEngine::clearGroup()()": "class-cake.cache.engine.redisengine.html#clearGroup()", "RedisEngine::configShallow()()": "class-cake.cache.engine.redisengine.html#configShallow()", "RedisEngine::decrement()()": "class-cake.cache.engine.redisengine.html#decrement()", "RedisEngine::delete()()": "class-cake.cache.engine.redisengine.html#delete()", "RedisEngine::deleteAsync()()": "class-cake.cache.engine.redisengine.html#deleteAsync()", "RedisEngine::deleteMultiple()()": "class-cake.cache.engine.redisengine.html#deleteMultiple()", "RedisEngine::duration()()": "class-cake.cache.engine.redisengine.html#duration()", "RedisEngine::ensureValidKey()()": "class-cake.cache.engine.redisengine.html#ensureValidKey()", "RedisEngine::ensureValidType()()": "class-cake.cache.engine.redisengine.html#ensureValidType()", "RedisEngine::get()()": "class-cake.cache.engine.redisengine.html#get()", "RedisEngine::getConfig()()": "class-cake.cache.engine.redisengine.html#getConfig()", "RedisEngine::getConfigOrFail()()": "class-cake.cache.engine.redisengine.html#getConfigOrFail()", "RedisEngine::getMultiple()()": "class-cake.cache.engine.redisengine.html#getMultiple()", "RedisEngine::groups()()": "class-cake.cache.engine.redisengine.html#groups()", "RedisEngine::has()()": "class-cake.cache.engine.redisengine.html#has()", "RedisEngine::increment()()": "class-cake.cache.engine.redisengine.html#increment()", "RedisEngine::init()()": "class-cake.cache.engine.redisengine.html#init()", "RedisEngine::serialize()()": "class-cake.cache.engine.redisengine.html#serialize()", "RedisEngine::set()()": "class-cake.cache.engine.redisengine.html#set()", "RedisEngine::setConfig()()": "class-cake.cache.engine.redisengine.html#setConfig()", "RedisEngine::setMultiple()()": "class-cake.cache.engine.redisengine.html#setMultiple()", "RedisEngine::unserialize()()": "class-cake.cache.engine.redisengine.html#unserialize()", "RedisEngine::warning()()": "class-cake.cache.engine.redisengine.html#warning()", "ReferenceNode (class)": "class-cake.error.debug.referencenode.html", "ReferenceNode::__construct()()": "class-cake.error.debug.referencenode.html#__construct()", "ReferenceNode::getChildren()()": "class-cake.error.debug.referencenode.html#getChildren()", "ReferenceNode::getId()()": "class-cake.error.debug.referencenode.html#getId()", "ReferenceNode::getValue()()": "class-cake.error.debug.referencenode.html#getValue()", "RelativeTimeFormatter (class)": "class-cake.i18n.relativetimeformatter.html", "RelativeTimeFormatter::_diffData()()": "class-cake.i18n.relativetimeformatter.html#_diffData()", "RelativeTimeFormatter::_options()()": "class-cake.i18n.relativetimeformatter.html#_options()", "RelativeTimeFormatter::dateAgoInWords()()": "class-cake.i18n.relativetimeformatter.html#dateAgoInWords()", "RelativeTimeFormatter::diffForHumans()()": "class-cake.i18n.relativetimeformatter.html#diffForHumans()", "RelativeTimeFormatter::timeAgoInWords()()": "class-cake.i18n.relativetimeformatter.html#timeAgoInWords()", "Renderer (class)": "class-cake.mailer.renderer.html", "Renderer::$_viewBuilder": "class-cake.mailer.renderer.html#$_viewBuilder", "Renderer::__clone()()": "class-cake.mailer.renderer.html#__clone()", "Renderer::__construct()()": "class-cake.mailer.renderer.html#__construct()", "Renderer::createView()()": "class-cake.mailer.renderer.html#createView()", "Renderer::render()()": "class-cake.mailer.renderer.html#render()", "Renderer::reset()()": "class-cake.mailer.renderer.html#reset()", "Renderer::set()()": "class-cake.mailer.renderer.html#set()", "Renderer::viewBuilder()()": "class-cake.mailer.renderer.html#viewBuilder()", "ReplaceIterator (class)": "class-cake.collection.iterator.replaceiterator.html", "ReplaceIterator::$_callback": "class-cake.collection.iterator.replaceiterator.html#$_callback", "ReplaceIterator::$_innerIterator": "class-cake.collection.iterator.replaceiterator.html#$_innerIterator", "ReplaceIterator::__construct()()": "class-cake.collection.iterator.replaceiterator.html#__construct()", "ReplaceIterator::__debugInfo()()": "class-cake.collection.iterator.replaceiterator.html#__debugInfo()", "ReplaceIterator::__serialize()()": "class-cake.collection.iterator.replaceiterator.html#__serialize()", "ReplaceIterator::__unserialize()()": "class-cake.collection.iterator.replaceiterator.html#__unserialize()", "ReplaceIterator::_createMatcherFilter()()": "class-cake.collection.iterator.replaceiterator.html#_createMatcherFilter()", "ReplaceIterator::_extract()()": "class-cake.collection.iterator.replaceiterator.html#_extract()", "ReplaceIterator::_propertyExtractor()()": "class-cake.collection.iterator.replaceiterator.html#_propertyExtractor()", "ReplaceIterator::_simpleExtract()()": "class-cake.collection.iterator.replaceiterator.html#_simpleExtract()", "ReplaceIterator::append()()": "class-cake.collection.iterator.replaceiterator.html#append()", "ReplaceIterator::appendItem()()": "class-cake.collection.iterator.replaceiterator.html#appendItem()", "ReplaceIterator::avg()()": "class-cake.collection.iterator.replaceiterator.html#avg()", "ReplaceIterator::buffered()()": "class-cake.collection.iterator.replaceiterator.html#buffered()", "ReplaceIterator::cartesianProduct()()": "class-cake.collection.iterator.replaceiterator.html#cartesianProduct()", "ReplaceIterator::chunk()()": "class-cake.collection.iterator.replaceiterator.html#chunk()", "ReplaceIterator::chunkWithKeys()()": "class-cake.collection.iterator.replaceiterator.html#chunkWithKeys()", "ReplaceIterator::combine()()": "class-cake.collection.iterator.replaceiterator.html#combine()", "ReplaceIterator::compile()()": "class-cake.collection.iterator.replaceiterator.html#compile()", "ReplaceIterator::contains()()": "class-cake.collection.iterator.replaceiterator.html#contains()", "ReplaceIterator::count()()": "class-cake.collection.iterator.replaceiterator.html#count()", "ReplaceIterator::countBy()()": "class-cake.collection.iterator.replaceiterator.html#countBy()", "ReplaceIterator::countKeys()()": "class-cake.collection.iterator.replaceiterator.html#countKeys()", "ReplaceIterator::current()()": "class-cake.collection.iterator.replaceiterator.html#current()", "ReplaceIterator::each()()": "class-cake.collection.iterator.replaceiterator.html#each()", "ReplaceIterator::every()()": "class-cake.collection.iterator.replaceiterator.html#every()", "ReplaceIterator::extract()()": "class-cake.collection.iterator.replaceiterator.html#extract()", "ReplaceIterator::filter()()": "class-cake.collection.iterator.replaceiterator.html#filter()", "ReplaceIterator::first()()": "class-cake.collection.iterator.replaceiterator.html#first()", "ReplaceIterator::firstMatch()()": "class-cake.collection.iterator.replaceiterator.html#firstMatch()", "ReplaceIterator::groupBy()()": "class-cake.collection.iterator.replaceiterator.html#groupBy()", "ReplaceIterator::indexBy()()": "class-cake.collection.iterator.replaceiterator.html#indexBy()", "ReplaceIterator::insert()()": "class-cake.collection.iterator.replaceiterator.html#insert()", "ReplaceIterator::isEmpty()()": "class-cake.collection.iterator.replaceiterator.html#isEmpty()", "ReplaceIterator::jsonSerialize()()": "class-cake.collection.iterator.replaceiterator.html#jsonSerialize()", "ReplaceIterator::last()()": "class-cake.collection.iterator.replaceiterator.html#last()", "ReplaceIterator::lazy()()": "class-cake.collection.iterator.replaceiterator.html#lazy()", "ReplaceIterator::listNested()()": "class-cake.collection.iterator.replaceiterator.html#listNested()", "ReplaceIterator::map()()": "class-cake.collection.iterator.replaceiterator.html#map()", "ReplaceIterator::match()()": "class-cake.collection.iterator.replaceiterator.html#match()", "ReplaceIterator::max()()": "class-cake.collection.iterator.replaceiterator.html#max()", "ReplaceIterator::median()()": "class-cake.collection.iterator.replaceiterator.html#median()", "ReplaceIterator::min()()": "class-cake.collection.iterator.replaceiterator.html#min()", "ReplaceIterator::nest()()": "class-cake.collection.iterator.replaceiterator.html#nest()", "ReplaceIterator::newCollection()()": "class-cake.collection.iterator.replaceiterator.html#newCollection()", "ReplaceIterator::optimizeUnwrap()()": "class-cake.collection.iterator.replaceiterator.html#optimizeUnwrap()", "ReplaceIterator::prepend()()": "class-cake.collection.iterator.replaceiterator.html#prepend()", "ReplaceIterator::prependItem()()": "class-cake.collection.iterator.replaceiterator.html#prependItem()", "ReplaceIterator::reduce()()": "class-cake.collection.iterator.replaceiterator.html#reduce()", "ReplaceIterator::reject()()": "class-cake.collection.iterator.replaceiterator.html#reject()", "ReplaceIterator::sample()()": "class-cake.collection.iterator.replaceiterator.html#sample()", "ReplaceIterator::serialize()()": "class-cake.collection.iterator.replaceiterator.html#serialize()", "ReplaceIterator::shuffle()()": "class-cake.collection.iterator.replaceiterator.html#shuffle()", "ReplaceIterator::skip()()": "class-cake.collection.iterator.replaceiterator.html#skip()", "ReplaceIterator::some()()": "class-cake.collection.iterator.replaceiterator.html#some()", "ReplaceIterator::sortBy()()": "class-cake.collection.iterator.replaceiterator.html#sortBy()", "ReplaceIterator::stopWhen()()": "class-cake.collection.iterator.replaceiterator.html#stopWhen()", "ReplaceIterator::sumOf()()": "class-cake.collection.iterator.replaceiterator.html#sumOf()", "ReplaceIterator::take()()": "class-cake.collection.iterator.replaceiterator.html#take()", "ReplaceIterator::takeLast()()": "class-cake.collection.iterator.replaceiterator.html#takeLast()", "ReplaceIterator::through()()": "class-cake.collection.iterator.replaceiterator.html#through()", "ReplaceIterator::toArray()()": "class-cake.collection.iterator.replaceiterator.html#toArray()", "ReplaceIterator::toList()()": "class-cake.collection.iterator.replaceiterator.html#toList()", "ReplaceIterator::transpose()()": "class-cake.collection.iterator.replaceiterator.html#transpose()", "ReplaceIterator::unfold()()": "class-cake.collection.iterator.replaceiterator.html#unfold()", "ReplaceIterator::unserialize()()": "class-cake.collection.iterator.replaceiterator.html#unserialize()", "ReplaceIterator::unwrap()()": "class-cake.collection.iterator.replaceiterator.html#unwrap()", "ReplaceIterator::zip()()": "class-cake.collection.iterator.replaceiterator.html#zip()", "ReplaceIterator::zipWith()()": "class-cake.collection.iterator.replaceiterator.html#zipWith()", "RepositoryInterface (interface)": "interface-cake.datasource.repositoryinterface.html", "Request (class)": "class-cake.http.client.request.html", "Request::$_cookies": "class-cake.http.client.request.html#$_cookies", "Request::$headerNames": "class-cake.http.client.request.html#$headerNames", "Request::$headers": "class-cake.http.client.request.html#$headers", "Request::__construct()()": "class-cake.http.client.request.html#__construct()", "Request::addHeaders()()": "class-cake.http.client.request.html#addHeaders()", "Request::cookies()()": "class-cake.http.client.request.html#cookies()", "Request::getBody()()": "class-cake.http.client.request.html#getBody()", "Request::getHeader()()": "class-cake.http.client.request.html#getHeader()", "Request::getHeaderLine()()": "class-cake.http.client.request.html#getHeaderLine()", "Request::getHeaders()()": "class-cake.http.client.request.html#getHeaders()", "Request::getMethod()()": "class-cake.http.client.request.html#getMethod()", "Request::getProtocolVersion()()": "class-cake.http.client.request.html#getProtocolVersion()", "Request::getRequestTarget()()": "class-cake.http.client.request.html#getRequestTarget()", "Request::getUri()()": "class-cake.http.client.request.html#getUri()", "Request::hasHeader()()": "class-cake.http.client.request.html#hasHeader()", "Request::setContent()()": "class-cake.http.client.request.html#setContent()", "Request::withAddedHeader()()": "class-cake.http.client.request.html#withAddedHeader()", "Request::withBody()()": "class-cake.http.client.request.html#withBody()", "Request::withHeader()()": "class-cake.http.client.request.html#withHeader()", "Request::withMethod()()": "class-cake.http.client.request.html#withMethod()", "Request::withoutHeader()()": "class-cake.http.client.request.html#withoutHeader()", "Request::withProtocolVersion()()": "class-cake.http.client.request.html#withProtocolVersion()", "Request::withRequestTarget()()": "class-cake.http.client.request.html#withRequestTarget()", "Request::withUri()()": "class-cake.http.client.request.html#withUri()", "RequestException (class)": "class-cake.http.client.exception.requestexception.html", "RequestHandlerComponent (class)": "class-cake.controller.component.requesthandlercomponent.html", "RequestHandlerComponent::$_componentMap": "class-cake.controller.component.requesthandlercomponent.html#$_componentMap", "RequestHandlerComponent::$_config": "class-cake.controller.component.requesthandlercomponent.html#$_config", "RequestHandlerComponent::$_configInitialized": "class-cake.controller.component.requesthandlercomponent.html#$_configInitialized", "RequestHandlerComponent::$_defaultConfig": "class-cake.controller.component.requesthandlercomponent.html#$_defaultConfig", "RequestHandlerComponent::$_registry": "class-cake.controller.component.requesthandlercomponent.html#$_registry", "RequestHandlerComponent::$_renderType": "class-cake.controller.component.requesthandlercomponent.html#$_renderType", "RequestHandlerComponent::$components": "class-cake.controller.component.requesthandlercomponent.html#$components", "RequestHandlerComponent::$ext": "class-cake.controller.component.requesthandlercomponent.html#$ext", "RequestHandlerComponent::__construct()()": "class-cake.controller.component.requesthandlercomponent.html#__construct()", "RequestHandlerComponent::__debugInfo()()": "class-cake.controller.component.requesthandlercomponent.html#__debugInfo()", "RequestHandlerComponent::__get()()": "class-cake.controller.component.requesthandlercomponent.html#__get()", "RequestHandlerComponent::_configDelete()()": "class-cake.controller.component.requesthandlercomponent.html#_configDelete()", "RequestHandlerComponent::_configRead()()": "class-cake.controller.component.requesthandlercomponent.html#_configRead()", "RequestHandlerComponent::_configWrite()()": "class-cake.controller.component.requesthandlercomponent.html#_configWrite()", "RequestHandlerComponent::_setExtension()()": "class-cake.controller.component.requesthandlercomponent.html#_setExtension()", "RequestHandlerComponent::accepts()()": "class-cake.controller.component.requesthandlercomponent.html#accepts()", "RequestHandlerComponent::beforeRender()()": "class-cake.controller.component.requesthandlercomponent.html#beforeRender()", "RequestHandlerComponent::configShallow()()": "class-cake.controller.component.requesthandlercomponent.html#configShallow()", "RequestHandlerComponent::getConfig()()": "class-cake.controller.component.requesthandlercomponent.html#getConfig()", "RequestHandlerComponent::getConfigOrFail()()": "class-cake.controller.component.requesthandlercomponent.html#getConfigOrFail()", "RequestHandlerComponent::getController()()": "class-cake.controller.component.requesthandlercomponent.html#getController()", "RequestHandlerComponent::implementedEvents()()": "class-cake.controller.component.requesthandlercomponent.html#implementedEvents()", "RequestHandlerComponent::initialize()()": "class-cake.controller.component.requesthandlercomponent.html#initialize()", "RequestHandlerComponent::log()()": "class-cake.controller.component.requesthandlercomponent.html#log()", "RequestHandlerComponent::mapAlias()()": "class-cake.controller.component.requesthandlercomponent.html#mapAlias()", "RequestHandlerComponent::prefers()()": "class-cake.controller.component.requesthandlercomponent.html#prefers()", "RequestHandlerComponent::renderAs()()": "class-cake.controller.component.requesthandlercomponent.html#renderAs()", "RequestHandlerComponent::requestedWith()()": "class-cake.controller.component.requesthandlercomponent.html#requestedWith()", "RequestHandlerComponent::respondAs()()": "class-cake.controller.component.requesthandlercomponent.html#respondAs()", "RequestHandlerComponent::setConfig()()": "class-cake.controller.component.requesthandlercomponent.html#setConfig()", "RequestHandlerComponent::startup()()": "class-cake.controller.component.requesthandlercomponent.html#startup()", "Response (class)": "class-cake.http.response.html", "Response::$_cacheDirectives": "class-cake.http.response.html#$_cacheDirectives", "Response::$_charset": "class-cake.http.response.html#$_charset", "Response::$_cookies": "class-cake.http.response.html#$_cookies", "Response::$_file": "class-cake.http.response.html#$_file", "Response::$_fileRange": "class-cake.http.response.html#$_fileRange", "Response::$_json": "class-cake.http.client.response.html#$_json", "Response::$_mimeTypes": "class-cake.http.response.html#$_mimeTypes", "Response::$_reasonPhrase": "class-cake.http.response.html#$_reasonPhrase", "Response::$_status": "class-cake.http.response.html#$_status", "Response::$_statusCodes": "class-cake.http.response.html#$_statusCodes", "Response::$_streamMode": "class-cake.http.response.html#$_streamMode", "Response::$_streamTarget": "class-cake.http.response.html#$_streamTarget", "Response::$_xml": "class-cake.http.client.response.html#$_xml", "Response::$code": "class-cake.http.client.response.html#$code", "Response::$cookies": "class-cake.http.client.response.html#$cookies", "Response::$headerNames": "class-cake.http.client.response.html#$headerNames", "Response::$headers": "class-cake.http.response.html#$headers", "Response::$reasonPhrase": "class-cake.http.client.response.html#$reasonPhrase", "Response::__construct()()": "class-cake.http.response.html#__construct()", "Response::__debugInfo()()": "class-cake.http.response.html#__debugInfo()", "Response::__toString()()": "class-cake.http.response.html#__toString()", "Response::_clearHeader()()": "class-cake.http.response.html#_clearHeader()", "Response::_createStream()()": "class-cake.http.response.html#_createStream()", "Response::_decodeGzipBody()()": "class-cake.http.client.response.html#_decodeGzipBody()", "Response::_fileRange()()": "class-cake.http.response.html#_fileRange()", "Response::_getBody()()": "class-cake.http.client.response.html#_getBody()", "Response::_getCookies()()": "class-cake.http.client.response.html#_getCookies()", "Response::_getHeaders()()": "class-cake.http.client.response.html#_getHeaders()", "Response::_getJson()()": "class-cake.http.client.response.html#_getJson()", "Response::_getUTCDate()()": "class-cake.http.response.html#_getUTCDate()", "Response::_getXml()()": "class-cake.http.client.response.html#_getXml()", "Response::_parseHeaders()()": "class-cake.http.client.response.html#_parseHeaders()", "Response::_setCacheControl()()": "class-cake.http.response.html#_setCacheControl()", "Response::_setContentType()()": "class-cake.http.response.html#_setContentType()", "Response::_setHeader()()": "class-cake.http.response.html#_setHeader()", "Response::_setStatus()()": "class-cake.http.response.html#_setStatus()", "Response::buildCookieCollection()()": "class-cake.http.client.response.html#buildCookieCollection()", "Response::checkNotModified()()": "class-cake.http.response.html#checkNotModified()", "Response::compress()()": "class-cake.http.response.html#compress()", "Response::cookies()()": "class-cake.http.client.response.html#cookies()", "Response::cors()()": "class-cake.http.response.html#cors()", "Response::getBody()()": "class-cake.http.client.response.html#getBody()", "Response::getCharset()()": "class-cake.http.response.html#getCharset()", "Response::getCookie()()": "class-cake.http.client.response.html#getCookie()", "Response::getCookieCollection()()": "class-cake.http.client.response.html#getCookieCollection()", "Response::getCookieData()()": "class-cake.http.client.response.html#getCookieData()", "Response::getCookies()()": "class-cake.http.response.html#getCookies()", "Response::getEncoding()()": "class-cake.http.client.response.html#getEncoding()", "Response::getFile()()": "class-cake.http.response.html#getFile()", "Response::getHeader()()": "class-cake.http.response.html#getHeader()", "Response::getHeaderLine()()": "class-cake.http.client.response.html#getHeaderLine()", "Response::getHeaders()()": "class-cake.http.response.html#getHeaders()", "Response::getJson()()": "class-cake.http.client.response.html#getJson()", "Response::getMimeType()()": "class-cake.http.response.html#getMimeType()", "Response::getProtocolVersion()()": "class-cake.http.response.html#getProtocolVersion()", "Response::getReasonPhrase()()": "class-cake.http.response.html#getReasonPhrase()", "Response::getStatusCode()()": "class-cake.http.response.html#getStatusCode()", "Response::getStringBody()()": "class-cake.http.client.response.html#getStringBody()", "Response::getType()()": "class-cake.http.response.html#getType()", "Response::getXml()()": "class-cake.http.client.response.html#getXml()", "Response::hasHeader()()": "class-cake.http.response.html#hasHeader()", "Response::isNotModified()()": "class-cake.http.response.html#isNotModified()", "Response::isOk()()": "class-cake.http.client.response.html#isOk()", "Response::isRedirect()()": "class-cake.http.client.response.html#isRedirect()", "Response::isSuccess()()": "class-cake.http.client.response.html#isSuccess()", "Response::mapType()()": "class-cake.http.response.html#mapType()", "Response::notModified()()": "class-cake.http.response.html#notModified()", "Response::outputCompressed()()": "class-cake.http.response.html#outputCompressed()", "Response::resolveType()()": "class-cake.http.response.html#resolveType()", "Response::setTypeMap()()": "class-cake.http.response.html#setTypeMap()", "Response::validateFile()()": "class-cake.http.response.html#validateFile()", "Response::withAddedHeader()()": "class-cake.http.response.html#withAddedHeader()", "Response::withAddedLink()()": "class-cake.http.response.html#withAddedLink()", "Response::withBody()()": "class-cake.http.response.html#withBody()", "Response::withCache()()": "class-cake.http.response.html#withCache()", "Response::withCharset()()": "class-cake.http.response.html#withCharset()", "Response::withCookie()()": "class-cake.http.response.html#withCookie()", "Response::withCookieCollection()()": "class-cake.http.response.html#withCookieCollection()", "Response::withDisabledCache()()": "class-cake.http.response.html#withDisabledCache()", "Response::withDownload()()": "class-cake.http.response.html#withDownload()", "Response::withEtag()()": "class-cake.http.response.html#withEtag()", "Response::withExpiredCookie()()": "class-cake.http.response.html#withExpiredCookie()", "Response::withExpires()()": "class-cake.http.response.html#withExpires()", "Response::withFile()()": "class-cake.http.response.html#withFile()", "Response::withHeader()()": "class-cake.http.client.response.html#withHeader()", "Response::withLength()()": "class-cake.http.response.html#withLength()", "Response::withLocation()()": "class-cake.http.response.html#withLocation()", "Response::withMaxAge()()": "class-cake.http.response.html#withMaxAge()", "Response::withModified()()": "class-cake.http.response.html#withModified()", "Response::withMustRevalidate()()": "class-cake.http.response.html#withMustRevalidate()", "Response::withNotModified()()": "class-cake.http.response.html#withNotModified()", "Response::withoutHeader()()": "class-cake.http.response.html#withoutHeader()", "Response::withProtocolVersion()()": "class-cake.http.client.response.html#withProtocolVersion()", "Response::withSharable()()": "class-cake.http.response.html#withSharable()", "Response::withSharedMaxAge()()": "class-cake.http.response.html#withSharedMaxAge()", "Response::withStatus()()": "class-cake.http.response.html#withStatus()", "Response::withStringBody()()": "class-cake.http.response.html#withStringBody()", "Response::withType()()": "class-cake.http.response.html#withType()", "Response::withVary()()": "class-cake.http.response.html#withVary()", "ResponseBase (class)": "class-cake.testsuite.constraint.response.responsebase.html", "ResponseBase::$response": "class-cake.testsuite.constraint.response.responsebase.html#$response", "ResponseBase::__construct()()": "class-cake.testsuite.constraint.response.responsebase.html#__construct()", "ResponseBase::_getBodyAsString()()": "class-cake.testsuite.constraint.response.responsebase.html#_getBodyAsString()", "ResponseBase::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.responsebase.html#additionalFailureDescription()", "ResponseBase::count()()": "class-cake.testsuite.constraint.response.responsebase.html#count()", "ResponseBase::evaluate()()": "class-cake.testsuite.constraint.response.responsebase.html#evaluate()", "ResponseBase::exporter()()": "class-cake.testsuite.constraint.response.responsebase.html#exporter()", "ResponseBase::fail()()": "class-cake.testsuite.constraint.response.responsebase.html#fail()", "ResponseBase::failureDescription()()": "class-cake.testsuite.constraint.response.responsebase.html#failureDescription()", "ResponseBase::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.responsebase.html#failureDescriptionInContext()", "ResponseBase::matches()()": "class-cake.testsuite.constraint.response.responsebase.html#matches()", "ResponseBase::reduce()()": "class-cake.testsuite.constraint.response.responsebase.html#reduce()", "ResponseBase::toString()()": "class-cake.testsuite.constraint.response.responsebase.html#toString()", "ResponseBase::toStringInContext()()": "class-cake.testsuite.constraint.response.responsebase.html#toStringInContext()", "ResponseEmitter (class)": "class-cake.http.responseemitter.html", "ResponseEmitter::$maxBufferLength": "class-cake.http.responseemitter.html#$maxBufferLength", "ResponseEmitter::__construct()()": "class-cake.http.responseemitter.html#__construct()", "ResponseEmitter::emit()()": "class-cake.http.responseemitter.html#emit()", "ResponseEmitter::emitBody()()": "class-cake.http.responseemitter.html#emitBody()", "ResponseEmitter::emitBodyRange()()": "class-cake.http.responseemitter.html#emitBodyRange()", "ResponseEmitter::emitCookies()()": "class-cake.http.responseemitter.html#emitCookies()", "ResponseEmitter::emitHeaders()()": "class-cake.http.responseemitter.html#emitHeaders()", "ResponseEmitter::emitStatusLine()()": "class-cake.http.responseemitter.html#emitStatusLine()", "ResponseEmitter::flush()()": "class-cake.http.responseemitter.html#flush()", "ResponseEmitter::parseContentRange()()": "class-cake.http.responseemitter.html#parseContentRange()", "ResponseEmitter::setCookie()()": "class-cake.http.responseemitter.html#setCookie()", "ResultSet (class)": "class-cake.orm.resultset.html", "ResultSet::$_autoFields": "class-cake.orm.resultset.html#$_autoFields", "ResultSet::$_containMap": "class-cake.orm.resultset.html#$_containMap", "ResultSet::$_count": "class-cake.orm.resultset.html#$_count", "ResultSet::$_current": "class-cake.orm.resultset.html#$_current", "ResultSet::$_defaultAlias": "class-cake.orm.resultset.html#$_defaultAlias", "ResultSet::$_defaultTable": "class-cake.orm.resultset.html#$_defaultTable", "ResultSet::$_driver": "class-cake.orm.resultset.html#$_driver", "ResultSet::$_entityClass": "class-cake.orm.resultset.html#$_entityClass", "ResultSet::$_hydrate": "class-cake.orm.resultset.html#$_hydrate", "ResultSet::$_index": "class-cake.orm.resultset.html#$_index", "ResultSet::$_map": "class-cake.orm.resultset.html#$_map", "ResultSet::$_matchingMap": "class-cake.orm.resultset.html#$_matchingMap", "ResultSet::$_matchingMapColumns": "class-cake.orm.resultset.html#$_matchingMapColumns", "ResultSet::$_results": "class-cake.orm.resultset.html#$_results", "ResultSet::$_statement": "class-cake.orm.resultset.html#$_statement", "ResultSet::$_useBuffering": "class-cake.orm.resultset.html#$_useBuffering", "ResultSet::__construct()()": "class-cake.orm.resultset.html#__construct()", "ResultSet::__debugInfo()()": "class-cake.orm.resultset.html#__debugInfo()", "ResultSet::__serialize()()": "class-cake.orm.resultset.html#__serialize()", "ResultSet::__unserialize()()": "class-cake.orm.resultset.html#__unserialize()", "ResultSet::_calculateAssociationMap()()": "class-cake.orm.resultset.html#_calculateAssociationMap()", "ResultSet::_calculateColumnMap()()": "class-cake.orm.resultset.html#_calculateColumnMap()", "ResultSet::_createMatcherFilter()()": "class-cake.orm.resultset.html#_createMatcherFilter()", "ResultSet::_extract()()": "class-cake.orm.resultset.html#_extract()", "ResultSet::_fetchResult()()": "class-cake.orm.resultset.html#_fetchResult()", "ResultSet::_groupResult()()": "class-cake.orm.resultset.html#_groupResult()", "ResultSet::_propertyExtractor()()": "class-cake.orm.resultset.html#_propertyExtractor()", "ResultSet::_simpleExtract()()": "class-cake.orm.resultset.html#_simpleExtract()", "ResultSet::append()()": "class-cake.orm.resultset.html#append()", "ResultSet::appendItem()()": "class-cake.orm.resultset.html#appendItem()", "ResultSet::avg()()": "class-cake.orm.resultset.html#avg()", "ResultSet::buffered()()": "class-cake.orm.resultset.html#buffered()", "ResultSet::cartesianProduct()()": "class-cake.orm.resultset.html#cartesianProduct()", "ResultSet::chunk()()": "class-cake.orm.resultset.html#chunk()", "ResultSet::chunkWithKeys()()": "class-cake.orm.resultset.html#chunkWithKeys()", "ResultSet::combine()()": "class-cake.orm.resultset.html#combine()", "ResultSet::compile()()": "class-cake.orm.resultset.html#compile()", "ResultSet::contains()()": "class-cake.orm.resultset.html#contains()", "ResultSet::count()()": "class-cake.orm.resultset.html#count()", "ResultSet::countBy()()": "class-cake.orm.resultset.html#countBy()", "ResultSet::countKeys()()": "class-cake.orm.resultset.html#countKeys()", "ResultSet::current()()": "class-cake.orm.resultset.html#current()", "ResultSet::each()()": "class-cake.orm.resultset.html#each()", "ResultSet::every()()": "class-cake.orm.resultset.html#every()", "ResultSet::extract()()": "class-cake.orm.resultset.html#extract()", "ResultSet::filter()()": "class-cake.orm.resultset.html#filter()", "ResultSet::first()()": "class-cake.orm.resultset.html#first()", "ResultSet::firstMatch()()": "class-cake.orm.resultset.html#firstMatch()", "ResultSet::groupBy()()": "class-cake.orm.resultset.html#groupBy()", "ResultSet::indexBy()()": "class-cake.orm.resultset.html#indexBy()", "ResultSet::insert()()": "class-cake.orm.resultset.html#insert()", "ResultSet::isEmpty()()": "class-cake.orm.resultset.html#isEmpty()", "ResultSet::jsonSerialize()()": "class-cake.orm.resultset.html#jsonSerialize()", "ResultSet::key()()": "class-cake.orm.resultset.html#key()", "ResultSet::last()()": "class-cake.orm.resultset.html#last()", "ResultSet::lazy()()": "class-cake.orm.resultset.html#lazy()", "ResultSet::listNested()()": "class-cake.orm.resultset.html#listNested()", "ResultSet::map()()": "class-cake.orm.resultset.html#map()", "ResultSet::match()()": "class-cake.orm.resultset.html#match()", "ResultSet::max()()": "class-cake.orm.resultset.html#max()", "ResultSet::median()()": "class-cake.orm.resultset.html#median()", "ResultSet::min()()": "class-cake.orm.resultset.html#min()", "ResultSet::nest()()": "class-cake.orm.resultset.html#nest()", "ResultSet::newCollection()()": "class-cake.orm.resultset.html#newCollection()", "ResultSet::next()()": "class-cake.orm.resultset.html#next()", "ResultSet::optimizeUnwrap()()": "class-cake.orm.resultset.html#optimizeUnwrap()", "ResultSet::prepend()()": "class-cake.orm.resultset.html#prepend()", "ResultSet::prependItem()()": "class-cake.orm.resultset.html#prependItem()", "ResultSet::reduce()()": "class-cake.orm.resultset.html#reduce()", "ResultSet::reject()()": "class-cake.orm.resultset.html#reject()", "ResultSet::rewind()()": "class-cake.orm.resultset.html#rewind()", "ResultSet::sample()()": "class-cake.orm.resultset.html#sample()", "ResultSet::serialize()()": "class-cake.orm.resultset.html#serialize()", "ResultSet::shuffle()()": "class-cake.orm.resultset.html#shuffle()", "ResultSet::skip()()": "class-cake.orm.resultset.html#skip()", "ResultSet::some()()": "class-cake.orm.resultset.html#some()", "ResultSet::sortBy()()": "class-cake.orm.resultset.html#sortBy()", "ResultSet::stopWhen()()": "class-cake.orm.resultset.html#stopWhen()", "ResultSet::sumOf()()": "class-cake.orm.resultset.html#sumOf()", "ResultSet::take()()": "class-cake.orm.resultset.html#take()", "ResultSet::takeLast()()": "class-cake.orm.resultset.html#takeLast()", "ResultSet::through()()": "class-cake.orm.resultset.html#through()", "ResultSet::toArray()()": "class-cake.orm.resultset.html#toArray()", "ResultSet::toList()()": "class-cake.orm.resultset.html#toList()", "ResultSet::transpose()()": "class-cake.orm.resultset.html#transpose()", "ResultSet::unfold()()": "class-cake.orm.resultset.html#unfold()", "ResultSet::unserialize()()": "class-cake.orm.resultset.html#unserialize()", "ResultSet::unwrap()()": "class-cake.orm.resultset.html#unwrap()", "ResultSet::valid()()": "class-cake.orm.resultset.html#valid()", "ResultSet::zip()()": "class-cake.orm.resultset.html#zip()", "ResultSet::zipWith()()": "class-cake.orm.resultset.html#zipWith()", "ResultSetDecorator (class)": "class-cake.datasource.resultsetdecorator.html", "ResultSetDecorator::__construct()()": "class-cake.datasource.resultsetdecorator.html#__construct()", "ResultSetDecorator::__debugInfo()()": "class-cake.datasource.resultsetdecorator.html#__debugInfo()", "ResultSetDecorator::__serialize()()": "class-cake.datasource.resultsetdecorator.html#__serialize()", "ResultSetDecorator::__unserialize()()": "class-cake.datasource.resultsetdecorator.html#__unserialize()", "ResultSetDecorator::_createMatcherFilter()()": "class-cake.datasource.resultsetdecorator.html#_createMatcherFilter()", "ResultSetDecorator::_extract()()": "class-cake.datasource.resultsetdecorator.html#_extract()", "ResultSetDecorator::_propertyExtractor()()": "class-cake.datasource.resultsetdecorator.html#_propertyExtractor()", "ResultSetDecorator::_simpleExtract()()": "class-cake.datasource.resultsetdecorator.html#_simpleExtract()", "ResultSetDecorator::append()()": "class-cake.datasource.resultsetdecorator.html#append()", "ResultSetDecorator::appendItem()()": "class-cake.datasource.resultsetdecorator.html#appendItem()", "ResultSetDecorator::avg()()": "class-cake.datasource.resultsetdecorator.html#avg()", "ResultSetDecorator::buffered()()": "class-cake.datasource.resultsetdecorator.html#buffered()", "ResultSetDecorator::cartesianProduct()()": "class-cake.datasource.resultsetdecorator.html#cartesianProduct()", "ResultSetDecorator::chunk()()": "class-cake.datasource.resultsetdecorator.html#chunk()", "ResultSetDecorator::chunkWithKeys()()": "class-cake.datasource.resultsetdecorator.html#chunkWithKeys()", "ResultSetDecorator::combine()()": "class-cake.datasource.resultsetdecorator.html#combine()", "ResultSetDecorator::compile()()": "class-cake.datasource.resultsetdecorator.html#compile()", "ResultSetDecorator::contains()()": "class-cake.datasource.resultsetdecorator.html#contains()", "ResultSetDecorator::count()()": "class-cake.datasource.resultsetdecorator.html#count()", "ResultSetDecorator::countBy()()": "class-cake.datasource.resultsetdecorator.html#countBy()", "ResultSetDecorator::countKeys()()": "class-cake.datasource.resultsetdecorator.html#countKeys()", "ResultSetDecorator::each()()": "class-cake.datasource.resultsetdecorator.html#each()", "ResultSetDecorator::every()()": "class-cake.datasource.resultsetdecorator.html#every()", "ResultSetDecorator::extract()()": "class-cake.datasource.resultsetdecorator.html#extract()", "ResultSetDecorator::filter()()": "class-cake.datasource.resultsetdecorator.html#filter()", "ResultSetDecorator::first()()": "class-cake.datasource.resultsetdecorator.html#first()", "ResultSetDecorator::firstMatch()()": "class-cake.datasource.resultsetdecorator.html#firstMatch()", "ResultSetDecorator::groupBy()()": "class-cake.datasource.resultsetdecorator.html#groupBy()", "ResultSetDecorator::indexBy()()": "class-cake.datasource.resultsetdecorator.html#indexBy()", "ResultSetDecorator::insert()()": "class-cake.datasource.resultsetdecorator.html#insert()", "ResultSetDecorator::isEmpty()()": "class-cake.datasource.resultsetdecorator.html#isEmpty()", "ResultSetDecorator::jsonSerialize()()": "class-cake.datasource.resultsetdecorator.html#jsonSerialize()", "ResultSetDecorator::last()()": "class-cake.datasource.resultsetdecorator.html#last()", "ResultSetDecorator::lazy()()": "class-cake.datasource.resultsetdecorator.html#lazy()", "ResultSetDecorator::listNested()()": "class-cake.datasource.resultsetdecorator.html#listNested()", "ResultSetDecorator::map()()": "class-cake.datasource.resultsetdecorator.html#map()", "ResultSetDecorator::match()()": "class-cake.datasource.resultsetdecorator.html#match()", "ResultSetDecorator::max()()": "class-cake.datasource.resultsetdecorator.html#max()", "ResultSetDecorator::median()()": "class-cake.datasource.resultsetdecorator.html#median()", "ResultSetDecorator::min()()": "class-cake.datasource.resultsetdecorator.html#min()", "ResultSetDecorator::nest()()": "class-cake.datasource.resultsetdecorator.html#nest()", "ResultSetDecorator::newCollection()()": "class-cake.datasource.resultsetdecorator.html#newCollection()", "ResultSetDecorator::optimizeUnwrap()()": "class-cake.datasource.resultsetdecorator.html#optimizeUnwrap()", "ResultSetDecorator::prepend()()": "class-cake.datasource.resultsetdecorator.html#prepend()", "ResultSetDecorator::prependItem()()": "class-cake.datasource.resultsetdecorator.html#prependItem()", "ResultSetDecorator::reduce()()": "class-cake.datasource.resultsetdecorator.html#reduce()", "ResultSetDecorator::reject()()": "class-cake.datasource.resultsetdecorator.html#reject()", "ResultSetDecorator::sample()()": "class-cake.datasource.resultsetdecorator.html#sample()", "ResultSetDecorator::serialize()()": "class-cake.datasource.resultsetdecorator.html#serialize()", "ResultSetDecorator::shuffle()()": "class-cake.datasource.resultsetdecorator.html#shuffle()", "ResultSetDecorator::skip()()": "class-cake.datasource.resultsetdecorator.html#skip()", "ResultSetDecorator::some()()": "class-cake.datasource.resultsetdecorator.html#some()", "ResultSetDecorator::sortBy()()": "class-cake.datasource.resultsetdecorator.html#sortBy()", "ResultSetDecorator::stopWhen()()": "class-cake.datasource.resultsetdecorator.html#stopWhen()", "ResultSetDecorator::sumOf()()": "class-cake.datasource.resultsetdecorator.html#sumOf()", "ResultSetDecorator::take()()": "class-cake.datasource.resultsetdecorator.html#take()", "ResultSetDecorator::takeLast()()": "class-cake.datasource.resultsetdecorator.html#takeLast()", "ResultSetDecorator::through()()": "class-cake.datasource.resultsetdecorator.html#through()", "ResultSetDecorator::toArray()()": "class-cake.datasource.resultsetdecorator.html#toArray()", "ResultSetDecorator::toList()()": "class-cake.datasource.resultsetdecorator.html#toList()", "ResultSetDecorator::transpose()()": "class-cake.datasource.resultsetdecorator.html#transpose()", "ResultSetDecorator::unfold()()": "class-cake.datasource.resultsetdecorator.html#unfold()", "ResultSetDecorator::unserialize()()": "class-cake.datasource.resultsetdecorator.html#unserialize()", "ResultSetDecorator::unwrap()()": "class-cake.datasource.resultsetdecorator.html#unwrap()", "ResultSetDecorator::zip()()": "class-cake.datasource.resultsetdecorator.html#zip()", "ResultSetDecorator::zipWith()()": "class-cake.datasource.resultsetdecorator.html#zipWith()", "ResultSetInterface (interface)": "interface-cake.datasource.resultsetinterface.html", "RetryStrategyInterface (interface)": "interface-cake.core.retry.retrystrategyinterface.html", "RolledbackTransactionException (class)": "class-cake.orm.exception.rolledbacktransactionexception.html", "Route (class)": "class-cake.routing.route.route.html", "Route::$_compiledRoute": "class-cake.routing.route.route.html#$_compiledRoute", "Route::$_extensions": "class-cake.routing.route.route.html#$_extensions", "Route::$_greedy": "class-cake.routing.route.route.html#$_greedy", "Route::$_name": "class-cake.routing.route.route.html#$_name", "Route::$braceKeys": "class-cake.routing.route.route.html#$braceKeys", "Route::$defaults": "class-cake.routing.route.route.html#$defaults", "Route::$keys": "class-cake.routing.route.route.html#$keys", "Route::$middleware": "class-cake.routing.route.route.html#$middleware", "Route::$options": "class-cake.routing.route.route.html#$options", "Route::$template": "class-cake.routing.route.route.html#$template", "Route::__construct()()": "class-cake.routing.route.route.html#__construct()", "Route::__set_state()()": "class-cake.routing.route.route.html#__set_state()", "Route::_matchMethod()()": "class-cake.routing.route.route.html#_matchMethod()", "Route::_parseArgs()()": "class-cake.routing.route.route.html#_parseArgs()", "Route::_parseExtension()()": "class-cake.routing.route.route.html#_parseExtension()", "Route::_persistParams()()": "class-cake.routing.route.route.html#_persistParams()", "Route::_writeRoute()()": "class-cake.routing.route.route.html#_writeRoute()", "Route::_writeUrl()()": "class-cake.routing.route.route.html#_writeUrl()", "Route::compile()()": "class-cake.routing.route.route.html#compile()", "Route::compiled()()": "class-cake.routing.route.route.html#compiled()", "Route::getExtensions()()": "class-cake.routing.route.route.html#getExtensions()", "Route::getMiddleware()()": "class-cake.routing.route.route.html#getMiddleware()", "Route::getName()()": "class-cake.routing.route.route.html#getName()", "Route::hostMatches()()": "class-cake.routing.route.route.html#hostMatches()", "Route::match()()": "class-cake.routing.route.route.html#match()", "Route::normalizeAndValidateMethods()()": "class-cake.routing.route.route.html#normalizeAndValidateMethods()", "Route::parse()()": "class-cake.routing.route.route.html#parse()", "Route::parseRequest()()": "class-cake.routing.route.route.html#parseRequest()", "Route::setExtensions()()": "class-cake.routing.route.route.html#setExtensions()", "Route::setHost()()": "class-cake.routing.route.route.html#setHost()", "Route::setMethods()()": "class-cake.routing.route.route.html#setMethods()", "Route::setMiddleware()()": "class-cake.routing.route.route.html#setMiddleware()", "Route::setPass()()": "class-cake.routing.route.route.html#setPass()", "Route::setPatterns()()": "class-cake.routing.route.route.html#setPatterns()", "Route::setPersist()()": "class-cake.routing.route.route.html#setPersist()", "Route::staticPath()()": "class-cake.routing.route.route.html#staticPath()", "RouteBuilder (class)": "class-cake.routing.routebuilder.html", "RouteBuilder::$_collection": "class-cake.routing.routebuilder.html#$_collection", "RouteBuilder::$_extensions": "class-cake.routing.routebuilder.html#$_extensions", "RouteBuilder::$_namePrefix": "class-cake.routing.routebuilder.html#$_namePrefix", "RouteBuilder::$_params": "class-cake.routing.routebuilder.html#$_params", "RouteBuilder::$_path": "class-cake.routing.routebuilder.html#$_path", "RouteBuilder::$_resourceMap": "class-cake.routing.routebuilder.html#$_resourceMap", "RouteBuilder::$_routeClass": "class-cake.routing.routebuilder.html#$_routeClass", "RouteBuilder::$middleware": "class-cake.routing.routebuilder.html#$middleware", "RouteBuilder::__construct()()": "class-cake.routing.routebuilder.html#__construct()", "RouteBuilder::_makeRoute()()": "class-cake.routing.routebuilder.html#_makeRoute()", "RouteBuilder::_methodRoute()()": "class-cake.routing.routebuilder.html#_methodRoute()", "RouteBuilder::addExtensions()()": "class-cake.routing.routebuilder.html#addExtensions()", "RouteBuilder::applyMiddleware()()": "class-cake.routing.routebuilder.html#applyMiddleware()", "RouteBuilder::connect()()": "class-cake.routing.routebuilder.html#connect()", "RouteBuilder::delete()()": "class-cake.routing.routebuilder.html#delete()", "RouteBuilder::fallbacks()()": "class-cake.routing.routebuilder.html#fallbacks()", "RouteBuilder::get()()": "class-cake.routing.routebuilder.html#get()", "RouteBuilder::getExtensions()()": "class-cake.routing.routebuilder.html#getExtensions()", "RouteBuilder::getMiddleware()()": "class-cake.routing.routebuilder.html#getMiddleware()", "RouteBuilder::getRouteClass()()": "class-cake.routing.routebuilder.html#getRouteClass()", "RouteBuilder::head()()": "class-cake.routing.routebuilder.html#head()", "RouteBuilder::loadPlugin()()": "class-cake.routing.routebuilder.html#loadPlugin()", "RouteBuilder::middlewareGroup()()": "class-cake.routing.routebuilder.html#middlewareGroup()", "RouteBuilder::nameExists()()": "class-cake.routing.routebuilder.html#nameExists()", "RouteBuilder::namePrefix()()": "class-cake.routing.routebuilder.html#namePrefix()", "RouteBuilder::options()()": "class-cake.routing.routebuilder.html#options()", "RouteBuilder::params()()": "class-cake.routing.routebuilder.html#params()", "RouteBuilder::parseDefaults()()": "class-cake.routing.routebuilder.html#parseDefaults()", "RouteBuilder::patch()()": "class-cake.routing.routebuilder.html#patch()", "RouteBuilder::path()()": "class-cake.routing.routebuilder.html#path()", "RouteBuilder::plugin()()": "class-cake.routing.routebuilder.html#plugin()", "RouteBuilder::post()()": "class-cake.routing.routebuilder.html#post()", "RouteBuilder::prefix()()": "class-cake.routing.routebuilder.html#prefix()", "RouteBuilder::put()()": "class-cake.routing.routebuilder.html#put()", "RouteBuilder::redirect()()": "class-cake.routing.routebuilder.html#redirect()", "RouteBuilder::registerMiddleware()()": "class-cake.routing.routebuilder.html#registerMiddleware()", "RouteBuilder::resources()()": "class-cake.routing.routebuilder.html#resources()", "RouteBuilder::scope()()": "class-cake.routing.routebuilder.html#scope()", "RouteBuilder::setExtensions()()": "class-cake.routing.routebuilder.html#setExtensions()", "RouteBuilder::setRouteClass()()": "class-cake.routing.routebuilder.html#setRouteClass()", "RouteCollection (class)": "class-cake.routing.routecollection.html", "RouteCollection::$_extensions": "class-cake.routing.routecollection.html#$_extensions", "RouteCollection::$_middleware": "class-cake.routing.routecollection.html#$_middleware", "RouteCollection::$_middlewareGroups": "class-cake.routing.routecollection.html#$_middlewareGroups", "RouteCollection::$_named": "class-cake.routing.routecollection.html#$_named", "RouteCollection::$_paths": "class-cake.routing.routecollection.html#$_paths", "RouteCollection::$_routeTable": "class-cake.routing.routecollection.html#$_routeTable", "RouteCollection::_getNames()()": "class-cake.routing.routecollection.html#_getNames()", "RouteCollection::add()()": "class-cake.routing.routecollection.html#add()", "RouteCollection::getExtensions()()": "class-cake.routing.routecollection.html#getExtensions()", "RouteCollection::getMiddleware()()": "class-cake.routing.routecollection.html#getMiddleware()", "RouteCollection::hasMiddleware()()": "class-cake.routing.routecollection.html#hasMiddleware()", "RouteCollection::hasMiddlewareGroup()()": "class-cake.routing.routecollection.html#hasMiddlewareGroup()", "RouteCollection::match()()": "class-cake.routing.routecollection.html#match()", "RouteCollection::middlewareExists()()": "class-cake.routing.routecollection.html#middlewareExists()", "RouteCollection::middlewareGroup()()": "class-cake.routing.routecollection.html#middlewareGroup()", "RouteCollection::named()()": "class-cake.routing.routecollection.html#named()", "RouteCollection::parse()()": "class-cake.routing.routecollection.html#parse()", "RouteCollection::parseRequest()()": "class-cake.routing.routecollection.html#parseRequest()", "RouteCollection::registerMiddleware()()": "class-cake.routing.routecollection.html#registerMiddleware()", "RouteCollection::routes()()": "class-cake.routing.routecollection.html#routes()", "RouteCollection::setExtensions()()": "class-cake.routing.routecollection.html#setExtensions()", "Router (class)": "class-cake.routing.router.html", "Router::$_collection": "class-cake.routing.router.html#$_collection", "Router::$_defaultExtensions": "class-cake.routing.router.html#$_defaultExtensions", "Router::$_defaultRouteClass": "class-cake.routing.router.html#$_defaultRouteClass", "Router::$_fullBaseUrl": "class-cake.routing.router.html#$_fullBaseUrl", "Router::$_initialState": "class-cake.routing.router.html#$_initialState", "Router::$_namedExpressions": "class-cake.routing.router.html#$_namedExpressions", "Router::$_request": "class-cake.routing.router.html#$_request", "Router::$_requestContext": "class-cake.routing.router.html#$_requestContext", "Router::$_routePaths": "class-cake.routing.router.html#$_routePaths", "Router::$_urlFilters": "class-cake.routing.router.html#$_urlFilters", "Router::_applyUrlFilters()()": "class-cake.routing.router.html#_applyUrlFilters()", "Router::addUrlFilter()()": "class-cake.routing.router.html#addUrlFilter()", "Router::connect()()": "class-cake.routing.router.html#connect()", "Router::createRouteBuilder()()": "class-cake.routing.router.html#createRouteBuilder()", "Router::defaultRouteClass()()": "class-cake.routing.router.html#defaultRouteClass()", "Router::extensions()()": "class-cake.routing.router.html#extensions()", "Router::fullBaseUrl()()": "class-cake.routing.router.html#fullBaseUrl()", "Router::getNamedExpressions()()": "class-cake.routing.router.html#getNamedExpressions()", "Router::getRequest()()": "class-cake.routing.router.html#getRequest()", "Router::getRouteCollection()()": "class-cake.routing.router.html#getRouteCollection()", "Router::normalize()()": "class-cake.routing.router.html#normalize()", "Router::parseRequest()()": "class-cake.routing.router.html#parseRequest()", "Router::parseRoutePath()()": "class-cake.routing.router.html#parseRoutePath()", "Router::pathUrl()()": "class-cake.routing.router.html#pathUrl()", "Router::plugin()()": "class-cake.routing.router.html#plugin()", "Router::prefix()()": "class-cake.routing.router.html#prefix()", "Router::reload()()": "class-cake.routing.router.html#reload()", "Router::resetRoutes()()": "class-cake.routing.router.html#resetRoutes()", "Router::reverse()()": "class-cake.routing.router.html#reverse()", "Router::reverseToArray()()": "class-cake.routing.router.html#reverseToArray()", "Router::routeExists()()": "class-cake.routing.router.html#routeExists()", "Router::routes()()": "class-cake.routing.router.html#routes()", "Router::scope()()": "class-cake.routing.router.html#scope()", "Router::setRequest()()": "class-cake.routing.router.html#setRequest()", "Router::setRouteCollection()()": "class-cake.routing.router.html#setRouteCollection()", "Router::unwrapShortString()()": "class-cake.routing.router.html#unwrapShortString()", "Router::url()()": "class-cake.routing.router.html#url()", "RoutesCheckCommand (class)": "class-cake.command.routescheckcommand.html", "RoutesCheckCommand::$_modelFactories": "class-cake.command.routescheckcommand.html#$_modelFactories", "RoutesCheckCommand::$_modelType": "class-cake.command.routescheckcommand.html#$_modelType", "RoutesCheckCommand::$_tableLocator": "class-cake.command.routescheckcommand.html#$_tableLocator", "RoutesCheckCommand::$defaultTable": "class-cake.command.routescheckcommand.html#$defaultTable", "RoutesCheckCommand::$modelClass": "class-cake.command.routescheckcommand.html#$modelClass", "RoutesCheckCommand::$name": "class-cake.command.routescheckcommand.html#$name", "RoutesCheckCommand::__construct()()": "class-cake.command.routescheckcommand.html#__construct()", "RoutesCheckCommand::_setModelClass()()": "class-cake.command.routescheckcommand.html#_setModelClass()", "RoutesCheckCommand::abort()()": "class-cake.command.routescheckcommand.html#abort()", "RoutesCheckCommand::buildOptionParser()()": "class-cake.command.routescheckcommand.html#buildOptionParser()", "RoutesCheckCommand::defaultName()()": "class-cake.command.routescheckcommand.html#defaultName()", "RoutesCheckCommand::displayHelp()()": "class-cake.command.routescheckcommand.html#displayHelp()", "RoutesCheckCommand::execute()()": "class-cake.command.routescheckcommand.html#execute()", "RoutesCheckCommand::executeCommand()()": "class-cake.command.routescheckcommand.html#executeCommand()", "RoutesCheckCommand::fetchTable()()": "class-cake.command.routescheckcommand.html#fetchTable()", "RoutesCheckCommand::getDescription()()": "class-cake.command.routescheckcommand.html#getDescription()", "RoutesCheckCommand::getModelType()()": "class-cake.command.routescheckcommand.html#getModelType()", "RoutesCheckCommand::getName()()": "class-cake.command.routescheckcommand.html#getName()", "RoutesCheckCommand::getOptionParser()()": "class-cake.command.routescheckcommand.html#getOptionParser()", "RoutesCheckCommand::getRootName()()": "class-cake.command.routescheckcommand.html#getRootName()", "RoutesCheckCommand::getTableLocator()()": "class-cake.command.routescheckcommand.html#getTableLocator()", "RoutesCheckCommand::initialize()()": "class-cake.command.routescheckcommand.html#initialize()", "RoutesCheckCommand::loadModel()()": "class-cake.command.routescheckcommand.html#loadModel()", "RoutesCheckCommand::log()()": "class-cake.command.routescheckcommand.html#log()", "RoutesCheckCommand::modelFactory()()": "class-cake.command.routescheckcommand.html#modelFactory()", "RoutesCheckCommand::run()()": "class-cake.command.routescheckcommand.html#run()", "RoutesCheckCommand::setModelType()()": "class-cake.command.routescheckcommand.html#setModelType()", "RoutesCheckCommand::setName()()": "class-cake.command.routescheckcommand.html#setName()", "RoutesCheckCommand::setOutputLevel()()": "class-cake.command.routescheckcommand.html#setOutputLevel()", "RoutesCheckCommand::setTableLocator()()": "class-cake.command.routescheckcommand.html#setTableLocator()", "RoutesCommand (class)": "class-cake.command.routescommand.html", "RoutesCommand::$_modelFactories": "class-cake.command.routescommand.html#$_modelFactories", "RoutesCommand::$_modelType": "class-cake.command.routescommand.html#$_modelType", "RoutesCommand::$_tableLocator": "class-cake.command.routescommand.html#$_tableLocator", "RoutesCommand::$defaultTable": "class-cake.command.routescommand.html#$defaultTable", "RoutesCommand::$modelClass": "class-cake.command.routescommand.html#$modelClass", "RoutesCommand::$name": "class-cake.command.routescommand.html#$name", "RoutesCommand::__construct()()": "class-cake.command.routescommand.html#__construct()", "RoutesCommand::_setModelClass()()": "class-cake.command.routescommand.html#_setModelClass()", "RoutesCommand::abort()()": "class-cake.command.routescommand.html#abort()", "RoutesCommand::buildOptionParser()()": "class-cake.command.routescommand.html#buildOptionParser()", "RoutesCommand::defaultName()()": "class-cake.command.routescommand.html#defaultName()", "RoutesCommand::displayHelp()()": "class-cake.command.routescommand.html#displayHelp()", "RoutesCommand::execute()()": "class-cake.command.routescommand.html#execute()", "RoutesCommand::executeCommand()()": "class-cake.command.routescommand.html#executeCommand()", "RoutesCommand::fetchTable()()": "class-cake.command.routescommand.html#fetchTable()", "RoutesCommand::getDescription()()": "class-cake.command.routescommand.html#getDescription()", "RoutesCommand::getModelType()()": "class-cake.command.routescommand.html#getModelType()", "RoutesCommand::getName()()": "class-cake.command.routescommand.html#getName()", "RoutesCommand::getOptionParser()()": "class-cake.command.routescommand.html#getOptionParser()", "RoutesCommand::getRootName()()": "class-cake.command.routescommand.html#getRootName()", "RoutesCommand::getTableLocator()()": "class-cake.command.routescommand.html#getTableLocator()", "RoutesCommand::initialize()()": "class-cake.command.routescommand.html#initialize()", "RoutesCommand::loadModel()()": "class-cake.command.routescommand.html#loadModel()", "RoutesCommand::log()()": "class-cake.command.routescommand.html#log()", "RoutesCommand::modelFactory()()": "class-cake.command.routescommand.html#modelFactory()", "RoutesCommand::run()()": "class-cake.command.routescommand.html#run()", "RoutesCommand::setModelType()()": "class-cake.command.routescommand.html#setModelType()", "RoutesCommand::setName()()": "class-cake.command.routescommand.html#setName()", "RoutesCommand::setOutputLevel()()": "class-cake.command.routescommand.html#setOutputLevel()", "RoutesCommand::setTableLocator()()": "class-cake.command.routescommand.html#setTableLocator()", "RoutesGenerateCommand (class)": "class-cake.command.routesgeneratecommand.html", "RoutesGenerateCommand::$_modelFactories": "class-cake.command.routesgeneratecommand.html#$_modelFactories", "RoutesGenerateCommand::$_modelType": "class-cake.command.routesgeneratecommand.html#$_modelType", "RoutesGenerateCommand::$_tableLocator": "class-cake.command.routesgeneratecommand.html#$_tableLocator", "RoutesGenerateCommand::$defaultTable": "class-cake.command.routesgeneratecommand.html#$defaultTable", "RoutesGenerateCommand::$modelClass": "class-cake.command.routesgeneratecommand.html#$modelClass", "RoutesGenerateCommand::$name": "class-cake.command.routesgeneratecommand.html#$name", "RoutesGenerateCommand::__construct()()": "class-cake.command.routesgeneratecommand.html#__construct()", "RoutesGenerateCommand::_setModelClass()()": "class-cake.command.routesgeneratecommand.html#_setModelClass()", "RoutesGenerateCommand::_splitArgs()()": "class-cake.command.routesgeneratecommand.html#_splitArgs()", "RoutesGenerateCommand::abort()()": "class-cake.command.routesgeneratecommand.html#abort()", "RoutesGenerateCommand::buildOptionParser()()": "class-cake.command.routesgeneratecommand.html#buildOptionParser()", "RoutesGenerateCommand::defaultName()()": "class-cake.command.routesgeneratecommand.html#defaultName()", "RoutesGenerateCommand::displayHelp()()": "class-cake.command.routesgeneratecommand.html#displayHelp()", "RoutesGenerateCommand::execute()()": "class-cake.command.routesgeneratecommand.html#execute()", "RoutesGenerateCommand::executeCommand()()": "class-cake.command.routesgeneratecommand.html#executeCommand()", "RoutesGenerateCommand::fetchTable()()": "class-cake.command.routesgeneratecommand.html#fetchTable()", "RoutesGenerateCommand::getDescription()()": "class-cake.command.routesgeneratecommand.html#getDescription()", "RoutesGenerateCommand::getModelType()()": "class-cake.command.routesgeneratecommand.html#getModelType()", "RoutesGenerateCommand::getName()()": "class-cake.command.routesgeneratecommand.html#getName()", "RoutesGenerateCommand::getOptionParser()()": "class-cake.command.routesgeneratecommand.html#getOptionParser()", "RoutesGenerateCommand::getRootName()()": "class-cake.command.routesgeneratecommand.html#getRootName()", "RoutesGenerateCommand::getTableLocator()()": "class-cake.command.routesgeneratecommand.html#getTableLocator()", "RoutesGenerateCommand::initialize()()": "class-cake.command.routesgeneratecommand.html#initialize()", "RoutesGenerateCommand::loadModel()()": "class-cake.command.routesgeneratecommand.html#loadModel()", "RoutesGenerateCommand::log()()": "class-cake.command.routesgeneratecommand.html#log()", "RoutesGenerateCommand::modelFactory()()": "class-cake.command.routesgeneratecommand.html#modelFactory()", "RoutesGenerateCommand::run()()": "class-cake.command.routesgeneratecommand.html#run()", "RoutesGenerateCommand::setModelType()()": "class-cake.command.routesgeneratecommand.html#setModelType()", "RoutesGenerateCommand::setName()()": "class-cake.command.routesgeneratecommand.html#setName()", "RoutesGenerateCommand::setOutputLevel()()": "class-cake.command.routesgeneratecommand.html#setOutputLevel()", "RoutesGenerateCommand::setTableLocator()()": "class-cake.command.routesgeneratecommand.html#setTableLocator()", "Routing (namespace)": "namespace-cake.routing.html", "Routing\\Exception (namespace)": "namespace-cake.routing.exception.html", "Routing\\Middleware (namespace)": "namespace-cake.routing.middleware.html", "Routing\\Route (namespace)": "namespace-cake.routing.route.html", "RoutingApplicationInterface (interface)": "interface-cake.routing.routingapplicationinterface.html", "RoutingMiddleware (class)": "class-cake.routing.middleware.routingmiddleware.html", "RoutingMiddleware::$app": "class-cake.routing.middleware.routingmiddleware.html#$app", "RoutingMiddleware::$cacheConfig": "class-cake.routing.middleware.routingmiddleware.html#$cacheConfig", "RoutingMiddleware::__construct()()": "class-cake.routing.middleware.routingmiddleware.html#__construct()", "RoutingMiddleware::buildRouteCollection()()": "class-cake.routing.middleware.routingmiddleware.html#buildRouteCollection()", "RoutingMiddleware::loadRoutes()()": "class-cake.routing.middleware.routingmiddleware.html#loadRoutes()", "RoutingMiddleware::prepareRouteCollection()()": "class-cake.routing.middleware.routingmiddleware.html#prepareRouteCollection()", "RoutingMiddleware::process()()": "class-cake.routing.middleware.routingmiddleware.html#process()", "RuleInvoker (class)": "class-cake.datasource.ruleinvoker.html", "RuleInvoker::$name": "class-cake.datasource.ruleinvoker.html#$name", "RuleInvoker::$options": "class-cake.datasource.ruleinvoker.html#$options", "RuleInvoker::$rule": "class-cake.datasource.ruleinvoker.html#$rule", "RuleInvoker::__construct()()": "class-cake.datasource.ruleinvoker.html#__construct()", "RuleInvoker::__invoke()()": "class-cake.datasource.ruleinvoker.html#__invoke()", "RuleInvoker::setName()()": "class-cake.datasource.ruleinvoker.html#setName()", "RuleInvoker::setOptions()()": "class-cake.datasource.ruleinvoker.html#setOptions()", "RulesAwareTrait (trait)": "trait-cake.datasource.rulesawaretrait.html", "RulesChecker (class)": "class-cake.datasource.ruleschecker.html", "RulesChecker::$_createRules": "class-cake.orm.ruleschecker.html#$_createRules", "RulesChecker::$_deleteRules": "class-cake.datasource.ruleschecker.html#$_deleteRules", "RulesChecker::$_options": "class-cake.orm.ruleschecker.html#$_options", "RulesChecker::$_rules": "class-cake.datasource.ruleschecker.html#$_rules", "RulesChecker::$_updateRules": "class-cake.datasource.ruleschecker.html#$_updateRules", "RulesChecker::$_useI18n": "class-cake.orm.ruleschecker.html#$_useI18n", "RulesChecker::__construct()()": "class-cake.orm.ruleschecker.html#__construct()", "RulesChecker::_addError()()": "class-cake.datasource.ruleschecker.html#_addError()", "RulesChecker::_addLinkConstraintRule()()": "class-cake.orm.ruleschecker.html#_addLinkConstraintRule()", "RulesChecker::_checkRules()()": "class-cake.datasource.ruleschecker.html#_checkRules()", "RulesChecker::add()()": "class-cake.orm.ruleschecker.html#add()", "RulesChecker::addCreate()()": "class-cake.datasource.ruleschecker.html#addCreate()", "RulesChecker::addDelete()()": "class-cake.datasource.ruleschecker.html#addDelete()", "RulesChecker::addUpdate()()": "class-cake.datasource.ruleschecker.html#addUpdate()", "RulesChecker::check()()": "class-cake.datasource.ruleschecker.html#check()", "RulesChecker::checkCreate()()": "class-cake.orm.ruleschecker.html#checkCreate()", "RulesChecker::checkDelete()()": "class-cake.datasource.ruleschecker.html#checkDelete()", "RulesChecker::checkUpdate()()": "class-cake.datasource.ruleschecker.html#checkUpdate()", "RulesChecker::existsIn()()": "class-cake.orm.ruleschecker.html#existsIn()", "RulesChecker::isLinkedTo()()": "class-cake.orm.ruleschecker.html#isLinkedTo()", "RulesChecker::isNotLinkedTo()()": "class-cake.orm.ruleschecker.html#isNotLinkedTo()", "RulesChecker::isUnique()()": "class-cake.orm.ruleschecker.html#isUnique()", "RulesChecker::validCount()()": "class-cake.orm.ruleschecker.html#validCount()", "RulesProvider (class)": "class-cake.validation.rulesprovider.html", "RulesProvider::$_class": "class-cake.validation.rulesprovider.html#$_class", "RulesProvider::$_reflection": "class-cake.validation.rulesprovider.html#$_reflection", "RulesProvider::__call()()": "class-cake.validation.rulesprovider.html#__call()", "RulesProvider::__construct()()": "class-cake.validation.rulesprovider.html#__construct()", "RulesProvider::extension()()": "class-cake.validation.rulesprovider.html#extension()", "Runner (class)": "class-cake.http.runner.html", "Runner::$fallbackHandler": "class-cake.http.runner.html#$fallbackHandler", "Runner::$queue": "class-cake.http.runner.html#$queue", "Runner::handle()()": "class-cake.http.runner.html#handle()", "Runner::run()()": "class-cake.http.runner.html#run()", "SaveOptionsBuilder (class)": "class-cake.orm.saveoptionsbuilder.html", "SaveOptionsBuilder::$_options": "class-cake.orm.saveoptionsbuilder.html#$_options", "SaveOptionsBuilder::$_table": "class-cake.orm.saveoptionsbuilder.html#$_table", "SaveOptionsBuilder::__construct()()": "class-cake.orm.saveoptionsbuilder.html#__construct()", "SaveOptionsBuilder::_associated()()": "class-cake.orm.saveoptionsbuilder.html#_associated()", "SaveOptionsBuilder::_checkAssociation()()": "class-cake.orm.saveoptionsbuilder.html#_checkAssociation()", "SaveOptionsBuilder::_normalizeAssociations()()": "class-cake.orm.saveoptionsbuilder.html#_normalizeAssociations()", "SaveOptionsBuilder::associated()()": "class-cake.orm.saveoptionsbuilder.html#associated()", "SaveOptionsBuilder::atomic()()": "class-cake.orm.saveoptionsbuilder.html#atomic()", "SaveOptionsBuilder::checkExisting()()": "class-cake.orm.saveoptionsbuilder.html#checkExisting()", "SaveOptionsBuilder::checkRules()()": "class-cake.orm.saveoptionsbuilder.html#checkRules()", "SaveOptionsBuilder::guard()()": "class-cake.orm.saveoptionsbuilder.html#guard()", "SaveOptionsBuilder::parseArrayOptions()()": "class-cake.orm.saveoptionsbuilder.html#parseArrayOptions()", "SaveOptionsBuilder::set()()": "class-cake.orm.saveoptionsbuilder.html#set()", "SaveOptionsBuilder::toArray()()": "class-cake.orm.saveoptionsbuilder.html#toArray()", "SaveOptionsBuilder::validate()()": "class-cake.orm.saveoptionsbuilder.html#validate()", "ScalarNode (class)": "class-cake.error.debug.scalarnode.html", "ScalarNode::__construct()()": "class-cake.error.debug.scalarnode.html#__construct()", "ScalarNode::getChildren()()": "class-cake.error.debug.scalarnode.html#getChildren()", "ScalarNode::getType()()": "class-cake.error.debug.scalarnode.html#getType()", "ScalarNode::getValue()()": "class-cake.error.debug.scalarnode.html#getValue()", "Schema (class)": "class-cake.form.schema.html", "Schema::$_fieldDefaults": "class-cake.form.schema.html#$_fieldDefaults", "Schema::$_fields": "class-cake.form.schema.html#$_fields", "Schema::__debugInfo()()": "class-cake.form.schema.html#__debugInfo()", "Schema::addField()()": "class-cake.form.schema.html#addField()", "Schema::addFields()()": "class-cake.form.schema.html#addFields()", "Schema::field()()": "class-cake.form.schema.html#field()", "Schema::fields()()": "class-cake.form.schema.html#fields()", "Schema::fieldType()()": "class-cake.form.schema.html#fieldType()", "Schema::removeField()()": "class-cake.form.schema.html#removeField()", "SchemaCache (class)": "class-cake.database.schemacache.html", "SchemaCache::$_schema": "class-cake.database.schemacache.html#$_schema", "SchemaCache::__construct()()": "class-cake.database.schemacache.html#__construct()", "SchemaCache::build()()": "class-cake.database.schemacache.html#build()", "SchemaCache::clear()()": "class-cake.database.schemacache.html#clear()", "SchemaCache::getSchema()()": "class-cake.database.schemacache.html#getSchema()", "SchemacacheBuildCommand (class)": "class-cake.command.schemacachebuildcommand.html", "SchemacacheBuildCommand::$_modelFactories": "class-cake.command.schemacachebuildcommand.html#$_modelFactories", "SchemacacheBuildCommand::$_modelType": "class-cake.command.schemacachebuildcommand.html#$_modelType", "SchemacacheBuildCommand::$_tableLocator": "class-cake.command.schemacachebuildcommand.html#$_tableLocator", "SchemacacheBuildCommand::$defaultTable": "class-cake.command.schemacachebuildcommand.html#$defaultTable", "SchemacacheBuildCommand::$modelClass": "class-cake.command.schemacachebuildcommand.html#$modelClass", "SchemacacheBuildCommand::$name": "class-cake.command.schemacachebuildcommand.html#$name", "SchemacacheBuildCommand::__construct()()": "class-cake.command.schemacachebuildcommand.html#__construct()", "SchemacacheBuildCommand::_setModelClass()()": "class-cake.command.schemacachebuildcommand.html#_setModelClass()", "SchemacacheBuildCommand::abort()()": "class-cake.command.schemacachebuildcommand.html#abort()", "SchemacacheBuildCommand::buildOptionParser()()": "class-cake.command.schemacachebuildcommand.html#buildOptionParser()", "SchemacacheBuildCommand::defaultName()()": "class-cake.command.schemacachebuildcommand.html#defaultName()", "SchemacacheBuildCommand::displayHelp()()": "class-cake.command.schemacachebuildcommand.html#displayHelp()", "SchemacacheBuildCommand::execute()()": "class-cake.command.schemacachebuildcommand.html#execute()", "SchemacacheBuildCommand::executeCommand()()": "class-cake.command.schemacachebuildcommand.html#executeCommand()", "SchemacacheBuildCommand::fetchTable()()": "class-cake.command.schemacachebuildcommand.html#fetchTable()", "SchemacacheBuildCommand::getDescription()()": "class-cake.command.schemacachebuildcommand.html#getDescription()", "SchemacacheBuildCommand::getModelType()()": "class-cake.command.schemacachebuildcommand.html#getModelType()", "SchemacacheBuildCommand::getName()()": "class-cake.command.schemacachebuildcommand.html#getName()", "SchemacacheBuildCommand::getOptionParser()()": "class-cake.command.schemacachebuildcommand.html#getOptionParser()", "SchemacacheBuildCommand::getRootName()()": "class-cake.command.schemacachebuildcommand.html#getRootName()", "SchemacacheBuildCommand::getTableLocator()()": "class-cake.command.schemacachebuildcommand.html#getTableLocator()", "SchemacacheBuildCommand::initialize()()": "class-cake.command.schemacachebuildcommand.html#initialize()", "SchemacacheBuildCommand::loadModel()()": "class-cake.command.schemacachebuildcommand.html#loadModel()", "SchemacacheBuildCommand::log()()": "class-cake.command.schemacachebuildcommand.html#log()", "SchemacacheBuildCommand::modelFactory()()": "class-cake.command.schemacachebuildcommand.html#modelFactory()", "SchemacacheBuildCommand::run()()": "class-cake.command.schemacachebuildcommand.html#run()", "SchemacacheBuildCommand::setModelType()()": "class-cake.command.schemacachebuildcommand.html#setModelType()", "SchemacacheBuildCommand::setName()()": "class-cake.command.schemacachebuildcommand.html#setName()", "SchemacacheBuildCommand::setOutputLevel()()": "class-cake.command.schemacachebuildcommand.html#setOutputLevel()", "SchemacacheBuildCommand::setTableLocator()()": "class-cake.command.schemacachebuildcommand.html#setTableLocator()", "SchemacacheClearCommand (class)": "class-cake.command.schemacacheclearcommand.html", "SchemacacheClearCommand::$_modelFactories": "class-cake.command.schemacacheclearcommand.html#$_modelFactories", "SchemacacheClearCommand::$_modelType": "class-cake.command.schemacacheclearcommand.html#$_modelType", "SchemacacheClearCommand::$_tableLocator": "class-cake.command.schemacacheclearcommand.html#$_tableLocator", "SchemacacheClearCommand::$defaultTable": "class-cake.command.schemacacheclearcommand.html#$defaultTable", "SchemacacheClearCommand::$modelClass": "class-cake.command.schemacacheclearcommand.html#$modelClass", "SchemacacheClearCommand::$name": "class-cake.command.schemacacheclearcommand.html#$name", "SchemacacheClearCommand::__construct()()": "class-cake.command.schemacacheclearcommand.html#__construct()", "SchemacacheClearCommand::_setModelClass()()": "class-cake.command.schemacacheclearcommand.html#_setModelClass()", "SchemacacheClearCommand::abort()()": "class-cake.command.schemacacheclearcommand.html#abort()", "SchemacacheClearCommand::buildOptionParser()()": "class-cake.command.schemacacheclearcommand.html#buildOptionParser()", "SchemacacheClearCommand::defaultName()()": "class-cake.command.schemacacheclearcommand.html#defaultName()", "SchemacacheClearCommand::displayHelp()()": "class-cake.command.schemacacheclearcommand.html#displayHelp()", "SchemacacheClearCommand::execute()()": "class-cake.command.schemacacheclearcommand.html#execute()", "SchemacacheClearCommand::executeCommand()()": "class-cake.command.schemacacheclearcommand.html#executeCommand()", "SchemacacheClearCommand::fetchTable()()": "class-cake.command.schemacacheclearcommand.html#fetchTable()", "SchemacacheClearCommand::getDescription()()": "class-cake.command.schemacacheclearcommand.html#getDescription()", "SchemacacheClearCommand::getModelType()()": "class-cake.command.schemacacheclearcommand.html#getModelType()", "SchemacacheClearCommand::getName()()": "class-cake.command.schemacacheclearcommand.html#getName()", "SchemacacheClearCommand::getOptionParser()()": "class-cake.command.schemacacheclearcommand.html#getOptionParser()", "SchemacacheClearCommand::getRootName()()": "class-cake.command.schemacacheclearcommand.html#getRootName()", "SchemacacheClearCommand::getTableLocator()()": "class-cake.command.schemacacheclearcommand.html#getTableLocator()", "SchemacacheClearCommand::initialize()()": "class-cake.command.schemacacheclearcommand.html#initialize()", "SchemacacheClearCommand::loadModel()()": "class-cake.command.schemacacheclearcommand.html#loadModel()", "SchemacacheClearCommand::log()()": "class-cake.command.schemacacheclearcommand.html#log()", "SchemacacheClearCommand::modelFactory()()": "class-cake.command.schemacacheclearcommand.html#modelFactory()", "SchemacacheClearCommand::run()()": "class-cake.command.schemacacheclearcommand.html#run()", "SchemacacheClearCommand::setModelType()()": "class-cake.command.schemacacheclearcommand.html#setModelType()", "SchemacacheClearCommand::setName()()": "class-cake.command.schemacacheclearcommand.html#setName()", "SchemacacheClearCommand::setOutputLevel()()": "class-cake.command.schemacacheclearcommand.html#setOutputLevel()", "SchemacacheClearCommand::setTableLocator()()": "class-cake.command.schemacacheclearcommand.html#setTableLocator()", "SchemaDialect (class)": "class-cake.database.schema.schemadialect.html", "SchemaDialect::$_driver": "class-cake.database.schema.schemadialect.html#$_driver", "SchemaDialect::__construct()()": "class-cake.database.schema.schemadialect.html#__construct()", "SchemaDialect::_applyTypeSpecificColumnConversion()()": "class-cake.database.schema.schemadialect.html#_applyTypeSpecificColumnConversion()", "SchemaDialect::_convertConstraintColumns()()": "class-cake.database.schema.schemadialect.html#_convertConstraintColumns()", "SchemaDialect::_convertOnClause()()": "class-cake.database.schema.schemadialect.html#_convertOnClause()", "SchemaDialect::_foreignOnClause()()": "class-cake.database.schema.schemadialect.html#_foreignOnClause()", "SchemaDialect::_getTypeSpecificColumnSql()()": "class-cake.database.schema.schemadialect.html#_getTypeSpecificColumnSql()", "SchemaDialect::addConstraintSql()()": "class-cake.database.schema.schemadialect.html#addConstraintSql()", "SchemaDialect::columnSql()()": "class-cake.database.schema.schemadialect.html#columnSql()", "SchemaDialect::constraintSql()()": "class-cake.database.schema.schemadialect.html#constraintSql()", "SchemaDialect::convertColumnDescription()()": "class-cake.database.schema.schemadialect.html#convertColumnDescription()", "SchemaDialect::convertForeignKeyDescription()()": "class-cake.database.schema.schemadialect.html#convertForeignKeyDescription()", "SchemaDialect::convertIndexDescription()()": "class-cake.database.schema.schemadialect.html#convertIndexDescription()", "SchemaDialect::convertOptionsDescription()()": "class-cake.database.schema.schemadialect.html#convertOptionsDescription()", "SchemaDialect::createTableSql()()": "class-cake.database.schema.schemadialect.html#createTableSql()", "SchemaDialect::describeColumnSql()()": "class-cake.database.schema.schemadialect.html#describeColumnSql()", "SchemaDialect::describeForeignKeySql()()": "class-cake.database.schema.schemadialect.html#describeForeignKeySql()", "SchemaDialect::describeIndexSql()()": "class-cake.database.schema.schemadialect.html#describeIndexSql()", "SchemaDialect::describeOptionsSql()()": "class-cake.database.schema.schemadialect.html#describeOptionsSql()", "SchemaDialect::dropConstraintSql()()": "class-cake.database.schema.schemadialect.html#dropConstraintSql()", "SchemaDialect::dropTableSql()()": "class-cake.database.schema.schemadialect.html#dropTableSql()", "SchemaDialect::indexSql()()": "class-cake.database.schema.schemadialect.html#indexSql()", "SchemaDialect::listTablesSql()()": "class-cake.database.schema.schemadialect.html#listTablesSql()", "SchemaDialect::listTablesWithoutViewsSql()()": "class-cake.database.schema.schemadialect.html#listTablesWithoutViewsSql()", "SchemaDialect::truncateTableSql()()": "class-cake.database.schema.schemadialect.html#truncateTableSql()", "SchemaInterface (interface)": "interface-cake.datasource.schemainterface.html", "SchemaLoader (class)": "class-cake.testsuite.fixture.schemaloader.html", "SchemaLoader::$helper": "class-cake.testsuite.fixture.schemaloader.html#$helper", "SchemaLoader::__construct()()": "class-cake.testsuite.fixture.schemaloader.html#__construct()", "SchemaLoader::loadInternalFile()()": "class-cake.testsuite.fixture.schemaloader.html#loadInternalFile()", "SchemaLoader::loadSqlFiles()()": "class-cake.testsuite.fixture.schemaloader.html#loadSqlFiles()", "Security (class)": "class-cake.utility.security.html", "Security::$_instance": "class-cake.utility.security.html#$_instance", "Security::$_salt": "class-cake.utility.security.html#$_salt", "Security::$hashType": "class-cake.utility.security.html#$hashType", "Security::_checkKey()()": "class-cake.utility.security.html#_checkKey()", "Security::constantEquals()()": "class-cake.utility.security.html#constantEquals()", "Security::decrypt()()": "class-cake.utility.security.html#decrypt()", "Security::encrypt()()": "class-cake.utility.security.html#encrypt()", "Security::engine()()": "class-cake.utility.security.html#engine()", "Security::getSalt()()": "class-cake.utility.security.html#getSalt()", "Security::hash()()": "class-cake.utility.security.html#hash()", "Security::insecureRandomBytes()()": "class-cake.utility.security.html#insecureRandomBytes()", "Security::randomBytes()()": "class-cake.utility.security.html#randomBytes()", "Security::randomString()()": "class-cake.utility.security.html#randomString()", "Security::setHash()()": "class-cake.utility.security.html#setHash()", "Security::setSalt()()": "class-cake.utility.security.html#setSalt()", "SecurityComponent (class)": "class-cake.controller.component.securitycomponent.html", "SecurityComponent::$_action": "class-cake.controller.component.securitycomponent.html#$_action", "SecurityComponent::$_componentMap": "class-cake.controller.component.securitycomponent.html#$_componentMap", "SecurityComponent::$_config": "class-cake.controller.component.securitycomponent.html#$_config", "SecurityComponent::$_configInitialized": "class-cake.controller.component.securitycomponent.html#$_configInitialized", "SecurityComponent::$_defaultConfig": "class-cake.controller.component.securitycomponent.html#$_defaultConfig", "SecurityComponent::$_registry": "class-cake.controller.component.securitycomponent.html#$_registry", "SecurityComponent::$components": "class-cake.controller.component.securitycomponent.html#$components", "SecurityComponent::__construct()()": "class-cake.controller.component.securitycomponent.html#__construct()", "SecurityComponent::__debugInfo()()": "class-cake.controller.component.securitycomponent.html#__debugInfo()", "SecurityComponent::__get()()": "class-cake.controller.component.securitycomponent.html#__get()", "SecurityComponent::_callback()()": "class-cake.controller.component.securitycomponent.html#_callback()", "SecurityComponent::_configDelete()()": "class-cake.controller.component.securitycomponent.html#_configDelete()", "SecurityComponent::_configRead()()": "class-cake.controller.component.securitycomponent.html#_configRead()", "SecurityComponent::_configWrite()()": "class-cake.controller.component.securitycomponent.html#_configWrite()", "SecurityComponent::_debugCheckFields()()": "class-cake.controller.component.securitycomponent.html#_debugCheckFields()", "SecurityComponent::_debugExpectedFields()()": "class-cake.controller.component.securitycomponent.html#_debugExpectedFields()", "SecurityComponent::_debugPostTokenNotMatching()()": "class-cake.controller.component.securitycomponent.html#_debugPostTokenNotMatching()", "SecurityComponent::_fieldsList()()": "class-cake.controller.component.securitycomponent.html#_fieldsList()", "SecurityComponent::_hashParts()()": "class-cake.controller.component.securitycomponent.html#_hashParts()", "SecurityComponent::_matchExistingFields()()": "class-cake.controller.component.securitycomponent.html#_matchExistingFields()", "SecurityComponent::_secureRequired()()": "class-cake.controller.component.securitycomponent.html#_secureRequired()", "SecurityComponent::_sortedUnlocked()()": "class-cake.controller.component.securitycomponent.html#_sortedUnlocked()", "SecurityComponent::_throwException()()": "class-cake.controller.component.securitycomponent.html#_throwException()", "SecurityComponent::_unlocked()()": "class-cake.controller.component.securitycomponent.html#_unlocked()", "SecurityComponent::_validatePost()()": "class-cake.controller.component.securitycomponent.html#_validatePost()", "SecurityComponent::_validToken()()": "class-cake.controller.component.securitycomponent.html#_validToken()", "SecurityComponent::blackHole()()": "class-cake.controller.component.securitycomponent.html#blackHole()", "SecurityComponent::configShallow()()": "class-cake.controller.component.securitycomponent.html#configShallow()", "SecurityComponent::generateToken()()": "class-cake.controller.component.securitycomponent.html#generateToken()", "SecurityComponent::getConfig()()": "class-cake.controller.component.securitycomponent.html#getConfig()", "SecurityComponent::getConfigOrFail()()": "class-cake.controller.component.securitycomponent.html#getConfigOrFail()", "SecurityComponent::getController()()": "class-cake.controller.component.securitycomponent.html#getController()", "SecurityComponent::implementedEvents()()": "class-cake.controller.component.securitycomponent.html#implementedEvents()", "SecurityComponent::initialize()()": "class-cake.controller.component.securitycomponent.html#initialize()", "SecurityComponent::log()()": "class-cake.controller.component.securitycomponent.html#log()", "SecurityComponent::requireSecure()()": "class-cake.controller.component.securitycomponent.html#requireSecure()", "SecurityComponent::setConfig()()": "class-cake.controller.component.securitycomponent.html#setConfig()", "SecurityComponent::startup()()": "class-cake.controller.component.securitycomponent.html#startup()", "SecurityException (class)": "class-cake.controller.exception.securityexception.html", "SecurityHeadersMiddleware (class)": "class-cake.http.middleware.securityheadersmiddleware.html", "SecurityHeadersMiddleware::$headers": "class-cake.http.middleware.securityheadersmiddleware.html#$headers", "SecurityHeadersMiddleware::checkValues()()": "class-cake.http.middleware.securityheadersmiddleware.html#checkValues()", "SecurityHeadersMiddleware::noOpen()()": "class-cake.http.middleware.securityheadersmiddleware.html#noOpen()", "SecurityHeadersMiddleware::noSniff()()": "class-cake.http.middleware.securityheadersmiddleware.html#noSniff()", "SecurityHeadersMiddleware::process()()": "class-cake.http.middleware.securityheadersmiddleware.html#process()", "SecurityHeadersMiddleware::setCrossDomainPolicy()()": "class-cake.http.middleware.securityheadersmiddleware.html#setCrossDomainPolicy()", "SecurityHeadersMiddleware::setReferrerPolicy()()": "class-cake.http.middleware.securityheadersmiddleware.html#setReferrerPolicy()", "SecurityHeadersMiddleware::setXFrameOptions()()": "class-cake.http.middleware.securityheadersmiddleware.html#setXFrameOptions()", "SecurityHeadersMiddleware::setXssProtection()()": "class-cake.http.middleware.securityheadersmiddleware.html#setXssProtection()", "SelectBoxWidget (class)": "class-cake.view.widget.selectboxwidget.html", "SelectBoxWidget::$_templates": "class-cake.view.widget.selectboxwidget.html#$_templates", "SelectBoxWidget::$defaults": "class-cake.view.widget.selectboxwidget.html#$defaults", "SelectBoxWidget::__construct()()": "class-cake.view.widget.selectboxwidget.html#__construct()", "SelectBoxWidget::_emptyValue()()": "class-cake.view.widget.selectboxwidget.html#_emptyValue()", "SelectBoxWidget::_isDisabled()()": "class-cake.view.widget.selectboxwidget.html#_isDisabled()", "SelectBoxWidget::_isSelected()()": "class-cake.view.widget.selectboxwidget.html#_isSelected()", "SelectBoxWidget::_renderContent()()": "class-cake.view.widget.selectboxwidget.html#_renderContent()", "SelectBoxWidget::_renderOptgroup()()": "class-cake.view.widget.selectboxwidget.html#_renderOptgroup()", "SelectBoxWidget::_renderOptions()()": "class-cake.view.widget.selectboxwidget.html#_renderOptions()", "SelectBoxWidget::mergeDefaults()()": "class-cake.view.widget.selectboxwidget.html#mergeDefaults()", "SelectBoxWidget::render()()": "class-cake.view.widget.selectboxwidget.html#render()", "SelectBoxWidget::secureFields()()": "class-cake.view.widget.selectboxwidget.html#secureFields()", "SelectBoxWidget::setMaxLength()()": "class-cake.view.widget.selectboxwidget.html#setMaxLength()", "SelectBoxWidget::setRequired()()": "class-cake.view.widget.selectboxwidget.html#setRequired()", "SelectBoxWidget::setStep()()": "class-cake.view.widget.selectboxwidget.html#setStep()", "SelectLoader (class)": "class-cake.orm.association.loader.selectloader.html", "SelectLoader::$alias": "class-cake.orm.association.loader.selectloader.html#$alias", "SelectLoader::$associationType": "class-cake.orm.association.loader.selectloader.html#$associationType", "SelectLoader::$bindingKey": "class-cake.orm.association.loader.selectloader.html#$bindingKey", "SelectLoader::$finder": "class-cake.orm.association.loader.selectloader.html#$finder", "SelectLoader::$foreignKey": "class-cake.orm.association.loader.selectloader.html#$foreignKey", "SelectLoader::$sort": "class-cake.orm.association.loader.selectloader.html#$sort", "SelectLoader::$sourceAlias": "class-cake.orm.association.loader.selectloader.html#$sourceAlias", "SelectLoader::$strategy": "class-cake.orm.association.loader.selectloader.html#$strategy", "SelectLoader::$targetAlias": "class-cake.orm.association.loader.selectloader.html#$targetAlias", "SelectLoader::__construct()()": "class-cake.orm.association.loader.selectloader.html#__construct()", "SelectLoader::_addFilteringCondition()()": "class-cake.orm.association.loader.selectloader.html#_addFilteringCondition()", "SelectLoader::_addFilteringJoin()()": "class-cake.orm.association.loader.selectloader.html#_addFilteringJoin()", "SelectLoader::_assertFieldsPresent()()": "class-cake.orm.association.loader.selectloader.html#_assertFieldsPresent()", "SelectLoader::_buildQuery()()": "class-cake.orm.association.loader.selectloader.html#_buildQuery()", "SelectLoader::_buildResultMap()()": "class-cake.orm.association.loader.selectloader.html#_buildResultMap()", "SelectLoader::_buildSubquery()()": "class-cake.orm.association.loader.selectloader.html#_buildSubquery()", "SelectLoader::_createTupleCondition()()": "class-cake.orm.association.loader.selectloader.html#_createTupleCondition()", "SelectLoader::_defaultOptions()()": "class-cake.orm.association.loader.selectloader.html#_defaultOptions()", "SelectLoader::_extractFinder()()": "class-cake.orm.association.loader.selectloader.html#_extractFinder()", "SelectLoader::_linkField()()": "class-cake.orm.association.loader.selectloader.html#_linkField()", "SelectLoader::_multiKeysInjector()()": "class-cake.orm.association.loader.selectloader.html#_multiKeysInjector()", "SelectLoader::_resultInjector()()": "class-cake.orm.association.loader.selectloader.html#_resultInjector()", "SelectLoader::_subqueryFields()()": "class-cake.orm.association.loader.selectloader.html#_subqueryFields()", "SelectLoader::buildEagerLoader()()": "class-cake.orm.association.loader.selectloader.html#buildEagerLoader()", "SelectWithPivotLoader (class)": "class-cake.orm.association.loader.selectwithpivotloader.html", "SelectWithPivotLoader::$alias": "class-cake.orm.association.loader.selectwithpivotloader.html#$alias", "SelectWithPivotLoader::$associationType": "class-cake.orm.association.loader.selectwithpivotloader.html#$associationType", "SelectWithPivotLoader::$bindingKey": "class-cake.orm.association.loader.selectwithpivotloader.html#$bindingKey", "SelectWithPivotLoader::$finder": "class-cake.orm.association.loader.selectwithpivotloader.html#$finder", "SelectWithPivotLoader::$foreignKey": "class-cake.orm.association.loader.selectwithpivotloader.html#$foreignKey", "SelectWithPivotLoader::$junctionAssoc": "class-cake.orm.association.loader.selectwithpivotloader.html#$junctionAssoc", "SelectWithPivotLoader::$junctionAssociationName": "class-cake.orm.association.loader.selectwithpivotloader.html#$junctionAssociationName", "SelectWithPivotLoader::$junctionConditions": "class-cake.orm.association.loader.selectwithpivotloader.html#$junctionConditions", "SelectWithPivotLoader::$junctionProperty": "class-cake.orm.association.loader.selectwithpivotloader.html#$junctionProperty", "SelectWithPivotLoader::$sort": "class-cake.orm.association.loader.selectwithpivotloader.html#$sort", "SelectWithPivotLoader::$sourceAlias": "class-cake.orm.association.loader.selectwithpivotloader.html#$sourceAlias", "SelectWithPivotLoader::$strategy": "class-cake.orm.association.loader.selectwithpivotloader.html#$strategy", "SelectWithPivotLoader::$targetAlias": "class-cake.orm.association.loader.selectwithpivotloader.html#$targetAlias", "SelectWithPivotLoader::__construct()()": "class-cake.orm.association.loader.selectwithpivotloader.html#__construct()", "SelectWithPivotLoader::_addFilteringCondition()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_addFilteringCondition()", "SelectWithPivotLoader::_addFilteringJoin()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_addFilteringJoin()", "SelectWithPivotLoader::_assertFieldsPresent()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_assertFieldsPresent()", "SelectWithPivotLoader::_buildQuery()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_buildQuery()", "SelectWithPivotLoader::_buildResultMap()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_buildResultMap()", "SelectWithPivotLoader::_buildSubquery()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_buildSubquery()", "SelectWithPivotLoader::_createTupleCondition()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_createTupleCondition()", "SelectWithPivotLoader::_defaultOptions()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_defaultOptions()", "SelectWithPivotLoader::_extractFinder()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_extractFinder()", "SelectWithPivotLoader::_linkField()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_linkField()", "SelectWithPivotLoader::_multiKeysInjector()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_multiKeysInjector()", "SelectWithPivotLoader::_resultInjector()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_resultInjector()", "SelectWithPivotLoader::_subqueryFields()()": "class-cake.orm.association.loader.selectwithpivotloader.html#_subqueryFields()", "SelectWithPivotLoader::buildEagerLoader()()": "class-cake.orm.association.loader.selectwithpivotloader.html#buildEagerLoader()", "SerializationFailureException (class)": "class-cake.view.exception.serializationfailureexception.html", "SerializedView (class)": "class-cake.view.serializedview.html", "SerializedView::$_config": "class-cake.view.serializedview.html#$_config", "SerializedView::$_configInitialized": "class-cake.view.serializedview.html#$_configInitialized", "SerializedView::$_current": "class-cake.view.serializedview.html#$_current", "SerializedView::$_currentType": "class-cake.view.serializedview.html#$_currentType", "SerializedView::$_defaultConfig": "class-cake.view.serializedview.html#$_defaultConfig", "SerializedView::$_eventClass": "class-cake.view.serializedview.html#$_eventClass", "SerializedView::$_eventManager": "class-cake.view.serializedview.html#$_eventManager", "SerializedView::$_ext": "class-cake.view.serializedview.html#$_ext", "SerializedView::$_helpers": "class-cake.view.serializedview.html#$_helpers", "SerializedView::$_parents": "class-cake.view.serializedview.html#$_parents", "SerializedView::$_passedVars": "class-cake.view.serializedview.html#$_passedVars", "SerializedView::$_paths": "class-cake.view.serializedview.html#$_paths", "SerializedView::$_pathsForPlugin": "class-cake.view.serializedview.html#$_pathsForPlugin", "SerializedView::$_responseType": "class-cake.view.serializedview.html#$_responseType", "SerializedView::$_stack": "class-cake.view.serializedview.html#$_stack", "SerializedView::$_viewBlockClass": "class-cake.view.serializedview.html#$_viewBlockClass", "SerializedView::$autoLayout": "class-cake.view.serializedview.html#$autoLayout", "SerializedView::$Blocks": "class-cake.view.serializedview.html#$Blocks", "SerializedView::$Breadcrumbs": "class-cake.view.serializedview.html#$Breadcrumbs", "SerializedView::$elementCache": "class-cake.view.serializedview.html#$elementCache", "SerializedView::$Flash": "class-cake.view.serializedview.html#$Flash", "SerializedView::$Form": "class-cake.view.serializedview.html#$Form", "SerializedView::$helpers": "class-cake.view.serializedview.html#$helpers", "SerializedView::$Html": "class-cake.view.serializedview.html#$Html", "SerializedView::$layout": "class-cake.view.serializedview.html#$layout", "SerializedView::$layoutPath": "class-cake.view.serializedview.html#$layoutPath", "SerializedView::$name": "class-cake.view.serializedview.html#$name", "SerializedView::$Number": "class-cake.view.serializedview.html#$Number", "SerializedView::$Paginator": "class-cake.view.serializedview.html#$Paginator", "SerializedView::$plugin": "class-cake.view.serializedview.html#$plugin", "SerializedView::$request": "class-cake.view.serializedview.html#$request", "SerializedView::$response": "class-cake.view.serializedview.html#$response", "SerializedView::$subDir": "class-cake.view.serializedview.html#$subDir", "SerializedView::$template": "class-cake.view.serializedview.html#$template", "SerializedView::$templatePath": "class-cake.view.serializedview.html#$templatePath", "SerializedView::$Text": "class-cake.view.serializedview.html#$Text", "SerializedView::$theme": "class-cake.view.serializedview.html#$theme", "SerializedView::$Time": "class-cake.view.serializedview.html#$Time", "SerializedView::$Url": "class-cake.view.serializedview.html#$Url", "SerializedView::$viewVars": "class-cake.view.serializedview.html#$viewVars", "SerializedView::__construct()()": "class-cake.view.serializedview.html#__construct()", "SerializedView::__get()()": "class-cake.view.serializedview.html#__get()", "SerializedView::_checkFilePath()()": "class-cake.view.serializedview.html#_checkFilePath()", "SerializedView::_configDelete()()": "class-cake.view.serializedview.html#_configDelete()", "SerializedView::_configRead()()": "class-cake.view.serializedview.html#_configRead()", "SerializedView::_configWrite()()": "class-cake.view.serializedview.html#_configWrite()", "SerializedView::_createCell()()": "class-cake.view.serializedview.html#_createCell()", "SerializedView::_elementCache()()": "class-cake.view.serializedview.html#_elementCache()", "SerializedView::_evaluate()()": "class-cake.view.serializedview.html#_evaluate()", "SerializedView::_getElementFileName()()": "class-cake.view.serializedview.html#_getElementFileName()", "SerializedView::_getLayoutFileName()()": "class-cake.view.serializedview.html#_getLayoutFileName()", "SerializedView::_getSubPaths()()": "class-cake.view.serializedview.html#_getSubPaths()", "SerializedView::_getTemplateFileName()()": "class-cake.view.serializedview.html#_getTemplateFileName()", "SerializedView::_inflectTemplateFileName()()": "class-cake.view.serializedview.html#_inflectTemplateFileName()", "SerializedView::_paths()()": "class-cake.view.serializedview.html#_paths()", "SerializedView::_render()()": "class-cake.view.serializedview.html#_render()", "SerializedView::_renderElement()()": "class-cake.view.serializedview.html#_renderElement()", "SerializedView::_serialize()()": "class-cake.view.serializedview.html#_serialize()", "SerializedView::append()()": "class-cake.view.serializedview.html#append()", "SerializedView::assign()()": "class-cake.view.serializedview.html#assign()", "SerializedView::blocks()()": "class-cake.view.serializedview.html#blocks()", "SerializedView::cache()()": "class-cake.view.serializedview.html#cache()", "SerializedView::cell()()": "class-cake.view.serializedview.html#cell()", "SerializedView::configShallow()()": "class-cake.view.serializedview.html#configShallow()", "SerializedView::contentType()()": "class-cake.view.serializedview.html#contentType()", "SerializedView::disableAutoLayout()()": "class-cake.view.serializedview.html#disableAutoLayout()", "SerializedView::dispatchEvent()()": "class-cake.view.serializedview.html#dispatchEvent()", "SerializedView::element()()": "class-cake.view.serializedview.html#element()", "SerializedView::elementExists()()": "class-cake.view.serializedview.html#elementExists()", "SerializedView::enableAutoLayout()()": "class-cake.view.serializedview.html#enableAutoLayout()", "SerializedView::end()()": "class-cake.view.serializedview.html#end()", "SerializedView::exists()()": "class-cake.view.serializedview.html#exists()", "SerializedView::extend()()": "class-cake.view.serializedview.html#extend()", "SerializedView::fetch()()": "class-cake.view.serializedview.html#fetch()", "SerializedView::get()()": "class-cake.view.serializedview.html#get()", "SerializedView::getConfig()()": "class-cake.view.serializedview.html#getConfig()", "SerializedView::getConfigOrFail()()": "class-cake.view.serializedview.html#getConfigOrFail()", "SerializedView::getCurrentType()()": "class-cake.view.serializedview.html#getCurrentType()", "SerializedView::getElementPaths()()": "class-cake.view.serializedview.html#getElementPaths()", "SerializedView::getEventManager()()": "class-cake.view.serializedview.html#getEventManager()", "SerializedView::getLayout()()": "class-cake.view.serializedview.html#getLayout()", "SerializedView::getLayoutPath()()": "class-cake.view.serializedview.html#getLayoutPath()", "SerializedView::getLayoutPaths()()": "class-cake.view.serializedview.html#getLayoutPaths()", "SerializedView::getName()()": "class-cake.view.serializedview.html#getName()", "SerializedView::getPlugin()()": "class-cake.view.serializedview.html#getPlugin()", "SerializedView::getRequest()()": "class-cake.view.serializedview.html#getRequest()", "SerializedView::getResponse()()": "class-cake.view.serializedview.html#getResponse()", "SerializedView::getSubDir()()": "class-cake.view.serializedview.html#getSubDir()", "SerializedView::getTemplate()()": "class-cake.view.serializedview.html#getTemplate()", "SerializedView::getTemplatePath()()": "class-cake.view.serializedview.html#getTemplatePath()", "SerializedView::getTheme()()": "class-cake.view.serializedview.html#getTheme()", "SerializedView::getVars()()": "class-cake.view.serializedview.html#getVars()", "SerializedView::helpers()()": "class-cake.view.serializedview.html#helpers()", "SerializedView::initialize()()": "class-cake.view.serializedview.html#initialize()", "SerializedView::isAutoLayoutEnabled()()": "class-cake.view.serializedview.html#isAutoLayoutEnabled()", "SerializedView::loadHelper()()": "class-cake.view.serializedview.html#loadHelper()", "SerializedView::loadHelpers()()": "class-cake.view.serializedview.html#loadHelpers()", "SerializedView::log()()": "class-cake.view.serializedview.html#log()", "SerializedView::pluginSplit()()": "class-cake.view.serializedview.html#pluginSplit()", "SerializedView::prepend()()": "class-cake.view.serializedview.html#prepend()", "SerializedView::render()()": "class-cake.view.serializedview.html#render()", "SerializedView::renderLayout()()": "class-cake.view.serializedview.html#renderLayout()", "SerializedView::reset()()": "class-cake.view.serializedview.html#reset()", "SerializedView::set()()": "class-cake.view.serializedview.html#set()", "SerializedView::setConfig()()": "class-cake.view.serializedview.html#setConfig()", "SerializedView::setContentType()()": "class-cake.view.serializedview.html#setContentType()", "SerializedView::setElementCache()()": "class-cake.view.serializedview.html#setElementCache()", "SerializedView::setEventManager()()": "class-cake.view.serializedview.html#setEventManager()", "SerializedView::setLayout()()": "class-cake.view.serializedview.html#setLayout()", "SerializedView::setLayoutPath()()": "class-cake.view.serializedview.html#setLayoutPath()", "SerializedView::setPlugin()()": "class-cake.view.serializedview.html#setPlugin()", "SerializedView::setRequest()()": "class-cake.view.serializedview.html#setRequest()", "SerializedView::setResponse()()": "class-cake.view.serializedview.html#setResponse()", "SerializedView::setSubDir()()": "class-cake.view.serializedview.html#setSubDir()", "SerializedView::setTemplate()()": "class-cake.view.serializedview.html#setTemplate()", "SerializedView::setTemplatePath()()": "class-cake.view.serializedview.html#setTemplatePath()", "SerializedView::setTheme()()": "class-cake.view.serializedview.html#setTheme()", "SerializedView::start()()": "class-cake.view.serializedview.html#start()", "Server (class)": "class-cake.http.server.html", "Server::$_eventClass": "class-cake.http.server.html#$_eventClass", "Server::$_eventManager": "class-cake.http.server.html#$_eventManager", "Server::$app": "class-cake.http.server.html#$app", "Server::$runner": "class-cake.http.server.html#$runner", "Server::__construct()()": "class-cake.http.server.html#__construct()", "Server::bootstrap()()": "class-cake.http.server.html#bootstrap()", "Server::dispatchEvent()()": "class-cake.http.server.html#dispatchEvent()", "Server::emit()()": "class-cake.http.server.html#emit()", "Server::getApp()()": "class-cake.http.server.html#getApp()", "Server::getEventManager()()": "class-cake.http.server.html#getEventManager()", "Server::run()()": "class-cake.http.server.html#run()", "Server::setEventManager()()": "class-cake.http.server.html#setEventManager()", "ServerCommand (class)": "class-cake.command.servercommand.html", "ServerCommand::$_documentRoot": "class-cake.command.servercommand.html#$_documentRoot", "ServerCommand::$_host": "class-cake.command.servercommand.html#$_host", "ServerCommand::$_iniPath": "class-cake.command.servercommand.html#$_iniPath", "ServerCommand::$_modelFactories": "class-cake.command.servercommand.html#$_modelFactories", "ServerCommand::$_modelType": "class-cake.command.servercommand.html#$_modelType", "ServerCommand::$_port": "class-cake.command.servercommand.html#$_port", "ServerCommand::$_tableLocator": "class-cake.command.servercommand.html#$_tableLocator", "ServerCommand::$defaultTable": "class-cake.command.servercommand.html#$defaultTable", "ServerCommand::$modelClass": "class-cake.command.servercommand.html#$modelClass", "ServerCommand::$name": "class-cake.command.servercommand.html#$name", "ServerCommand::__construct()()": "class-cake.command.servercommand.html#__construct()", "ServerCommand::_setModelClass()()": "class-cake.command.servercommand.html#_setModelClass()", "ServerCommand::abort()()": "class-cake.command.servercommand.html#abort()", "ServerCommand::buildOptionParser()()": "class-cake.command.servercommand.html#buildOptionParser()", "ServerCommand::defaultName()()": "class-cake.command.servercommand.html#defaultName()", "ServerCommand::displayHelp()()": "class-cake.command.servercommand.html#displayHelp()", "ServerCommand::execute()()": "class-cake.command.servercommand.html#execute()", "ServerCommand::executeCommand()()": "class-cake.command.servercommand.html#executeCommand()", "ServerCommand::fetchTable()()": "class-cake.command.servercommand.html#fetchTable()", "ServerCommand::getDescription()()": "class-cake.command.servercommand.html#getDescription()", "ServerCommand::getModelType()()": "class-cake.command.servercommand.html#getModelType()", "ServerCommand::getName()()": "class-cake.command.servercommand.html#getName()", "ServerCommand::getOptionParser()()": "class-cake.command.servercommand.html#getOptionParser()", "ServerCommand::getRootName()()": "class-cake.command.servercommand.html#getRootName()", "ServerCommand::getTableLocator()()": "class-cake.command.servercommand.html#getTableLocator()", "ServerCommand::initialize()()": "class-cake.command.servercommand.html#initialize()", "ServerCommand::loadModel()()": "class-cake.command.servercommand.html#loadModel()", "ServerCommand::log()()": "class-cake.command.servercommand.html#log()", "ServerCommand::modelFactory()()": "class-cake.command.servercommand.html#modelFactory()", "ServerCommand::run()()": "class-cake.command.servercommand.html#run()", "ServerCommand::setModelType()()": "class-cake.command.servercommand.html#setModelType()", "ServerCommand::setName()()": "class-cake.command.servercommand.html#setName()", "ServerCommand::setOutputLevel()()": "class-cake.command.servercommand.html#setOutputLevel()", "ServerCommand::setTableLocator()()": "class-cake.command.servercommand.html#setTableLocator()", "ServerCommand::startup()()": "class-cake.command.servercommand.html#startup()", "ServerRequest (class)": "class-cake.http.serverrequest.html", "ServerRequest::$_detectorCache": "class-cake.http.serverrequest.html#$_detectorCache", "ServerRequest::$_detectors": "class-cake.http.serverrequest.html#$_detectors", "ServerRequest::$_environment": "class-cake.http.serverrequest.html#$_environment", "ServerRequest::$attributes": "class-cake.http.serverrequest.html#$attributes", "ServerRequest::$base": "class-cake.http.serverrequest.html#$base", "ServerRequest::$cookies": "class-cake.http.serverrequest.html#$cookies", "ServerRequest::$data": "class-cake.http.serverrequest.html#$data", "ServerRequest::$emulatedAttributes": "class-cake.http.serverrequest.html#$emulatedAttributes", "ServerRequest::$flash": "class-cake.http.serverrequest.html#$flash", "ServerRequest::$params": "class-cake.http.serverrequest.html#$params", "ServerRequest::$protocol": "class-cake.http.serverrequest.html#$protocol", "ServerRequest::$query": "class-cake.http.serverrequest.html#$query", "ServerRequest::$requestTarget": "class-cake.http.serverrequest.html#$requestTarget", "ServerRequest::$session": "class-cake.http.serverrequest.html#$session", "ServerRequest::$stream": "class-cake.http.serverrequest.html#$stream", "ServerRequest::$trustedProxies": "class-cake.http.serverrequest.html#$trustedProxies", "ServerRequest::$trustProxy": "class-cake.http.serverrequest.html#$trustProxy", "ServerRequest::$uploadedFiles": "class-cake.http.serverrequest.html#$uploadedFiles", "ServerRequest::$uri": "class-cake.http.serverrequest.html#$uri", "ServerRequest::$webroot": "class-cake.http.serverrequest.html#$webroot", "ServerRequest::__call()()": "class-cake.http.serverrequest.html#__call()", "ServerRequest::__construct()()": "class-cake.http.serverrequest.html#__construct()", "ServerRequest::_acceptHeaderDetector()()": "class-cake.http.serverrequest.html#_acceptHeaderDetector()", "ServerRequest::_environmentDetector()()": "class-cake.http.serverrequest.html#_environmentDetector()", "ServerRequest::_headerDetector()()": "class-cake.http.serverrequest.html#_headerDetector()", "ServerRequest::_is()()": "class-cake.http.serverrequest.html#_is()", "ServerRequest::_paramDetector()()": "class-cake.http.serverrequest.html#_paramDetector()", "ServerRequest::_setConfig()()": "class-cake.http.serverrequest.html#_setConfig()", "ServerRequest::acceptLanguage()()": "class-cake.http.serverrequest.html#acceptLanguage()", "ServerRequest::accepts()()": "class-cake.http.serverrequest.html#accepts()", "ServerRequest::addDetector()()": "class-cake.http.serverrequest.html#addDetector()", "ServerRequest::allowMethod()()": "class-cake.http.serverrequest.html#allowMethod()", "ServerRequest::clearDetectorCache()()": "class-cake.http.serverrequest.html#clearDetectorCache()", "ServerRequest::clientIp()()": "class-cake.http.serverrequest.html#clientIp()", "ServerRequest::contentType()()": "class-cake.http.serverrequest.html#contentType()", "ServerRequest::domain()()": "class-cake.http.serverrequest.html#domain()", "ServerRequest::getAttribute()()": "class-cake.http.serverrequest.html#getAttribute()", "ServerRequest::getAttributes()()": "class-cake.http.serverrequest.html#getAttributes()", "ServerRequest::getBody()()": "class-cake.http.serverrequest.html#getBody()", "ServerRequest::getCookie()()": "class-cake.http.serverrequest.html#getCookie()", "ServerRequest::getCookieCollection()()": "class-cake.http.serverrequest.html#getCookieCollection()", "ServerRequest::getCookieParams()()": "class-cake.http.serverrequest.html#getCookieParams()", "ServerRequest::getData()()": "class-cake.http.serverrequest.html#getData()", "ServerRequest::getEnv()()": "class-cake.http.serverrequest.html#getEnv()", "ServerRequest::getFlash()()": "class-cake.http.serverrequest.html#getFlash()", "ServerRequest::getHeader()()": "class-cake.http.serverrequest.html#getHeader()", "ServerRequest::getHeaderLine()()": "class-cake.http.serverrequest.html#getHeaderLine()", "ServerRequest::getHeaders()()": "class-cake.http.serverrequest.html#getHeaders()", "ServerRequest::getMethod()()": "class-cake.http.serverrequest.html#getMethod()", "ServerRequest::getParam()()": "class-cake.http.serverrequest.html#getParam()", "ServerRequest::getParsedBody()()": "class-cake.http.serverrequest.html#getParsedBody()", "ServerRequest::getPath()()": "class-cake.http.serverrequest.html#getPath()", "ServerRequest::getProtocolVersion()()": "class-cake.http.serverrequest.html#getProtocolVersion()", "ServerRequest::getQuery()()": "class-cake.http.serverrequest.html#getQuery()", "ServerRequest::getQueryParams()()": "class-cake.http.serverrequest.html#getQueryParams()", "ServerRequest::getRequestTarget()()": "class-cake.http.serverrequest.html#getRequestTarget()", "ServerRequest::getServerParams()()": "class-cake.http.serverrequest.html#getServerParams()", "ServerRequest::getSession()()": "class-cake.http.serverrequest.html#getSession()", "ServerRequest::getTrustedProxies()()": "class-cake.http.serverrequest.html#getTrustedProxies()", "ServerRequest::getUploadedFile()()": "class-cake.http.serverrequest.html#getUploadedFile()", "ServerRequest::getUploadedFiles()()": "class-cake.http.serverrequest.html#getUploadedFiles()", "ServerRequest::getUri()()": "class-cake.http.serverrequest.html#getUri()", "ServerRequest::hasHeader()()": "class-cake.http.serverrequest.html#hasHeader()", "ServerRequest::host()()": "class-cake.http.serverrequest.html#host()", "ServerRequest::input()()": "class-cake.http.serverrequest.html#input()", "ServerRequest::is()()": "class-cake.http.serverrequest.html#is()", "ServerRequest::isAll()()": "class-cake.http.serverrequest.html#isAll()", "ServerRequest::normalizeHeaderName()()": "class-cake.http.serverrequest.html#normalizeHeaderName()", "ServerRequest::parseAccept()()": "class-cake.http.serverrequest.html#parseAccept()", "ServerRequest::port()()": "class-cake.http.serverrequest.html#port()", "ServerRequest::processUrlOption()()": "class-cake.http.serverrequest.html#processUrlOption()", "ServerRequest::referer()()": "class-cake.http.serverrequest.html#referer()", "ServerRequest::scheme()()": "class-cake.http.serverrequest.html#scheme()", "ServerRequest::setTrustedProxies()()": "class-cake.http.serverrequest.html#setTrustedProxies()", "ServerRequest::subdomains()()": "class-cake.http.serverrequest.html#subdomains()", "ServerRequest::validateUploadedFiles()()": "class-cake.http.serverrequest.html#validateUploadedFiles()", "ServerRequest::withAddedHeader()()": "class-cake.http.serverrequest.html#withAddedHeader()", "ServerRequest::withAttribute()()": "class-cake.http.serverrequest.html#withAttribute()", "ServerRequest::withBody()()": "class-cake.http.serverrequest.html#withBody()", "ServerRequest::withCookieCollection()()": "class-cake.http.serverrequest.html#withCookieCollection()", "ServerRequest::withCookieParams()()": "class-cake.http.serverrequest.html#withCookieParams()", "ServerRequest::withData()()": "class-cake.http.serverrequest.html#withData()", "ServerRequest::withEnv()()": "class-cake.http.serverrequest.html#withEnv()", "ServerRequest::withHeader()()": "class-cake.http.serverrequest.html#withHeader()", "ServerRequest::withMethod()()": "class-cake.http.serverrequest.html#withMethod()", "ServerRequest::withoutAttribute()()": "class-cake.http.serverrequest.html#withoutAttribute()", "ServerRequest::withoutData()()": "class-cake.http.serverrequest.html#withoutData()", "ServerRequest::withoutHeader()()": "class-cake.http.serverrequest.html#withoutHeader()", "ServerRequest::withParam()()": "class-cake.http.serverrequest.html#withParam()", "ServerRequest::withParsedBody()()": "class-cake.http.serverrequest.html#withParsedBody()", "ServerRequest::withProtocolVersion()()": "class-cake.http.serverrequest.html#withProtocolVersion()", "ServerRequest::withQueryParams()()": "class-cake.http.serverrequest.html#withQueryParams()", "ServerRequest::withRequestTarget()()": "class-cake.http.serverrequest.html#withRequestTarget()", "ServerRequest::withUploadedFiles()()": "class-cake.http.serverrequest.html#withUploadedFiles()", "ServerRequest::withUri()()": "class-cake.http.serverrequest.html#withUri()", "ServerRequestFactory (class)": "class-cake.http.serverrequestfactory.html", "ServerRequestFactory::createServerRequest()()": "class-cake.http.serverrequestfactory.html#createServerRequest()", "ServerRequestFactory::createUri()()": "class-cake.http.serverrequestfactory.html#createUri()", "ServerRequestFactory::fromGlobals()()": "class-cake.http.serverrequestfactory.html#fromGlobals()", "ServerRequestFactory::getBase()()": "class-cake.http.serverrequestfactory.html#getBase()", "ServerRequestFactory::marshalBodyAndRequestMethod()()": "class-cake.http.serverrequestfactory.html#marshalBodyAndRequestMethod()", "ServerRequestFactory::marshalFiles()()": "class-cake.http.serverrequestfactory.html#marshalFiles()", "ServerRequestFactory::marshalUriFromSapi()()": "class-cake.http.serverrequestfactory.html#marshalUriFromSapi()", "ServerRequestFactory::updatePath()()": "class-cake.http.serverrequestfactory.html#updatePath()", "ServiceConfig (class)": "class-cake.core.serviceconfig.html", "ServiceConfig::get()()": "class-cake.core.serviceconfig.html#get()", "ServiceConfig::has()()": "class-cake.core.serviceconfig.html#has()", "ServiceProvider (class)": "class-cake.core.serviceprovider.html", "ServiceProvider::$container": "class-cake.core.serviceprovider.html#$container", "ServiceProvider::$identifier": "class-cake.core.serviceprovider.html#$identifier", "ServiceProvider::$provides": "class-cake.core.serviceprovider.html#$provides", "ServiceProvider::boot()()": "class-cake.core.serviceprovider.html#boot()", "ServiceProvider::bootstrap()()": "class-cake.core.serviceprovider.html#bootstrap()", "ServiceProvider::getContainer()()": "class-cake.core.serviceprovider.html#getContainer()", "ServiceProvider::getIdentifier()()": "class-cake.core.serviceprovider.html#getIdentifier()", "ServiceProvider::provides()()": "class-cake.core.serviceprovider.html#provides()", "ServiceProvider::register()()": "class-cake.core.serviceprovider.html#register()", "ServiceProvider::services()()": "class-cake.core.serviceprovider.html#services()", "ServiceProvider::setContainer()()": "class-cake.core.serviceprovider.html#setContainer()", "ServiceProvider::setIdentifier()()": "class-cake.core.serviceprovider.html#setIdentifier()", "ServiceUnavailableException (class)": "class-cake.http.exception.serviceunavailableexception.html", "Session (class)": "class-cake.http.session.html", "Session::$_engine": "class-cake.http.session.html#$_engine", "Session::$_isCLI": "class-cake.http.session.html#$_isCLI", "Session::$_lifetime": "class-cake.http.session.html#$_lifetime", "Session::$_started": "class-cake.http.session.html#$_started", "Session::__construct()()": "class-cake.http.session.html#__construct()", "Session::_defaultConfig()()": "class-cake.http.session.html#_defaultConfig()", "Session::_hasSession()()": "class-cake.http.session.html#_hasSession()", "Session::_overwrite()()": "class-cake.http.session.html#_overwrite()", "Session::_timedOut()()": "class-cake.http.session.html#_timedOut()", "Session::check()()": "class-cake.http.session.html#check()", "Session::clear()()": "class-cake.http.session.html#clear()", "Session::close()()": "class-cake.http.session.html#close()", "Session::consume()()": "class-cake.http.session.html#consume()", "Session::create()()": "class-cake.http.session.html#create()", "Session::delete()()": "class-cake.http.session.html#delete()", "Session::destroy()()": "class-cake.http.session.html#destroy()", "Session::engine()()": "class-cake.http.session.html#engine()", "Session::id()()": "class-cake.http.session.html#id()", "Session::options()()": "class-cake.http.session.html#options()", "Session::read()()": "class-cake.http.session.html#read()", "Session::readOrFail()()": "class-cake.http.session.html#readOrFail()", "Session::renew()()": "class-cake.http.session.html#renew()", "Session::setEngine()()": "class-cake.http.session.html#setEngine()", "Session::start()()": "class-cake.http.session.html#start()", "Session::started()()": "class-cake.http.session.html#started()", "Session::write()()": "class-cake.http.session.html#write()", "SessionCsrfProtectionMiddleware (class)": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html", "SessionCsrfProtectionMiddleware::$_config": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#$_config", "SessionCsrfProtectionMiddleware::$skipCheckCallback": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#$skipCheckCallback", "SessionCsrfProtectionMiddleware::__construct()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#__construct()", "SessionCsrfProtectionMiddleware::createToken()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#createToken()", "SessionCsrfProtectionMiddleware::process()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#process()", "SessionCsrfProtectionMiddleware::saltToken()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#saltToken()", "SessionCsrfProtectionMiddleware::skipCheckCallback()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#skipCheckCallback()", "SessionCsrfProtectionMiddleware::unsaltToken()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#unsaltToken()", "SessionCsrfProtectionMiddleware::unsetTokenField()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#unsetTokenField()", "SessionCsrfProtectionMiddleware::validateToken()()": "class-cake.http.middleware.sessioncsrfprotectionmiddleware.html#validateToken()", "SessionEquals (class)": "class-cake.testsuite.constraint.session.sessionequals.html", "SessionEquals::$path": "class-cake.testsuite.constraint.session.sessionequals.html#$path", "SessionEquals::__construct()()": "class-cake.testsuite.constraint.session.sessionequals.html#__construct()", "SessionEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.session.sessionequals.html#additionalFailureDescription()", "SessionEquals::count()()": "class-cake.testsuite.constraint.session.sessionequals.html#count()", "SessionEquals::evaluate()()": "class-cake.testsuite.constraint.session.sessionequals.html#evaluate()", "SessionEquals::exporter()()": "class-cake.testsuite.constraint.session.sessionequals.html#exporter()", "SessionEquals::fail()()": "class-cake.testsuite.constraint.session.sessionequals.html#fail()", "SessionEquals::failureDescription()()": "class-cake.testsuite.constraint.session.sessionequals.html#failureDescription()", "SessionEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.session.sessionequals.html#failureDescriptionInContext()", "SessionEquals::matches()()": "class-cake.testsuite.constraint.session.sessionequals.html#matches()", "SessionEquals::reduce()()": "class-cake.testsuite.constraint.session.sessionequals.html#reduce()", "SessionEquals::toString()()": "class-cake.testsuite.constraint.session.sessionequals.html#toString()", "SessionEquals::toStringInContext()()": "class-cake.testsuite.constraint.session.sessionequals.html#toStringInContext()", "SessionHasKey (class)": "class-cake.testsuite.constraint.session.sessionhaskey.html", "SessionHasKey::$path": "class-cake.testsuite.constraint.session.sessionhaskey.html#$path", "SessionHasKey::__construct()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#__construct()", "SessionHasKey::additionalFailureDescription()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#additionalFailureDescription()", "SessionHasKey::count()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#count()", "SessionHasKey::evaluate()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#evaluate()", "SessionHasKey::exporter()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#exporter()", "SessionHasKey::fail()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#fail()", "SessionHasKey::failureDescription()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#failureDescription()", "SessionHasKey::failureDescriptionInContext()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#failureDescriptionInContext()", "SessionHasKey::matches()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#matches()", "SessionHasKey::reduce()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#reduce()", "SessionHasKey::toString()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#toString()", "SessionHasKey::toStringInContext()()": "class-cake.testsuite.constraint.session.sessionhaskey.html#toStringInContext()", "SessionStorage (class)": "class-cake.auth.storage.sessionstorage.html", "SessionStorage::$_config": "class-cake.auth.storage.sessionstorage.html#$_config", "SessionStorage::$_configInitialized": "class-cake.auth.storage.sessionstorage.html#$_configInitialized", "SessionStorage::$_defaultConfig": "class-cake.auth.storage.sessionstorage.html#$_defaultConfig", "SessionStorage::$_session": "class-cake.auth.storage.sessionstorage.html#$_session", "SessionStorage::$_user": "class-cake.auth.storage.sessionstorage.html#$_user", "SessionStorage::__construct()()": "class-cake.auth.storage.sessionstorage.html#__construct()", "SessionStorage::_configDelete()()": "class-cake.auth.storage.sessionstorage.html#_configDelete()", "SessionStorage::_configRead()()": "class-cake.auth.storage.sessionstorage.html#_configRead()", "SessionStorage::_configWrite()()": "class-cake.auth.storage.sessionstorage.html#_configWrite()", "SessionStorage::configShallow()()": "class-cake.auth.storage.sessionstorage.html#configShallow()", "SessionStorage::delete()()": "class-cake.auth.storage.sessionstorage.html#delete()", "SessionStorage::getConfig()()": "class-cake.auth.storage.sessionstorage.html#getConfig()", "SessionStorage::getConfigOrFail()()": "class-cake.auth.storage.sessionstorage.html#getConfigOrFail()", "SessionStorage::read()()": "class-cake.auth.storage.sessionstorage.html#read()", "SessionStorage::redirectUrl()()": "class-cake.auth.storage.sessionstorage.html#redirectUrl()", "SessionStorage::setConfig()()": "class-cake.auth.storage.sessionstorage.html#setConfig()", "SessionStorage::write()()": "class-cake.auth.storage.sessionstorage.html#write()", "ShadowTableStrategy (class)": "class-cake.orm.behavior.translate.shadowtablestrategy.html", "ShadowTableStrategy::$_config": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$_config", "ShadowTableStrategy::$_configInitialized": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$_configInitialized", "ShadowTableStrategy::$_defaultConfig": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$_defaultConfig", "ShadowTableStrategy::$_tableLocator": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$_tableLocator", "ShadowTableStrategy::$defaultTable": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$defaultTable", "ShadowTableStrategy::$locale": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$locale", "ShadowTableStrategy::$table": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$table", "ShadowTableStrategy::$translationTable": "class-cake.orm.behavior.translate.shadowtablestrategy.html#$translationTable", "ShadowTableStrategy::__construct()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#__construct()", "ShadowTableStrategy::_configDelete()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#_configDelete()", "ShadowTableStrategy::_configRead()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#_configRead()", "ShadowTableStrategy::_configWrite()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#_configWrite()", "ShadowTableStrategy::addFieldsToQuery()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#addFieldsToQuery()", "ShadowTableStrategy::afterSave()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#afterSave()", "ShadowTableStrategy::beforeFind()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#beforeFind()", "ShadowTableStrategy::beforeSave()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#beforeSave()", "ShadowTableStrategy::buildMarshalMap()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#buildMarshalMap()", "ShadowTableStrategy::bundleTranslatedFields()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#bundleTranslatedFields()", "ShadowTableStrategy::configShallow()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#configShallow()", "ShadowTableStrategy::fetchTable()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#fetchTable()", "ShadowTableStrategy::getConfig()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#getConfig()", "ShadowTableStrategy::getConfigOrFail()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#getConfigOrFail()", "ShadowTableStrategy::getLocale()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#getLocale()", "ShadowTableStrategy::getTableLocator()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#getTableLocator()", "ShadowTableStrategy::getTranslationTable()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#getTranslationTable()", "ShadowTableStrategy::groupTranslations()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#groupTranslations()", "ShadowTableStrategy::iterateClause()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#iterateClause()", "ShadowTableStrategy::mainFields()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#mainFields()", "ShadowTableStrategy::rowMapper()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#rowMapper()", "ShadowTableStrategy::setConfig()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#setConfig()", "ShadowTableStrategy::setLocale()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#setLocale()", "ShadowTableStrategy::setTableLocator()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#setTableLocator()", "ShadowTableStrategy::setupAssociations()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#setupAssociations()", "ShadowTableStrategy::setupHasOneAssociation()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#setupHasOneAssociation()", "ShadowTableStrategy::translatedFields()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#translatedFields()", "ShadowTableStrategy::translationField()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#translationField()", "ShadowTableStrategy::traverseClause()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#traverseClause()", "ShadowTableStrategy::unsetEmptyFields()()": "class-cake.orm.behavior.translate.shadowtablestrategy.html#unsetEmptyFields()", "Shell (class)": "class-cake.console.shell.html", "Shell (namespace)": "namespace-cake.shell.html", "Shell::$_io": "class-cake.console.shell.html#$_io", "Shell::$_modelFactories": "class-cake.console.shell.html#$_modelFactories", "Shell::$_modelType": "class-cake.console.shell.html#$_modelType", "Shell::$_tableLocator": "class-cake.console.shell.html#$_tableLocator", "Shell::$_taskMap": "class-cake.console.shell.html#$_taskMap", "Shell::$args": "class-cake.console.shell.html#$args", "Shell::$command": "class-cake.console.shell.html#$command", "Shell::$defaultTable": "class-cake.console.shell.html#$defaultTable", "Shell::$interactive": "class-cake.console.shell.html#$interactive", "Shell::$modelClass": "class-cake.console.shell.html#$modelClass", "Shell::$name": "class-cake.console.shell.html#$name", "Shell::$OptionParser": "class-cake.console.shell.html#$OptionParser", "Shell::$params": "class-cake.console.shell.html#$params", "Shell::$plugin": "class-cake.console.shell.html#$plugin", "Shell::$rootName": "class-cake.console.shell.html#$rootName", "Shell::$taskNames": "class-cake.console.shell.html#$taskNames", "Shell::$tasks": "class-cake.console.shell.html#$tasks", "Shell::$Tasks": "class-cake.console.shell.html#$Tasks", "Shell::__construct()()": "class-cake.console.shell.html#__construct()", "Shell::__debugInfo()()": "class-cake.console.shell.html#__debugInfo()", "Shell::__get()()": "class-cake.console.shell.html#__get()", "Shell::_displayHelp()()": "class-cake.console.shell.html#_displayHelp()", "Shell::_mergeProperty()()": "class-cake.console.shell.html#_mergeProperty()", "Shell::_mergePropertyData()()": "class-cake.console.shell.html#_mergePropertyData()", "Shell::_mergeVars()()": "class-cake.console.shell.html#_mergeVars()", "Shell::_setModelClass()()": "class-cake.console.shell.html#_setModelClass()", "Shell::_setOutputLevel()()": "class-cake.console.shell.html#_setOutputLevel()", "Shell::_stop()()": "class-cake.console.shell.html#_stop()", "Shell::_validateTasks()()": "class-cake.console.shell.html#_validateTasks()", "Shell::_welcome()()": "class-cake.console.shell.html#_welcome()", "Shell::abort()()": "class-cake.console.shell.html#abort()", "Shell::clear()()": "class-cake.console.shell.html#clear()", "Shell::createFile()()": "class-cake.console.shell.html#createFile()", "Shell::dispatchShell()()": "class-cake.console.shell.html#dispatchShell()", "Shell::err()()": "class-cake.console.shell.html#err()", "Shell::fetchTable()()": "class-cake.console.shell.html#fetchTable()", "Shell::getIo()()": "class-cake.console.shell.html#getIo()", "Shell::getModelType()()": "class-cake.console.shell.html#getModelType()", "Shell::getOptionParser()()": "class-cake.console.shell.html#getOptionParser()", "Shell::getTableLocator()()": "class-cake.console.shell.html#getTableLocator()", "Shell::hasMethod()()": "class-cake.console.shell.html#hasMethod()", "Shell::hasTask()()": "class-cake.console.shell.html#hasTask()", "Shell::helper()()": "class-cake.console.shell.html#helper()", "Shell::hr()()": "class-cake.console.shell.html#hr()", "Shell::in()()": "class-cake.console.shell.html#in()", "Shell::info()()": "class-cake.console.shell.html#info()", "Shell::initialize()()": "class-cake.console.shell.html#initialize()", "Shell::loadModel()()": "class-cake.console.shell.html#loadModel()", "Shell::loadTasks()()": "class-cake.console.shell.html#loadTasks()", "Shell::log()()": "class-cake.console.shell.html#log()", "Shell::main()()": "class-cake.console.shell.html#main()", "Shell::modelFactory()()": "class-cake.console.shell.html#modelFactory()", "Shell::nl()()": "class-cake.console.shell.html#nl()", "Shell::out()()": "class-cake.console.shell.html#out()", "Shell::param()()": "class-cake.console.shell.html#param()", "Shell::parseDispatchArguments()()": "class-cake.console.shell.html#parseDispatchArguments()", "Shell::quiet()()": "class-cake.console.shell.html#quiet()", "Shell::runCommand()()": "class-cake.console.shell.html#runCommand()", "Shell::setIo()()": "class-cake.console.shell.html#setIo()", "Shell::setModelType()()": "class-cake.console.shell.html#setModelType()", "Shell::setRootName()()": "class-cake.console.shell.html#setRootName()", "Shell::setTableLocator()()": "class-cake.console.shell.html#setTableLocator()", "Shell::shortPath()()": "class-cake.console.shell.html#shortPath()", "Shell::startup()()": "class-cake.console.shell.html#startup()", "Shell::success()()": "class-cake.console.shell.html#success()", "Shell::verbose()()": "class-cake.console.shell.html#verbose()", "Shell::warn()()": "class-cake.console.shell.html#warn()", "Shell::wrapText()()": "class-cake.console.shell.html#wrapText()", "Shell\\Helper (namespace)": "namespace-cake.shell.helper.html", "Shell\\Task (namespace)": "namespace-cake.shell.task.html", "ShellDispatcher (class)": "class-cake.console.shelldispatcher.html", "ShellDispatcher::$_aliases": "class-cake.console.shelldispatcher.html#$_aliases", "ShellDispatcher::$args": "class-cake.console.shelldispatcher.html#$args", "ShellDispatcher::__construct()()": "class-cake.console.shelldispatcher.html#__construct()", "ShellDispatcher::_bootstrap()()": "class-cake.console.shelldispatcher.html#_bootstrap()", "ShellDispatcher::_createShell()()": "class-cake.console.shelldispatcher.html#_createShell()", "ShellDispatcher::_dispatch()()": "class-cake.console.shelldispatcher.html#_dispatch()", "ShellDispatcher::_handleAlias()()": "class-cake.console.shelldispatcher.html#_handleAlias()", "ShellDispatcher::_initEnvironment()()": "class-cake.console.shelldispatcher.html#_initEnvironment()", "ShellDispatcher::_shellExists()()": "class-cake.console.shelldispatcher.html#_shellExists()", "ShellDispatcher::addShortPluginAliases()()": "class-cake.console.shelldispatcher.html#addShortPluginAliases()", "ShellDispatcher::alias()()": "class-cake.console.shelldispatcher.html#alias()", "ShellDispatcher::dispatch()()": "class-cake.console.shelldispatcher.html#dispatch()", "ShellDispatcher::findShell()()": "class-cake.console.shelldispatcher.html#findShell()", "ShellDispatcher::help()()": "class-cake.console.shelldispatcher.html#help()", "ShellDispatcher::resetAliases()()": "class-cake.console.shelldispatcher.html#resetAliases()", "ShellDispatcher::run()()": "class-cake.console.shelldispatcher.html#run()", "ShellDispatcher::shiftArgs()()": "class-cake.console.shelldispatcher.html#shiftArgs()", "ShellDispatcher::version()()": "class-cake.console.shelldispatcher.html#version()", "SimplePaginator (class)": "class-cake.datasource.paging.simplepaginator.html", "SimplePaginator::$_config": "class-cake.datasource.paging.simplepaginator.html#$_config", "SimplePaginator::$_configInitialized": "class-cake.datasource.paging.simplepaginator.html#$_configInitialized", "SimplePaginator::$_defaultConfig": "class-cake.datasource.paging.simplepaginator.html#$_defaultConfig", "SimplePaginator::$_pagingParams": "class-cake.datasource.paging.simplepaginator.html#$_pagingParams", "SimplePaginator::_configDelete()()": "class-cake.datasource.paging.simplepaginator.html#_configDelete()", "SimplePaginator::_configRead()()": "class-cake.datasource.paging.simplepaginator.html#_configRead()", "SimplePaginator::_configWrite()()": "class-cake.datasource.paging.simplepaginator.html#_configWrite()", "SimplePaginator::_extractFinder()()": "class-cake.datasource.paging.simplepaginator.html#_extractFinder()", "SimplePaginator::_prefix()()": "class-cake.datasource.paging.simplepaginator.html#_prefix()", "SimplePaginator::_removeAliases()()": "class-cake.datasource.paging.simplepaginator.html#_removeAliases()", "SimplePaginator::addPageCountParams()()": "class-cake.datasource.paging.simplepaginator.html#addPageCountParams()", "SimplePaginator::addPrevNextParams()()": "class-cake.datasource.paging.simplepaginator.html#addPrevNextParams()", "SimplePaginator::addSortingParams()()": "class-cake.datasource.paging.simplepaginator.html#addSortingParams()", "SimplePaginator::addStartEndParams()()": "class-cake.datasource.paging.simplepaginator.html#addStartEndParams()", "SimplePaginator::buildParams()()": "class-cake.datasource.paging.simplepaginator.html#buildParams()", "SimplePaginator::checkLimit()()": "class-cake.datasource.paging.simplepaginator.html#checkLimit()", "SimplePaginator::configShallow()()": "class-cake.datasource.paging.simplepaginator.html#configShallow()", "SimplePaginator::extractData()()": "class-cake.datasource.paging.simplepaginator.html#extractData()", "SimplePaginator::getAllowedParameters()()": "class-cake.datasource.paging.simplepaginator.html#getAllowedParameters()", "SimplePaginator::getConfig()()": "class-cake.datasource.paging.simplepaginator.html#getConfig()", "SimplePaginator::getConfigOrFail()()": "class-cake.datasource.paging.simplepaginator.html#getConfigOrFail()", "SimplePaginator::getCount()()": "class-cake.datasource.paging.simplepaginator.html#getCount()", "SimplePaginator::getDefaults()()": "class-cake.datasource.paging.simplepaginator.html#getDefaults()", "SimplePaginator::getPagingParams()()": "class-cake.datasource.paging.simplepaginator.html#getPagingParams()", "SimplePaginator::getQuery()()": "class-cake.datasource.paging.simplepaginator.html#getQuery()", "SimplePaginator::getSortableFields()()": "class-cake.datasource.paging.simplepaginator.html#getSortableFields()", "SimplePaginator::mergeOptions()()": "class-cake.datasource.paging.simplepaginator.html#mergeOptions()", "SimplePaginator::paginate()()": "class-cake.datasource.paging.simplepaginator.html#paginate()", "SimplePaginator::setConfig()()": "class-cake.datasource.paging.simplepaginator.html#setConfig()", "SimplePaginator::validateSort()()": "class-cake.datasource.paging.simplepaginator.html#validateSort()", "SmtpTransport (class)": "class-cake.mailer.transport.smtptransport.html", "SmtpTransport::$_config": "class-cake.mailer.transport.smtptransport.html#$_config", "SmtpTransport::$_configInitialized": "class-cake.mailer.transport.smtptransport.html#$_configInitialized", "SmtpTransport::$_content": "class-cake.mailer.transport.smtptransport.html#$_content", "SmtpTransport::$_defaultConfig": "class-cake.mailer.transport.smtptransport.html#$_defaultConfig", "SmtpTransport::$_lastResponse": "class-cake.mailer.transport.smtptransport.html#$_lastResponse", "SmtpTransport::$_socket": "class-cake.mailer.transport.smtptransport.html#$_socket", "SmtpTransport::$authType": "class-cake.mailer.transport.smtptransport.html#$authType", "SmtpTransport::__construct()()": "class-cake.mailer.transport.smtptransport.html#__construct()", "SmtpTransport::__destruct()()": "class-cake.mailer.transport.smtptransport.html#__destruct()", "SmtpTransport::__wakeup()()": "class-cake.mailer.transport.smtptransport.html#__wakeup()", "SmtpTransport::_auth()()": "class-cake.mailer.transport.smtptransport.html#_auth()", "SmtpTransport::_authLogin()()": "class-cake.mailer.transport.smtptransport.html#_authLogin()", "SmtpTransport::_authPlain()()": "class-cake.mailer.transport.smtptransport.html#_authPlain()", "SmtpTransport::_bufferResponseLines()()": "class-cake.mailer.transport.smtptransport.html#_bufferResponseLines()", "SmtpTransport::_configDelete()()": "class-cake.mailer.transport.smtptransport.html#_configDelete()", "SmtpTransport::_configRead()()": "class-cake.mailer.transport.smtptransport.html#_configRead()", "SmtpTransport::_configWrite()()": "class-cake.mailer.transport.smtptransport.html#_configWrite()", "SmtpTransport::_connect()()": "class-cake.mailer.transport.smtptransport.html#_connect()", "SmtpTransport::_disconnect()()": "class-cake.mailer.transport.smtptransport.html#_disconnect()", "SmtpTransport::_generateSocket()()": "class-cake.mailer.transport.smtptransport.html#_generateSocket()", "SmtpTransport::_parseAuthType()()": "class-cake.mailer.transport.smtptransport.html#_parseAuthType()", "SmtpTransport::_prepareFromAddress()()": "class-cake.mailer.transport.smtptransport.html#_prepareFromAddress()", "SmtpTransport::_prepareFromCmd()()": "class-cake.mailer.transport.smtptransport.html#_prepareFromCmd()", "SmtpTransport::_prepareMessage()()": "class-cake.mailer.transport.smtptransport.html#_prepareMessage()", "SmtpTransport::_prepareRcptCmd()()": "class-cake.mailer.transport.smtptransport.html#_prepareRcptCmd()", "SmtpTransport::_prepareRecipientAddresses()()": "class-cake.mailer.transport.smtptransport.html#_prepareRecipientAddresses()", "SmtpTransport::_sendData()()": "class-cake.mailer.transport.smtptransport.html#_sendData()", "SmtpTransport::_sendRcpt()()": "class-cake.mailer.transport.smtptransport.html#_sendRcpt()", "SmtpTransport::_smtpSend()()": "class-cake.mailer.transport.smtptransport.html#_smtpSend()", "SmtpTransport::_socket()()": "class-cake.mailer.transport.smtptransport.html#_socket()", "SmtpTransport::checkRecipient()()": "class-cake.mailer.transport.smtptransport.html#checkRecipient()", "SmtpTransport::configShallow()()": "class-cake.mailer.transport.smtptransport.html#configShallow()", "SmtpTransport::connect()()": "class-cake.mailer.transport.smtptransport.html#connect()", "SmtpTransport::connected()()": "class-cake.mailer.transport.smtptransport.html#connected()", "SmtpTransport::disconnect()()": "class-cake.mailer.transport.smtptransport.html#disconnect()", "SmtpTransport::getConfig()()": "class-cake.mailer.transport.smtptransport.html#getConfig()", "SmtpTransport::getConfigOrFail()()": "class-cake.mailer.transport.smtptransport.html#getConfigOrFail()", "SmtpTransport::getLastResponse()()": "class-cake.mailer.transport.smtptransport.html#getLastResponse()", "SmtpTransport::send()()": "class-cake.mailer.transport.smtptransport.html#send()", "SmtpTransport::setConfig()()": "class-cake.mailer.transport.smtptransport.html#setConfig()", "Socket (class)": "class-cake.network.socket.html", "Socket::$_config": "class-cake.network.socket.html#$_config", "Socket::$_configInitialized": "class-cake.network.socket.html#$_configInitialized", "Socket::$_connectionErrors": "class-cake.network.socket.html#$_connectionErrors", "Socket::$_defaultConfig": "class-cake.network.socket.html#$_defaultConfig", "Socket::$_encryptMethods": "class-cake.network.socket.html#$_encryptMethods", "Socket::$connected": "class-cake.network.socket.html#$connected", "Socket::$connection": "class-cake.network.socket.html#$connection", "Socket::$encrypted": "class-cake.network.socket.html#$encrypted", "Socket::$lastError": "class-cake.network.socket.html#$lastError", "Socket::__construct()()": "class-cake.network.socket.html#__construct()", "Socket::__destruct()()": "class-cake.network.socket.html#__destruct()", "Socket::__get()()": "class-cake.network.socket.html#__get()", "Socket::_configDelete()()": "class-cake.network.socket.html#_configDelete()", "Socket::_configRead()()": "class-cake.network.socket.html#_configRead()", "Socket::_configWrite()()": "class-cake.network.socket.html#_configWrite()", "Socket::_connectionErrorHandler()()": "class-cake.network.socket.html#_connectionErrorHandler()", "Socket::_getStreamSocketClient()()": "class-cake.network.socket.html#_getStreamSocketClient()", "Socket::_setSslContext()()": "class-cake.network.socket.html#_setSslContext()", "Socket::address()()": "class-cake.network.socket.html#address()", "Socket::addresses()()": "class-cake.network.socket.html#addresses()", "Socket::configShallow()()": "class-cake.network.socket.html#configShallow()", "Socket::connect()()": "class-cake.network.socket.html#connect()", "Socket::context()()": "class-cake.network.socket.html#context()", "Socket::disconnect()()": "class-cake.network.socket.html#disconnect()", "Socket::enableCrypto()()": "class-cake.network.socket.html#enableCrypto()", "Socket::getConfig()()": "class-cake.network.socket.html#getConfig()", "Socket::getConfigOrFail()()": "class-cake.network.socket.html#getConfigOrFail()", "Socket::host()()": "class-cake.network.socket.html#host()", "Socket::isConnected()()": "class-cake.network.socket.html#isConnected()", "Socket::isEncrypted()()": "class-cake.network.socket.html#isEncrypted()", "Socket::lastError()()": "class-cake.network.socket.html#lastError()", "Socket::read()()": "class-cake.network.socket.html#read()", "Socket::reset()()": "class-cake.network.socket.html#reset()", "Socket::setConfig()()": "class-cake.network.socket.html#setConfig()", "Socket::setLastError()()": "class-cake.network.socket.html#setLastError()", "Socket::write()()": "class-cake.network.socket.html#write()", "SocketException (class)": "class-cake.network.exception.socketexception.html", "SortIterator (class)": "class-cake.collection.iterator.sortiterator.html", "SortIterator::__construct()()": "class-cake.collection.iterator.sortiterator.html#__construct()", "SortIterator::__debugInfo()()": "class-cake.collection.iterator.sortiterator.html#__debugInfo()", "SortIterator::__serialize()()": "class-cake.collection.iterator.sortiterator.html#__serialize()", "SortIterator::__unserialize()()": "class-cake.collection.iterator.sortiterator.html#__unserialize()", "SortIterator::_createMatcherFilter()()": "class-cake.collection.iterator.sortiterator.html#_createMatcherFilter()", "SortIterator::_extract()()": "class-cake.collection.iterator.sortiterator.html#_extract()", "SortIterator::_propertyExtractor()()": "class-cake.collection.iterator.sortiterator.html#_propertyExtractor()", "SortIterator::_simpleExtract()()": "class-cake.collection.iterator.sortiterator.html#_simpleExtract()", "SortIterator::append()()": "class-cake.collection.iterator.sortiterator.html#append()", "SortIterator::appendItem()()": "class-cake.collection.iterator.sortiterator.html#appendItem()", "SortIterator::avg()()": "class-cake.collection.iterator.sortiterator.html#avg()", "SortIterator::buffered()()": "class-cake.collection.iterator.sortiterator.html#buffered()", "SortIterator::cartesianProduct()()": "class-cake.collection.iterator.sortiterator.html#cartesianProduct()", "SortIterator::chunk()()": "class-cake.collection.iterator.sortiterator.html#chunk()", "SortIterator::chunkWithKeys()()": "class-cake.collection.iterator.sortiterator.html#chunkWithKeys()", "SortIterator::combine()()": "class-cake.collection.iterator.sortiterator.html#combine()", "SortIterator::compile()()": "class-cake.collection.iterator.sortiterator.html#compile()", "SortIterator::contains()()": "class-cake.collection.iterator.sortiterator.html#contains()", "SortIterator::count()()": "class-cake.collection.iterator.sortiterator.html#count()", "SortIterator::countBy()()": "class-cake.collection.iterator.sortiterator.html#countBy()", "SortIterator::countKeys()()": "class-cake.collection.iterator.sortiterator.html#countKeys()", "SortIterator::each()()": "class-cake.collection.iterator.sortiterator.html#each()", "SortIterator::every()()": "class-cake.collection.iterator.sortiterator.html#every()", "SortIterator::extract()()": "class-cake.collection.iterator.sortiterator.html#extract()", "SortIterator::filter()()": "class-cake.collection.iterator.sortiterator.html#filter()", "SortIterator::first()()": "class-cake.collection.iterator.sortiterator.html#first()", "SortIterator::firstMatch()()": "class-cake.collection.iterator.sortiterator.html#firstMatch()", "SortIterator::groupBy()()": "class-cake.collection.iterator.sortiterator.html#groupBy()", "SortIterator::indexBy()()": "class-cake.collection.iterator.sortiterator.html#indexBy()", "SortIterator::insert()()": "class-cake.collection.iterator.sortiterator.html#insert()", "SortIterator::isEmpty()()": "class-cake.collection.iterator.sortiterator.html#isEmpty()", "SortIterator::jsonSerialize()()": "class-cake.collection.iterator.sortiterator.html#jsonSerialize()", "SortIterator::last()()": "class-cake.collection.iterator.sortiterator.html#last()", "SortIterator::lazy()()": "class-cake.collection.iterator.sortiterator.html#lazy()", "SortIterator::listNested()()": "class-cake.collection.iterator.sortiterator.html#listNested()", "SortIterator::map()()": "class-cake.collection.iterator.sortiterator.html#map()", "SortIterator::match()()": "class-cake.collection.iterator.sortiterator.html#match()", "SortIterator::max()()": "class-cake.collection.iterator.sortiterator.html#max()", "SortIterator::median()()": "class-cake.collection.iterator.sortiterator.html#median()", "SortIterator::min()()": "class-cake.collection.iterator.sortiterator.html#min()", "SortIterator::nest()()": "class-cake.collection.iterator.sortiterator.html#nest()", "SortIterator::newCollection()()": "class-cake.collection.iterator.sortiterator.html#newCollection()", "SortIterator::optimizeUnwrap()()": "class-cake.collection.iterator.sortiterator.html#optimizeUnwrap()", "SortIterator::prepend()()": "class-cake.collection.iterator.sortiterator.html#prepend()", "SortIterator::prependItem()()": "class-cake.collection.iterator.sortiterator.html#prependItem()", "SortIterator::reduce()()": "class-cake.collection.iterator.sortiterator.html#reduce()", "SortIterator::reject()()": "class-cake.collection.iterator.sortiterator.html#reject()", "SortIterator::sample()()": "class-cake.collection.iterator.sortiterator.html#sample()", "SortIterator::serialize()()": "class-cake.collection.iterator.sortiterator.html#serialize()", "SortIterator::shuffle()()": "class-cake.collection.iterator.sortiterator.html#shuffle()", "SortIterator::skip()()": "class-cake.collection.iterator.sortiterator.html#skip()", "SortIterator::some()()": "class-cake.collection.iterator.sortiterator.html#some()", "SortIterator::sortBy()()": "class-cake.collection.iterator.sortiterator.html#sortBy()", "SortIterator::stopWhen()()": "class-cake.collection.iterator.sortiterator.html#stopWhen()", "SortIterator::sumOf()()": "class-cake.collection.iterator.sortiterator.html#sumOf()", "SortIterator::take()()": "class-cake.collection.iterator.sortiterator.html#take()", "SortIterator::takeLast()()": "class-cake.collection.iterator.sortiterator.html#takeLast()", "SortIterator::through()()": "class-cake.collection.iterator.sortiterator.html#through()", "SortIterator::toArray()()": "class-cake.collection.iterator.sortiterator.html#toArray()", "SortIterator::toList()()": "class-cake.collection.iterator.sortiterator.html#toList()", "SortIterator::transpose()()": "class-cake.collection.iterator.sortiterator.html#transpose()", "SortIterator::unfold()()": "class-cake.collection.iterator.sortiterator.html#unfold()", "SortIterator::unserialize()()": "class-cake.collection.iterator.sortiterator.html#unserialize()", "SortIterator::unwrap()()": "class-cake.collection.iterator.sortiterator.html#unwrap()", "SortIterator::zip()()": "class-cake.collection.iterator.sortiterator.html#zip()", "SortIterator::zipWith()()": "class-cake.collection.iterator.sortiterator.html#zipWith()", "SpecialNode (class)": "class-cake.error.debug.specialnode.html", "SpecialNode::__construct()()": "class-cake.error.debug.specialnode.html#__construct()", "SpecialNode::getChildren()()": "class-cake.error.debug.specialnode.html#getChildren()", "SpecialNode::getValue()()": "class-cake.error.debug.specialnode.html#getValue()", "SprintfFormatter (class)": "class-cake.i18n.formatter.sprintfformatter.html", "SprintfFormatter::format()()": "class-cake.i18n.formatter.sprintfformatter.html#format()", "SqlDialectTrait (trait)": "trait-cake.database.driver.sqldialecttrait.html", "SqlGeneratorInterface (interface)": "interface-cake.database.schema.sqlgeneratorinterface.html", "Sqlite (class)": "class-cake.database.driver.sqlite.html", "Sqlite::$_autoQuoting": "class-cake.database.driver.sqlite.html#$_autoQuoting", "Sqlite::$_baseConfig": "class-cake.database.driver.sqlite.html#$_baseConfig", "Sqlite::$_config": "class-cake.database.driver.sqlite.html#$_config", "Sqlite::$_connection": "class-cake.database.driver.sqlite.html#$_connection", "Sqlite::$_dateParts": "class-cake.database.driver.sqlite.html#$_dateParts", "Sqlite::$_endQuote": "class-cake.database.driver.sqlite.html#$_endQuote", "Sqlite::$_schemaDialect": "class-cake.database.driver.sqlite.html#$_schemaDialect", "Sqlite::$_startQuote": "class-cake.database.driver.sqlite.html#$_startQuote", "Sqlite::$_supportsWindowFunctions": "class-cake.database.driver.sqlite.html#$_supportsWindowFunctions", "Sqlite::$_version": "class-cake.database.driver.sqlite.html#$_version", "Sqlite::$connectRetries": "class-cake.database.driver.sqlite.html#$connectRetries", "Sqlite::$featureVersions": "class-cake.database.driver.sqlite.html#$featureVersions", "Sqlite::__construct()()": "class-cake.database.driver.sqlite.html#__construct()", "Sqlite::__debugInfo()()": "class-cake.database.driver.sqlite.html#__debugInfo()", "Sqlite::__destruct()()": "class-cake.database.driver.sqlite.html#__destruct()", "Sqlite::_connect()()": "class-cake.database.driver.sqlite.html#_connect()", "Sqlite::_deleteQueryTranslator()()": "class-cake.database.driver.sqlite.html#_deleteQueryTranslator()", "Sqlite::_expressionTranslators()()": "class-cake.database.driver.sqlite.html#_expressionTranslators()", "Sqlite::_insertQueryTranslator()()": "class-cake.database.driver.sqlite.html#_insertQueryTranslator()", "Sqlite::_removeAliasesFromConditions()()": "class-cake.database.driver.sqlite.html#_removeAliasesFromConditions()", "Sqlite::_selectQueryTranslator()()": "class-cake.database.driver.sqlite.html#_selectQueryTranslator()", "Sqlite::_transformDistinct()()": "class-cake.database.driver.sqlite.html#_transformDistinct()", "Sqlite::_transformFunctionExpression()()": "class-cake.database.driver.sqlite.html#_transformFunctionExpression()", "Sqlite::_transformTupleComparison()()": "class-cake.database.driver.sqlite.html#_transformTupleComparison()", "Sqlite::_updateQueryTranslator()()": "class-cake.database.driver.sqlite.html#_updateQueryTranslator()", "Sqlite::beginTransaction()()": "class-cake.database.driver.sqlite.html#beginTransaction()", "Sqlite::commitTransaction()()": "class-cake.database.driver.sqlite.html#commitTransaction()", "Sqlite::compileQuery()()": "class-cake.database.driver.sqlite.html#compileQuery()", "Sqlite::connect()()": "class-cake.database.driver.sqlite.html#connect()", "Sqlite::disableAutoQuoting()()": "class-cake.database.driver.sqlite.html#disableAutoQuoting()", "Sqlite::disableForeignKeySQL()()": "class-cake.database.driver.sqlite.html#disableForeignKeySQL()", "Sqlite::disconnect()()": "class-cake.database.driver.sqlite.html#disconnect()", "Sqlite::enableAutoQuoting()()": "class-cake.database.driver.sqlite.html#enableAutoQuoting()", "Sqlite::enabled()()": "class-cake.database.driver.sqlite.html#enabled()", "Sqlite::enableForeignKeySQL()()": "class-cake.database.driver.sqlite.html#enableForeignKeySQL()", "Sqlite::getConnection()()": "class-cake.database.driver.sqlite.html#getConnection()", "Sqlite::getConnectRetries()()": "class-cake.database.driver.sqlite.html#getConnectRetries()", "Sqlite::getMaxAliasLength()()": "class-cake.database.driver.sqlite.html#getMaxAliasLength()", "Sqlite::inTransaction()()": "class-cake.database.driver.sqlite.html#inTransaction()", "Sqlite::isAutoQuotingEnabled()()": "class-cake.database.driver.sqlite.html#isAutoQuotingEnabled()", "Sqlite::isConnected()()": "class-cake.database.driver.sqlite.html#isConnected()", "Sqlite::lastInsertId()()": "class-cake.database.driver.sqlite.html#lastInsertId()", "Sqlite::newCompiler()()": "class-cake.database.driver.sqlite.html#newCompiler()", "Sqlite::newTableSchema()()": "class-cake.database.driver.sqlite.html#newTableSchema()", "Sqlite::prepare()()": "class-cake.database.driver.sqlite.html#prepare()", "Sqlite::queryTranslator()()": "class-cake.database.driver.sqlite.html#queryTranslator()", "Sqlite::quote()()": "class-cake.database.driver.sqlite.html#quote()", "Sqlite::quoteIdentifier()()": "class-cake.database.driver.sqlite.html#quoteIdentifier()", "Sqlite::releaseSavePointSQL()()": "class-cake.database.driver.sqlite.html#releaseSavePointSQL()", "Sqlite::rollbackSavePointSQL()()": "class-cake.database.driver.sqlite.html#rollbackSavePointSQL()", "Sqlite::rollbackTransaction()()": "class-cake.database.driver.sqlite.html#rollbackTransaction()", "Sqlite::savePointSQL()()": "class-cake.database.driver.sqlite.html#savePointSQL()", "Sqlite::schema()()": "class-cake.database.driver.sqlite.html#schema()", "Sqlite::schemaDialect()()": "class-cake.database.driver.sqlite.html#schemaDialect()", "Sqlite::schemaValue()()": "class-cake.database.driver.sqlite.html#schemaValue()", "Sqlite::setConnection()()": "class-cake.database.driver.sqlite.html#setConnection()", "Sqlite::supports()()": "class-cake.database.driver.sqlite.html#supports()", "Sqlite::supportsCTEs()()": "class-cake.database.driver.sqlite.html#supportsCTEs()", "Sqlite::supportsDynamicConstraints()()": "class-cake.database.driver.sqlite.html#supportsDynamicConstraints()", "Sqlite::supportsQuoting()()": "class-cake.database.driver.sqlite.html#supportsQuoting()", "Sqlite::supportsSavePoints()()": "class-cake.database.driver.sqlite.html#supportsSavePoints()", "Sqlite::supportsWindowFunctions()()": "class-cake.database.driver.sqlite.html#supportsWindowFunctions()", "Sqlite::version()()": "class-cake.database.driver.sqlite.html#version()", "SqliteCompiler (class)": "class-cake.database.sqlitecompiler.html", "SqliteCompiler::$_deleteParts": "class-cake.database.sqlitecompiler.html#$_deleteParts", "SqliteCompiler::$_insertParts": "class-cake.database.sqlitecompiler.html#$_insertParts", "SqliteCompiler::$_orderedUnion": "class-cake.database.sqlitecompiler.html#$_orderedUnion", "SqliteCompiler::$_quotedSelectAliases": "class-cake.database.sqlitecompiler.html#$_quotedSelectAliases", "SqliteCompiler::$_selectParts": "class-cake.database.sqlitecompiler.html#$_selectParts", "SqliteCompiler::$_templates": "class-cake.database.sqlitecompiler.html#$_templates", "SqliteCompiler::$_updateParts": "class-cake.database.sqlitecompiler.html#$_updateParts", "SqliteCompiler::_buildFromPart()()": "class-cake.database.sqlitecompiler.html#_buildFromPart()", "SqliteCompiler::_buildInsertPart()()": "class-cake.database.sqlitecompiler.html#_buildInsertPart()", "SqliteCompiler::_buildJoinPart()()": "class-cake.database.sqlitecompiler.html#_buildJoinPart()", "SqliteCompiler::_buildModifierPart()()": "class-cake.database.sqlitecompiler.html#_buildModifierPart()", "SqliteCompiler::_buildSelectPart()()": "class-cake.database.sqlitecompiler.html#_buildSelectPart()", "SqliteCompiler::_buildSetPart()()": "class-cake.database.sqlitecompiler.html#_buildSetPart()", "SqliteCompiler::_buildUnionPart()()": "class-cake.database.sqlitecompiler.html#_buildUnionPart()", "SqliteCompiler::_buildUpdatePart()()": "class-cake.database.sqlitecompiler.html#_buildUpdatePart()", "SqliteCompiler::_buildValuesPart()()": "class-cake.database.sqlitecompiler.html#_buildValuesPart()", "SqliteCompiler::_buildWindowPart()()": "class-cake.database.sqlitecompiler.html#_buildWindowPart()", "SqliteCompiler::_buildWithPart()()": "class-cake.database.sqlitecompiler.html#_buildWithPart()", "SqliteCompiler::_sqlCompiler()()": "class-cake.database.sqlitecompiler.html#_sqlCompiler()", "SqliteCompiler::_stringifyExpressions()()": "class-cake.database.sqlitecompiler.html#_stringifyExpressions()", "SqliteCompiler::compile()()": "class-cake.database.sqlitecompiler.html#compile()", "SqliteSchemaDialect (class)": "class-cake.database.schema.sqliteschemadialect.html", "SqliteSchemaDialect::$_constraintsIdMap": "class-cake.database.schema.sqliteschemadialect.html#$_constraintsIdMap", "SqliteSchemaDialect::$_driver": "class-cake.database.schema.sqliteschemadialect.html#$_driver", "SqliteSchemaDialect::$_hasSequences": "class-cake.database.schema.sqliteschemadialect.html#$_hasSequences", "SqliteSchemaDialect::__construct()()": "class-cake.database.schema.sqliteschemadialect.html#__construct()", "SqliteSchemaDialect::_applyTypeSpecificColumnConversion()()": "class-cake.database.schema.sqliteschemadialect.html#_applyTypeSpecificColumnConversion()", "SqliteSchemaDialect::_convertColumn()()": "class-cake.database.schema.sqliteschemadialect.html#_convertColumn()", "SqliteSchemaDialect::_convertConstraintColumns()()": "class-cake.database.schema.sqliteschemadialect.html#_convertConstraintColumns()", "SqliteSchemaDialect::_convertOnClause()()": "class-cake.database.schema.sqliteschemadialect.html#_convertOnClause()", "SqliteSchemaDialect::_defaultValue()()": "class-cake.database.schema.sqliteschemadialect.html#_defaultValue()", "SqliteSchemaDialect::_foreignOnClause()()": "class-cake.database.schema.sqliteschemadialect.html#_foreignOnClause()", "SqliteSchemaDialect::_getTypeSpecificColumnSql()()": "class-cake.database.schema.sqliteschemadialect.html#_getTypeSpecificColumnSql()", "SqliteSchemaDialect::addConstraintSql()()": "class-cake.database.schema.sqliteschemadialect.html#addConstraintSql()", "SqliteSchemaDialect::columnSql()()": "class-cake.database.schema.sqliteschemadialect.html#columnSql()", "SqliteSchemaDialect::constraintSql()()": "class-cake.database.schema.sqliteschemadialect.html#constraintSql()", "SqliteSchemaDialect::convertColumnDescription()()": "class-cake.database.schema.sqliteschemadialect.html#convertColumnDescription()", "SqliteSchemaDialect::convertForeignKeyDescription()()": "class-cake.database.schema.sqliteschemadialect.html#convertForeignKeyDescription()", "SqliteSchemaDialect::convertIndexDescription()()": "class-cake.database.schema.sqliteschemadialect.html#convertIndexDescription()", "SqliteSchemaDialect::convertOptionsDescription()()": "class-cake.database.schema.sqliteschemadialect.html#convertOptionsDescription()", "SqliteSchemaDialect::createTableSql()()": "class-cake.database.schema.sqliteschemadialect.html#createTableSql()", "SqliteSchemaDialect::describeColumnSql()()": "class-cake.database.schema.sqliteschemadialect.html#describeColumnSql()", "SqliteSchemaDialect::describeForeignKeySql()()": "class-cake.database.schema.sqliteschemadialect.html#describeForeignKeySql()", "SqliteSchemaDialect::describeIndexSql()()": "class-cake.database.schema.sqliteschemadialect.html#describeIndexSql()", "SqliteSchemaDialect::describeOptionsSql()()": "class-cake.database.schema.sqliteschemadialect.html#describeOptionsSql()", "SqliteSchemaDialect::dropConstraintSql()()": "class-cake.database.schema.sqliteschemadialect.html#dropConstraintSql()", "SqliteSchemaDialect::dropTableSql()()": "class-cake.database.schema.sqliteschemadialect.html#dropTableSql()", "SqliteSchemaDialect::hasSequences()()": "class-cake.database.schema.sqliteschemadialect.html#hasSequences()", "SqliteSchemaDialect::indexSql()()": "class-cake.database.schema.sqliteschemadialect.html#indexSql()", "SqliteSchemaDialect::listTablesSql()()": "class-cake.database.schema.sqliteschemadialect.html#listTablesSql()", "SqliteSchemaDialect::listTablesWithoutViewsSql()()": "class-cake.database.schema.sqliteschemadialect.html#listTablesWithoutViewsSql()", "SqliteSchemaDialect::truncateTableSql()()": "class-cake.database.schema.sqliteschemadialect.html#truncateTableSql()", "SqliteStatement (class)": "class-cake.database.statement.sqlitestatement.html", "SqliteStatement::$_bufferResults": "class-cake.database.statement.sqlitestatement.html#$_bufferResults", "SqliteStatement::$_driver": "class-cake.database.statement.sqlitestatement.html#$_driver", "SqliteStatement::$_hasExecuted": "class-cake.database.statement.sqlitestatement.html#$_hasExecuted", "SqliteStatement::$_statement": "class-cake.database.statement.sqlitestatement.html#$_statement", "SqliteStatement::$queryString": "class-cake.database.statement.sqlitestatement.html#$queryString", "SqliteStatement::__construct()()": "class-cake.database.statement.sqlitestatement.html#__construct()", "SqliteStatement::__get()()": "class-cake.database.statement.sqlitestatement.html#__get()", "SqliteStatement::bind()()": "class-cake.database.statement.sqlitestatement.html#bind()", "SqliteStatement::bindValue()()": "class-cake.database.statement.sqlitestatement.html#bindValue()", "SqliteStatement::bufferResults()()": "class-cake.database.statement.sqlitestatement.html#bufferResults()", "SqliteStatement::cast()()": "class-cake.database.statement.sqlitestatement.html#cast()", "SqliteStatement::closeCursor()()": "class-cake.database.statement.sqlitestatement.html#closeCursor()", "SqliteStatement::columnCount()()": "class-cake.database.statement.sqlitestatement.html#columnCount()", "SqliteStatement::count()()": "class-cake.database.statement.sqlitestatement.html#count()", "SqliteStatement::errorCode()()": "class-cake.database.statement.sqlitestatement.html#errorCode()", "SqliteStatement::errorInfo()()": "class-cake.database.statement.sqlitestatement.html#errorInfo()", "SqliteStatement::execute()()": "class-cake.database.statement.sqlitestatement.html#execute()", "SqliteStatement::fetch()()": "class-cake.database.statement.sqlitestatement.html#fetch()", "SqliteStatement::fetchAll()()": "class-cake.database.statement.sqlitestatement.html#fetchAll()", "SqliteStatement::fetchAssoc()()": "class-cake.database.statement.sqlitestatement.html#fetchAssoc()", "SqliteStatement::fetchColumn()()": "class-cake.database.statement.sqlitestatement.html#fetchColumn()", "SqliteStatement::getInnerStatement()()": "class-cake.database.statement.sqlitestatement.html#getInnerStatement()", "SqliteStatement::getIterator()()": "class-cake.database.statement.sqlitestatement.html#getIterator()", "SqliteStatement::lastInsertId()()": "class-cake.database.statement.sqlitestatement.html#lastInsertId()", "SqliteStatement::matchTypes()()": "class-cake.database.statement.sqlitestatement.html#matchTypes()", "SqliteStatement::rowCount()()": "class-cake.database.statement.sqlitestatement.html#rowCount()", "Sqlserver (class)": "class-cake.database.driver.sqlserver.html", "Sqlserver::$_autoQuoting": "class-cake.database.driver.sqlserver.html#$_autoQuoting", "Sqlserver::$_baseConfig": "class-cake.database.driver.sqlserver.html#$_baseConfig", "Sqlserver::$_config": "class-cake.database.driver.sqlserver.html#$_config", "Sqlserver::$_connection": "class-cake.database.driver.sqlserver.html#$_connection", "Sqlserver::$_endQuote": "class-cake.database.driver.sqlserver.html#$_endQuote", "Sqlserver::$_schemaDialect": "class-cake.database.driver.sqlserver.html#$_schemaDialect", "Sqlserver::$_startQuote": "class-cake.database.driver.sqlserver.html#$_startQuote", "Sqlserver::$_version": "class-cake.database.driver.sqlserver.html#$_version", "Sqlserver::$connectRetries": "class-cake.database.driver.sqlserver.html#$connectRetries", "Sqlserver::__construct()()": "class-cake.database.driver.sqlserver.html#__construct()", "Sqlserver::__debugInfo()()": "class-cake.database.driver.sqlserver.html#__debugInfo()", "Sqlserver::__destruct()()": "class-cake.database.driver.sqlserver.html#__destruct()", "Sqlserver::_connect()()": "class-cake.database.driver.sqlserver.html#_connect()", "Sqlserver::_deleteQueryTranslator()()": "class-cake.database.driver.sqlserver.html#_deleteQueryTranslator()", "Sqlserver::_expressionTranslators()()": "class-cake.database.driver.sqlserver.html#_expressionTranslators()", "Sqlserver::_insertQueryTranslator()()": "class-cake.database.driver.sqlserver.html#_insertQueryTranslator()", "Sqlserver::_pagingSubquery()()": "class-cake.database.driver.sqlserver.html#_pagingSubquery()", "Sqlserver::_removeAliasesFromConditions()()": "class-cake.database.driver.sqlserver.html#_removeAliasesFromConditions()", "Sqlserver::_selectQueryTranslator()()": "class-cake.database.driver.sqlserver.html#_selectQueryTranslator()", "Sqlserver::_transformDistinct()()": "class-cake.database.driver.sqlserver.html#_transformDistinct()", "Sqlserver::_transformFunctionExpression()()": "class-cake.database.driver.sqlserver.html#_transformFunctionExpression()", "Sqlserver::_transformTupleComparison()()": "class-cake.database.driver.sqlserver.html#_transformTupleComparison()", "Sqlserver::_updateQueryTranslator()()": "class-cake.database.driver.sqlserver.html#_updateQueryTranslator()", "Sqlserver::beginTransaction()()": "class-cake.database.driver.sqlserver.html#beginTransaction()", "Sqlserver::commitTransaction()()": "class-cake.database.driver.sqlserver.html#commitTransaction()", "Sqlserver::compileQuery()()": "class-cake.database.driver.sqlserver.html#compileQuery()", "Sqlserver::connect()()": "class-cake.database.driver.sqlserver.html#connect()", "Sqlserver::disableAutoQuoting()()": "class-cake.database.driver.sqlserver.html#disableAutoQuoting()", "Sqlserver::disableForeignKeySQL()()": "class-cake.database.driver.sqlserver.html#disableForeignKeySQL()", "Sqlserver::disconnect()()": "class-cake.database.driver.sqlserver.html#disconnect()", "Sqlserver::enableAutoQuoting()()": "class-cake.database.driver.sqlserver.html#enableAutoQuoting()", "Sqlserver::enabled()()": "class-cake.database.driver.sqlserver.html#enabled()", "Sqlserver::enableForeignKeySQL()()": "class-cake.database.driver.sqlserver.html#enableForeignKeySQL()", "Sqlserver::getConnection()()": "class-cake.database.driver.sqlserver.html#getConnection()", "Sqlserver::getConnectRetries()()": "class-cake.database.driver.sqlserver.html#getConnectRetries()", "Sqlserver::getMaxAliasLength()()": "class-cake.database.driver.sqlserver.html#getMaxAliasLength()", "Sqlserver::inTransaction()()": "class-cake.database.driver.sqlserver.html#inTransaction()", "Sqlserver::isAutoQuotingEnabled()()": "class-cake.database.driver.sqlserver.html#isAutoQuotingEnabled()", "Sqlserver::isConnected()()": "class-cake.database.driver.sqlserver.html#isConnected()", "Sqlserver::lastInsertId()()": "class-cake.database.driver.sqlserver.html#lastInsertId()", "Sqlserver::newCompiler()()": "class-cake.database.driver.sqlserver.html#newCompiler()", "Sqlserver::newTableSchema()()": "class-cake.database.driver.sqlserver.html#newTableSchema()", "Sqlserver::prepare()()": "class-cake.database.driver.sqlserver.html#prepare()", "Sqlserver::queryTranslator()()": "class-cake.database.driver.sqlserver.html#queryTranslator()", "Sqlserver::quote()()": "class-cake.database.driver.sqlserver.html#quote()", "Sqlserver::quoteIdentifier()()": "class-cake.database.driver.sqlserver.html#quoteIdentifier()", "Sqlserver::releaseSavePointSQL()()": "class-cake.database.driver.sqlserver.html#releaseSavePointSQL()", "Sqlserver::rollbackSavePointSQL()()": "class-cake.database.driver.sqlserver.html#rollbackSavePointSQL()", "Sqlserver::rollbackTransaction()()": "class-cake.database.driver.sqlserver.html#rollbackTransaction()", "Sqlserver::savePointSQL()()": "class-cake.database.driver.sqlserver.html#savePointSQL()", "Sqlserver::schema()()": "class-cake.database.driver.sqlserver.html#schema()", "Sqlserver::schemaDialect()()": "class-cake.database.driver.sqlserver.html#schemaDialect()", "Sqlserver::schemaValue()()": "class-cake.database.driver.sqlserver.html#schemaValue()", "Sqlserver::setConnection()()": "class-cake.database.driver.sqlserver.html#setConnection()", "Sqlserver::supports()()": "class-cake.database.driver.sqlserver.html#supports()", "Sqlserver::supportsCTEs()()": "class-cake.database.driver.sqlserver.html#supportsCTEs()", "Sqlserver::supportsDynamicConstraints()()": "class-cake.database.driver.sqlserver.html#supportsDynamicConstraints()", "Sqlserver::supportsQuoting()()": "class-cake.database.driver.sqlserver.html#supportsQuoting()", "Sqlserver::supportsSavePoints()()": "class-cake.database.driver.sqlserver.html#supportsSavePoints()", "Sqlserver::version()()": "class-cake.database.driver.sqlserver.html#version()", "SqlserverCompiler (class)": "class-cake.database.sqlservercompiler.html", "SqlserverCompiler::$_deleteParts": "class-cake.database.sqlservercompiler.html#$_deleteParts", "SqlserverCompiler::$_insertParts": "class-cake.database.sqlservercompiler.html#$_insertParts", "SqlserverCompiler::$_orderedUnion": "class-cake.database.sqlservercompiler.html#$_orderedUnion", "SqlserverCompiler::$_quotedSelectAliases": "class-cake.database.sqlservercompiler.html#$_quotedSelectAliases", "SqlserverCompiler::$_selectParts": "class-cake.database.sqlservercompiler.html#$_selectParts", "SqlserverCompiler::$_templates": "class-cake.database.sqlservercompiler.html#$_templates", "SqlserverCompiler::$_updateParts": "class-cake.database.sqlservercompiler.html#$_updateParts", "SqlserverCompiler::_buildFromPart()()": "class-cake.database.sqlservercompiler.html#_buildFromPart()", "SqlserverCompiler::_buildHavingPart()()": "class-cake.database.sqlservercompiler.html#_buildHavingPart()", "SqlserverCompiler::_buildInsertPart()()": "class-cake.database.sqlservercompiler.html#_buildInsertPart()", "SqlserverCompiler::_buildJoinPart()()": "class-cake.database.sqlservercompiler.html#_buildJoinPart()", "SqlserverCompiler::_buildLimitPart()()": "class-cake.database.sqlservercompiler.html#_buildLimitPart()", "SqlserverCompiler::_buildModifierPart()()": "class-cake.database.sqlservercompiler.html#_buildModifierPart()", "SqlserverCompiler::_buildSelectPart()()": "class-cake.database.sqlservercompiler.html#_buildSelectPart()", "SqlserverCompiler::_buildSetPart()()": "class-cake.database.sqlservercompiler.html#_buildSetPart()", "SqlserverCompiler::_buildUnionPart()()": "class-cake.database.sqlservercompiler.html#_buildUnionPart()", "SqlserverCompiler::_buildUpdatePart()()": "class-cake.database.sqlservercompiler.html#_buildUpdatePart()", "SqlserverCompiler::_buildValuesPart()()": "class-cake.database.sqlservercompiler.html#_buildValuesPart()", "SqlserverCompiler::_buildWindowPart()()": "class-cake.database.sqlservercompiler.html#_buildWindowPart()", "SqlserverCompiler::_buildWithPart()()": "class-cake.database.sqlservercompiler.html#_buildWithPart()", "SqlserverCompiler::_sqlCompiler()()": "class-cake.database.sqlservercompiler.html#_sqlCompiler()", "SqlserverCompiler::_stringifyExpressions()()": "class-cake.database.sqlservercompiler.html#_stringifyExpressions()", "SqlserverCompiler::compile()()": "class-cake.database.sqlservercompiler.html#compile()", "SqlserverSchemaDialect (class)": "class-cake.database.schema.sqlserverschemadialect.html", "SqlserverSchemaDialect::$_driver": "class-cake.database.schema.sqlserverschemadialect.html#$_driver", "SqlserverSchemaDialect::__construct()()": "class-cake.database.schema.sqlserverschemadialect.html#__construct()", "SqlserverSchemaDialect::_applyTypeSpecificColumnConversion()()": "class-cake.database.schema.sqlserverschemadialect.html#_applyTypeSpecificColumnConversion()", "SqlserverSchemaDialect::_convertColumn()()": "class-cake.database.schema.sqlserverschemadialect.html#_convertColumn()", "SqlserverSchemaDialect::_convertConstraintColumns()()": "class-cake.database.schema.sqlserverschemadialect.html#_convertConstraintColumns()", "SqlserverSchemaDialect::_convertOnClause()()": "class-cake.database.schema.sqlserverschemadialect.html#_convertOnClause()", "SqlserverSchemaDialect::_defaultValue()()": "class-cake.database.schema.sqlserverschemadialect.html#_defaultValue()", "SqlserverSchemaDialect::_foreignOnClause()()": "class-cake.database.schema.sqlserverschemadialect.html#_foreignOnClause()", "SqlserverSchemaDialect::_getTypeSpecificColumnSql()()": "class-cake.database.schema.sqlserverschemadialect.html#_getTypeSpecificColumnSql()", "SqlserverSchemaDialect::_keySql()()": "class-cake.database.schema.sqlserverschemadialect.html#_keySql()", "SqlserverSchemaDialect::addConstraintSql()()": "class-cake.database.schema.sqlserverschemadialect.html#addConstraintSql()", "SqlserverSchemaDialect::columnSql()()": "class-cake.database.schema.sqlserverschemadialect.html#columnSql()", "SqlserverSchemaDialect::constraintSql()()": "class-cake.database.schema.sqlserverschemadialect.html#constraintSql()", "SqlserverSchemaDialect::convertColumnDescription()()": "class-cake.database.schema.sqlserverschemadialect.html#convertColumnDescription()", "SqlserverSchemaDialect::convertForeignKeyDescription()()": "class-cake.database.schema.sqlserverschemadialect.html#convertForeignKeyDescription()", "SqlserverSchemaDialect::convertIndexDescription()()": "class-cake.database.schema.sqlserverschemadialect.html#convertIndexDescription()", "SqlserverSchemaDialect::convertOptionsDescription()()": "class-cake.database.schema.sqlserverschemadialect.html#convertOptionsDescription()", "SqlserverSchemaDialect::createTableSql()()": "class-cake.database.schema.sqlserverschemadialect.html#createTableSql()", "SqlserverSchemaDialect::describeColumnSql()()": "class-cake.database.schema.sqlserverschemadialect.html#describeColumnSql()", "SqlserverSchemaDialect::describeForeignKeySql()()": "class-cake.database.schema.sqlserverschemadialect.html#describeForeignKeySql()", "SqlserverSchemaDialect::describeIndexSql()()": "class-cake.database.schema.sqlserverschemadialect.html#describeIndexSql()", "SqlserverSchemaDialect::describeOptionsSql()()": "class-cake.database.schema.sqlserverschemadialect.html#describeOptionsSql()", "SqlserverSchemaDialect::dropConstraintSql()()": "class-cake.database.schema.sqlserverschemadialect.html#dropConstraintSql()", "SqlserverSchemaDialect::dropTableSql()()": "class-cake.database.schema.sqlserverschemadialect.html#dropTableSql()", "SqlserverSchemaDialect::indexSql()()": "class-cake.database.schema.sqlserverschemadialect.html#indexSql()", "SqlserverSchemaDialect::listTablesSql()()": "class-cake.database.schema.sqlserverschemadialect.html#listTablesSql()", "SqlserverSchemaDialect::listTablesWithoutViewsSql()()": "class-cake.database.schema.sqlserverschemadialect.html#listTablesWithoutViewsSql()", "SqlserverSchemaDialect::truncateTableSql()()": "class-cake.database.schema.sqlserverschemadialect.html#truncateTableSql()", "SqlserverStatement (class)": "class-cake.database.statement.sqlserverstatement.html", "SqlserverStatement::$_driver": "class-cake.database.statement.sqlserverstatement.html#$_driver", "SqlserverStatement::$_hasExecuted": "class-cake.database.statement.sqlserverstatement.html#$_hasExecuted", "SqlserverStatement::$_statement": "class-cake.database.statement.sqlserverstatement.html#$_statement", "SqlserverStatement::$queryString": "class-cake.database.statement.sqlserverstatement.html#$queryString", "SqlserverStatement::__construct()()": "class-cake.database.statement.sqlserverstatement.html#__construct()", "SqlserverStatement::__get()()": "class-cake.database.statement.sqlserverstatement.html#__get()", "SqlserverStatement::bind()()": "class-cake.database.statement.sqlserverstatement.html#bind()", "SqlserverStatement::bindValue()()": "class-cake.database.statement.sqlserverstatement.html#bindValue()", "SqlserverStatement::cast()()": "class-cake.database.statement.sqlserverstatement.html#cast()", "SqlserverStatement::closeCursor()()": "class-cake.database.statement.sqlserverstatement.html#closeCursor()", "SqlserverStatement::columnCount()()": "class-cake.database.statement.sqlserverstatement.html#columnCount()", "SqlserverStatement::count()()": "class-cake.database.statement.sqlserverstatement.html#count()", "SqlserverStatement::errorCode()()": "class-cake.database.statement.sqlserverstatement.html#errorCode()", "SqlserverStatement::errorInfo()()": "class-cake.database.statement.sqlserverstatement.html#errorInfo()", "SqlserverStatement::execute()()": "class-cake.database.statement.sqlserverstatement.html#execute()", "SqlserverStatement::fetch()()": "class-cake.database.statement.sqlserverstatement.html#fetch()", "SqlserverStatement::fetchAll()()": "class-cake.database.statement.sqlserverstatement.html#fetchAll()", "SqlserverStatement::fetchAssoc()()": "class-cake.database.statement.sqlserverstatement.html#fetchAssoc()", "SqlserverStatement::fetchColumn()()": "class-cake.database.statement.sqlserverstatement.html#fetchColumn()", "SqlserverStatement::getInnerStatement()()": "class-cake.database.statement.sqlserverstatement.html#getInnerStatement()", "SqlserverStatement::getIterator()()": "class-cake.database.statement.sqlserverstatement.html#getIterator()", "SqlserverStatement::lastInsertId()()": "class-cake.database.statement.sqlserverstatement.html#lastInsertId()", "SqlserverStatement::matchTypes()()": "class-cake.database.statement.sqlserverstatement.html#matchTypes()", "SqlserverStatement::rowCount()()": "class-cake.database.statement.sqlserverstatement.html#rowCount()", "StatementDecorator (class)": "class-cake.database.statement.statementdecorator.html", "StatementDecorator::$_driver": "class-cake.database.statement.statementdecorator.html#$_driver", "StatementDecorator::$_hasExecuted": "class-cake.database.statement.statementdecorator.html#$_hasExecuted", "StatementDecorator::$_statement": "class-cake.database.statement.statementdecorator.html#$_statement", "StatementDecorator::$queryString": "class-cake.database.statement.statementdecorator.html#$queryString", "StatementDecorator::__construct()()": "class-cake.database.statement.statementdecorator.html#__construct()", "StatementDecorator::__get()()": "class-cake.database.statement.statementdecorator.html#__get()", "StatementDecorator::bind()()": "class-cake.database.statement.statementdecorator.html#bind()", "StatementDecorator::bindValue()()": "class-cake.database.statement.statementdecorator.html#bindValue()", "StatementDecorator::cast()()": "class-cake.database.statement.statementdecorator.html#cast()", "StatementDecorator::closeCursor()()": "class-cake.database.statement.statementdecorator.html#closeCursor()", "StatementDecorator::columnCount()()": "class-cake.database.statement.statementdecorator.html#columnCount()", "StatementDecorator::count()()": "class-cake.database.statement.statementdecorator.html#count()", "StatementDecorator::errorCode()()": "class-cake.database.statement.statementdecorator.html#errorCode()", "StatementDecorator::errorInfo()()": "class-cake.database.statement.statementdecorator.html#errorInfo()", "StatementDecorator::execute()()": "class-cake.database.statement.statementdecorator.html#execute()", "StatementDecorator::fetch()()": "class-cake.database.statement.statementdecorator.html#fetch()", "StatementDecorator::fetchAll()()": "class-cake.database.statement.statementdecorator.html#fetchAll()", "StatementDecorator::fetchAssoc()()": "class-cake.database.statement.statementdecorator.html#fetchAssoc()", "StatementDecorator::fetchColumn()()": "class-cake.database.statement.statementdecorator.html#fetchColumn()", "StatementDecorator::getInnerStatement()()": "class-cake.database.statement.statementdecorator.html#getInnerStatement()", "StatementDecorator::getIterator()()": "class-cake.database.statement.statementdecorator.html#getIterator()", "StatementDecorator::lastInsertId()()": "class-cake.database.statement.statementdecorator.html#lastInsertId()", "StatementDecorator::matchTypes()()": "class-cake.database.statement.statementdecorator.html#matchTypes()", "StatementDecorator::rowCount()()": "class-cake.database.statement.statementdecorator.html#rowCount()", "StatementInterface (interface)": "interface-cake.database.statementinterface.html", "StaticConfigTrait (trait)": "trait-cake.core.staticconfigtrait.html", "StatusCode (class)": "class-cake.testsuite.constraint.response.statuscode.html", "StatusCode::$code": "class-cake.testsuite.constraint.response.statuscode.html#$code", "StatusCode::$response": "class-cake.testsuite.constraint.response.statuscode.html#$response", "StatusCode::__construct()()": "class-cake.testsuite.constraint.response.statuscode.html#__construct()", "StatusCode::_getBodyAsString()()": "class-cake.testsuite.constraint.response.statuscode.html#_getBodyAsString()", "StatusCode::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.statuscode.html#additionalFailureDescription()", "StatusCode::count()()": "class-cake.testsuite.constraint.response.statuscode.html#count()", "StatusCode::evaluate()()": "class-cake.testsuite.constraint.response.statuscode.html#evaluate()", "StatusCode::exporter()()": "class-cake.testsuite.constraint.response.statuscode.html#exporter()", "StatusCode::fail()()": "class-cake.testsuite.constraint.response.statuscode.html#fail()", "StatusCode::failureDescription()()": "class-cake.testsuite.constraint.response.statuscode.html#failureDescription()", "StatusCode::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.statuscode.html#failureDescriptionInContext()", "StatusCode::matches()()": "class-cake.testsuite.constraint.response.statuscode.html#matches()", "StatusCode::reduce()()": "class-cake.testsuite.constraint.response.statuscode.html#reduce()", "StatusCode::statusCodeBetween()()": "class-cake.testsuite.constraint.response.statuscode.html#statusCodeBetween()", "StatusCode::toString()()": "class-cake.testsuite.constraint.response.statuscode.html#toString()", "StatusCode::toStringInContext()()": "class-cake.testsuite.constraint.response.statuscode.html#toStringInContext()", "StatusCodeBase (class)": "class-cake.testsuite.constraint.response.statuscodebase.html", "StatusCodeBase::$code": "class-cake.testsuite.constraint.response.statuscodebase.html#$code", "StatusCodeBase::$response": "class-cake.testsuite.constraint.response.statuscodebase.html#$response", "StatusCodeBase::__construct()()": "class-cake.testsuite.constraint.response.statuscodebase.html#__construct()", "StatusCodeBase::_getBodyAsString()()": "class-cake.testsuite.constraint.response.statuscodebase.html#_getBodyAsString()", "StatusCodeBase::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.statuscodebase.html#additionalFailureDescription()", "StatusCodeBase::count()()": "class-cake.testsuite.constraint.response.statuscodebase.html#count()", "StatusCodeBase::evaluate()()": "class-cake.testsuite.constraint.response.statuscodebase.html#evaluate()", "StatusCodeBase::exporter()()": "class-cake.testsuite.constraint.response.statuscodebase.html#exporter()", "StatusCodeBase::fail()()": "class-cake.testsuite.constraint.response.statuscodebase.html#fail()", "StatusCodeBase::failureDescription()()": "class-cake.testsuite.constraint.response.statuscodebase.html#failureDescription()", "StatusCodeBase::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.statuscodebase.html#failureDescriptionInContext()", "StatusCodeBase::matches()()": "class-cake.testsuite.constraint.response.statuscodebase.html#matches()", "StatusCodeBase::reduce()()": "class-cake.testsuite.constraint.response.statuscodebase.html#reduce()", "StatusCodeBase::statusCodeBetween()()": "class-cake.testsuite.constraint.response.statuscodebase.html#statusCodeBetween()", "StatusCodeBase::toString()()": "class-cake.testsuite.constraint.response.statuscodebase.html#toString()", "StatusCodeBase::toStringInContext()()": "class-cake.testsuite.constraint.response.statuscodebase.html#toStringInContext()", "StatusError (class)": "class-cake.testsuite.constraint.response.statuserror.html", "StatusError::$code": "class-cake.testsuite.constraint.response.statuserror.html#$code", "StatusError::$response": "class-cake.testsuite.constraint.response.statuserror.html#$response", "StatusError::__construct()()": "class-cake.testsuite.constraint.response.statuserror.html#__construct()", "StatusError::_getBodyAsString()()": "class-cake.testsuite.constraint.response.statuserror.html#_getBodyAsString()", "StatusError::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.statuserror.html#additionalFailureDescription()", "StatusError::count()()": "class-cake.testsuite.constraint.response.statuserror.html#count()", "StatusError::evaluate()()": "class-cake.testsuite.constraint.response.statuserror.html#evaluate()", "StatusError::exporter()()": "class-cake.testsuite.constraint.response.statuserror.html#exporter()", "StatusError::fail()()": "class-cake.testsuite.constraint.response.statuserror.html#fail()", "StatusError::failureDescription()()": "class-cake.testsuite.constraint.response.statuserror.html#failureDescription()", "StatusError::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.statuserror.html#failureDescriptionInContext()", "StatusError::matches()()": "class-cake.testsuite.constraint.response.statuserror.html#matches()", "StatusError::reduce()()": "class-cake.testsuite.constraint.response.statuserror.html#reduce()", "StatusError::statusCodeBetween()()": "class-cake.testsuite.constraint.response.statuserror.html#statusCodeBetween()", "StatusError::toString()()": "class-cake.testsuite.constraint.response.statuserror.html#toString()", "StatusError::toStringInContext()()": "class-cake.testsuite.constraint.response.statuserror.html#toStringInContext()", "StatusFailure (class)": "class-cake.testsuite.constraint.response.statusfailure.html", "StatusFailure::$code": "class-cake.testsuite.constraint.response.statusfailure.html#$code", "StatusFailure::$response": "class-cake.testsuite.constraint.response.statusfailure.html#$response", "StatusFailure::__construct()()": "class-cake.testsuite.constraint.response.statusfailure.html#__construct()", "StatusFailure::_getBodyAsString()()": "class-cake.testsuite.constraint.response.statusfailure.html#_getBodyAsString()", "StatusFailure::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.statusfailure.html#additionalFailureDescription()", "StatusFailure::count()()": "class-cake.testsuite.constraint.response.statusfailure.html#count()", "StatusFailure::evaluate()()": "class-cake.testsuite.constraint.response.statusfailure.html#evaluate()", "StatusFailure::exporter()()": "class-cake.testsuite.constraint.response.statusfailure.html#exporter()", "StatusFailure::fail()()": "class-cake.testsuite.constraint.response.statusfailure.html#fail()", "StatusFailure::failureDescription()()": "class-cake.testsuite.constraint.response.statusfailure.html#failureDescription()", "StatusFailure::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.statusfailure.html#failureDescriptionInContext()", "StatusFailure::matches()()": "class-cake.testsuite.constraint.response.statusfailure.html#matches()", "StatusFailure::reduce()()": "class-cake.testsuite.constraint.response.statusfailure.html#reduce()", "StatusFailure::statusCodeBetween()()": "class-cake.testsuite.constraint.response.statusfailure.html#statusCodeBetween()", "StatusFailure::toString()()": "class-cake.testsuite.constraint.response.statusfailure.html#toString()", "StatusFailure::toStringInContext()()": "class-cake.testsuite.constraint.response.statusfailure.html#toStringInContext()", "StatusOk (class)": "class-cake.testsuite.constraint.response.statusok.html", "StatusOk::$code": "class-cake.testsuite.constraint.response.statusok.html#$code", "StatusOk::$response": "class-cake.testsuite.constraint.response.statusok.html#$response", "StatusOk::__construct()()": "class-cake.testsuite.constraint.response.statusok.html#__construct()", "StatusOk::_getBodyAsString()()": "class-cake.testsuite.constraint.response.statusok.html#_getBodyAsString()", "StatusOk::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.statusok.html#additionalFailureDescription()", "StatusOk::count()()": "class-cake.testsuite.constraint.response.statusok.html#count()", "StatusOk::evaluate()()": "class-cake.testsuite.constraint.response.statusok.html#evaluate()", "StatusOk::exporter()()": "class-cake.testsuite.constraint.response.statusok.html#exporter()", "StatusOk::fail()()": "class-cake.testsuite.constraint.response.statusok.html#fail()", "StatusOk::failureDescription()()": "class-cake.testsuite.constraint.response.statusok.html#failureDescription()", "StatusOk::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.statusok.html#failureDescriptionInContext()", "StatusOk::matches()()": "class-cake.testsuite.constraint.response.statusok.html#matches()", "StatusOk::reduce()()": "class-cake.testsuite.constraint.response.statusok.html#reduce()", "StatusOk::statusCodeBetween()()": "class-cake.testsuite.constraint.response.statusok.html#statusCodeBetween()", "StatusOk::toString()()": "class-cake.testsuite.constraint.response.statusok.html#toString()", "StatusOk::toStringInContext()()": "class-cake.testsuite.constraint.response.statusok.html#toStringInContext()", "StatusSuccess (class)": "class-cake.testsuite.constraint.response.statussuccess.html", "StatusSuccess::$code": "class-cake.testsuite.constraint.response.statussuccess.html#$code", "StatusSuccess::$response": "class-cake.testsuite.constraint.response.statussuccess.html#$response", "StatusSuccess::__construct()()": "class-cake.testsuite.constraint.response.statussuccess.html#__construct()", "StatusSuccess::_getBodyAsString()()": "class-cake.testsuite.constraint.response.statussuccess.html#_getBodyAsString()", "StatusSuccess::additionalFailureDescription()()": "class-cake.testsuite.constraint.response.statussuccess.html#additionalFailureDescription()", "StatusSuccess::count()()": "class-cake.testsuite.constraint.response.statussuccess.html#count()", "StatusSuccess::evaluate()()": "class-cake.testsuite.constraint.response.statussuccess.html#evaluate()", "StatusSuccess::exporter()()": "class-cake.testsuite.constraint.response.statussuccess.html#exporter()", "StatusSuccess::fail()()": "class-cake.testsuite.constraint.response.statussuccess.html#fail()", "StatusSuccess::failureDescription()()": "class-cake.testsuite.constraint.response.statussuccess.html#failureDescription()", "StatusSuccess::failureDescriptionInContext()()": "class-cake.testsuite.constraint.response.statussuccess.html#failureDescriptionInContext()", "StatusSuccess::matches()()": "class-cake.testsuite.constraint.response.statussuccess.html#matches()", "StatusSuccess::reduce()()": "class-cake.testsuite.constraint.response.statussuccess.html#reduce()", "StatusSuccess::statusCodeBetween()()": "class-cake.testsuite.constraint.response.statussuccess.html#statusCodeBetween()", "StatusSuccess::toString()()": "class-cake.testsuite.constraint.response.statussuccess.html#toString()", "StatusSuccess::toStringInContext()()": "class-cake.testsuite.constraint.response.statussuccess.html#toStringInContext()", "StopException (class)": "class-cake.console.exception.stopexception.html", "StoppableIterator (class)": "class-cake.collection.iterator.stoppableiterator.html", "StoppableIterator::$_condition": "class-cake.collection.iterator.stoppableiterator.html#$_condition", "StoppableIterator::$_innerIterator": "class-cake.collection.iterator.stoppableiterator.html#$_innerIterator", "StoppableIterator::__construct()()": "class-cake.collection.iterator.stoppableiterator.html#__construct()", "StoppableIterator::__debugInfo()()": "class-cake.collection.iterator.stoppableiterator.html#__debugInfo()", "StoppableIterator::__serialize()()": "class-cake.collection.iterator.stoppableiterator.html#__serialize()", "StoppableIterator::__unserialize()()": "class-cake.collection.iterator.stoppableiterator.html#__unserialize()", "StoppableIterator::_createMatcherFilter()()": "class-cake.collection.iterator.stoppableiterator.html#_createMatcherFilter()", "StoppableIterator::_extract()()": "class-cake.collection.iterator.stoppableiterator.html#_extract()", "StoppableIterator::_propertyExtractor()()": "class-cake.collection.iterator.stoppableiterator.html#_propertyExtractor()", "StoppableIterator::_simpleExtract()()": "class-cake.collection.iterator.stoppableiterator.html#_simpleExtract()", "StoppableIterator::append()()": "class-cake.collection.iterator.stoppableiterator.html#append()", "StoppableIterator::appendItem()()": "class-cake.collection.iterator.stoppableiterator.html#appendItem()", "StoppableIterator::avg()()": "class-cake.collection.iterator.stoppableiterator.html#avg()", "StoppableIterator::buffered()()": "class-cake.collection.iterator.stoppableiterator.html#buffered()", "StoppableIterator::cartesianProduct()()": "class-cake.collection.iterator.stoppableiterator.html#cartesianProduct()", "StoppableIterator::chunk()()": "class-cake.collection.iterator.stoppableiterator.html#chunk()", "StoppableIterator::chunkWithKeys()()": "class-cake.collection.iterator.stoppableiterator.html#chunkWithKeys()", "StoppableIterator::combine()()": "class-cake.collection.iterator.stoppableiterator.html#combine()", "StoppableIterator::compile()()": "class-cake.collection.iterator.stoppableiterator.html#compile()", "StoppableIterator::contains()()": "class-cake.collection.iterator.stoppableiterator.html#contains()", "StoppableIterator::count()()": "class-cake.collection.iterator.stoppableiterator.html#count()", "StoppableIterator::countBy()()": "class-cake.collection.iterator.stoppableiterator.html#countBy()", "StoppableIterator::countKeys()()": "class-cake.collection.iterator.stoppableiterator.html#countKeys()", "StoppableIterator::each()()": "class-cake.collection.iterator.stoppableiterator.html#each()", "StoppableIterator::every()()": "class-cake.collection.iterator.stoppableiterator.html#every()", "StoppableIterator::extract()()": "class-cake.collection.iterator.stoppableiterator.html#extract()", "StoppableIterator::filter()()": "class-cake.collection.iterator.stoppableiterator.html#filter()", "StoppableIterator::first()()": "class-cake.collection.iterator.stoppableiterator.html#first()", "StoppableIterator::firstMatch()()": "class-cake.collection.iterator.stoppableiterator.html#firstMatch()", "StoppableIterator::groupBy()()": "class-cake.collection.iterator.stoppableiterator.html#groupBy()", "StoppableIterator::indexBy()()": "class-cake.collection.iterator.stoppableiterator.html#indexBy()", "StoppableIterator::insert()()": "class-cake.collection.iterator.stoppableiterator.html#insert()", "StoppableIterator::isEmpty()()": "class-cake.collection.iterator.stoppableiterator.html#isEmpty()", "StoppableIterator::jsonSerialize()()": "class-cake.collection.iterator.stoppableiterator.html#jsonSerialize()", "StoppableIterator::last()()": "class-cake.collection.iterator.stoppableiterator.html#last()", "StoppableIterator::lazy()()": "class-cake.collection.iterator.stoppableiterator.html#lazy()", "StoppableIterator::listNested()()": "class-cake.collection.iterator.stoppableiterator.html#listNested()", "StoppableIterator::map()()": "class-cake.collection.iterator.stoppableiterator.html#map()", "StoppableIterator::match()()": "class-cake.collection.iterator.stoppableiterator.html#match()", "StoppableIterator::max()()": "class-cake.collection.iterator.stoppableiterator.html#max()", "StoppableIterator::median()()": "class-cake.collection.iterator.stoppableiterator.html#median()", "StoppableIterator::min()()": "class-cake.collection.iterator.stoppableiterator.html#min()", "StoppableIterator::nest()()": "class-cake.collection.iterator.stoppableiterator.html#nest()", "StoppableIterator::newCollection()()": "class-cake.collection.iterator.stoppableiterator.html#newCollection()", "StoppableIterator::optimizeUnwrap()()": "class-cake.collection.iterator.stoppableiterator.html#optimizeUnwrap()", "StoppableIterator::prepend()()": "class-cake.collection.iterator.stoppableiterator.html#prepend()", "StoppableIterator::prependItem()()": "class-cake.collection.iterator.stoppableiterator.html#prependItem()", "StoppableIterator::reduce()()": "class-cake.collection.iterator.stoppableiterator.html#reduce()", "StoppableIterator::reject()()": "class-cake.collection.iterator.stoppableiterator.html#reject()", "StoppableIterator::sample()()": "class-cake.collection.iterator.stoppableiterator.html#sample()", "StoppableIterator::serialize()()": "class-cake.collection.iterator.stoppableiterator.html#serialize()", "StoppableIterator::shuffle()()": "class-cake.collection.iterator.stoppableiterator.html#shuffle()", "StoppableIterator::skip()()": "class-cake.collection.iterator.stoppableiterator.html#skip()", "StoppableIterator::some()()": "class-cake.collection.iterator.stoppableiterator.html#some()", "StoppableIterator::sortBy()()": "class-cake.collection.iterator.stoppableiterator.html#sortBy()", "StoppableIterator::stopWhen()()": "class-cake.collection.iterator.stoppableiterator.html#stopWhen()", "StoppableIterator::sumOf()()": "class-cake.collection.iterator.stoppableiterator.html#sumOf()", "StoppableIterator::take()()": "class-cake.collection.iterator.stoppableiterator.html#take()", "StoppableIterator::takeLast()()": "class-cake.collection.iterator.stoppableiterator.html#takeLast()", "StoppableIterator::through()()": "class-cake.collection.iterator.stoppableiterator.html#through()", "StoppableIterator::toArray()()": "class-cake.collection.iterator.stoppableiterator.html#toArray()", "StoppableIterator::toList()()": "class-cake.collection.iterator.stoppableiterator.html#toList()", "StoppableIterator::transpose()()": "class-cake.collection.iterator.stoppableiterator.html#transpose()", "StoppableIterator::unfold()()": "class-cake.collection.iterator.stoppableiterator.html#unfold()", "StoppableIterator::unserialize()()": "class-cake.collection.iterator.stoppableiterator.html#unserialize()", "StoppableIterator::unwrap()()": "class-cake.collection.iterator.stoppableiterator.html#unwrap()", "StoppableIterator::valid()()": "class-cake.collection.iterator.stoppableiterator.html#valid()", "StoppableIterator::zip()()": "class-cake.collection.iterator.stoppableiterator.html#zip()", "StoppableIterator::zipWith()()": "class-cake.collection.iterator.stoppableiterator.html#zipWith()", "StorageInterface (interface)": "interface-cake.auth.storage.storageinterface.html", "Stream (class)": "class-cake.http.client.adapter.stream.html", "Stream::$_connectionErrors": "class-cake.http.client.adapter.stream.html#$_connectionErrors", "Stream::$_context": "class-cake.http.client.adapter.stream.html#$_context", "Stream::$_contextOptions": "class-cake.http.client.adapter.stream.html#$_contextOptions", "Stream::$_sslContextOptions": "class-cake.http.client.adapter.stream.html#$_sslContextOptions", "Stream::$_stream": "class-cake.http.client.adapter.stream.html#$_stream", "Stream::_buildContent()()": "class-cake.http.client.adapter.stream.html#_buildContent()", "Stream::_buildContext()()": "class-cake.http.client.adapter.stream.html#_buildContext()", "Stream::_buildHeaders()()": "class-cake.http.client.adapter.stream.html#_buildHeaders()", "Stream::_buildOptions()()": "class-cake.http.client.adapter.stream.html#_buildOptions()", "Stream::_buildResponse()()": "class-cake.http.client.adapter.stream.html#_buildResponse()", "Stream::_buildSslContext()()": "class-cake.http.client.adapter.stream.html#_buildSslContext()", "Stream::_open()()": "class-cake.http.client.adapter.stream.html#_open()", "Stream::_send()()": "class-cake.http.client.adapter.stream.html#_send()", "Stream::contextOptions()()": "class-cake.http.client.adapter.stream.html#contextOptions()", "Stream::createResponses()()": "class-cake.http.client.adapter.stream.html#createResponses()", "Stream::send()()": "class-cake.http.client.adapter.stream.html#send()", "StringCompareTrait (trait)": "trait-cake.testsuite.stringcomparetrait.html", "StringExpression (class)": "class-cake.database.expression.stringexpression.html", "StringExpression::$collation": "class-cake.database.expression.stringexpression.html#$collation", "StringExpression::$string": "class-cake.database.expression.stringexpression.html#$string", "StringExpression::__construct()()": "class-cake.database.expression.stringexpression.html#__construct()", "StringExpression::getCollation()()": "class-cake.database.expression.stringexpression.html#getCollation()", "StringExpression::setCollation()()": "class-cake.database.expression.stringexpression.html#setCollation()", "StringExpression::sql()()": "class-cake.database.expression.stringexpression.html#sql()", "StringExpression::traverse()()": "class-cake.database.expression.stringexpression.html#traverse()", "StringTemplate (class)": "class-cake.view.stringtemplate.html", "StringTemplate::$_compactAttributes": "class-cake.view.stringtemplate.html#$_compactAttributes", "StringTemplate::$_compiled": "class-cake.view.stringtemplate.html#$_compiled", "StringTemplate::$_config": "class-cake.view.stringtemplate.html#$_config", "StringTemplate::$_configInitialized": "class-cake.view.stringtemplate.html#$_configInitialized", "StringTemplate::$_configStack": "class-cake.view.stringtemplate.html#$_configStack", "StringTemplate::$_defaultConfig": "class-cake.view.stringtemplate.html#$_defaultConfig", "StringTemplate::__construct()()": "class-cake.view.stringtemplate.html#__construct()", "StringTemplate::_compileTemplates()()": "class-cake.view.stringtemplate.html#_compileTemplates()", "StringTemplate::_configDelete()()": "class-cake.view.stringtemplate.html#_configDelete()", "StringTemplate::_configRead()()": "class-cake.view.stringtemplate.html#_configRead()", "StringTemplate::_configWrite()()": "class-cake.view.stringtemplate.html#_configWrite()", "StringTemplate::_formatAttribute()()": "class-cake.view.stringtemplate.html#_formatAttribute()", "StringTemplate::add()()": "class-cake.view.stringtemplate.html#add()", "StringTemplate::addClass()()": "class-cake.view.stringtemplate.html#addClass()", "StringTemplate::configShallow()()": "class-cake.view.stringtemplate.html#configShallow()", "StringTemplate::format()()": "class-cake.view.stringtemplate.html#format()", "StringTemplate::formatAttributes()()": "class-cake.view.stringtemplate.html#formatAttributes()", "StringTemplate::getConfig()()": "class-cake.view.stringtemplate.html#getConfig()", "StringTemplate::getConfigOrFail()()": "class-cake.view.stringtemplate.html#getConfigOrFail()", "StringTemplate::load()()": "class-cake.view.stringtemplate.html#load()", "StringTemplate::pop()()": "class-cake.view.stringtemplate.html#pop()", "StringTemplate::push()()": "class-cake.view.stringtemplate.html#push()", "StringTemplate::remove()()": "class-cake.view.stringtemplate.html#remove()", "StringTemplate::setConfig()()": "class-cake.view.stringtemplate.html#setConfig()", "StringTemplateTrait (trait)": "trait-cake.view.stringtemplatetrait.html", "StringType (class)": "class-cake.database.type.stringtype.html", "StringType::$_name": "class-cake.database.type.stringtype.html#$_name", "StringType::__construct()()": "class-cake.database.type.stringtype.html#__construct()", "StringType::getBaseType()()": "class-cake.database.type.stringtype.html#getBaseType()", "StringType::getName()()": "class-cake.database.type.stringtype.html#getName()", "StringType::marshal()()": "class-cake.database.type.stringtype.html#marshal()", "StringType::newId()()": "class-cake.database.type.stringtype.html#newId()", "StringType::requiresToPhpCast()()": "class-cake.database.type.stringtype.html#requiresToPhpCast()", "StringType::toDatabase()()": "class-cake.database.type.stringtype.html#toDatabase()", "StringType::toPHP()()": "class-cake.database.type.stringtype.html#toPHP()", "StringType::toStatement()()": "class-cake.database.type.stringtype.html#toStatement()", "StubConsoleInput (class)": "class-cake.console.testsuite.stubconsoleinput.html", "StubConsoleInput::$_canReadline": "class-cake.console.testsuite.stubconsoleinput.html#$_canReadline", "StubConsoleInput::$_input": "class-cake.console.testsuite.stubconsoleinput.html#$_input", "StubConsoleInput::$currentIndex": "class-cake.console.testsuite.stubconsoleinput.html#$currentIndex", "StubConsoleInput::$replies": "class-cake.console.testsuite.stubconsoleinput.html#$replies", "StubConsoleInput::__construct()()": "class-cake.console.testsuite.stubconsoleinput.html#__construct()", "StubConsoleInput::dataAvailable()()": "class-cake.console.testsuite.stubconsoleinput.html#dataAvailable()", "StubConsoleInput::read()()": "class-cake.console.testsuite.stubconsoleinput.html#read()", "StubConsoleOutput (class)": "class-cake.console.testsuite.stubconsoleoutput.html", "StubConsoleOutput::$_backgroundColors": "class-cake.console.testsuite.stubconsoleoutput.html#$_backgroundColors", "StubConsoleOutput::$_foregroundColors": "class-cake.console.testsuite.stubconsoleoutput.html#$_foregroundColors", "StubConsoleOutput::$_options": "class-cake.console.testsuite.stubconsoleoutput.html#$_options", "StubConsoleOutput::$_out": "class-cake.console.testsuite.stubconsoleoutput.html#$_out", "StubConsoleOutput::$_output": "class-cake.console.testsuite.stubconsoleoutput.html#$_output", "StubConsoleOutput::$_outputAs": "class-cake.console.testsuite.stubconsoleoutput.html#$_outputAs", "StubConsoleOutput::$_styles": "class-cake.console.testsuite.stubconsoleoutput.html#$_styles", "StubConsoleOutput::__construct()()": "class-cake.console.testsuite.stubconsoleoutput.html#__construct()", "StubConsoleOutput::__destruct()()": "class-cake.console.testsuite.stubconsoleoutput.html#__destruct()", "StubConsoleOutput::_replaceTags()()": "class-cake.console.testsuite.stubconsoleoutput.html#_replaceTags()", "StubConsoleOutput::_write()()": "class-cake.console.testsuite.stubconsoleoutput.html#_write()", "StubConsoleOutput::getOutputAs()()": "class-cake.console.testsuite.stubconsoleoutput.html#getOutputAs()", "StubConsoleOutput::getStyle()()": "class-cake.console.testsuite.stubconsoleoutput.html#getStyle()", "StubConsoleOutput::messages()()": "class-cake.console.testsuite.stubconsoleoutput.html#messages()", "StubConsoleOutput::output()()": "class-cake.console.testsuite.stubconsoleoutput.html#output()", "StubConsoleOutput::setOutputAs()()": "class-cake.console.testsuite.stubconsoleoutput.html#setOutputAs()", "StubConsoleOutput::setStyle()()": "class-cake.console.testsuite.stubconsoleoutput.html#setStyle()", "StubConsoleOutput::styles()()": "class-cake.console.testsuite.stubconsoleoutput.html#styles()", "StubConsoleOutput::styleText()()": "class-cake.console.testsuite.stubconsoleoutput.html#styleText()", "StubConsoleOutput::write()()": "class-cake.console.testsuite.stubconsoleoutput.html#write()", "SubjectFilterDecorator (class)": "class-cake.event.decorator.subjectfilterdecorator.html", "SubjectFilterDecorator::$_callable": "class-cake.event.decorator.subjectfilterdecorator.html#$_callable", "SubjectFilterDecorator::$_options": "class-cake.event.decorator.subjectfilterdecorator.html#$_options", "SubjectFilterDecorator::__construct()()": "class-cake.event.decorator.subjectfilterdecorator.html#__construct()", "SubjectFilterDecorator::__invoke()()": "class-cake.event.decorator.subjectfilterdecorator.html#__invoke()", "SubjectFilterDecorator::_call()()": "class-cake.event.decorator.subjectfilterdecorator.html#_call()", "SubjectFilterDecorator::canTrigger()()": "class-cake.event.decorator.subjectfilterdecorator.html#canTrigger()", "SyslogLog (class)": "class-cake.log.engine.sysloglog.html", "SyslogLog::$_config": "class-cake.log.engine.sysloglog.html#$_config", "SyslogLog::$_configInitialized": "class-cake.log.engine.sysloglog.html#$_configInitialized", "SyslogLog::$_defaultConfig": "class-cake.log.engine.sysloglog.html#$_defaultConfig", "SyslogLog::$_levelMap": "class-cake.log.engine.sysloglog.html#$_levelMap", "SyslogLog::$_open": "class-cake.log.engine.sysloglog.html#$_open", "SyslogLog::$formatter": "class-cake.log.engine.sysloglog.html#$formatter", "SyslogLog::__construct()()": "class-cake.log.engine.sysloglog.html#__construct()", "SyslogLog::__destruct()()": "class-cake.log.engine.sysloglog.html#__destruct()", "SyslogLog::_configDelete()()": "class-cake.log.engine.sysloglog.html#_configDelete()", "SyslogLog::_configRead()()": "class-cake.log.engine.sysloglog.html#_configRead()", "SyslogLog::_configWrite()()": "class-cake.log.engine.sysloglog.html#_configWrite()", "SyslogLog::_format()()": "class-cake.log.engine.sysloglog.html#_format()", "SyslogLog::_open()()": "class-cake.log.engine.sysloglog.html#_open()", "SyslogLog::_write()()": "class-cake.log.engine.sysloglog.html#_write()", "SyslogLog::alert()()": "class-cake.log.engine.sysloglog.html#alert()", "SyslogLog::configShallow()()": "class-cake.log.engine.sysloglog.html#configShallow()", "SyslogLog::critical()()": "class-cake.log.engine.sysloglog.html#critical()", "SyslogLog::debug()()": "class-cake.log.engine.sysloglog.html#debug()", "SyslogLog::emergency()()": "class-cake.log.engine.sysloglog.html#emergency()", "SyslogLog::error()()": "class-cake.log.engine.sysloglog.html#error()", "SyslogLog::getConfig()()": "class-cake.log.engine.sysloglog.html#getConfig()", "SyslogLog::getConfigOrFail()()": "class-cake.log.engine.sysloglog.html#getConfigOrFail()", "SyslogLog::info()()": "class-cake.log.engine.sysloglog.html#info()", "SyslogLog::interpolate()()": "class-cake.log.engine.sysloglog.html#interpolate()", "SyslogLog::levels()()": "class-cake.log.engine.sysloglog.html#levels()", "SyslogLog::log()()": "class-cake.log.engine.sysloglog.html#log()", "SyslogLog::notice()()": "class-cake.log.engine.sysloglog.html#notice()", "SyslogLog::scopes()()": "class-cake.log.engine.sysloglog.html#scopes()", "SyslogLog::setConfig()()": "class-cake.log.engine.sysloglog.html#setConfig()", "SyslogLog::warning()()": "class-cake.log.engine.sysloglog.html#warning()", "Table (class)": "class-cake.orm.table.html", "Table::$_alias": "class-cake.orm.table.html#$_alias", "Table::$_associations": "class-cake.orm.table.html#$_associations", "Table::$_behaviors": "class-cake.orm.table.html#$_behaviors", "Table::$_connection": "class-cake.orm.table.html#$_connection", "Table::$_displayField": "class-cake.orm.table.html#$_displayField", "Table::$_entityClass": "class-cake.orm.table.html#$_entityClass", "Table::$_eventClass": "class-cake.orm.table.html#$_eventClass", "Table::$_eventManager": "class-cake.orm.table.html#$_eventManager", "Table::$_primaryKey": "class-cake.orm.table.html#$_primaryKey", "Table::$_registryAlias": "class-cake.orm.table.html#$_registryAlias", "Table::$_rulesChecker": "class-cake.orm.table.html#$_rulesChecker", "Table::$_schema": "class-cake.orm.table.html#$_schema", "Table::$_table": "class-cake.orm.table.html#$_table", "Table::$_validatorClass": "class-cake.orm.table.html#$_validatorClass", "Table::$_validators": "class-cake.orm.table.html#$_validators", "Table::__call()()": "class-cake.orm.table.html#__call()", "Table::__construct()()": "class-cake.orm.table.html#__construct()", "Table::__debugInfo()()": "class-cake.orm.table.html#__debugInfo()", "Table::__get()()": "class-cake.orm.table.html#__get()", "Table::__isset()()": "class-cake.orm.table.html#__isset()", "Table::_deleteMany()()": "class-cake.orm.table.html#_deleteMany()", "Table::_dynamicFinder()()": "class-cake.orm.table.html#_dynamicFinder()", "Table::_executeTransaction()()": "class-cake.orm.table.html#_executeTransaction()", "Table::_getFindOrCreateQuery()()": "class-cake.orm.table.html#_getFindOrCreateQuery()", "Table::_initializeSchema()()": "class-cake.orm.table.html#_initializeSchema()", "Table::_insert()()": "class-cake.orm.table.html#_insert()", "Table::_newId()()": "class-cake.orm.table.html#_newId()", "Table::_onSaveSuccess()()": "class-cake.orm.table.html#_onSaveSuccess()", "Table::_processDelete()()": "class-cake.orm.table.html#_processDelete()", "Table::_processFindOrCreate()()": "class-cake.orm.table.html#_processFindOrCreate()", "Table::_processSave()()": "class-cake.orm.table.html#_processSave()", "Table::_saveMany()()": "class-cake.orm.table.html#_saveMany()", "Table::_setFieldMatchers()()": "class-cake.orm.table.html#_setFieldMatchers()", "Table::_transactionCommitted()()": "class-cake.orm.table.html#_transactionCommitted()", "Table::_update()()": "class-cake.orm.table.html#_update()", "Table::addAssociations()()": "class-cake.orm.table.html#addAssociations()", "Table::addBehavior()()": "class-cake.orm.table.html#addBehavior()", "Table::addBehaviors()()": "class-cake.orm.table.html#addBehaviors()", "Table::aliasField()()": "class-cake.orm.table.html#aliasField()", "Table::associations()()": "class-cake.orm.table.html#associations()", "Table::behaviors()()": "class-cake.orm.table.html#behaviors()", "Table::belongsTo()()": "class-cake.orm.table.html#belongsTo()", "Table::belongsToMany()()": "class-cake.orm.table.html#belongsToMany()", "Table::buildRules()()": "class-cake.orm.table.html#buildRules()", "Table::callFinder()()": "class-cake.orm.table.html#callFinder()", "Table::checkAliasLengths()()": "class-cake.orm.table.html#checkAliasLengths()", "Table::checkRules()()": "class-cake.orm.table.html#checkRules()", "Table::createValidator()()": "class-cake.orm.table.html#createValidator()", "Table::defaultConnectionName()()": "class-cake.orm.table.html#defaultConnectionName()", "Table::delete()()": "class-cake.orm.table.html#delete()", "Table::deleteAll()()": "class-cake.orm.table.html#deleteAll()", "Table::deleteMany()()": "class-cake.orm.table.html#deleteMany()", "Table::deleteManyOrFail()()": "class-cake.orm.table.html#deleteManyOrFail()", "Table::deleteOrFail()()": "class-cake.orm.table.html#deleteOrFail()", "Table::dispatchEvent()()": "class-cake.orm.table.html#dispatchEvent()", "Table::exists()()": "class-cake.orm.table.html#exists()", "Table::find()()": "class-cake.orm.table.html#find()", "Table::findAll()()": "class-cake.orm.table.html#findAll()", "Table::findAssociation()()": "class-cake.orm.table.html#findAssociation()", "Table::findList()()": "class-cake.orm.table.html#findList()", "Table::findOrCreate()()": "class-cake.orm.table.html#findOrCreate()", "Table::findThreaded()()": "class-cake.orm.table.html#findThreaded()", "Table::get()()": "class-cake.orm.table.html#get()", "Table::getAlias()()": "class-cake.orm.table.html#getAlias()", "Table::getAssociation()()": "class-cake.orm.table.html#getAssociation()", "Table::getBehavior()()": "class-cake.orm.table.html#getBehavior()", "Table::getConnection()()": "class-cake.orm.table.html#getConnection()", "Table::getDisplayField()()": "class-cake.orm.table.html#getDisplayField()", "Table::getEntityClass()()": "class-cake.orm.table.html#getEntityClass()", "Table::getEventManager()()": "class-cake.orm.table.html#getEventManager()", "Table::getPrimaryKey()()": "class-cake.orm.table.html#getPrimaryKey()", "Table::getRegistryAlias()()": "class-cake.orm.table.html#getRegistryAlias()", "Table::getSaveOptionsBuilder()()": "class-cake.orm.table.html#getSaveOptionsBuilder()", "Table::getSchema()()": "class-cake.orm.table.html#getSchema()", "Table::getTable()()": "class-cake.orm.table.html#getTable()", "Table::getValidator()()": "class-cake.orm.table.html#getValidator()", "Table::hasAssociation()()": "class-cake.orm.table.html#hasAssociation()", "Table::hasBehavior()()": "class-cake.orm.table.html#hasBehavior()", "Table::hasField()()": "class-cake.orm.table.html#hasField()", "Table::hasFinder()()": "class-cake.orm.table.html#hasFinder()", "Table::hasMany()()": "class-cake.orm.table.html#hasMany()", "Table::hasOne()()": "class-cake.orm.table.html#hasOne()", "Table::hasValidator()()": "class-cake.orm.table.html#hasValidator()", "Table::implementedEvents()()": "class-cake.orm.table.html#implementedEvents()", "Table::initialize()()": "class-cake.orm.table.html#initialize()", "Table::loadInto()()": "class-cake.orm.table.html#loadInto()", "Table::marshaller()()": "class-cake.orm.table.html#marshaller()", "Table::newEmptyEntity()()": "class-cake.orm.table.html#newEmptyEntity()", "Table::newEntities()()": "class-cake.orm.table.html#newEntities()", "Table::newEntity()()": "class-cake.orm.table.html#newEntity()", "Table::patchEntities()()": "class-cake.orm.table.html#patchEntities()", "Table::patchEntity()()": "class-cake.orm.table.html#patchEntity()", "Table::query()()": "class-cake.orm.table.html#query()", "Table::removeBehavior()()": "class-cake.orm.table.html#removeBehavior()", "Table::rulesChecker()()": "class-cake.orm.table.html#rulesChecker()", "Table::save()()": "class-cake.orm.table.html#save()", "Table::saveMany()()": "class-cake.orm.table.html#saveMany()", "Table::saveManyOrFail()()": "class-cake.orm.table.html#saveManyOrFail()", "Table::saveOrFail()()": "class-cake.orm.table.html#saveOrFail()", "Table::setAlias()()": "class-cake.orm.table.html#setAlias()", "Table::setConnection()()": "class-cake.orm.table.html#setConnection()", "Table::setDisplayField()()": "class-cake.orm.table.html#setDisplayField()", "Table::setEntityClass()()": "class-cake.orm.table.html#setEntityClass()", "Table::setEventManager()()": "class-cake.orm.table.html#setEventManager()", "Table::setPrimaryKey()()": "class-cake.orm.table.html#setPrimaryKey()", "Table::setRegistryAlias()()": "class-cake.orm.table.html#setRegistryAlias()", "Table::setSchema()()": "class-cake.orm.table.html#setSchema()", "Table::setTable()()": "class-cake.orm.table.html#setTable()", "Table::setValidator()()": "class-cake.orm.table.html#setValidator()", "Table::subquery()()": "class-cake.orm.table.html#subquery()", "Table::updateAll()()": "class-cake.orm.table.html#updateAll()", "Table::validateUnique()()": "class-cake.orm.table.html#validateUnique()", "Table::validationDefault()()": "class-cake.orm.table.html#validationDefault()", "Table::validationMethodExists()()": "class-cake.orm.table.html#validationMethodExists()", "TableHelper (class)": "class-cake.shell.helper.tablehelper.html", "TableHelper::$_config": "class-cake.shell.helper.tablehelper.html#$_config", "TableHelper::$_configInitialized": "class-cake.shell.helper.tablehelper.html#$_configInitialized", "TableHelper::$_defaultConfig": "class-cake.shell.helper.tablehelper.html#$_defaultConfig", "TableHelper::$_io": "class-cake.shell.helper.tablehelper.html#$_io", "TableHelper::__construct()()": "class-cake.shell.helper.tablehelper.html#__construct()", "TableHelper::_addStyle()()": "class-cake.shell.helper.tablehelper.html#_addStyle()", "TableHelper::_calculateWidths()()": "class-cake.shell.helper.tablehelper.html#_calculateWidths()", "TableHelper::_cellWidth()()": "class-cake.shell.helper.tablehelper.html#_cellWidth()", "TableHelper::_configDelete()()": "class-cake.shell.helper.tablehelper.html#_configDelete()", "TableHelper::_configRead()()": "class-cake.shell.helper.tablehelper.html#_configRead()", "TableHelper::_configWrite()()": "class-cake.shell.helper.tablehelper.html#_configWrite()", "TableHelper::_render()()": "class-cake.shell.helper.tablehelper.html#_render()", "TableHelper::_rowSeparator()()": "class-cake.shell.helper.tablehelper.html#_rowSeparator()", "TableHelper::configShallow()()": "class-cake.shell.helper.tablehelper.html#configShallow()", "TableHelper::getConfig()()": "class-cake.shell.helper.tablehelper.html#getConfig()", "TableHelper::getConfigOrFail()()": "class-cake.shell.helper.tablehelper.html#getConfigOrFail()", "TableHelper::output()()": "class-cake.shell.helper.tablehelper.html#output()", "TableHelper::setConfig()()": "class-cake.shell.helper.tablehelper.html#setConfig()", "TableLocator (class)": "class-cake.orm.locator.tablelocator.html", "TableLocator::$_config": "class-cake.orm.locator.tablelocator.html#$_config", "TableLocator::$_fallbacked": "class-cake.orm.locator.tablelocator.html#$_fallbacked", "TableLocator::$allowFallbackClass": "class-cake.orm.locator.tablelocator.html#$allowFallbackClass", "TableLocator::$fallbackClassName": "class-cake.orm.locator.tablelocator.html#$fallbackClassName", "TableLocator::$instances": "class-cake.orm.locator.tablelocator.html#$instances", "TableLocator::$locations": "class-cake.orm.locator.tablelocator.html#$locations", "TableLocator::$options": "class-cake.orm.locator.tablelocator.html#$options", "TableLocator::__construct()()": "class-cake.orm.locator.tablelocator.html#__construct()", "TableLocator::_create()()": "class-cake.orm.locator.tablelocator.html#_create()", "TableLocator::_getClassName()()": "class-cake.orm.locator.tablelocator.html#_getClassName()", "TableLocator::addLocation()()": "class-cake.orm.locator.tablelocator.html#addLocation()", "TableLocator::allowFallbackClass()()": "class-cake.orm.locator.tablelocator.html#allowFallbackClass()", "TableLocator::clear()()": "class-cake.orm.locator.tablelocator.html#clear()", "TableLocator::createInstance()()": "class-cake.orm.locator.tablelocator.html#createInstance()", "TableLocator::exists()()": "class-cake.orm.locator.tablelocator.html#exists()", "TableLocator::genericInstances()()": "class-cake.orm.locator.tablelocator.html#genericInstances()", "TableLocator::get()()": "class-cake.orm.locator.tablelocator.html#get()", "TableLocator::getConfig()()": "class-cake.orm.locator.tablelocator.html#getConfig()", "TableLocator::remove()()": "class-cake.orm.locator.tablelocator.html#remove()", "TableLocator::set()()": "class-cake.orm.locator.tablelocator.html#set()", "TableLocator::setConfig()()": "class-cake.orm.locator.tablelocator.html#setConfig()", "TableLocator::setFallbackClassName()()": "class-cake.orm.locator.tablelocator.html#setFallbackClassName()", "TableRegistry (class)": "class-cake.orm.tableregistry.html", "TableRegistry::clear()()": "class-cake.orm.tableregistry.html#clear()", "TableRegistry::exists()()": "class-cake.orm.tableregistry.html#exists()", "TableRegistry::get()()": "class-cake.orm.tableregistry.html#get()", "TableRegistry::getTableLocator()()": "class-cake.orm.tableregistry.html#getTableLocator()", "TableRegistry::remove()()": "class-cake.orm.tableregistry.html#remove()", "TableRegistry::set()()": "class-cake.orm.tableregistry.html#set()", "TableRegistry::setTableLocator()()": "class-cake.orm.tableregistry.html#setTableLocator()", "TableSchema (class)": "class-cake.database.schema.tableschema.html", "TableSchema::$_columnExtras": "class-cake.database.schema.tableschema.html#$_columnExtras", "TableSchema::$_columnKeys": "class-cake.database.schema.tableschema.html#$_columnKeys", "TableSchema::$_columns": "class-cake.database.schema.tableschema.html#$_columns", "TableSchema::$_constraints": "class-cake.database.schema.tableschema.html#$_constraints", "TableSchema::$_indexes": "class-cake.database.schema.tableschema.html#$_indexes", "TableSchema::$_indexKeys": "class-cake.database.schema.tableschema.html#$_indexKeys", "TableSchema::$_options": "class-cake.database.schema.tableschema.html#$_options", "TableSchema::$_table": "class-cake.database.schema.tableschema.html#$_table", "TableSchema::$_temporary": "class-cake.database.schema.tableschema.html#$_temporary", "TableSchema::$_typeMap": "class-cake.database.schema.tableschema.html#$_typeMap", "TableSchema::$_validConstraintTypes": "class-cake.database.schema.tableschema.html#$_validConstraintTypes", "TableSchema::$_validForeignKeyActions": "class-cake.database.schema.tableschema.html#$_validForeignKeyActions", "TableSchema::$_validIndexTypes": "class-cake.database.schema.tableschema.html#$_validIndexTypes", "TableSchema::$columnLengths": "class-cake.database.schema.tableschema.html#$columnLengths", "TableSchema::__construct()()": "class-cake.database.schema.tableschema.html#__construct()", "TableSchema::__debugInfo()()": "class-cake.database.schema.tableschema.html#__debugInfo()", "TableSchema::_checkForeignKey()()": "class-cake.database.schema.tableschema.html#_checkForeignKey()", "TableSchema::addColumn()()": "class-cake.database.schema.tableschema.html#addColumn()", "TableSchema::addConstraint()()": "class-cake.database.schema.tableschema.html#addConstraint()", "TableSchema::addConstraintSql()()": "class-cake.database.schema.tableschema.html#addConstraintSql()", "TableSchema::addIndex()()": "class-cake.database.schema.tableschema.html#addIndex()", "TableSchema::baseColumnType()()": "class-cake.database.schema.tableschema.html#baseColumnType()", "TableSchema::columns()()": "class-cake.database.schema.tableschema.html#columns()", "TableSchema::constraints()()": "class-cake.database.schema.tableschema.html#constraints()", "TableSchema::createSql()()": "class-cake.database.schema.tableschema.html#createSql()", "TableSchema::defaultValues()()": "class-cake.database.schema.tableschema.html#defaultValues()", "TableSchema::dropConstraint()()": "class-cake.database.schema.tableschema.html#dropConstraint()", "TableSchema::dropConstraintSql()()": "class-cake.database.schema.tableschema.html#dropConstraintSql()", "TableSchema::dropSql()()": "class-cake.database.schema.tableschema.html#dropSql()", "TableSchema::getColumn()()": "class-cake.database.schema.tableschema.html#getColumn()", "TableSchema::getColumnType()()": "class-cake.database.schema.tableschema.html#getColumnType()", "TableSchema::getConstraint()()": "class-cake.database.schema.tableschema.html#getConstraint()", "TableSchema::getIndex()()": "class-cake.database.schema.tableschema.html#getIndex()", "TableSchema::getOptions()()": "class-cake.database.schema.tableschema.html#getOptions()", "TableSchema::getPrimaryKey()()": "class-cake.database.schema.tableschema.html#getPrimaryKey()", "TableSchema::hasAutoincrement()()": "class-cake.database.schema.tableschema.html#hasAutoincrement()", "TableSchema::hasColumn()()": "class-cake.database.schema.tableschema.html#hasColumn()", "TableSchema::indexes()()": "class-cake.database.schema.tableschema.html#indexes()", "TableSchema::isNullable()()": "class-cake.database.schema.tableschema.html#isNullable()", "TableSchema::isTemporary()()": "class-cake.database.schema.tableschema.html#isTemporary()", "TableSchema::name()()": "class-cake.database.schema.tableschema.html#name()", "TableSchema::primaryKey()()": "class-cake.database.schema.tableschema.html#primaryKey()", "TableSchema::removeColumn()()": "class-cake.database.schema.tableschema.html#removeColumn()", "TableSchema::setColumnType()()": "class-cake.database.schema.tableschema.html#setColumnType()", "TableSchema::setOptions()()": "class-cake.database.schema.tableschema.html#setOptions()", "TableSchema::setTemporary()()": "class-cake.database.schema.tableschema.html#setTemporary()", "TableSchema::truncateSql()()": "class-cake.database.schema.tableschema.html#truncateSql()", "TableSchema::typeMap()()": "class-cake.database.schema.tableschema.html#typeMap()", "TableSchemaAwareInterface (interface)": "interface-cake.database.schema.tableschemaawareinterface.html", "TableSchemaInterface (interface)": "interface-cake.database.schema.tableschemainterface.html", "TaskRegistry (class)": "class-cake.console.taskregistry.html", "TaskRegistry::$_loaded": "class-cake.console.taskregistry.html#$_loaded", "TaskRegistry::$_Shell": "class-cake.console.taskregistry.html#$_Shell", "TaskRegistry::__construct()()": "class-cake.console.taskregistry.html#__construct()", "TaskRegistry::__debugInfo()()": "class-cake.console.taskregistry.html#__debugInfo()", "TaskRegistry::__get()()": "class-cake.console.taskregistry.html#__get()", "TaskRegistry::__isset()()": "class-cake.console.taskregistry.html#__isset()", "TaskRegistry::__set()()": "class-cake.console.taskregistry.html#__set()", "TaskRegistry::__unset()()": "class-cake.console.taskregistry.html#__unset()", "TaskRegistry::_checkDuplicate()()": "class-cake.console.taskregistry.html#_checkDuplicate()", "TaskRegistry::_create()()": "class-cake.console.taskregistry.html#_create()", "TaskRegistry::_resolveClassName()()": "class-cake.console.taskregistry.html#_resolveClassName()", "TaskRegistry::_throwMissingClassError()()": "class-cake.console.taskregistry.html#_throwMissingClassError()", "TaskRegistry::count()()": "class-cake.console.taskregistry.html#count()", "TaskRegistry::get()()": "class-cake.console.taskregistry.html#get()", "TaskRegistry::getIterator()()": "class-cake.console.taskregistry.html#getIterator()", "TaskRegistry::has()()": "class-cake.console.taskregistry.html#has()", "TaskRegistry::load()()": "class-cake.console.taskregistry.html#load()", "TaskRegistry::loaded()()": "class-cake.console.taskregistry.html#loaded()", "TaskRegistry::normalizeArray()()": "class-cake.console.taskregistry.html#normalizeArray()", "TaskRegistry::reset()()": "class-cake.console.taskregistry.html#reset()", "TaskRegistry::set()()": "class-cake.console.taskregistry.html#set()", "TaskRegistry::unload()()": "class-cake.console.taskregistry.html#unload()", "TemplateFileEquals (class)": "class-cake.testsuite.constraint.view.templatefileequals.html", "TemplateFileEquals::$filename": "class-cake.testsuite.constraint.view.templatefileequals.html#$filename", "TemplateFileEquals::__construct()()": "class-cake.testsuite.constraint.view.templatefileequals.html#__construct()", "TemplateFileEquals::additionalFailureDescription()()": "class-cake.testsuite.constraint.view.templatefileequals.html#additionalFailureDescription()", "TemplateFileEquals::count()()": "class-cake.testsuite.constraint.view.templatefileequals.html#count()", "TemplateFileEquals::evaluate()()": "class-cake.testsuite.constraint.view.templatefileequals.html#evaluate()", "TemplateFileEquals::exporter()()": "class-cake.testsuite.constraint.view.templatefileequals.html#exporter()", "TemplateFileEquals::fail()()": "class-cake.testsuite.constraint.view.templatefileequals.html#fail()", "TemplateFileEquals::failureDescription()()": "class-cake.testsuite.constraint.view.templatefileequals.html#failureDescription()", "TemplateFileEquals::failureDescriptionInContext()()": "class-cake.testsuite.constraint.view.templatefileequals.html#failureDescriptionInContext()", "TemplateFileEquals::matches()()": "class-cake.testsuite.constraint.view.templatefileequals.html#matches()", "TemplateFileEquals::reduce()()": "class-cake.testsuite.constraint.view.templatefileequals.html#reduce()", "TemplateFileEquals::toString()()": "class-cake.testsuite.constraint.view.templatefileequals.html#toString()", "TemplateFileEquals::toStringInContext()()": "class-cake.testsuite.constraint.view.templatefileequals.html#toStringInContext()", "TestCase (class)": "class-cake.testsuite.testcase.html", "TestCase::$_configure": "class-cake.testsuite.testcase.html#$_configure", "TestCase::$_tableLocator": "class-cake.testsuite.testcase.html#$_tableLocator", "TestCase::$autoFixtures": "class-cake.testsuite.testcase.html#$autoFixtures", "TestCase::$backupGlobals": "class-cake.testsuite.testcase.html#$backupGlobals", "TestCase::$backupGlobalsBlacklist": "class-cake.testsuite.testcase.html#$backupGlobalsBlacklist", "TestCase::$backupGlobalsExcludeList": "class-cake.testsuite.testcase.html#$backupGlobalsExcludeList", "TestCase::$backupStaticAttributes": "class-cake.testsuite.testcase.html#$backupStaticAttributes", "TestCase::$backupStaticAttributesBlacklist": "class-cake.testsuite.testcase.html#$backupStaticAttributesBlacklist", "TestCase::$backupStaticAttributesExcludeList": "class-cake.testsuite.testcase.html#$backupStaticAttributesExcludeList", "TestCase::$defaultTable": "class-cake.testsuite.testcase.html#$defaultTable", "TestCase::$dropTables": "class-cake.testsuite.testcase.html#$dropTables", "TestCase::$fixtureManager": "class-cake.testsuite.testcase.html#$fixtureManager", "TestCase::$fixtures": "class-cake.testsuite.testcase.html#$fixtures", "TestCase::$fixtureStrategy": "class-cake.testsuite.testcase.html#$fixtureStrategy", "TestCase::$preserveGlobalState": "class-cake.testsuite.testcase.html#$preserveGlobalState", "TestCase::$providedTests": "class-cake.testsuite.testcase.html#$providedTests", "TestCase::$runTestInSeparateProcess": "class-cake.testsuite.testcase.html#$runTestInSeparateProcess", "TestCase::__construct()()": "class-cake.testsuite.testcase.html#__construct()", "TestCase::_assertAttributes()()": "class-cake.testsuite.testcase.html#_assertAttributes()", "TestCase::_getTableClassName()()": "class-cake.testsuite.testcase.html#_getTableClassName()", "TestCase::_normalizePath()()": "class-cake.testsuite.testcase.html#_normalizePath()", "TestCase::addFixture()()": "class-cake.testsuite.testcase.html#addFixture()", "TestCase::addToAssertionCount()()": "class-cake.testsuite.testcase.html#addToAssertionCount()", "TestCase::addWarning()()": "class-cake.testsuite.testcase.html#addWarning()", "TestCase::any()()": "class-cake.testsuite.testcase.html#any()", "TestCase::anything()()": "class-cake.testsuite.testcase.html#anything()", "TestCase::arrayHasKey()()": "class-cake.testsuite.testcase.html#arrayHasKey()", "TestCase::assertArrayHasKey()()": "class-cake.testsuite.testcase.html#assertArrayHasKey()", "TestCase::assertArrayNotHasKey()()": "class-cake.testsuite.testcase.html#assertArrayNotHasKey()", "TestCase::assertClassHasAttribute()()": "class-cake.testsuite.testcase.html#assertClassHasAttribute()", "TestCase::assertClassHasStaticAttribute()()": "class-cake.testsuite.testcase.html#assertClassHasStaticAttribute()", "TestCase::assertClassNotHasAttribute()()": "class-cake.testsuite.testcase.html#assertClassNotHasAttribute()", "TestCase::assertClassNotHasStaticAttribute()()": "class-cake.testsuite.testcase.html#assertClassNotHasStaticAttribute()", "TestCase::assertContains()()": "class-cake.testsuite.testcase.html#assertContains()", "TestCase::assertContainsEquals()()": "class-cake.testsuite.testcase.html#assertContainsEquals()", "TestCase::assertContainsOnly()()": "class-cake.testsuite.testcase.html#assertContainsOnly()", "TestCase::assertContainsOnlyInstancesOf()()": "class-cake.testsuite.testcase.html#assertContainsOnlyInstancesOf()", "TestCase::assertCount()()": "class-cake.testsuite.testcase.html#assertCount()", "TestCase::assertDirectoryDoesNotExist()()": "class-cake.testsuite.testcase.html#assertDirectoryDoesNotExist()", "TestCase::assertDirectoryExists()()": "class-cake.testsuite.testcase.html#assertDirectoryExists()", "TestCase::assertDirectoryIsNotReadable()()": "class-cake.testsuite.testcase.html#assertDirectoryIsNotReadable()", "TestCase::assertDirectoryIsNotWritable()()": "class-cake.testsuite.testcase.html#assertDirectoryIsNotWritable()", "TestCase::assertDirectoryIsReadable()()": "class-cake.testsuite.testcase.html#assertDirectoryIsReadable()", "TestCase::assertDirectoryIsWritable()()": "class-cake.testsuite.testcase.html#assertDirectoryIsWritable()", "TestCase::assertDirectoryNotExists()()": "class-cake.testsuite.testcase.html#assertDirectoryNotExists()", "TestCase::assertDirectoryNotIsReadable()()": "class-cake.testsuite.testcase.html#assertDirectoryNotIsReadable()", "TestCase::assertDirectoryNotIsWritable()()": "class-cake.testsuite.testcase.html#assertDirectoryNotIsWritable()", "TestCase::assertDoesNotMatchRegularExpression()()": "class-cake.testsuite.testcase.html#assertDoesNotMatchRegularExpression()", "TestCase::assertEmpty()()": "class-cake.testsuite.testcase.html#assertEmpty()", "TestCase::assertEquals()()": "class-cake.testsuite.testcase.html#assertEquals()", "TestCase::assertEqualsCanonicalizing()()": "class-cake.testsuite.testcase.html#assertEqualsCanonicalizing()", "TestCase::assertEqualsIgnoringCase()()": "class-cake.testsuite.testcase.html#assertEqualsIgnoringCase()", "TestCase::assertEqualsSql()()": "class-cake.testsuite.testcase.html#assertEqualsSql()", "TestCase::assertEqualsWithDelta()()": "class-cake.testsuite.testcase.html#assertEqualsWithDelta()", "TestCase::assertEqualXMLStructure()()": "class-cake.testsuite.testcase.html#assertEqualXMLStructure()", "TestCase::assertEventFired()()": "class-cake.testsuite.testcase.html#assertEventFired()", "TestCase::assertEventFiredWith()()": "class-cake.testsuite.testcase.html#assertEventFiredWith()", "TestCase::assertFalse()()": "class-cake.testsuite.testcase.html#assertFalse()", "TestCase::assertFileDoesNotExist()()": "class-cake.testsuite.testcase.html#assertFileDoesNotExist()", "TestCase::assertFileEquals()()": "class-cake.testsuite.testcase.html#assertFileEquals()", "TestCase::assertFileEqualsCanonicalizing()()": "class-cake.testsuite.testcase.html#assertFileEqualsCanonicalizing()", "TestCase::assertFileEqualsIgnoringCase()()": "class-cake.testsuite.testcase.html#assertFileEqualsIgnoringCase()", "TestCase::assertFileExists()()": "class-cake.testsuite.testcase.html#assertFileExists()", "TestCase::assertFileIsNotReadable()()": "class-cake.testsuite.testcase.html#assertFileIsNotReadable()", "TestCase::assertFileIsNotWritable()()": "class-cake.testsuite.testcase.html#assertFileIsNotWritable()", "TestCase::assertFileIsReadable()()": "class-cake.testsuite.testcase.html#assertFileIsReadable()", "TestCase::assertFileIsWritable()()": "class-cake.testsuite.testcase.html#assertFileIsWritable()", "TestCase::assertFileNotEquals()()": "class-cake.testsuite.testcase.html#assertFileNotEquals()", "TestCase::assertFileNotEqualsCanonicalizing()()": "class-cake.testsuite.testcase.html#assertFileNotEqualsCanonicalizing()", "TestCase::assertFileNotEqualsIgnoringCase()()": "class-cake.testsuite.testcase.html#assertFileNotEqualsIgnoringCase()", "TestCase::assertFileNotExists()()": "class-cake.testsuite.testcase.html#assertFileNotExists()", "TestCase::assertFileNotIsReadable()()": "class-cake.testsuite.testcase.html#assertFileNotIsReadable()", "TestCase::assertFileNotIsWritable()()": "class-cake.testsuite.testcase.html#assertFileNotIsWritable()", "TestCase::assertFinite()()": "class-cake.testsuite.testcase.html#assertFinite()", "TestCase::assertGreaterThan()()": "class-cake.testsuite.testcase.html#assertGreaterThan()", "TestCase::assertGreaterThanOrEqual()()": "class-cake.testsuite.testcase.html#assertGreaterThanOrEqual()", "TestCase::assertHtml()()": "class-cake.testsuite.testcase.html#assertHtml()", "TestCase::assertInfinite()()": "class-cake.testsuite.testcase.html#assertInfinite()", "TestCase::assertInstanceOf()()": "class-cake.testsuite.testcase.html#assertInstanceOf()", "TestCase::assertIsArray()()": "class-cake.testsuite.testcase.html#assertIsArray()", "TestCase::assertIsBool()()": "class-cake.testsuite.testcase.html#assertIsBool()", "TestCase::assertIsCallable()()": "class-cake.testsuite.testcase.html#assertIsCallable()", "TestCase::assertIsClosedResource()()": "class-cake.testsuite.testcase.html#assertIsClosedResource()", "TestCase::assertIsFloat()()": "class-cake.testsuite.testcase.html#assertIsFloat()", "TestCase::assertIsInt()()": "class-cake.testsuite.testcase.html#assertIsInt()", "TestCase::assertIsIterable()()": "class-cake.testsuite.testcase.html#assertIsIterable()", "TestCase::assertIsNotArray()()": "class-cake.testsuite.testcase.html#assertIsNotArray()", "TestCase::assertIsNotBool()()": "class-cake.testsuite.testcase.html#assertIsNotBool()", "TestCase::assertIsNotCallable()()": "class-cake.testsuite.testcase.html#assertIsNotCallable()", "TestCase::assertIsNotClosedResource()()": "class-cake.testsuite.testcase.html#assertIsNotClosedResource()", "TestCase::assertIsNotFloat()()": "class-cake.testsuite.testcase.html#assertIsNotFloat()", "TestCase::assertIsNotInt()()": "class-cake.testsuite.testcase.html#assertIsNotInt()", "TestCase::assertIsNotIterable()()": "class-cake.testsuite.testcase.html#assertIsNotIterable()", "TestCase::assertIsNotNumeric()()": "class-cake.testsuite.testcase.html#assertIsNotNumeric()", "TestCase::assertIsNotObject()()": "class-cake.testsuite.testcase.html#assertIsNotObject()", "TestCase::assertIsNotReadable()()": "class-cake.testsuite.testcase.html#assertIsNotReadable()", "TestCase::assertIsNotResource()()": "class-cake.testsuite.testcase.html#assertIsNotResource()", "TestCase::assertIsNotScalar()()": "class-cake.testsuite.testcase.html#assertIsNotScalar()", "TestCase::assertIsNotString()()": "class-cake.testsuite.testcase.html#assertIsNotString()", "TestCase::assertIsNotWritable()()": "class-cake.testsuite.testcase.html#assertIsNotWritable()", "TestCase::assertIsNumeric()()": "class-cake.testsuite.testcase.html#assertIsNumeric()", "TestCase::assertIsObject()()": "class-cake.testsuite.testcase.html#assertIsObject()", "TestCase::assertIsReadable()()": "class-cake.testsuite.testcase.html#assertIsReadable()", "TestCase::assertIsResource()()": "class-cake.testsuite.testcase.html#assertIsResource()", "TestCase::assertIsScalar()()": "class-cake.testsuite.testcase.html#assertIsScalar()", "TestCase::assertIsString()()": "class-cake.testsuite.testcase.html#assertIsString()", "TestCase::assertIsWritable()()": "class-cake.testsuite.testcase.html#assertIsWritable()", "TestCase::assertJson()()": "class-cake.testsuite.testcase.html#assertJson()", "TestCase::assertJsonFileEqualsJsonFile()()": "class-cake.testsuite.testcase.html#assertJsonFileEqualsJsonFile()", "TestCase::assertJsonFileNotEqualsJsonFile()()": "class-cake.testsuite.testcase.html#assertJsonFileNotEqualsJsonFile()", "TestCase::assertJsonStringEqualsJsonFile()()": "class-cake.testsuite.testcase.html#assertJsonStringEqualsJsonFile()", "TestCase::assertJsonStringEqualsJsonString()()": "class-cake.testsuite.testcase.html#assertJsonStringEqualsJsonString()", "TestCase::assertJsonStringNotEqualsJsonFile()()": "class-cake.testsuite.testcase.html#assertJsonStringNotEqualsJsonFile()", "TestCase::assertJsonStringNotEqualsJsonString()()": "class-cake.testsuite.testcase.html#assertJsonStringNotEqualsJsonString()", "TestCase::assertLessThan()()": "class-cake.testsuite.testcase.html#assertLessThan()", "TestCase::assertLessThanOrEqual()()": "class-cake.testsuite.testcase.html#assertLessThanOrEqual()", "TestCase::assertMatchesRegularExpression()()": "class-cake.testsuite.testcase.html#assertMatchesRegularExpression()", "TestCase::assertNan()()": "class-cake.testsuite.testcase.html#assertNan()", "TestCase::assertNotContains()()": "class-cake.testsuite.testcase.html#assertNotContains()", "TestCase::assertNotContainsEquals()()": "class-cake.testsuite.testcase.html#assertNotContainsEquals()", "TestCase::assertNotContainsOnly()()": "class-cake.testsuite.testcase.html#assertNotContainsOnly()", "TestCase::assertNotCount()()": "class-cake.testsuite.testcase.html#assertNotCount()", "TestCase::assertNotEmpty()()": "class-cake.testsuite.testcase.html#assertNotEmpty()", "TestCase::assertNotEquals()()": "class-cake.testsuite.testcase.html#assertNotEquals()", "TestCase::assertNotEqualsCanonicalizing()()": "class-cake.testsuite.testcase.html#assertNotEqualsCanonicalizing()", "TestCase::assertNotEqualsIgnoringCase()()": "class-cake.testsuite.testcase.html#assertNotEqualsIgnoringCase()", "TestCase::assertNotEqualsWithDelta()()": "class-cake.testsuite.testcase.html#assertNotEqualsWithDelta()", "TestCase::assertNotFalse()()": "class-cake.testsuite.testcase.html#assertNotFalse()", "TestCase::assertNotInstanceOf()()": "class-cake.testsuite.testcase.html#assertNotInstanceOf()", "TestCase::assertNotIsReadable()()": "class-cake.testsuite.testcase.html#assertNotIsReadable()", "TestCase::assertNotIsWritable()()": "class-cake.testsuite.testcase.html#assertNotIsWritable()", "TestCase::assertNotNull()()": "class-cake.testsuite.testcase.html#assertNotNull()", "TestCase::assertNotRegExp()()": "class-cake.testsuite.testcase.html#assertNotRegExp()", "TestCase::assertNotSame()()": "class-cake.testsuite.testcase.html#assertNotSame()", "TestCase::assertNotSameSize()()": "class-cake.testsuite.testcase.html#assertNotSameSize()", "TestCase::assertNotTrue()()": "class-cake.testsuite.testcase.html#assertNotTrue()", "TestCase::assertNotWithinRange()()": "class-cake.testsuite.testcase.html#assertNotWithinRange()", "TestCase::assertNull()()": "class-cake.testsuite.testcase.html#assertNull()", "TestCase::assertObjectEquals()()": "class-cake.testsuite.testcase.html#assertObjectEquals()", "TestCase::assertObjectHasAttribute()()": "class-cake.testsuite.testcase.html#assertObjectHasAttribute()", "TestCase::assertObjectNotHasAttribute()()": "class-cake.testsuite.testcase.html#assertObjectNotHasAttribute()", "TestCase::assertPathEquals()()": "class-cake.testsuite.testcase.html#assertPathEquals()", "TestCase::assertPostConditions()()": "class-cake.testsuite.testcase.html#assertPostConditions()", "TestCase::assertPreConditions()()": "class-cake.testsuite.testcase.html#assertPreConditions()", "TestCase::assertRegExp()()": "class-cake.testsuite.testcase.html#assertRegExp()", "TestCase::assertRegExpSql()()": "class-cake.testsuite.testcase.html#assertRegExpSql()", "TestCase::assertSame()()": "class-cake.testsuite.testcase.html#assertSame()", "TestCase::assertSameSize()()": "class-cake.testsuite.testcase.html#assertSameSize()", "TestCase::assertStringContainsString()()": "class-cake.testsuite.testcase.html#assertStringContainsString()", "TestCase::assertStringContainsStringIgnoringCase()()": "class-cake.testsuite.testcase.html#assertStringContainsStringIgnoringCase()", "TestCase::assertStringEndsNotWith()()": "class-cake.testsuite.testcase.html#assertStringEndsNotWith()", "TestCase::assertStringEndsWith()()": "class-cake.testsuite.testcase.html#assertStringEndsWith()", "TestCase::assertStringEqualsFile()()": "class-cake.testsuite.testcase.html#assertStringEqualsFile()", "TestCase::assertStringEqualsFileCanonicalizing()()": "class-cake.testsuite.testcase.html#assertStringEqualsFileCanonicalizing()", "TestCase::assertStringEqualsFileIgnoringCase()()": "class-cake.testsuite.testcase.html#assertStringEqualsFileIgnoringCase()", "TestCase::assertStringMatchesFormat()()": "class-cake.testsuite.testcase.html#assertStringMatchesFormat()", "TestCase::assertStringMatchesFormatFile()()": "class-cake.testsuite.testcase.html#assertStringMatchesFormatFile()", "TestCase::assertStringNotContainsString()()": "class-cake.testsuite.testcase.html#assertStringNotContainsString()", "TestCase::assertStringNotContainsStringIgnoringCase()()": "class-cake.testsuite.testcase.html#assertStringNotContainsStringIgnoringCase()", "TestCase::assertStringNotEqualsFile()()": "class-cake.testsuite.testcase.html#assertStringNotEqualsFile()", "TestCase::assertStringNotEqualsFileCanonicalizing()()": "class-cake.testsuite.testcase.html#assertStringNotEqualsFileCanonicalizing()", "TestCase::assertStringNotEqualsFileIgnoringCase()()": "class-cake.testsuite.testcase.html#assertStringNotEqualsFileIgnoringCase()", "TestCase::assertStringNotMatchesFormat()()": "class-cake.testsuite.testcase.html#assertStringNotMatchesFormat()", "TestCase::assertStringNotMatchesFormatFile()()": "class-cake.testsuite.testcase.html#assertStringNotMatchesFormatFile()", "TestCase::assertStringStartsNotWith()()": "class-cake.testsuite.testcase.html#assertStringStartsNotWith()", "TestCase::assertStringStartsWith()()": "class-cake.testsuite.testcase.html#assertStringStartsWith()", "TestCase::assertTextContains()()": "class-cake.testsuite.testcase.html#assertTextContains()", "TestCase::assertTextEndsNotWith()()": "class-cake.testsuite.testcase.html#assertTextEndsNotWith()", "TestCase::assertTextEndsWith()()": "class-cake.testsuite.testcase.html#assertTextEndsWith()", "TestCase::assertTextEquals()()": "class-cake.testsuite.testcase.html#assertTextEquals()", "TestCase::assertTextNotContains()()": "class-cake.testsuite.testcase.html#assertTextNotContains()", "TestCase::assertTextNotEquals()()": "class-cake.testsuite.testcase.html#assertTextNotEquals()", "TestCase::assertTextStartsNotWith()()": "class-cake.testsuite.testcase.html#assertTextStartsNotWith()", "TestCase::assertTextStartsWith()()": "class-cake.testsuite.testcase.html#assertTextStartsWith()", "TestCase::assertThat()()": "class-cake.testsuite.testcase.html#assertThat()", "TestCase::assertTrue()()": "class-cake.testsuite.testcase.html#assertTrue()", "TestCase::assertWithinRange()()": "class-cake.testsuite.testcase.html#assertWithinRange()", "TestCase::assertXmlFileEqualsXmlFile()()": "class-cake.testsuite.testcase.html#assertXmlFileEqualsXmlFile()", "TestCase::assertXmlFileNotEqualsXmlFile()()": "class-cake.testsuite.testcase.html#assertXmlFileNotEqualsXmlFile()", "TestCase::assertXmlStringEqualsXmlFile()()": "class-cake.testsuite.testcase.html#assertXmlStringEqualsXmlFile()", "TestCase::assertXmlStringEqualsXmlString()()": "class-cake.testsuite.testcase.html#assertXmlStringEqualsXmlString()", "TestCase::assertXmlStringNotEqualsXmlFile()()": "class-cake.testsuite.testcase.html#assertXmlStringNotEqualsXmlFile()", "TestCase::assertXmlStringNotEqualsXmlString()()": "class-cake.testsuite.testcase.html#assertXmlStringNotEqualsXmlString()", "TestCase::at()()": "class-cake.testsuite.testcase.html#at()", "TestCase::atLeast()()": "class-cake.testsuite.testcase.html#atLeast()", "TestCase::atLeastOnce()()": "class-cake.testsuite.testcase.html#atLeastOnce()", "TestCase::atMost()()": "class-cake.testsuite.testcase.html#atMost()", "TestCase::callback()()": "class-cake.testsuite.testcase.html#callback()", "TestCase::classHasAttribute()()": "class-cake.testsuite.testcase.html#classHasAttribute()", "TestCase::classHasStaticAttribute()()": "class-cake.testsuite.testcase.html#classHasStaticAttribute()", "TestCase::clearPlugins()()": "class-cake.testsuite.testcase.html#clearPlugins()", "TestCase::containsEqual()()": "class-cake.testsuite.testcase.html#containsEqual()", "TestCase::containsIdentical()()": "class-cake.testsuite.testcase.html#containsIdentical()", "TestCase::containsOnly()()": "class-cake.testsuite.testcase.html#containsOnly()", "TestCase::containsOnlyInstancesOf()()": "class-cake.testsuite.testcase.html#containsOnlyInstancesOf()", "TestCase::count()()": "class-cake.testsuite.testcase.html#count()", "TestCase::countOf()()": "class-cake.testsuite.testcase.html#countOf()", "TestCase::createConfiguredMock()()": "class-cake.testsuite.testcase.html#createConfiguredMock()", "TestCase::createMock()()": "class-cake.testsuite.testcase.html#createMock()", "TestCase::createPartialMock()()": "class-cake.testsuite.testcase.html#createPartialMock()", "TestCase::createResult()()": "class-cake.testsuite.testcase.html#createResult()", "TestCase::createStub()()": "class-cake.testsuite.testcase.html#createStub()", "TestCase::createTestProxy()()": "class-cake.testsuite.testcase.html#createTestProxy()", "TestCase::dataName()()": "class-cake.testsuite.testcase.html#dataName()", "TestCase::deprecated()()": "class-cake.testsuite.testcase.html#deprecated()", "TestCase::directoryExists()()": "class-cake.testsuite.testcase.html#directoryExists()", "TestCase::doesNotPerformAssertions()()": "class-cake.testsuite.testcase.html#doesNotPerformAssertions()", "TestCase::doubledTypes()()": "class-cake.testsuite.testcase.html#doubledTypes()", "TestCase::equalTo()()": "class-cake.testsuite.testcase.html#equalTo()", "TestCase::equalToCanonicalizing()()": "class-cake.testsuite.testcase.html#equalToCanonicalizing()", "TestCase::equalToIgnoringCase()()": "class-cake.testsuite.testcase.html#equalToIgnoringCase()", "TestCase::equalToWithDelta()()": "class-cake.testsuite.testcase.html#equalToWithDelta()", "TestCase::exactly()()": "class-cake.testsuite.testcase.html#exactly()", "TestCase::expectDeprecation()()": "class-cake.testsuite.testcase.html#expectDeprecation()", "TestCase::expectDeprecationMessage()()": "class-cake.testsuite.testcase.html#expectDeprecationMessage()", "TestCase::expectDeprecationMessageMatches()()": "class-cake.testsuite.testcase.html#expectDeprecationMessageMatches()", "TestCase::expectError()()": "class-cake.testsuite.testcase.html#expectError()", "TestCase::expectErrorMessage()()": "class-cake.testsuite.testcase.html#expectErrorMessage()", "TestCase::expectErrorMessageMatches()()": "class-cake.testsuite.testcase.html#expectErrorMessageMatches()", "TestCase::expectException()()": "class-cake.testsuite.testcase.html#expectException()", "TestCase::expectExceptionCode()()": "class-cake.testsuite.testcase.html#expectExceptionCode()", "TestCase::expectExceptionMessage()()": "class-cake.testsuite.testcase.html#expectExceptionMessage()", "TestCase::expectExceptionMessageMatches()()": "class-cake.testsuite.testcase.html#expectExceptionMessageMatches()", "TestCase::expectExceptionObject()()": "class-cake.testsuite.testcase.html#expectExceptionObject()", "TestCase::expectNotice()()": "class-cake.testsuite.testcase.html#expectNotice()", "TestCase::expectNoticeMessage()()": "class-cake.testsuite.testcase.html#expectNoticeMessage()", "TestCase::expectNoticeMessageMatches()()": "class-cake.testsuite.testcase.html#expectNoticeMessageMatches()", "TestCase::expectNotToPerformAssertions()()": "class-cake.testsuite.testcase.html#expectNotToPerformAssertions()", "TestCase::expectOutputRegex()()": "class-cake.testsuite.testcase.html#expectOutputRegex()", "TestCase::expectOutputString()()": "class-cake.testsuite.testcase.html#expectOutputString()", "TestCase::expectWarning()()": "class-cake.testsuite.testcase.html#expectWarning()", "TestCase::expectWarningMessage()()": "class-cake.testsuite.testcase.html#expectWarningMessage()", "TestCase::expectWarningMessageMatches()()": "class-cake.testsuite.testcase.html#expectWarningMessageMatches()", "TestCase::fail()()": "class-cake.testsuite.testcase.html#fail()", "TestCase::fetchTable()()": "class-cake.testsuite.testcase.html#fetchTable()", "TestCase::fileExists()()": "class-cake.testsuite.testcase.html#fileExists()", "TestCase::getActualOutput()()": "class-cake.testsuite.testcase.html#getActualOutput()", "TestCase::getActualOutputForAssertion()()": "class-cake.testsuite.testcase.html#getActualOutputForAssertion()", "TestCase::getCount()()": "class-cake.testsuite.testcase.html#getCount()", "TestCase::getDataSetAsString()()": "class-cake.testsuite.testcase.html#getDataSetAsString()", "TestCase::getExpectedException()()": "class-cake.testsuite.testcase.html#getExpectedException()", "TestCase::getExpectedExceptionCode()()": "class-cake.testsuite.testcase.html#getExpectedExceptionCode()", "TestCase::getExpectedExceptionMessage()()": "class-cake.testsuite.testcase.html#getExpectedExceptionMessage()", "TestCase::getExpectedExceptionMessageRegExp()()": "class-cake.testsuite.testcase.html#getExpectedExceptionMessageRegExp()", "TestCase::getFixtures()()": "class-cake.testsuite.testcase.html#getFixtures()", "TestCase::getFixtureStrategy()()": "class-cake.testsuite.testcase.html#getFixtureStrategy()", "TestCase::getGroups()()": "class-cake.testsuite.testcase.html#getGroups()", "TestCase::getMockBuilder()()": "class-cake.testsuite.testcase.html#getMockBuilder()", "TestCase::getMockClass()()": "class-cake.testsuite.testcase.html#getMockClass()", "TestCase::getMockForAbstractClass()()": "class-cake.testsuite.testcase.html#getMockForAbstractClass()", "TestCase::getMockForModel()()": "class-cake.testsuite.testcase.html#getMockForModel()", "TestCase::getMockForTrait()()": "class-cake.testsuite.testcase.html#getMockForTrait()", "TestCase::getMockFromWsdl()()": "class-cake.testsuite.testcase.html#getMockFromWsdl()", "TestCase::getName()()": "class-cake.testsuite.testcase.html#getName()", "TestCase::getNumAssertions()()": "class-cake.testsuite.testcase.html#getNumAssertions()", "TestCase::getObjectForTrait()()": "class-cake.testsuite.testcase.html#getObjectForTrait()", "TestCase::getProvidedData()()": "class-cake.testsuite.testcase.html#getProvidedData()", "TestCase::getResult()()": "class-cake.testsuite.testcase.html#getResult()", "TestCase::getSize()()": "class-cake.testsuite.testcase.html#getSize()", "TestCase::getStatus()()": "class-cake.testsuite.testcase.html#getStatus()", "TestCase::getStatusMessage()()": "class-cake.testsuite.testcase.html#getStatusMessage()", "TestCase::getTableLocator()()": "class-cake.testsuite.testcase.html#getTableLocator()", "TestCase::getTestResultObject()()": "class-cake.testsuite.testcase.html#getTestResultObject()", "TestCase::greaterThan()()": "class-cake.testsuite.testcase.html#greaterThan()", "TestCase::greaterThanOrEqual()()": "class-cake.testsuite.testcase.html#greaterThanOrEqual()", "TestCase::hasExpectationOnOutput()()": "class-cake.testsuite.testcase.html#hasExpectationOnOutput()", "TestCase::hasFailed()()": "class-cake.testsuite.testcase.html#hasFailed()", "TestCase::hasOutput()()": "class-cake.testsuite.testcase.html#hasOutput()", "TestCase::hasSize()()": "class-cake.testsuite.testcase.html#hasSize()", "TestCase::identicalTo()()": "class-cake.testsuite.testcase.html#identicalTo()", "TestCase::iniSet()()": "class-cake.testsuite.testcase.html#iniSet()", "TestCase::isEmpty()()": "class-cake.testsuite.testcase.html#isEmpty()", "TestCase::isFalse()()": "class-cake.testsuite.testcase.html#isFalse()", "TestCase::isFinite()()": "class-cake.testsuite.testcase.html#isFinite()", "TestCase::isInfinite()()": "class-cake.testsuite.testcase.html#isInfinite()", "TestCase::isInIsolation()()": "class-cake.testsuite.testcase.html#isInIsolation()", "TestCase::isInstanceOf()()": "class-cake.testsuite.testcase.html#isInstanceOf()", "TestCase::isJson()()": "class-cake.testsuite.testcase.html#isJson()", "TestCase::isLarge()()": "class-cake.testsuite.testcase.html#isLarge()", "TestCase::isMedium()()": "class-cake.testsuite.testcase.html#isMedium()", "TestCase::isNan()()": "class-cake.testsuite.testcase.html#isNan()", "TestCase::isNull()()": "class-cake.testsuite.testcase.html#isNull()", "TestCase::isReadable()()": "class-cake.testsuite.testcase.html#isReadable()", "TestCase::isSmall()()": "class-cake.testsuite.testcase.html#isSmall()", "TestCase::isTrue()()": "class-cake.testsuite.testcase.html#isTrue()", "TestCase::isType()()": "class-cake.testsuite.testcase.html#isType()", "TestCase::isWritable()()": "class-cake.testsuite.testcase.html#isWritable()", "TestCase::lessThan()()": "class-cake.testsuite.testcase.html#lessThan()", "TestCase::lessThanOrEqual()()": "class-cake.testsuite.testcase.html#lessThanOrEqual()", "TestCase::loadFixtures()()": "class-cake.testsuite.testcase.html#loadFixtures()", "TestCase::loadPlugins()()": "class-cake.testsuite.testcase.html#loadPlugins()", "TestCase::loadRoutes()()": "class-cake.testsuite.testcase.html#loadRoutes()", "TestCase::logicalAnd()()": "class-cake.testsuite.testcase.html#logicalAnd()", "TestCase::logicalNot()()": "class-cake.testsuite.testcase.html#logicalNot()", "TestCase::logicalOr()()": "class-cake.testsuite.testcase.html#logicalOr()", "TestCase::logicalXor()()": "class-cake.testsuite.testcase.html#logicalXor()", "TestCase::markAsRisky()()": "class-cake.testsuite.testcase.html#markAsRisky()", "TestCase::markTestIncomplete()()": "class-cake.testsuite.testcase.html#markTestIncomplete()", "TestCase::markTestSkipped()()": "class-cake.testsuite.testcase.html#markTestSkipped()", "TestCase::matches()()": "class-cake.testsuite.testcase.html#matches()", "TestCase::matchesRegularExpression()()": "class-cake.testsuite.testcase.html#matchesRegularExpression()", "TestCase::never()()": "class-cake.testsuite.testcase.html#never()", "TestCase::objectEquals()()": "class-cake.testsuite.testcase.html#objectEquals()", "TestCase::objectHasAttribute()()": "class-cake.testsuite.testcase.html#objectHasAttribute()", "TestCase::once()()": "class-cake.testsuite.testcase.html#once()", "TestCase::onConsecutiveCalls()()": "class-cake.testsuite.testcase.html#onConsecutiveCalls()", "TestCase::onNotSuccessfulTest()()": "class-cake.testsuite.testcase.html#onNotSuccessfulTest()", "TestCase::prophesize()()": "class-cake.testsuite.testcase.html#prophesize()", "TestCase::provides()()": "class-cake.testsuite.testcase.html#provides()", "TestCase::recordDoubledType()()": "class-cake.testsuite.testcase.html#recordDoubledType()", "TestCase::registerComparator()()": "class-cake.testsuite.testcase.html#registerComparator()", "TestCase::registerMockObject()()": "class-cake.testsuite.testcase.html#registerMockObject()", "TestCase::removePlugins()()": "class-cake.testsuite.testcase.html#removePlugins()", "TestCase::requires()()": "class-cake.testsuite.testcase.html#requires()", "TestCase::resetCount()()": "class-cake.testsuite.testcase.html#resetCount()", "TestCase::returnArgument()()": "class-cake.testsuite.testcase.html#returnArgument()", "TestCase::returnCallback()()": "class-cake.testsuite.testcase.html#returnCallback()", "TestCase::returnSelf()()": "class-cake.testsuite.testcase.html#returnSelf()", "TestCase::returnValue()()": "class-cake.testsuite.testcase.html#returnValue()", "TestCase::returnValueMap()()": "class-cake.testsuite.testcase.html#returnValueMap()", "TestCase::run()()": "class-cake.testsuite.testcase.html#run()", "TestCase::runBare()()": "class-cake.testsuite.testcase.html#runBare()", "TestCase::runTest()()": "class-cake.testsuite.testcase.html#runTest()", "TestCase::setAppNamespace()()": "class-cake.testsuite.testcase.html#setAppNamespace()", "TestCase::setBackupGlobals()()": "class-cake.testsuite.testcase.html#setBackupGlobals()", "TestCase::setBackupStaticAttributes()()": "class-cake.testsuite.testcase.html#setBackupStaticAttributes()", "TestCase::setBeStrictAboutChangesToGlobalState()()": "class-cake.testsuite.testcase.html#setBeStrictAboutChangesToGlobalState()", "TestCase::setDependencies()()": "class-cake.testsuite.testcase.html#setDependencies()", "TestCase::setDependencyInput()()": "class-cake.testsuite.testcase.html#setDependencyInput()", "TestCase::setGroups()()": "class-cake.testsuite.testcase.html#setGroups()", "TestCase::setInIsolation()()": "class-cake.testsuite.testcase.html#setInIsolation()", "TestCase::setLocale()()": "class-cake.testsuite.testcase.html#setLocale()", "TestCase::setName()()": "class-cake.testsuite.testcase.html#setName()", "TestCase::setOutputCallback()()": "class-cake.testsuite.testcase.html#setOutputCallback()", "TestCase::setPreserveGlobalState()()": "class-cake.testsuite.testcase.html#setPreserveGlobalState()", "TestCase::setRegisterMockObjectsFromTestArgumentsRecursively()()": "class-cake.testsuite.testcase.html#setRegisterMockObjectsFromTestArgumentsRecursively()", "TestCase::setResult()()": "class-cake.testsuite.testcase.html#setResult()", "TestCase::setRunClassInSeparateProcess()()": "class-cake.testsuite.testcase.html#setRunClassInSeparateProcess()", "TestCase::setRunTestInSeparateProcess()()": "class-cake.testsuite.testcase.html#setRunTestInSeparateProcess()", "TestCase::setTableLocator()()": "class-cake.testsuite.testcase.html#setTableLocator()", "TestCase::setTestResultObject()()": "class-cake.testsuite.testcase.html#setTestResultObject()", "TestCase::setUp()()": "class-cake.testsuite.testcase.html#setUp()", "TestCase::setUpBeforeClass()()": "class-cake.testsuite.testcase.html#setUpBeforeClass()", "TestCase::setupFixtures()()": "class-cake.testsuite.testcase.html#setupFixtures()", "TestCase::skipIf()()": "class-cake.testsuite.testcase.html#skipIf()", "TestCase::skipUnless()()": "class-cake.testsuite.testcase.html#skipUnless()", "TestCase::sortId()()": "class-cake.testsuite.testcase.html#sortId()", "TestCase::stringContains()()": "class-cake.testsuite.testcase.html#stringContains()", "TestCase::stringEndsWith()()": "class-cake.testsuite.testcase.html#stringEndsWith()", "TestCase::stringStartsWith()()": "class-cake.testsuite.testcase.html#stringStartsWith()", "TestCase::tearDown()()": "class-cake.testsuite.testcase.html#tearDown()", "TestCase::tearDownAfterClass()()": "class-cake.testsuite.testcase.html#tearDownAfterClass()", "TestCase::teardownFixtures()()": "class-cake.testsuite.testcase.html#teardownFixtures()", "TestCase::throwException()()": "class-cake.testsuite.testcase.html#throwException()", "TestCase::toString()()": "class-cake.testsuite.testcase.html#toString()", "TestCase::usesDataProvider()()": "class-cake.testsuite.testcase.html#usesDataProvider()", "TestCase::withErrorReporting()()": "class-cake.testsuite.testcase.html#withErrorReporting()", "TestEmailTransport (class)": "class-cake.testsuite.testemailtransport.html", "TestEmailTransport::$_config": "class-cake.testsuite.testemailtransport.html#$_config", "TestEmailTransport::$_configInitialized": "class-cake.testsuite.testemailtransport.html#$_configInitialized", "TestEmailTransport::$_defaultConfig": "class-cake.testsuite.testemailtransport.html#$_defaultConfig", "TestEmailTransport::__construct()()": "class-cake.testsuite.testemailtransport.html#__construct()", "TestEmailTransport::_configDelete()()": "class-cake.testsuite.testemailtransport.html#_configDelete()", "TestEmailTransport::_configRead()()": "class-cake.testsuite.testemailtransport.html#_configRead()", "TestEmailTransport::_configWrite()()": "class-cake.testsuite.testemailtransport.html#_configWrite()", "TestEmailTransport::checkRecipient()()": "class-cake.testsuite.testemailtransport.html#checkRecipient()", "TestEmailTransport::clearMessages()()": "class-cake.testsuite.testemailtransport.html#clearMessages()", "TestEmailTransport::configShallow()()": "class-cake.testsuite.testemailtransport.html#configShallow()", "TestEmailTransport::getConfig()()": "class-cake.testsuite.testemailtransport.html#getConfig()", "TestEmailTransport::getConfigOrFail()()": "class-cake.testsuite.testemailtransport.html#getConfigOrFail()", "TestEmailTransport::getMessages()()": "class-cake.testsuite.testemailtransport.html#getMessages()", "TestEmailTransport::replaceAllTransports()()": "class-cake.testsuite.testemailtransport.html#replaceAllTransports()", "TestEmailTransport::send()()": "class-cake.testsuite.testemailtransport.html#send()", "TestEmailTransport::setConfig()()": "class-cake.testsuite.testemailtransport.html#setConfig()", "TestExceptionRenderer (class)": "class-cake.testsuite.stub.testexceptionrenderer.html", "TestExceptionRenderer::__construct()()": "class-cake.testsuite.stub.testexceptionrenderer.html#__construct()", "TestExceptionRenderer::render()()": "class-cake.testsuite.stub.testexceptionrenderer.html#render()", "TestExceptionRenderer::write()()": "class-cake.testsuite.stub.testexceptionrenderer.html#write()", "TestFixture (class)": "class-cake.testsuite.fixture.testfixture.html", "TestFixture::$_constraints": "class-cake.testsuite.fixture.testfixture.html#$_constraints", "TestFixture::$_schema": "class-cake.testsuite.fixture.testfixture.html#$_schema", "TestFixture::$_tableLocator": "class-cake.testsuite.fixture.testfixture.html#$_tableLocator", "TestFixture::$connection": "class-cake.testsuite.fixture.testfixture.html#$connection", "TestFixture::$defaultTable": "class-cake.testsuite.fixture.testfixture.html#$defaultTable", "TestFixture::$fields": "class-cake.testsuite.fixture.testfixture.html#$fields", "TestFixture::$import": "class-cake.testsuite.fixture.testfixture.html#$import", "TestFixture::$records": "class-cake.testsuite.fixture.testfixture.html#$records", "TestFixture::$table": "class-cake.testsuite.fixture.testfixture.html#$table", "TestFixture::__construct()()": "class-cake.testsuite.fixture.testfixture.html#__construct()", "TestFixture::_getRecords()()": "class-cake.testsuite.fixture.testfixture.html#_getRecords()", "TestFixture::_schemaFromFields()()": "class-cake.testsuite.fixture.testfixture.html#_schemaFromFields()", "TestFixture::_schemaFromImport()()": "class-cake.testsuite.fixture.testfixture.html#_schemaFromImport()", "TestFixture::_schemaFromReflection()()": "class-cake.testsuite.fixture.testfixture.html#_schemaFromReflection()", "TestFixture::_tableFromClass()()": "class-cake.testsuite.fixture.testfixture.html#_tableFromClass()", "TestFixture::connection()()": "class-cake.testsuite.fixture.testfixture.html#connection()", "TestFixture::create()()": "class-cake.testsuite.fixture.testfixture.html#create()", "TestFixture::createConstraints()()": "class-cake.testsuite.fixture.testfixture.html#createConstraints()", "TestFixture::drop()()": "class-cake.testsuite.fixture.testfixture.html#drop()", "TestFixture::dropConstraints()()": "class-cake.testsuite.fixture.testfixture.html#dropConstraints()", "TestFixture::fetchTable()()": "class-cake.testsuite.fixture.testfixture.html#fetchTable()", "TestFixture::getTableLocator()()": "class-cake.testsuite.fixture.testfixture.html#getTableLocator()", "TestFixture::getTableSchema()()": "class-cake.testsuite.fixture.testfixture.html#getTableSchema()", "TestFixture::init()()": "class-cake.testsuite.fixture.testfixture.html#init()", "TestFixture::insert()()": "class-cake.testsuite.fixture.testfixture.html#insert()", "TestFixture::setTableLocator()()": "class-cake.testsuite.fixture.testfixture.html#setTableLocator()", "TestFixture::setTableSchema()()": "class-cake.testsuite.fixture.testfixture.html#setTableSchema()", "TestFixture::sourceName()()": "class-cake.testsuite.fixture.testfixture.html#sourceName()", "TestFixture::truncate()()": "class-cake.testsuite.fixture.testfixture.html#truncate()", "TestListenerTrait (trait)": "trait-cake.testsuite.testlistenertrait.html", "TestSession (class)": "class-cake.testsuite.testsession.html", "TestSession::$session": "class-cake.testsuite.testsession.html#$session", "TestSession::__construct()()": "class-cake.testsuite.testsession.html#__construct()", "TestSession::check()()": "class-cake.testsuite.testsession.html#check()", "TestSession::read()()": "class-cake.testsuite.testsession.html#read()", "TestSuite (class)": "class-cake.testsuite.testsuite.html", "TestSuite (namespace)": "namespace-cake.testsuite.html", "TestSuite::$backupGlobals": "class-cake.testsuite.testsuite.html#$backupGlobals", "TestSuite::$backupStaticAttributes": "class-cake.testsuite.testsuite.html#$backupStaticAttributes", "TestSuite::$foundClasses": "class-cake.testsuite.testsuite.html#$foundClasses", "TestSuite::$groups": "class-cake.testsuite.testsuite.html#$groups", "TestSuite::$name": "class-cake.testsuite.testsuite.html#$name", "TestSuite::$numTests": "class-cake.testsuite.testsuite.html#$numTests", "TestSuite::$providedTests": "class-cake.testsuite.testsuite.html#$providedTests", "TestSuite::$requiredTests": "class-cake.testsuite.testsuite.html#$requiredTests", "TestSuite::$runTestInSeparateProcess": "class-cake.testsuite.testsuite.html#$runTestInSeparateProcess", "TestSuite::$testCase": "class-cake.testsuite.testsuite.html#$testCase", "TestSuite::$tests": "class-cake.testsuite.testsuite.html#$tests", "TestSuite::__construct()()": "class-cake.testsuite.testsuite.html#__construct()", "TestSuite::addTest()()": "class-cake.testsuite.testsuite.html#addTest()", "TestSuite::addTestDirectory()()": "class-cake.testsuite.testsuite.html#addTestDirectory()", "TestSuite::addTestDirectoryRecursive()()": "class-cake.testsuite.testsuite.html#addTestDirectoryRecursive()", "TestSuite::addTestFile()()": "class-cake.testsuite.testsuite.html#addTestFile()", "TestSuite::addTestFiles()()": "class-cake.testsuite.testsuite.html#addTestFiles()", "TestSuite::addTestMethod()()": "class-cake.testsuite.testsuite.html#addTestMethod()", "TestSuite::addTestSuite()()": "class-cake.testsuite.testsuite.html#addTestSuite()", "TestSuite::addWarning()()": "class-cake.testsuite.testsuite.html#addWarning()", "TestSuite::count()()": "class-cake.testsuite.testsuite.html#count()", "TestSuite::createResult()()": "class-cake.testsuite.testsuite.html#createResult()", "TestSuite::getGroupDetails()()": "class-cake.testsuite.testsuite.html#getGroupDetails()", "TestSuite::getGroups()()": "class-cake.testsuite.testsuite.html#getGroups()", "TestSuite::getIterator()()": "class-cake.testsuite.testsuite.html#getIterator()", "TestSuite::getName()()": "class-cake.testsuite.testsuite.html#getName()", "TestSuite::injectFilter()()": "class-cake.testsuite.testsuite.html#injectFilter()", "TestSuite::markTestSuiteSkipped()()": "class-cake.testsuite.testsuite.html#markTestSuiteSkipped()", "TestSuite::provides()()": "class-cake.testsuite.testsuite.html#provides()", "TestSuite::requires()()": "class-cake.testsuite.testsuite.html#requires()", "TestSuite::run()()": "class-cake.testsuite.testsuite.html#run()", "TestSuite::setBackupGlobals()()": "class-cake.testsuite.testsuite.html#setBackupGlobals()", "TestSuite::setBackupStaticAttributes()()": "class-cake.testsuite.testsuite.html#setBackupStaticAttributes()", "TestSuite::setBeStrictAboutChangesToGlobalState()()": "class-cake.testsuite.testsuite.html#setBeStrictAboutChangesToGlobalState()", "TestSuite::setGroupDetails()()": "class-cake.testsuite.testsuite.html#setGroupDetails()", "TestSuite::setName()()": "class-cake.testsuite.testsuite.html#setName()", "TestSuite::setRunTestInSeparateProcess()()": "class-cake.testsuite.testsuite.html#setRunTestInSeparateProcess()", "TestSuite::setTests()()": "class-cake.testsuite.testsuite.html#setTests()", "TestSuite::sortId()()": "class-cake.testsuite.testsuite.html#sortId()", "TestSuite::tests()()": "class-cake.testsuite.testsuite.html#tests()", "TestSuite::toString()()": "class-cake.testsuite.testsuite.html#toString()", "TestSuite::warnings()()": "class-cake.testsuite.testsuite.html#warnings()", "TestSuite\\Constraint (namespace)": "namespace-cake.testsuite.constraint.html", "TestSuite\\Constraint\\Email (namespace)": "namespace-cake.testsuite.constraint.email.html", "TestSuite\\Constraint\\Response (namespace)": "namespace-cake.testsuite.constraint.response.html", "TestSuite\\Constraint\\Session (namespace)": "namespace-cake.testsuite.constraint.session.html", "TestSuite\\Constraint\\View (namespace)": "namespace-cake.testsuite.constraint.view.html", "TestSuite\\Fixture (namespace)": "namespace-cake.testsuite.fixture.html", "TestSuite\\Stub (namespace)": "namespace-cake.testsuite.stub.html", "Text (class)": "class-cake.utility.text.html", "Text::$_defaultHtmlNoCount": "class-cake.utility.text.html#$_defaultHtmlNoCount", "Text::$_defaultTransliterator": "class-cake.utility.text.html#$_defaultTransliterator", "Text::$_defaultTransliteratorId": "class-cake.utility.text.html#$_defaultTransliteratorId", "Text::_removeLastWord()()": "class-cake.utility.text.html#_removeLastWord()", "Text::_strlen()()": "class-cake.utility.text.html#_strlen()", "Text::_substr()()": "class-cake.utility.text.html#_substr()", "Text::_wordWrap()()": "class-cake.utility.text.html#_wordWrap()", "Text::ascii()()": "class-cake.utility.text.html#ascii()", "Text::cleanInsert()()": "class-cake.utility.text.html#cleanInsert()", "Text::excerpt()()": "class-cake.utility.text.html#excerpt()", "Text::getTransliterator()()": "class-cake.utility.text.html#getTransliterator()", "Text::getTransliteratorId()()": "class-cake.utility.text.html#getTransliteratorId()", "Text::highlight()()": "class-cake.utility.text.html#highlight()", "Text::insert()()": "class-cake.utility.text.html#insert()", "Text::isMultibyte()()": "class-cake.utility.text.html#isMultibyte()", "Text::parseFileSize()()": "class-cake.utility.text.html#parseFileSize()", "Text::setTransliterator()()": "class-cake.utility.text.html#setTransliterator()", "Text::setTransliteratorId()()": "class-cake.utility.text.html#setTransliteratorId()", "Text::slug()()": "class-cake.utility.text.html#slug()", "Text::tail()()": "class-cake.utility.text.html#tail()", "Text::tokenize()()": "class-cake.utility.text.html#tokenize()", "Text::toList()()": "class-cake.utility.text.html#toList()", "Text::transliterate()()": "class-cake.utility.text.html#transliterate()", "Text::truncate()()": "class-cake.utility.text.html#truncate()", "Text::truncateByWidth()()": "class-cake.utility.text.html#truncateByWidth()", "Text::utf8()()": "class-cake.utility.text.html#utf8()", "Text::uuid()()": "class-cake.utility.text.html#uuid()", "Text::wordWrap()()": "class-cake.utility.text.html#wordWrap()", "Text::wrap()()": "class-cake.utility.text.html#wrap()", "Text::wrapBlock()()": "class-cake.utility.text.html#wrapBlock()", "TextareaWidget (class)": "class-cake.view.widget.textareawidget.html", "TextareaWidget::$_templates": "class-cake.view.widget.textareawidget.html#$_templates", "TextareaWidget::$defaults": "class-cake.view.widget.textareawidget.html#$defaults", "TextareaWidget::__construct()()": "class-cake.view.widget.textareawidget.html#__construct()", "TextareaWidget::mergeDefaults()()": "class-cake.view.widget.textareawidget.html#mergeDefaults()", "TextareaWidget::render()()": "class-cake.view.widget.textareawidget.html#render()", "TextareaWidget::secureFields()()": "class-cake.view.widget.textareawidget.html#secureFields()", "TextareaWidget::setMaxLength()()": "class-cake.view.widget.textareawidget.html#setMaxLength()", "TextareaWidget::setRequired()()": "class-cake.view.widget.textareawidget.html#setRequired()", "TextareaWidget::setStep()()": "class-cake.view.widget.textareawidget.html#setStep()", "TextErrorRenderer (class)": "class-cake.error.renderer.texterrorrenderer.html", "TextErrorRenderer::render()()": "class-cake.error.renderer.texterrorrenderer.html#render()", "TextErrorRenderer::write()()": "class-cake.error.renderer.texterrorrenderer.html#write()", "TextExceptionRenderer (class)": "class-cake.error.renderer.textexceptionrenderer.html", "TextExceptionRenderer::__construct()()": "class-cake.error.renderer.textexceptionrenderer.html#__construct()", "TextExceptionRenderer::render()()": "class-cake.error.renderer.textexceptionrenderer.html#render()", "TextExceptionRenderer::write()()": "class-cake.error.renderer.textexceptionrenderer.html#write()", "TextFormatter (class)": "class-cake.error.debug.textformatter.html", "TextFormatter::dump()()": "class-cake.error.debug.textformatter.html#dump()", "TextFormatter::export()()": "class-cake.error.debug.textformatter.html#export()", "TextFormatter::exportArray()()": "class-cake.error.debug.textformatter.html#exportArray()", "TextFormatter::exportObject()()": "class-cake.error.debug.textformatter.html#exportObject()", "TextFormatter::formatWrapper()()": "class-cake.error.debug.textformatter.html#formatWrapper()", "TextHelper (class)": "class-cake.view.helper.texthelper.html", "TextHelper::$_config": "class-cake.view.helper.texthelper.html#$_config", "TextHelper::$_configInitialized": "class-cake.view.helper.texthelper.html#$_configInitialized", "TextHelper::$_defaultConfig": "class-cake.view.helper.texthelper.html#$_defaultConfig", "TextHelper::$_engine": "class-cake.view.helper.texthelper.html#$_engine", "TextHelper::$_helperMap": "class-cake.view.helper.texthelper.html#$_helperMap", "TextHelper::$_placeholders": "class-cake.view.helper.texthelper.html#$_placeholders", "TextHelper::$_View": "class-cake.view.helper.texthelper.html#$_View", "TextHelper::$helpers": "class-cake.view.helper.texthelper.html#$helpers", "TextHelper::$Html": "class-cake.view.helper.texthelper.html#$Html", "TextHelper::__call()()": "class-cake.view.helper.texthelper.html#__call()", "TextHelper::__construct()()": "class-cake.view.helper.texthelper.html#__construct()", "TextHelper::__debugInfo()()": "class-cake.view.helper.texthelper.html#__debugInfo()", "TextHelper::__get()()": "class-cake.view.helper.texthelper.html#__get()", "TextHelper::_configDelete()()": "class-cake.view.helper.texthelper.html#_configDelete()", "TextHelper::_configRead()()": "class-cake.view.helper.texthelper.html#_configRead()", "TextHelper::_configWrite()()": "class-cake.view.helper.texthelper.html#_configWrite()", "TextHelper::_confirm()()": "class-cake.view.helper.texthelper.html#_confirm()", "TextHelper::_insertPlaceHolder()()": "class-cake.view.helper.texthelper.html#_insertPlaceHolder()", "TextHelper::_linkEmails()()": "class-cake.view.helper.texthelper.html#_linkEmails()", "TextHelper::_linkUrls()()": "class-cake.view.helper.texthelper.html#_linkUrls()", "TextHelper::addClass()()": "class-cake.view.helper.texthelper.html#addClass()", "TextHelper::autoLink()()": "class-cake.view.helper.texthelper.html#autoLink()", "TextHelper::autoLinkEmails()()": "class-cake.view.helper.texthelper.html#autoLinkEmails()", "TextHelper::autoLinkUrls()()": "class-cake.view.helper.texthelper.html#autoLinkUrls()", "TextHelper::autoParagraph()()": "class-cake.view.helper.texthelper.html#autoParagraph()", "TextHelper::configShallow()()": "class-cake.view.helper.texthelper.html#configShallow()", "TextHelper::excerpt()()": "class-cake.view.helper.texthelper.html#excerpt()", "TextHelper::getConfig()()": "class-cake.view.helper.texthelper.html#getConfig()", "TextHelper::getConfigOrFail()()": "class-cake.view.helper.texthelper.html#getConfigOrFail()", "TextHelper::getView()()": "class-cake.view.helper.texthelper.html#getView()", "TextHelper::highlight()()": "class-cake.view.helper.texthelper.html#highlight()", "TextHelper::implementedEvents()()": "class-cake.view.helper.texthelper.html#implementedEvents()", "TextHelper::initialize()()": "class-cake.view.helper.texthelper.html#initialize()", "TextHelper::setConfig()()": "class-cake.view.helper.texthelper.html#setConfig()", "TextHelper::slug()()": "class-cake.view.helper.texthelper.html#slug()", "TextHelper::tail()()": "class-cake.view.helper.texthelper.html#tail()", "TextHelper::toList()()": "class-cake.view.helper.texthelper.html#toList()", "TextHelper::truncate()()": "class-cake.view.helper.texthelper.html#truncate()", "Time (class)": "class-cake.i18n.time.html", "Time::$_formatters": "class-cake.i18n.time.html#$_formatters", "Time::$_jsonEncodeFormat": "class-cake.i18n.time.html#$_jsonEncodeFormat", "Time::$_lastErrors": "class-cake.i18n.time.html#$_lastErrors", "Time::$_toStringFormat": "class-cake.i18n.time.html#$_toStringFormat", "Time::$age": "class-cake.i18n.time.html#$age", "Time::$day": "class-cake.i18n.time.html#$day", "Time::$dayOfWeek": "class-cake.i18n.time.html#$dayOfWeek", "Time::$dayOfWeekName": "class-cake.i18n.time.html#$dayOfWeekName", "Time::$dayOfYear": "class-cake.i18n.time.html#$dayOfYear", "Time::$days": "class-cake.i18n.time.html#$days", "Time::$daysInMonth": "class-cake.i18n.time.html#$daysInMonth", "Time::$defaultLocale": "class-cake.i18n.time.html#$defaultLocale", "Time::$diffFormatter": "class-cake.i18n.time.html#$diffFormatter", "Time::$dst": "class-cake.i18n.time.html#$dst", "Time::$hour": "class-cake.i18n.time.html#$hour", "Time::$lenientParsing": "class-cake.i18n.time.html#$lenientParsing", "Time::$local": "class-cake.i18n.time.html#$local", "Time::$micro": "class-cake.i18n.time.html#$micro", "Time::$microsecond": "class-cake.i18n.time.html#$microsecond", "Time::$minute": "class-cake.i18n.time.html#$minute", "Time::$month": "class-cake.i18n.time.html#$month", "Time::$niceFormat": "class-cake.i18n.time.html#$niceFormat", "Time::$offset": "class-cake.i18n.time.html#$offset", "Time::$offsetHours": "class-cake.i18n.time.html#$offsetHours", "Time::$quarter": "class-cake.i18n.time.html#$quarter", "Time::$relativePattern": "class-cake.i18n.time.html#$relativePattern", "Time::$second": "class-cake.i18n.time.html#$second", "Time::$timestamp": "class-cake.i18n.time.html#$timestamp", "Time::$timezone": "class-cake.i18n.time.html#$timezone", "Time::$timezoneName": "class-cake.i18n.time.html#$timezoneName", "Time::$toStringFormat": "class-cake.i18n.time.html#$toStringFormat", "Time::$tz": "class-cake.i18n.time.html#$tz", "Time::$tzName": "class-cake.i18n.time.html#$tzName", "Time::$utc": "class-cake.i18n.time.html#$utc", "Time::$weekendDays": "class-cake.i18n.time.html#$weekendDays", "Time::$weekEndsAt": "class-cake.i18n.time.html#$weekEndsAt", "Time::$weekOfMonth": "class-cake.i18n.time.html#$weekOfMonth", "Time::$weekOfYear": "class-cake.i18n.time.html#$weekOfYear", "Time::$weekStartsAt": "class-cake.i18n.time.html#$weekStartsAt", "Time::$wordAccuracy": "class-cake.i18n.time.html#$wordAccuracy", "Time::$wordEnd": "class-cake.i18n.time.html#$wordEnd", "Time::$wordFormat": "class-cake.i18n.time.html#$wordFormat", "Time::$year": "class-cake.i18n.time.html#$year", "Time::$yearIso": "class-cake.i18n.time.html#$yearIso", "Time::__construct()()": "class-cake.i18n.time.html#__construct()", "Time::__debugInfo()()": "class-cake.i18n.time.html#__debugInfo()", "Time::__get()()": "class-cake.i18n.time.html#__get()", "Time::__isset()()": "class-cake.i18n.time.html#__isset()", "Time::__set()()": "class-cake.i18n.time.html#__set()", "Time::__toString()()": "class-cake.i18n.time.html#__toString()", "Time::_formatObject()()": "class-cake.i18n.time.html#_formatObject()", "Time::addDay()()": "class-cake.i18n.time.html#addDay()", "Time::addDays()()": "class-cake.i18n.time.html#addDays()", "Time::addHour()()": "class-cake.i18n.time.html#addHour()", "Time::addHours()()": "class-cake.i18n.time.html#addHours()", "Time::addMinute()()": "class-cake.i18n.time.html#addMinute()", "Time::addMinutes()()": "class-cake.i18n.time.html#addMinutes()", "Time::addMonth()()": "class-cake.i18n.time.html#addMonth()", "Time::addMonths()()": "class-cake.i18n.time.html#addMonths()", "Time::addMonthsWithOverflow()()": "class-cake.i18n.time.html#addMonthsWithOverflow()", "Time::addMonthWithOverflow()()": "class-cake.i18n.time.html#addMonthWithOverflow()", "Time::addSecond()()": "class-cake.i18n.time.html#addSecond()", "Time::addSeconds()()": "class-cake.i18n.time.html#addSeconds()", "Time::addWeek()()": "class-cake.i18n.time.html#addWeek()", "Time::addWeekday()()": "class-cake.i18n.time.html#addWeekday()", "Time::addWeekdays()()": "class-cake.i18n.time.html#addWeekdays()", "Time::addWeeks()()": "class-cake.i18n.time.html#addWeeks()", "Time::addYear()()": "class-cake.i18n.time.html#addYear()", "Time::addYears()()": "class-cake.i18n.time.html#addYears()", "Time::addYearsWithOverflow()()": "class-cake.i18n.time.html#addYearsWithOverflow()", "Time::addYearWithOverflow()()": "class-cake.i18n.time.html#addYearWithOverflow()", "Time::average()()": "class-cake.i18n.time.html#average()", "Time::between()()": "class-cake.i18n.time.html#between()", "Time::closest()()": "class-cake.i18n.time.html#closest()", "Time::copy()()": "class-cake.i18n.time.html#copy()", "Time::create()()": "class-cake.i18n.time.html#create()", "Time::createFromArray()()": "class-cake.i18n.time.html#createFromArray()", "Time::createFromDate()()": "class-cake.i18n.time.html#createFromDate()", "Time::createFromFormat()()": "class-cake.i18n.time.html#createFromFormat()", "Time::createFromTime()()": "class-cake.i18n.time.html#createFromTime()", "Time::createFromTimestamp()()": "class-cake.i18n.time.html#createFromTimestamp()", "Time::createFromTimestampUTC()()": "class-cake.i18n.time.html#createFromTimestampUTC()", "Time::day()()": "class-cake.i18n.time.html#day()", "Time::diffFiltered()()": "class-cake.i18n.time.html#diffFiltered()", "Time::diffForHumans()()": "class-cake.i18n.time.html#diffForHumans()", "Time::diffFormatter()()": "class-cake.i18n.time.html#diffFormatter()", "Time::diffInDays()()": "class-cake.i18n.time.html#diffInDays()", "Time::diffInDaysFiltered()()": "class-cake.i18n.time.html#diffInDaysFiltered()", "Time::diffInHours()()": "class-cake.i18n.time.html#diffInHours()", "Time::diffInHoursFiltered()()": "class-cake.i18n.time.html#diffInHoursFiltered()", "Time::diffInMinutes()()": "class-cake.i18n.time.html#diffInMinutes()", "Time::diffInMonths()()": "class-cake.i18n.time.html#diffInMonths()", "Time::diffInMonthsIgnoreTimezone()()": "class-cake.i18n.time.html#diffInMonthsIgnoreTimezone()", "Time::diffInSeconds()()": "class-cake.i18n.time.html#diffInSeconds()", "Time::diffInWeekdays()()": "class-cake.i18n.time.html#diffInWeekdays()", "Time::diffInWeekendDays()()": "class-cake.i18n.time.html#diffInWeekendDays()", "Time::diffInWeeks()()": "class-cake.i18n.time.html#diffInWeeks()", "Time::diffInYears()()": "class-cake.i18n.time.html#diffInYears()", "Time::disableLenientParsing()()": "class-cake.i18n.time.html#disableLenientParsing()", "Time::enableLenientParsing()()": "class-cake.i18n.time.html#enableLenientParsing()", "Time::endOfCentury()()": "class-cake.i18n.time.html#endOfCentury()", "Time::endOfDay()()": "class-cake.i18n.time.html#endOfDay()", "Time::endOfDecade()()": "class-cake.i18n.time.html#endOfDecade()", "Time::endOfMonth()()": "class-cake.i18n.time.html#endOfMonth()", "Time::endOfWeek()()": "class-cake.i18n.time.html#endOfWeek()", "Time::endOfYear()()": "class-cake.i18n.time.html#endOfYear()", "Time::eq()()": "class-cake.i18n.time.html#eq()", "Time::equals()()": "class-cake.i18n.time.html#equals()", "Time::farthest()()": "class-cake.i18n.time.html#farthest()", "Time::firstOfMonth()()": "class-cake.i18n.time.html#firstOfMonth()", "Time::firstOfQuarter()()": "class-cake.i18n.time.html#firstOfQuarter()", "Time::firstOfYear()()": "class-cake.i18n.time.html#firstOfYear()", "Time::fromNow()()": "class-cake.i18n.time.html#fromNow()", "Time::getDefaultLocale()()": "class-cake.i18n.time.html#getDefaultLocale()", "Time::getDiffFormatter()()": "class-cake.i18n.time.html#getDiffFormatter()", "Time::getLastErrors()()": "class-cake.i18n.time.html#getLastErrors()", "Time::getTestNow()()": "class-cake.i18n.time.html#getTestNow()", "Time::getWeekendDays()()": "class-cake.i18n.time.html#getWeekendDays()", "Time::getWeekEndsAt()()": "class-cake.i18n.time.html#getWeekEndsAt()", "Time::getWeekStartsAt()()": "class-cake.i18n.time.html#getWeekStartsAt()", "Time::greaterThan()()": "class-cake.i18n.time.html#greaterThan()", "Time::greaterThanOrEquals()()": "class-cake.i18n.time.html#greaterThanOrEquals()", "Time::gt()()": "class-cake.i18n.time.html#gt()", "Time::gte()()": "class-cake.i18n.time.html#gte()", "Time::hasRelativeKeywords()()": "class-cake.i18n.time.html#hasRelativeKeywords()", "Time::hasTestNow()()": "class-cake.i18n.time.html#hasTestNow()", "Time::hour()()": "class-cake.i18n.time.html#hour()", "Time::i18nFormat()()": "class-cake.i18n.time.html#i18nFormat()", "Time::instance()()": "class-cake.i18n.time.html#instance()", "Time::isBirthday()()": "class-cake.i18n.time.html#isBirthday()", "Time::isFriday()()": "class-cake.i18n.time.html#isFriday()", "Time::isFuture()()": "class-cake.i18n.time.html#isFuture()", "Time::isLastMonth()()": "class-cake.i18n.time.html#isLastMonth()", "Time::isLastWeek()()": "class-cake.i18n.time.html#isLastWeek()", "Time::isLastYear()()": "class-cake.i18n.time.html#isLastYear()", "Time::isLeapYear()()": "class-cake.i18n.time.html#isLeapYear()", "Time::isMonday()()": "class-cake.i18n.time.html#isMonday()", "Time::isMutable()()": "class-cake.i18n.time.html#isMutable()", "Time::isNextMonth()()": "class-cake.i18n.time.html#isNextMonth()", "Time::isNextWeek()()": "class-cake.i18n.time.html#isNextWeek()", "Time::isNextYear()()": "class-cake.i18n.time.html#isNextYear()", "Time::isPast()()": "class-cake.i18n.time.html#isPast()", "Time::isSameDay()()": "class-cake.i18n.time.html#isSameDay()", "Time::isSaturday()()": "class-cake.i18n.time.html#isSaturday()", "Time::isSunday()()": "class-cake.i18n.time.html#isSunday()", "Time::isThisMonth()()": "class-cake.i18n.time.html#isThisMonth()", "Time::isThisWeek()()": "class-cake.i18n.time.html#isThisWeek()", "Time::isThisYear()()": "class-cake.i18n.time.html#isThisYear()", "Time::isThursday()()": "class-cake.i18n.time.html#isThursday()", "Time::isToday()()": "class-cake.i18n.time.html#isToday()", "Time::isTomorrow()()": "class-cake.i18n.time.html#isTomorrow()", "Time::isTuesday()()": "class-cake.i18n.time.html#isTuesday()", "Time::isWednesday()()": "class-cake.i18n.time.html#isWednesday()", "Time::isWeekday()()": "class-cake.i18n.time.html#isWeekday()", "Time::isWeekend()()": "class-cake.i18n.time.html#isWeekend()", "Time::isWithinNext()()": "class-cake.i18n.time.html#isWithinNext()", "Time::isYesterday()()": "class-cake.i18n.time.html#isYesterday()", "Time::jsonSerialize()()": "class-cake.i18n.time.html#jsonSerialize()", "Time::lastOfMonth()()": "class-cake.i18n.time.html#lastOfMonth()", "Time::lastOfQuarter()()": "class-cake.i18n.time.html#lastOfQuarter()", "Time::lastOfYear()()": "class-cake.i18n.time.html#lastOfYear()", "Time::lenientParsingEnabled()()": "class-cake.i18n.time.html#lenientParsingEnabled()", "Time::lessThan()()": "class-cake.i18n.time.html#lessThan()", "Time::lessThanOrEquals()()": "class-cake.i18n.time.html#lessThanOrEquals()", "Time::listTimezones()()": "class-cake.i18n.time.html#listTimezones()", "Time::lt()()": "class-cake.i18n.time.html#lt()", "Time::lte()()": "class-cake.i18n.time.html#lte()", "Time::max()()": "class-cake.i18n.time.html#max()", "Time::maxValue()()": "class-cake.i18n.time.html#maxValue()", "Time::microsecond()()": "class-cake.i18n.time.html#microsecond()", "Time::min()()": "class-cake.i18n.time.html#min()", "Time::minute()()": "class-cake.i18n.time.html#minute()", "Time::minValue()()": "class-cake.i18n.time.html#minValue()", "Time::modify()()": "class-cake.i18n.time.html#modify()", "Time::month()()": "class-cake.i18n.time.html#month()", "Time::ne()()": "class-cake.i18n.time.html#ne()", "Time::next()()": "class-cake.i18n.time.html#next()", "Time::nice()()": "class-cake.i18n.time.html#nice()", "Time::notEquals()()": "class-cake.i18n.time.html#notEquals()", "Time::now()()": "class-cake.i18n.time.html#now()", "Time::nthOfMonth()()": "class-cake.i18n.time.html#nthOfMonth()", "Time::nthOfQuarter()()": "class-cake.i18n.time.html#nthOfQuarter()", "Time::nthOfYear()()": "class-cake.i18n.time.html#nthOfYear()", "Time::parse()()": "class-cake.i18n.time.html#parse()", "Time::parseDate()()": "class-cake.i18n.time.html#parseDate()", "Time::parseDateTime()()": "class-cake.i18n.time.html#parseDateTime()", "Time::parseTime()()": "class-cake.i18n.time.html#parseTime()", "Time::previous()()": "class-cake.i18n.time.html#previous()", "Time::resetToStringFormat()()": "class-cake.i18n.time.html#resetToStringFormat()", "Time::safeCreateDateTimeZone()()": "class-cake.i18n.time.html#safeCreateDateTimeZone()", "Time::second()()": "class-cake.i18n.time.html#second()", "Time::secondsSinceMidnight()()": "class-cake.i18n.time.html#secondsSinceMidnight()", "Time::secondsUntilEndOfDay()()": "class-cake.i18n.time.html#secondsUntilEndOfDay()", "Time::setDate()()": "class-cake.i18n.time.html#setDate()", "Time::setDateTime()()": "class-cake.i18n.time.html#setDateTime()", "Time::setDefaultLocale()()": "class-cake.i18n.time.html#setDefaultLocale()", "Time::setDiffFormatter()()": "class-cake.i18n.time.html#setDiffFormatter()", "Time::setJsonEncodeFormat()()": "class-cake.i18n.time.html#setJsonEncodeFormat()", "Time::setTestNow()()": "class-cake.i18n.time.html#setTestNow()", "Time::setTimeFromTimeString()()": "class-cake.i18n.time.html#setTimeFromTimeString()", "Time::setTimezone()()": "class-cake.i18n.time.html#setTimezone()", "Time::setToStringFormat()()": "class-cake.i18n.time.html#setToStringFormat()", "Time::setWeekendDays()()": "class-cake.i18n.time.html#setWeekendDays()", "Time::setWeekEndsAt()()": "class-cake.i18n.time.html#setWeekEndsAt()", "Time::setWeekStartsAt()()": "class-cake.i18n.time.html#setWeekStartsAt()", "Time::startOfCentury()()": "class-cake.i18n.time.html#startOfCentury()", "Time::startOfDay()()": "class-cake.i18n.time.html#startOfDay()", "Time::startOfDecade()()": "class-cake.i18n.time.html#startOfDecade()", "Time::startOfMonth()()": "class-cake.i18n.time.html#startOfMonth()", "Time::startOfWeek()()": "class-cake.i18n.time.html#startOfWeek()", "Time::startOfYear()()": "class-cake.i18n.time.html#startOfYear()", "Time::subDay()()": "class-cake.i18n.time.html#subDay()", "Time::subDays()()": "class-cake.i18n.time.html#subDays()", "Time::subHour()()": "class-cake.i18n.time.html#subHour()", "Time::subHours()()": "class-cake.i18n.time.html#subHours()", "Time::subMinute()()": "class-cake.i18n.time.html#subMinute()", "Time::subMinutes()()": "class-cake.i18n.time.html#subMinutes()", "Time::subMonth()()": "class-cake.i18n.time.html#subMonth()", "Time::subMonths()()": "class-cake.i18n.time.html#subMonths()", "Time::subMonthsWithOverflow()()": "class-cake.i18n.time.html#subMonthsWithOverflow()", "Time::subMonthWithOverflow()()": "class-cake.i18n.time.html#subMonthWithOverflow()", "Time::subSecond()()": "class-cake.i18n.time.html#subSecond()", "Time::subSeconds()()": "class-cake.i18n.time.html#subSeconds()", "Time::subWeek()()": "class-cake.i18n.time.html#subWeek()", "Time::subWeekday()()": "class-cake.i18n.time.html#subWeekday()", "Time::subWeekdays()()": "class-cake.i18n.time.html#subWeekdays()", "Time::subWeeks()()": "class-cake.i18n.time.html#subWeeks()", "Time::subYear()()": "class-cake.i18n.time.html#subYear()", "Time::subYears()()": "class-cake.i18n.time.html#subYears()", "Time::subYearsWithOverflow()()": "class-cake.i18n.time.html#subYearsWithOverflow()", "Time::subYearWithOverflow()()": "class-cake.i18n.time.html#subYearWithOverflow()", "Time::timeAgoInWords()()": "class-cake.i18n.time.html#timeAgoInWords()", "Time::timestamp()()": "class-cake.i18n.time.html#timestamp()", "Time::timezone()()": "class-cake.i18n.time.html#timezone()", "Time::toAtomString()()": "class-cake.i18n.time.html#toAtomString()", "Time::toCookieString()()": "class-cake.i18n.time.html#toCookieString()", "Time::toDateString()()": "class-cake.i18n.time.html#toDateString()", "Time::toDateTimeString()()": "class-cake.i18n.time.html#toDateTimeString()", "Time::today()()": "class-cake.i18n.time.html#today()", "Time::toDayDateTimeString()()": "class-cake.i18n.time.html#toDayDateTimeString()", "Time::toFormattedDateString()()": "class-cake.i18n.time.html#toFormattedDateString()", "Time::toImmutable()()": "class-cake.i18n.time.html#toImmutable()", "Time::toIso8601String()()": "class-cake.i18n.time.html#toIso8601String()", "Time::tomorrow()()": "class-cake.i18n.time.html#tomorrow()", "Time::toQuarter()()": "class-cake.i18n.time.html#toQuarter()", "Time::toRfc1036String()()": "class-cake.i18n.time.html#toRfc1036String()", "Time::toRfc1123String()()": "class-cake.i18n.time.html#toRfc1123String()", "Time::toRfc2822String()()": "class-cake.i18n.time.html#toRfc2822String()", "Time::toRfc3339String()()": "class-cake.i18n.time.html#toRfc3339String()", "Time::toRfc822String()()": "class-cake.i18n.time.html#toRfc822String()", "Time::toRfc850String()()": "class-cake.i18n.time.html#toRfc850String()", "Time::toRssString()()": "class-cake.i18n.time.html#toRssString()", "Time::toTimeString()()": "class-cake.i18n.time.html#toTimeString()", "Time::toUnixString()()": "class-cake.i18n.time.html#toUnixString()", "Time::toW3cString()()": "class-cake.i18n.time.html#toW3cString()", "Time::toWeek()()": "class-cake.i18n.time.html#toWeek()", "Time::tz()()": "class-cake.i18n.time.html#tz()", "Time::wasWithinLast()()": "class-cake.i18n.time.html#wasWithinLast()", "Time::year()()": "class-cake.i18n.time.html#year()", "Time::yesterday()()": "class-cake.i18n.time.html#yesterday()", "TimeHelper (class)": "class-cake.view.helper.timehelper.html", "TimeHelper::$_config": "class-cake.view.helper.timehelper.html#$_config", "TimeHelper::$_configInitialized": "class-cake.view.helper.timehelper.html#$_configInitialized", "TimeHelper::$_defaultConfig": "class-cake.view.helper.timehelper.html#$_defaultConfig", "TimeHelper::$_helperMap": "class-cake.view.helper.timehelper.html#$_helperMap", "TimeHelper::$_templater": "class-cake.view.helper.timehelper.html#$_templater", "TimeHelper::$_View": "class-cake.view.helper.timehelper.html#$_View", "TimeHelper::$helpers": "class-cake.view.helper.timehelper.html#$helpers", "TimeHelper::__call()()": "class-cake.view.helper.timehelper.html#__call()", "TimeHelper::__construct()()": "class-cake.view.helper.timehelper.html#__construct()", "TimeHelper::__debugInfo()()": "class-cake.view.helper.timehelper.html#__debugInfo()", "TimeHelper::__get()()": "class-cake.view.helper.timehelper.html#__get()", "TimeHelper::_configDelete()()": "class-cake.view.helper.timehelper.html#_configDelete()", "TimeHelper::_configRead()()": "class-cake.view.helper.timehelper.html#_configRead()", "TimeHelper::_configWrite()()": "class-cake.view.helper.timehelper.html#_configWrite()", "TimeHelper::_confirm()()": "class-cake.view.helper.timehelper.html#_confirm()", "TimeHelper::_getTimezone()()": "class-cake.view.helper.timehelper.html#_getTimezone()", "TimeHelper::addClass()()": "class-cake.view.helper.timehelper.html#addClass()", "TimeHelper::configShallow()()": "class-cake.view.helper.timehelper.html#configShallow()", "TimeHelper::format()()": "class-cake.view.helper.timehelper.html#format()", "TimeHelper::formatTemplate()()": "class-cake.view.helper.timehelper.html#formatTemplate()", "TimeHelper::fromString()()": "class-cake.view.helper.timehelper.html#fromString()", "TimeHelper::getConfig()()": "class-cake.view.helper.timehelper.html#getConfig()", "TimeHelper::getConfigOrFail()()": "class-cake.view.helper.timehelper.html#getConfigOrFail()", "TimeHelper::getTemplates()()": "class-cake.view.helper.timehelper.html#getTemplates()", "TimeHelper::getView()()": "class-cake.view.helper.timehelper.html#getView()", "TimeHelper::gmt()()": "class-cake.view.helper.timehelper.html#gmt()", "TimeHelper::i18nFormat()()": "class-cake.view.helper.timehelper.html#i18nFormat()", "TimeHelper::implementedEvents()()": "class-cake.view.helper.timehelper.html#implementedEvents()", "TimeHelper::initialize()()": "class-cake.view.helper.timehelper.html#initialize()", "TimeHelper::isFuture()()": "class-cake.view.helper.timehelper.html#isFuture()", "TimeHelper::isPast()()": "class-cake.view.helper.timehelper.html#isPast()", "TimeHelper::isThisMonth()()": "class-cake.view.helper.timehelper.html#isThisMonth()", "TimeHelper::isThisWeek()()": "class-cake.view.helper.timehelper.html#isThisWeek()", "TimeHelper::isThisYear()()": "class-cake.view.helper.timehelper.html#isThisYear()", "TimeHelper::isToday()()": "class-cake.view.helper.timehelper.html#isToday()", "TimeHelper::isTomorrow()()": "class-cake.view.helper.timehelper.html#isTomorrow()", "TimeHelper::isWithinNext()()": "class-cake.view.helper.timehelper.html#isWithinNext()", "TimeHelper::nice()()": "class-cake.view.helper.timehelper.html#nice()", "TimeHelper::setConfig()()": "class-cake.view.helper.timehelper.html#setConfig()", "TimeHelper::setTemplates()()": "class-cake.view.helper.timehelper.html#setTemplates()", "TimeHelper::templater()()": "class-cake.view.helper.timehelper.html#templater()", "TimeHelper::timeAgoInWords()()": "class-cake.view.helper.timehelper.html#timeAgoInWords()", "TimeHelper::toAtom()()": "class-cake.view.helper.timehelper.html#toAtom()", "TimeHelper::toQuarter()()": "class-cake.view.helper.timehelper.html#toQuarter()", "TimeHelper::toRss()()": "class-cake.view.helper.timehelper.html#toRss()", "TimeHelper::toUnix()()": "class-cake.view.helper.timehelper.html#toUnix()", "TimeHelper::wasWithinLast()()": "class-cake.view.helper.timehelper.html#wasWithinLast()", "TimeHelper::wasYesterday()()": "class-cake.view.helper.timehelper.html#wasYesterday()", "TimestampBehavior (class)": "class-cake.orm.behavior.timestampbehavior.html", "TimestampBehavior::$_config": "class-cake.orm.behavior.timestampbehavior.html#$_config", "TimestampBehavior::$_configInitialized": "class-cake.orm.behavior.timestampbehavior.html#$_configInitialized", "TimestampBehavior::$_defaultConfig": "class-cake.orm.behavior.timestampbehavior.html#$_defaultConfig", "TimestampBehavior::$_reflectionCache": "class-cake.orm.behavior.timestampbehavior.html#$_reflectionCache", "TimestampBehavior::$_table": "class-cake.orm.behavior.timestampbehavior.html#$_table", "TimestampBehavior::$_ts": "class-cake.orm.behavior.timestampbehavior.html#$_ts", "TimestampBehavior::__construct()()": "class-cake.orm.behavior.timestampbehavior.html#__construct()", "TimestampBehavior::_configDelete()()": "class-cake.orm.behavior.timestampbehavior.html#_configDelete()", "TimestampBehavior::_configRead()()": "class-cake.orm.behavior.timestampbehavior.html#_configRead()", "TimestampBehavior::_configWrite()()": "class-cake.orm.behavior.timestampbehavior.html#_configWrite()", "TimestampBehavior::_reflectionCache()()": "class-cake.orm.behavior.timestampbehavior.html#_reflectionCache()", "TimestampBehavior::_resolveMethodAliases()()": "class-cake.orm.behavior.timestampbehavior.html#_resolveMethodAliases()", "TimestampBehavior::_updateField()()": "class-cake.orm.behavior.timestampbehavior.html#_updateField()", "TimestampBehavior::configShallow()()": "class-cake.orm.behavior.timestampbehavior.html#configShallow()", "TimestampBehavior::getConfig()()": "class-cake.orm.behavior.timestampbehavior.html#getConfig()", "TimestampBehavior::getConfigOrFail()()": "class-cake.orm.behavior.timestampbehavior.html#getConfigOrFail()", "TimestampBehavior::getTable()()": "class-cake.orm.behavior.timestampbehavior.html#getTable()", "TimestampBehavior::handleEvent()()": "class-cake.orm.behavior.timestampbehavior.html#handleEvent()", "TimestampBehavior::implementedEvents()()": "class-cake.orm.behavior.timestampbehavior.html#implementedEvents()", "TimestampBehavior::implementedFinders()()": "class-cake.orm.behavior.timestampbehavior.html#implementedFinders()", "TimestampBehavior::implementedMethods()()": "class-cake.orm.behavior.timestampbehavior.html#implementedMethods()", "TimestampBehavior::initialize()()": "class-cake.orm.behavior.timestampbehavior.html#initialize()", "TimestampBehavior::setConfig()()": "class-cake.orm.behavior.timestampbehavior.html#setConfig()", "TimestampBehavior::table()()": "class-cake.orm.behavior.timestampbehavior.html#table()", "TimestampBehavior::timestamp()()": "class-cake.orm.behavior.timestampbehavior.html#timestamp()", "TimestampBehavior::touch()()": "class-cake.orm.behavior.timestampbehavior.html#touch()", "TimestampBehavior::verifyConfig()()": "class-cake.orm.behavior.timestampbehavior.html#verifyConfig()", "TimeType (class)": "class-cake.database.type.timetype.html", "TimeType::$_className": "class-cake.database.type.timetype.html#$_className", "TimeType::$_format": "class-cake.database.type.timetype.html#$_format", "TimeType::$_localeMarshalFormat": "class-cake.database.type.timetype.html#$_localeMarshalFormat", "TimeType::$_marshalFormats": "class-cake.database.type.timetype.html#$_marshalFormats", "TimeType::$_name": "class-cake.database.type.timetype.html#$_name", "TimeType::$_useLocaleMarshal": "class-cake.database.type.timetype.html#$_useLocaleMarshal", "TimeType::$dbTimezone": "class-cake.database.type.timetype.html#$dbTimezone", "TimeType::$defaultTimezone": "class-cake.database.type.timetype.html#$defaultTimezone", "TimeType::$keepDatabaseTimezone": "class-cake.database.type.timetype.html#$keepDatabaseTimezone", "TimeType::$setToDateStart": "class-cake.database.type.timetype.html#$setToDateStart", "TimeType::$userTimezone": "class-cake.database.type.timetype.html#$userTimezone", "TimeType::__construct()()": "class-cake.database.type.timetype.html#__construct()", "TimeType::_parseLocaleValue()()": "class-cake.database.type.timetype.html#_parseLocaleValue()", "TimeType::_parseValue()()": "class-cake.database.type.timetype.html#_parseValue()", "TimeType::_setClassName()()": "class-cake.database.type.timetype.html#_setClassName()", "TimeType::getBaseType()()": "class-cake.database.type.timetype.html#getBaseType()", "TimeType::getDateTimeClassName()()": "class-cake.database.type.timetype.html#getDateTimeClassName()", "TimeType::getName()()": "class-cake.database.type.timetype.html#getName()", "TimeType::manyToPHP()()": "class-cake.database.type.timetype.html#manyToPHP()", "TimeType::marshal()()": "class-cake.database.type.timetype.html#marshal()", "TimeType::newId()()": "class-cake.database.type.timetype.html#newId()", "TimeType::setDatabaseTimezone()()": "class-cake.database.type.timetype.html#setDatabaseTimezone()", "TimeType::setKeepDatabaseTimezone()()": "class-cake.database.type.timetype.html#setKeepDatabaseTimezone()", "TimeType::setLocaleFormat()()": "class-cake.database.type.timetype.html#setLocaleFormat()", "TimeType::setTimezone()()": "class-cake.database.type.timetype.html#setTimezone()", "TimeType::setUserTimezone()()": "class-cake.database.type.timetype.html#setUserTimezone()", "TimeType::toDatabase()()": "class-cake.database.type.timetype.html#toDatabase()", "TimeType::toPHP()()": "class-cake.database.type.timetype.html#toPHP()", "TimeType::toStatement()()": "class-cake.database.type.timetype.html#toStatement()", "TimeType::useImmutable()()": "class-cake.database.type.timetype.html#useImmutable()", "TimeType::useLocaleParser()()": "class-cake.database.type.timetype.html#useLocaleParser()", "TimeType::useMutable()()": "class-cake.database.type.timetype.html#useMutable()", "TransactionStrategy (class)": "class-cake.testsuite.fixture.transactionstrategy.html", "TransactionStrategy::$fixtures": "class-cake.testsuite.fixture.transactionstrategy.html#$fixtures", "TransactionStrategy::$helper": "class-cake.testsuite.fixture.transactionstrategy.html#$helper", "TransactionStrategy::__construct()()": "class-cake.testsuite.fixture.transactionstrategy.html#__construct()", "TransactionStrategy::setupTest()()": "class-cake.testsuite.fixture.transactionstrategy.html#setupTest()", "TransactionStrategy::teardownTest()()": "class-cake.testsuite.fixture.transactionstrategy.html#teardownTest()", "TranslateBehavior (class)": "class-cake.orm.behavior.translatebehavior.html", "TranslateBehavior::$_config": "class-cake.orm.behavior.translatebehavior.html#$_config", "TranslateBehavior::$_configInitialized": "class-cake.orm.behavior.translatebehavior.html#$_configInitialized", "TranslateBehavior::$_defaultConfig": "class-cake.orm.behavior.translatebehavior.html#$_defaultConfig", "TranslateBehavior::$_reflectionCache": "class-cake.orm.behavior.translatebehavior.html#$_reflectionCache", "TranslateBehavior::$_table": "class-cake.orm.behavior.translatebehavior.html#$_table", "TranslateBehavior::$defaultStrategyClass": "class-cake.orm.behavior.translatebehavior.html#$defaultStrategyClass", "TranslateBehavior::$strategy": "class-cake.orm.behavior.translatebehavior.html#$strategy", "TranslateBehavior::__call()()": "class-cake.orm.behavior.translatebehavior.html#__call()", "TranslateBehavior::__construct()()": "class-cake.orm.behavior.translatebehavior.html#__construct()", "TranslateBehavior::_configDelete()()": "class-cake.orm.behavior.translatebehavior.html#_configDelete()", "TranslateBehavior::_configRead()()": "class-cake.orm.behavior.translatebehavior.html#_configRead()", "TranslateBehavior::_configWrite()()": "class-cake.orm.behavior.translatebehavior.html#_configWrite()", "TranslateBehavior::_reflectionCache()()": "class-cake.orm.behavior.translatebehavior.html#_reflectionCache()", "TranslateBehavior::_resolveMethodAliases()()": "class-cake.orm.behavior.translatebehavior.html#_resolveMethodAliases()", "TranslateBehavior::buildMarshalMap()()": "class-cake.orm.behavior.translatebehavior.html#buildMarshalMap()", "TranslateBehavior::configShallow()()": "class-cake.orm.behavior.translatebehavior.html#configShallow()", "TranslateBehavior::createStrategy()()": "class-cake.orm.behavior.translatebehavior.html#createStrategy()", "TranslateBehavior::findTranslations()()": "class-cake.orm.behavior.translatebehavior.html#findTranslations()", "TranslateBehavior::getConfig()()": "class-cake.orm.behavior.translatebehavior.html#getConfig()", "TranslateBehavior::getConfigOrFail()()": "class-cake.orm.behavior.translatebehavior.html#getConfigOrFail()", "TranslateBehavior::getDefaultStrategyClass()()": "class-cake.orm.behavior.translatebehavior.html#getDefaultStrategyClass()", "TranslateBehavior::getLocale()()": "class-cake.orm.behavior.translatebehavior.html#getLocale()", "TranslateBehavior::getStrategy()()": "class-cake.orm.behavior.translatebehavior.html#getStrategy()", "TranslateBehavior::getTable()()": "class-cake.orm.behavior.translatebehavior.html#getTable()", "TranslateBehavior::implementedEvents()()": "class-cake.orm.behavior.translatebehavior.html#implementedEvents()", "TranslateBehavior::implementedFinders()()": "class-cake.orm.behavior.translatebehavior.html#implementedFinders()", "TranslateBehavior::implementedMethods()()": "class-cake.orm.behavior.translatebehavior.html#implementedMethods()", "TranslateBehavior::initialize()()": "class-cake.orm.behavior.translatebehavior.html#initialize()", "TranslateBehavior::referenceName()()": "class-cake.orm.behavior.translatebehavior.html#referenceName()", "TranslateBehavior::setConfig()()": "class-cake.orm.behavior.translatebehavior.html#setConfig()", "TranslateBehavior::setDefaultStrategyClass()()": "class-cake.orm.behavior.translatebehavior.html#setDefaultStrategyClass()", "TranslateBehavior::setLocale()()": "class-cake.orm.behavior.translatebehavior.html#setLocale()", "TranslateBehavior::setStrategy()()": "class-cake.orm.behavior.translatebehavior.html#setStrategy()", "TranslateBehavior::table()()": "class-cake.orm.behavior.translatebehavior.html#table()", "TranslateBehavior::translationField()()": "class-cake.orm.behavior.translatebehavior.html#translationField()", "TranslateBehavior::verifyConfig()()": "class-cake.orm.behavior.translatebehavior.html#verifyConfig()", "TranslateStrategyInterface (interface)": "interface-cake.orm.behavior.translate.translatestrategyinterface.html", "TranslateStrategyTrait (trait)": "trait-cake.orm.behavior.translate.translatestrategytrait.html", "TranslateTrait (trait)": "trait-cake.orm.behavior.translate.translatetrait.html", "Translator (class)": "class-cake.i18n.translator.html", "Translator::$fallback": "class-cake.i18n.translator.html#$fallback", "Translator::$formatter": "class-cake.i18n.translator.html#$formatter", "Translator::$locale": "class-cake.i18n.translator.html#$locale", "Translator::$package": "class-cake.i18n.translator.html#$package", "Translator::__construct()()": "class-cake.i18n.translator.html#__construct()", "Translator::getMessage()()": "class-cake.i18n.translator.html#getMessage()", "Translator::getPackage()()": "class-cake.i18n.translator.html#getPackage()", "Translator::resolveContext()()": "class-cake.i18n.translator.html#resolveContext()", "Translator::translate()()": "class-cake.i18n.translator.html#translate()", "TranslatorRegistry (class)": "class-cake.i18n.translatorregistry.html", "TranslatorRegistry::$_cacher": "class-cake.i18n.translatorregistry.html#$_cacher", "TranslatorRegistry::$_defaultFormatter": "class-cake.i18n.translatorregistry.html#$_defaultFormatter", "TranslatorRegistry::$_loaders": "class-cake.i18n.translatorregistry.html#$_loaders", "TranslatorRegistry::$_useFallback": "class-cake.i18n.translatorregistry.html#$_useFallback", "TranslatorRegistry::$formatters": "class-cake.i18n.translatorregistry.html#$formatters", "TranslatorRegistry::$locale": "class-cake.i18n.translatorregistry.html#$locale", "TranslatorRegistry::$packages": "class-cake.i18n.translatorregistry.html#$packages", "TranslatorRegistry::$registry": "class-cake.i18n.translatorregistry.html#$registry", "TranslatorRegistry::__construct()()": "class-cake.i18n.translatorregistry.html#__construct()", "TranslatorRegistry::_getTranslator()()": "class-cake.i18n.translatorregistry.html#_getTranslator()", "TranslatorRegistry::createInstance()()": "class-cake.i18n.translatorregistry.html#createInstance()", "TranslatorRegistry::defaultFormatter()()": "class-cake.i18n.translatorregistry.html#defaultFormatter()", "TranslatorRegistry::get()()": "class-cake.i18n.translatorregistry.html#get()", "TranslatorRegistry::getFormatters()()": "class-cake.i18n.translatorregistry.html#getFormatters()", "TranslatorRegistry::getLocale()()": "class-cake.i18n.translatorregistry.html#getLocale()", "TranslatorRegistry::getPackages()()": "class-cake.i18n.translatorregistry.html#getPackages()", "TranslatorRegistry::registerLoader()()": "class-cake.i18n.translatorregistry.html#registerLoader()", "TranslatorRegistry::setCacher()()": "class-cake.i18n.translatorregistry.html#setCacher()", "TranslatorRegistry::setFallbackPackage()()": "class-cake.i18n.translatorregistry.html#setFallbackPackage()", "TranslatorRegistry::setLoaderFallback()()": "class-cake.i18n.translatorregistry.html#setLoaderFallback()", "TranslatorRegistry::setLocale()()": "class-cake.i18n.translatorregistry.html#setLocale()", "TranslatorRegistry::useFallback()()": "class-cake.i18n.translatorregistry.html#useFallback()", "TransportFactory (class)": "class-cake.mailer.transportfactory.html", "TransportFactory::$_config": "class-cake.mailer.transportfactory.html#$_config", "TransportFactory::$_dsnClassMap": "class-cake.mailer.transportfactory.html#$_dsnClassMap", "TransportFactory::$_registry": "class-cake.mailer.transportfactory.html#$_registry", "TransportFactory::_buildTransport()()": "class-cake.mailer.transportfactory.html#_buildTransport()", "TransportFactory::configured()()": "class-cake.mailer.transportfactory.html#configured()", "TransportFactory::drop()()": "class-cake.mailer.transportfactory.html#drop()", "TransportFactory::get()()": "class-cake.mailer.transportfactory.html#get()", "TransportFactory::getConfig()()": "class-cake.mailer.transportfactory.html#getConfig()", "TransportFactory::getConfigOrFail()()": "class-cake.mailer.transportfactory.html#getConfigOrFail()", "TransportFactory::getDsnClassMap()()": "class-cake.mailer.transportfactory.html#getDsnClassMap()", "TransportFactory::getRegistry()()": "class-cake.mailer.transportfactory.html#getRegistry()", "TransportFactory::parseDsn()()": "class-cake.mailer.transportfactory.html#parseDsn()", "TransportFactory::setConfig()()": "class-cake.mailer.transportfactory.html#setConfig()", "TransportFactory::setDsnClassMap()()": "class-cake.mailer.transportfactory.html#setDsnClassMap()", "TransportFactory::setRegistry()()": "class-cake.mailer.transportfactory.html#setRegistry()", "TransportRegistry (class)": "class-cake.mailer.transportregistry.html", "TransportRegistry::$_loaded": "class-cake.mailer.transportregistry.html#$_loaded", "TransportRegistry::__debugInfo()()": "class-cake.mailer.transportregistry.html#__debugInfo()", "TransportRegistry::__get()()": "class-cake.mailer.transportregistry.html#__get()", "TransportRegistry::__isset()()": "class-cake.mailer.transportregistry.html#__isset()", "TransportRegistry::__set()()": "class-cake.mailer.transportregistry.html#__set()", "TransportRegistry::__unset()()": "class-cake.mailer.transportregistry.html#__unset()", "TransportRegistry::_checkDuplicate()()": "class-cake.mailer.transportregistry.html#_checkDuplicate()", "TransportRegistry::_create()()": "class-cake.mailer.transportregistry.html#_create()", "TransportRegistry::_resolveClassName()()": "class-cake.mailer.transportregistry.html#_resolveClassName()", "TransportRegistry::_throwMissingClassError()()": "class-cake.mailer.transportregistry.html#_throwMissingClassError()", "TransportRegistry::count()()": "class-cake.mailer.transportregistry.html#count()", "TransportRegistry::get()()": "class-cake.mailer.transportregistry.html#get()", "TransportRegistry::getIterator()()": "class-cake.mailer.transportregistry.html#getIterator()", "TransportRegistry::has()()": "class-cake.mailer.transportregistry.html#has()", "TransportRegistry::load()()": "class-cake.mailer.transportregistry.html#load()", "TransportRegistry::loaded()()": "class-cake.mailer.transportregistry.html#loaded()", "TransportRegistry::normalizeArray()()": "class-cake.mailer.transportregistry.html#normalizeArray()", "TransportRegistry::reset()()": "class-cake.mailer.transportregistry.html#reset()", "TransportRegistry::set()()": "class-cake.mailer.transportregistry.html#set()", "TransportRegistry::unload()()": "class-cake.mailer.transportregistry.html#unload()", "TreeBehavior (class)": "class-cake.orm.behavior.treebehavior.html", "TreeBehavior::$_config": "class-cake.orm.behavior.treebehavior.html#$_config", "TreeBehavior::$_configInitialized": "class-cake.orm.behavior.treebehavior.html#$_configInitialized", "TreeBehavior::$_defaultConfig": "class-cake.orm.behavior.treebehavior.html#$_defaultConfig", "TreeBehavior::$_primaryKey": "class-cake.orm.behavior.treebehavior.html#$_primaryKey", "TreeBehavior::$_reflectionCache": "class-cake.orm.behavior.treebehavior.html#$_reflectionCache", "TreeBehavior::$_table": "class-cake.orm.behavior.treebehavior.html#$_table", "TreeBehavior::__construct()()": "class-cake.orm.behavior.treebehavior.html#__construct()", "TreeBehavior::_configDelete()()": "class-cake.orm.behavior.treebehavior.html#_configDelete()", "TreeBehavior::_configRead()()": "class-cake.orm.behavior.treebehavior.html#_configRead()", "TreeBehavior::_configWrite()()": "class-cake.orm.behavior.treebehavior.html#_configWrite()", "TreeBehavior::_ensureFields()()": "class-cake.orm.behavior.treebehavior.html#_ensureFields()", "TreeBehavior::_getMax()()": "class-cake.orm.behavior.treebehavior.html#_getMax()", "TreeBehavior::_getNode()()": "class-cake.orm.behavior.treebehavior.html#_getNode()", "TreeBehavior::_getPrimaryKey()()": "class-cake.orm.behavior.treebehavior.html#_getPrimaryKey()", "TreeBehavior::_moveDown()()": "class-cake.orm.behavior.treebehavior.html#_moveDown()", "TreeBehavior::_moveUp()()": "class-cake.orm.behavior.treebehavior.html#_moveUp()", "TreeBehavior::_recoverTree()()": "class-cake.orm.behavior.treebehavior.html#_recoverTree()", "TreeBehavior::_reflectionCache()()": "class-cake.orm.behavior.treebehavior.html#_reflectionCache()", "TreeBehavior::_removeFromTree()()": "class-cake.orm.behavior.treebehavior.html#_removeFromTree()", "TreeBehavior::_resolveMethodAliases()()": "class-cake.orm.behavior.treebehavior.html#_resolveMethodAliases()", "TreeBehavior::_scope()()": "class-cake.orm.behavior.treebehavior.html#_scope()", "TreeBehavior::_setAsRoot()()": "class-cake.orm.behavior.treebehavior.html#_setAsRoot()", "TreeBehavior::_setChildrenLevel()()": "class-cake.orm.behavior.treebehavior.html#_setChildrenLevel()", "TreeBehavior::_setParent()()": "class-cake.orm.behavior.treebehavior.html#_setParent()", "TreeBehavior::_sync()()": "class-cake.orm.behavior.treebehavior.html#_sync()", "TreeBehavior::_unmarkInternalTree()()": "class-cake.orm.behavior.treebehavior.html#_unmarkInternalTree()", "TreeBehavior::afterSave()()": "class-cake.orm.behavior.treebehavior.html#afterSave()", "TreeBehavior::beforeDelete()()": "class-cake.orm.behavior.treebehavior.html#beforeDelete()", "TreeBehavior::beforeSave()()": "class-cake.orm.behavior.treebehavior.html#beforeSave()", "TreeBehavior::childCount()()": "class-cake.orm.behavior.treebehavior.html#childCount()", "TreeBehavior::configShallow()()": "class-cake.orm.behavior.treebehavior.html#configShallow()", "TreeBehavior::findChildren()()": "class-cake.orm.behavior.treebehavior.html#findChildren()", "TreeBehavior::findPath()()": "class-cake.orm.behavior.treebehavior.html#findPath()", "TreeBehavior::findTreeList()()": "class-cake.orm.behavior.treebehavior.html#findTreeList()", "TreeBehavior::formatTreeList()()": "class-cake.orm.behavior.treebehavior.html#formatTreeList()", "TreeBehavior::getConfig()()": "class-cake.orm.behavior.treebehavior.html#getConfig()", "TreeBehavior::getConfigOrFail()()": "class-cake.orm.behavior.treebehavior.html#getConfigOrFail()", "TreeBehavior::getLevel()()": "class-cake.orm.behavior.treebehavior.html#getLevel()", "TreeBehavior::getTable()()": "class-cake.orm.behavior.treebehavior.html#getTable()", "TreeBehavior::implementedEvents()()": "class-cake.orm.behavior.treebehavior.html#implementedEvents()", "TreeBehavior::implementedFinders()()": "class-cake.orm.behavior.treebehavior.html#implementedFinders()", "TreeBehavior::implementedMethods()()": "class-cake.orm.behavior.treebehavior.html#implementedMethods()", "TreeBehavior::initialize()()": "class-cake.orm.behavior.treebehavior.html#initialize()", "TreeBehavior::moveDown()()": "class-cake.orm.behavior.treebehavior.html#moveDown()", "TreeBehavior::moveUp()()": "class-cake.orm.behavior.treebehavior.html#moveUp()", "TreeBehavior::recover()()": "class-cake.orm.behavior.treebehavior.html#recover()", "TreeBehavior::removeFromTree()()": "class-cake.orm.behavior.treebehavior.html#removeFromTree()", "TreeBehavior::setConfig()()": "class-cake.orm.behavior.treebehavior.html#setConfig()", "TreeBehavior::table()()": "class-cake.orm.behavior.treebehavior.html#table()", "TreeBehavior::verifyConfig()()": "class-cake.orm.behavior.treebehavior.html#verifyConfig()", "TreeIterator (class)": "class-cake.collection.iterator.treeiterator.html", "TreeIterator::$_mode": "class-cake.collection.iterator.treeiterator.html#$_mode", "TreeIterator::__construct()()": "class-cake.collection.iterator.treeiterator.html#__construct()", "TreeIterator::_createMatcherFilter()()": "class-cake.collection.iterator.treeiterator.html#_createMatcherFilter()", "TreeIterator::_extract()()": "class-cake.collection.iterator.treeiterator.html#_extract()", "TreeIterator::_propertyExtractor()()": "class-cake.collection.iterator.treeiterator.html#_propertyExtractor()", "TreeIterator::_simpleExtract()()": "class-cake.collection.iterator.treeiterator.html#_simpleExtract()", "TreeIterator::append()()": "class-cake.collection.iterator.treeiterator.html#append()", "TreeIterator::appendItem()()": "class-cake.collection.iterator.treeiterator.html#appendItem()", "TreeIterator::avg()()": "class-cake.collection.iterator.treeiterator.html#avg()", "TreeIterator::buffered()()": "class-cake.collection.iterator.treeiterator.html#buffered()", "TreeIterator::cartesianProduct()()": "class-cake.collection.iterator.treeiterator.html#cartesianProduct()", "TreeIterator::chunk()()": "class-cake.collection.iterator.treeiterator.html#chunk()", "TreeIterator::chunkWithKeys()()": "class-cake.collection.iterator.treeiterator.html#chunkWithKeys()", "TreeIterator::combine()()": "class-cake.collection.iterator.treeiterator.html#combine()", "TreeIterator::compile()()": "class-cake.collection.iterator.treeiterator.html#compile()", "TreeIterator::contains()()": "class-cake.collection.iterator.treeiterator.html#contains()", "TreeIterator::count()()": "class-cake.collection.iterator.treeiterator.html#count()", "TreeIterator::countBy()()": "class-cake.collection.iterator.treeiterator.html#countBy()", "TreeIterator::countKeys()()": "class-cake.collection.iterator.treeiterator.html#countKeys()", "TreeIterator::each()()": "class-cake.collection.iterator.treeiterator.html#each()", "TreeIterator::every()()": "class-cake.collection.iterator.treeiterator.html#every()", "TreeIterator::extract()()": "class-cake.collection.iterator.treeiterator.html#extract()", "TreeIterator::filter()()": "class-cake.collection.iterator.treeiterator.html#filter()", "TreeIterator::first()()": "class-cake.collection.iterator.treeiterator.html#first()", "TreeIterator::firstMatch()()": "class-cake.collection.iterator.treeiterator.html#firstMatch()", "TreeIterator::groupBy()()": "class-cake.collection.iterator.treeiterator.html#groupBy()", "TreeIterator::indexBy()()": "class-cake.collection.iterator.treeiterator.html#indexBy()", "TreeIterator::insert()()": "class-cake.collection.iterator.treeiterator.html#insert()", "TreeIterator::isEmpty()()": "class-cake.collection.iterator.treeiterator.html#isEmpty()", "TreeIterator::jsonSerialize()()": "class-cake.collection.iterator.treeiterator.html#jsonSerialize()", "TreeIterator::last()()": "class-cake.collection.iterator.treeiterator.html#last()", "TreeIterator::lazy()()": "class-cake.collection.iterator.treeiterator.html#lazy()", "TreeIterator::listNested()()": "class-cake.collection.iterator.treeiterator.html#listNested()", "TreeIterator::map()()": "class-cake.collection.iterator.treeiterator.html#map()", "TreeIterator::match()()": "class-cake.collection.iterator.treeiterator.html#match()", "TreeIterator::max()()": "class-cake.collection.iterator.treeiterator.html#max()", "TreeIterator::median()()": "class-cake.collection.iterator.treeiterator.html#median()", "TreeIterator::min()()": "class-cake.collection.iterator.treeiterator.html#min()", "TreeIterator::nest()()": "class-cake.collection.iterator.treeiterator.html#nest()", "TreeIterator::newCollection()()": "class-cake.collection.iterator.treeiterator.html#newCollection()", "TreeIterator::optimizeUnwrap()()": "class-cake.collection.iterator.treeiterator.html#optimizeUnwrap()", "TreeIterator::prepend()()": "class-cake.collection.iterator.treeiterator.html#prepend()", "TreeIterator::prependItem()()": "class-cake.collection.iterator.treeiterator.html#prependItem()", "TreeIterator::printer()()": "class-cake.collection.iterator.treeiterator.html#printer()", "TreeIterator::reduce()()": "class-cake.collection.iterator.treeiterator.html#reduce()", "TreeIterator::reject()()": "class-cake.collection.iterator.treeiterator.html#reject()", "TreeIterator::sample()()": "class-cake.collection.iterator.treeiterator.html#sample()", "TreeIterator::shuffle()()": "class-cake.collection.iterator.treeiterator.html#shuffle()", "TreeIterator::skip()()": "class-cake.collection.iterator.treeiterator.html#skip()", "TreeIterator::some()()": "class-cake.collection.iterator.treeiterator.html#some()", "TreeIterator::sortBy()()": "class-cake.collection.iterator.treeiterator.html#sortBy()", "TreeIterator::stopWhen()()": "class-cake.collection.iterator.treeiterator.html#stopWhen()", "TreeIterator::sumOf()()": "class-cake.collection.iterator.treeiterator.html#sumOf()", "TreeIterator::take()()": "class-cake.collection.iterator.treeiterator.html#take()", "TreeIterator::takeLast()()": "class-cake.collection.iterator.treeiterator.html#takeLast()", "TreeIterator::through()()": "class-cake.collection.iterator.treeiterator.html#through()", "TreeIterator::toArray()()": "class-cake.collection.iterator.treeiterator.html#toArray()", "TreeIterator::toList()()": "class-cake.collection.iterator.treeiterator.html#toList()", "TreeIterator::transpose()()": "class-cake.collection.iterator.treeiterator.html#transpose()", "TreeIterator::unfold()()": "class-cake.collection.iterator.treeiterator.html#unfold()", "TreeIterator::unwrap()()": "class-cake.collection.iterator.treeiterator.html#unwrap()", "TreeIterator::zip()()": "class-cake.collection.iterator.treeiterator.html#zip()", "TreeIterator::zipWith()()": "class-cake.collection.iterator.treeiterator.html#zipWith()", "TreePrinter (class)": "class-cake.collection.iterator.treeprinter.html", "TreePrinter::$_current": "class-cake.collection.iterator.treeprinter.html#$_current", "TreePrinter::$_key": "class-cake.collection.iterator.treeprinter.html#$_key", "TreePrinter::$_spacer": "class-cake.collection.iterator.treeprinter.html#$_spacer", "TreePrinter::$_value": "class-cake.collection.iterator.treeprinter.html#$_value", "TreePrinter::__construct()()": "class-cake.collection.iterator.treeprinter.html#__construct()", "TreePrinter::_createMatcherFilter()()": "class-cake.collection.iterator.treeprinter.html#_createMatcherFilter()", "TreePrinter::_extract()()": "class-cake.collection.iterator.treeprinter.html#_extract()", "TreePrinter::_fetchCurrent()()": "class-cake.collection.iterator.treeprinter.html#_fetchCurrent()", "TreePrinter::_propertyExtractor()()": "class-cake.collection.iterator.treeprinter.html#_propertyExtractor()", "TreePrinter::_simpleExtract()()": "class-cake.collection.iterator.treeprinter.html#_simpleExtract()", "TreePrinter::append()()": "class-cake.collection.iterator.treeprinter.html#append()", "TreePrinter::appendItem()()": "class-cake.collection.iterator.treeprinter.html#appendItem()", "TreePrinter::avg()()": "class-cake.collection.iterator.treeprinter.html#avg()", "TreePrinter::buffered()()": "class-cake.collection.iterator.treeprinter.html#buffered()", "TreePrinter::cartesianProduct()()": "class-cake.collection.iterator.treeprinter.html#cartesianProduct()", "TreePrinter::chunk()()": "class-cake.collection.iterator.treeprinter.html#chunk()", "TreePrinter::chunkWithKeys()()": "class-cake.collection.iterator.treeprinter.html#chunkWithKeys()", "TreePrinter::combine()()": "class-cake.collection.iterator.treeprinter.html#combine()", "TreePrinter::compile()()": "class-cake.collection.iterator.treeprinter.html#compile()", "TreePrinter::contains()()": "class-cake.collection.iterator.treeprinter.html#contains()", "TreePrinter::count()()": "class-cake.collection.iterator.treeprinter.html#count()", "TreePrinter::countBy()()": "class-cake.collection.iterator.treeprinter.html#countBy()", "TreePrinter::countKeys()()": "class-cake.collection.iterator.treeprinter.html#countKeys()", "TreePrinter::current()()": "class-cake.collection.iterator.treeprinter.html#current()", "TreePrinter::each()()": "class-cake.collection.iterator.treeprinter.html#each()", "TreePrinter::every()()": "class-cake.collection.iterator.treeprinter.html#every()", "TreePrinter::extract()()": "class-cake.collection.iterator.treeprinter.html#extract()", "TreePrinter::filter()()": "class-cake.collection.iterator.treeprinter.html#filter()", "TreePrinter::first()()": "class-cake.collection.iterator.treeprinter.html#first()", "TreePrinter::firstMatch()()": "class-cake.collection.iterator.treeprinter.html#firstMatch()", "TreePrinter::groupBy()()": "class-cake.collection.iterator.treeprinter.html#groupBy()", "TreePrinter::indexBy()()": "class-cake.collection.iterator.treeprinter.html#indexBy()", "TreePrinter::insert()()": "class-cake.collection.iterator.treeprinter.html#insert()", "TreePrinter::isEmpty()()": "class-cake.collection.iterator.treeprinter.html#isEmpty()", "TreePrinter::jsonSerialize()()": "class-cake.collection.iterator.treeprinter.html#jsonSerialize()", "TreePrinter::key()()": "class-cake.collection.iterator.treeprinter.html#key()", "TreePrinter::last()()": "class-cake.collection.iterator.treeprinter.html#last()", "TreePrinter::lazy()()": "class-cake.collection.iterator.treeprinter.html#lazy()", "TreePrinter::listNested()()": "class-cake.collection.iterator.treeprinter.html#listNested()", "TreePrinter::map()()": "class-cake.collection.iterator.treeprinter.html#map()", "TreePrinter::match()()": "class-cake.collection.iterator.treeprinter.html#match()", "TreePrinter::max()()": "class-cake.collection.iterator.treeprinter.html#max()", "TreePrinter::median()()": "class-cake.collection.iterator.treeprinter.html#median()", "TreePrinter::min()()": "class-cake.collection.iterator.treeprinter.html#min()", "TreePrinter::nest()()": "class-cake.collection.iterator.treeprinter.html#nest()", "TreePrinter::newCollection()()": "class-cake.collection.iterator.treeprinter.html#newCollection()", "TreePrinter::next()()": "class-cake.collection.iterator.treeprinter.html#next()", "TreePrinter::optimizeUnwrap()()": "class-cake.collection.iterator.treeprinter.html#optimizeUnwrap()", "TreePrinter::prepend()()": "class-cake.collection.iterator.treeprinter.html#prepend()", "TreePrinter::prependItem()()": "class-cake.collection.iterator.treeprinter.html#prependItem()", "TreePrinter::reduce()()": "class-cake.collection.iterator.treeprinter.html#reduce()", "TreePrinter::reject()()": "class-cake.collection.iterator.treeprinter.html#reject()", "TreePrinter::sample()()": "class-cake.collection.iterator.treeprinter.html#sample()", "TreePrinter::shuffle()()": "class-cake.collection.iterator.treeprinter.html#shuffle()", "TreePrinter::skip()()": "class-cake.collection.iterator.treeprinter.html#skip()", "TreePrinter::some()()": "class-cake.collection.iterator.treeprinter.html#some()", "TreePrinter::sortBy()()": "class-cake.collection.iterator.treeprinter.html#sortBy()", "TreePrinter::stopWhen()()": "class-cake.collection.iterator.treeprinter.html#stopWhen()", "TreePrinter::sumOf()()": "class-cake.collection.iterator.treeprinter.html#sumOf()", "TreePrinter::take()()": "class-cake.collection.iterator.treeprinter.html#take()", "TreePrinter::takeLast()()": "class-cake.collection.iterator.treeprinter.html#takeLast()", "TreePrinter::through()()": "class-cake.collection.iterator.treeprinter.html#through()", "TreePrinter::toArray()()": "class-cake.collection.iterator.treeprinter.html#toArray()", "TreePrinter::toList()()": "class-cake.collection.iterator.treeprinter.html#toList()", "TreePrinter::transpose()()": "class-cake.collection.iterator.treeprinter.html#transpose()", "TreePrinter::unfold()()": "class-cake.collection.iterator.treeprinter.html#unfold()", "TreePrinter::unwrap()()": "class-cake.collection.iterator.treeprinter.html#unwrap()", "TreePrinter::zip()()": "class-cake.collection.iterator.treeprinter.html#zip()", "TreePrinter::zipWith()()": "class-cake.collection.iterator.treeprinter.html#zipWith()", "TruncateStrategy (class)": "class-cake.testsuite.fixture.truncatestrategy.html", "TruncateStrategy::$fixtures": "class-cake.testsuite.fixture.truncatestrategy.html#$fixtures", "TruncateStrategy::$helper": "class-cake.testsuite.fixture.truncatestrategy.html#$helper", "TruncateStrategy::__construct()()": "class-cake.testsuite.fixture.truncatestrategy.html#__construct()", "TruncateStrategy::setupTest()()": "class-cake.testsuite.fixture.truncatestrategy.html#setupTest()", "TruncateStrategy::teardownTest()()": "class-cake.testsuite.fixture.truncatestrategy.html#teardownTest()", "TupleComparison (class)": "class-cake.database.expression.tuplecomparison.html", "TupleComparison::$_field": "class-cake.database.expression.tuplecomparison.html#$_field", "TupleComparison::$_isMultiple": "class-cake.database.expression.tuplecomparison.html#$_isMultiple", "TupleComparison::$_operator": "class-cake.database.expression.tuplecomparison.html#$_operator", "TupleComparison::$_type": "class-cake.database.expression.tuplecomparison.html#$_type", "TupleComparison::$_value": "class-cake.database.expression.tuplecomparison.html#$_value", "TupleComparison::$_valueExpressions": "class-cake.database.expression.tuplecomparison.html#$_valueExpressions", "TupleComparison::__clone()()": "class-cake.database.expression.tuplecomparison.html#__clone()", "TupleComparison::__construct()()": "class-cake.database.expression.tuplecomparison.html#__construct()", "TupleComparison::_bindValue()()": "class-cake.database.expression.tuplecomparison.html#_bindValue()", "TupleComparison::_castToExpression()()": "class-cake.database.expression.tuplecomparison.html#_castToExpression()", "TupleComparison::_collectExpressions()()": "class-cake.database.expression.tuplecomparison.html#_collectExpressions()", "TupleComparison::_flattenValue()()": "class-cake.database.expression.tuplecomparison.html#_flattenValue()", "TupleComparison::_requiresToExpressionCasting()()": "class-cake.database.expression.tuplecomparison.html#_requiresToExpressionCasting()", "TupleComparison::_stringExpression()()": "class-cake.database.expression.tuplecomparison.html#_stringExpression()", "TupleComparison::_stringifyValues()()": "class-cake.database.expression.tuplecomparison.html#_stringifyValues()", "TupleComparison::_traverseValue()()": "class-cake.database.expression.tuplecomparison.html#_traverseValue()", "TupleComparison::getField()()": "class-cake.database.expression.tuplecomparison.html#getField()", "TupleComparison::getOperator()()": "class-cake.database.expression.tuplecomparison.html#getOperator()", "TupleComparison::getType()()": "class-cake.database.expression.tuplecomparison.html#getType()", "TupleComparison::getValue()()": "class-cake.database.expression.tuplecomparison.html#getValue()", "TupleComparison::isMulti()()": "class-cake.database.expression.tuplecomparison.html#isMulti()", "TupleComparison::setField()()": "class-cake.database.expression.tuplecomparison.html#setField()", "TupleComparison::setOperator()()": "class-cake.database.expression.tuplecomparison.html#setOperator()", "TupleComparison::setValue()()": "class-cake.database.expression.tuplecomparison.html#setValue()", "TupleComparison::sql()()": "class-cake.database.expression.tuplecomparison.html#sql()", "TupleComparison::traverse()()": "class-cake.database.expression.tuplecomparison.html#traverse()", "TupleComparisonTranslatorTrait (trait)": "trait-cake.database.driver.tuplecomparisontranslatortrait.html", "TypeConverterTrait (trait)": "trait-cake.database.typeconvertertrait.html", "TypedResultInterface (interface)": "interface-cake.database.typedresultinterface.html", "TypedResultTrait (trait)": "trait-cake.database.typedresulttrait.html", "TypeFactory (class)": "class-cake.database.typefactory.html", "TypeFactory::$_builtTypes": "class-cake.database.typefactory.html#$_builtTypes", "TypeFactory::$_types": "class-cake.database.typefactory.html#$_types", "TypeFactory::build()()": "class-cake.database.typefactory.html#build()", "TypeFactory::buildAll()()": "class-cake.database.typefactory.html#buildAll()", "TypeFactory::clear()()": "class-cake.database.typefactory.html#clear()", "TypeFactory::getMap()()": "class-cake.database.typefactory.html#getMap()", "TypeFactory::map()()": "class-cake.database.typefactory.html#map()", "TypeFactory::set()()": "class-cake.database.typefactory.html#set()", "TypeFactory::setMap()()": "class-cake.database.typefactory.html#setMap()", "TypeInterface (interface)": "interface-cake.database.typeinterface.html", "TypeMap (class)": "class-cake.database.typemap.html", "TypeMap::$_defaults": "class-cake.database.typemap.html#$_defaults", "TypeMap::$_types": "class-cake.database.typemap.html#$_types", "TypeMap::__construct()()": "class-cake.database.typemap.html#__construct()", "TypeMap::addDefaults()()": "class-cake.database.typemap.html#addDefaults()", "TypeMap::getDefaults()()": "class-cake.database.typemap.html#getDefaults()", "TypeMap::getTypes()()": "class-cake.database.typemap.html#getTypes()", "TypeMap::setDefaults()()": "class-cake.database.typemap.html#setDefaults()", "TypeMap::setTypes()()": "class-cake.database.typemap.html#setTypes()", "TypeMap::toArray()()": "class-cake.database.typemap.html#toArray()", "TypeMap::type()()": "class-cake.database.typemap.html#type()", "TypeMapTrait (trait)": "trait-cake.database.typemaptrait.html", "UnaryExpression (class)": "class-cake.database.expression.unaryexpression.html", "UnaryExpression::$_operator": "class-cake.database.expression.unaryexpression.html#$_operator", "UnaryExpression::$_value": "class-cake.database.expression.unaryexpression.html#$_value", "UnaryExpression::$position": "class-cake.database.expression.unaryexpression.html#$position", "UnaryExpression::__clone()()": "class-cake.database.expression.unaryexpression.html#__clone()", "UnaryExpression::__construct()()": "class-cake.database.expression.unaryexpression.html#__construct()", "UnaryExpression::sql()()": "class-cake.database.expression.unaryexpression.html#sql()", "UnaryExpression::traverse()()": "class-cake.database.expression.unaryexpression.html#traverse()", "UnauthorizedException (class)": "class-cake.http.exception.unauthorizedexception.html", "UnavailableForLegalReasonsException (class)": "class-cake.http.exception.unavailableforlegalreasonsexception.html", "UnfoldIterator (class)": "class-cake.collection.iterator.unfolditerator.html", "UnfoldIterator::$_innerIterator": "class-cake.collection.iterator.unfolditerator.html#$_innerIterator", "UnfoldIterator::$_unfolder": "class-cake.collection.iterator.unfolditerator.html#$_unfolder", "UnfoldIterator::__construct()()": "class-cake.collection.iterator.unfolditerator.html#__construct()", "UnfoldIterator::getChildren()()": "class-cake.collection.iterator.unfolditerator.html#getChildren()", "UnfoldIterator::hasChildren()()": "class-cake.collection.iterator.unfolditerator.html#hasChildren()", "Uri (class)": "class-cake.http.uri.html", "Uri::__construct()()": "class-cake.http.uri.html#__construct()", "Uri::__get()()": "class-cake.http.uri.html#__get()", "Uri::__toString()()": "class-cake.http.uri.html#__toString()", "Uri::getAuthority()()": "class-cake.http.uri.html#getAuthority()", "Uri::getBase()()": "class-cake.http.uri.html#getBase()", "Uri::getFragment()()": "class-cake.http.uri.html#getFragment()", "Uri::getHost()()": "class-cake.http.uri.html#getHost()", "Uri::getPath()()": "class-cake.http.uri.html#getPath()", "Uri::getPort()()": "class-cake.http.uri.html#getPort()", "Uri::getQuery()()": "class-cake.http.uri.html#getQuery()", "Uri::getScheme()()": "class-cake.http.uri.html#getScheme()", "Uri::getUri()()": "class-cake.http.uri.html#getUri()", "Uri::getUserInfo()()": "class-cake.http.uri.html#getUserInfo()", "Uri::getWebroot()()": "class-cake.http.uri.html#getWebroot()", "Uri::withFragment()()": "class-cake.http.uri.html#withFragment()", "Uri::withHost()()": "class-cake.http.uri.html#withHost()", "Uri::withPath()()": "class-cake.http.uri.html#withPath()", "Uri::withPort()()": "class-cake.http.uri.html#withPort()", "Uri::withQuery()()": "class-cake.http.uri.html#withQuery()", "Uri::withScheme()()": "class-cake.http.uri.html#withScheme()", "Uri::withUserInfo()()": "class-cake.http.uri.html#withUserInfo()", "UrlHelper (class)": "class-cake.view.helper.urlhelper.html", "UrlHelper::$_assetUrlClassName": "class-cake.view.helper.urlhelper.html#$_assetUrlClassName", "UrlHelper::$_config": "class-cake.view.helper.urlhelper.html#$_config", "UrlHelper::$_configInitialized": "class-cake.view.helper.urlhelper.html#$_configInitialized", "UrlHelper::$_defaultConfig": "class-cake.view.helper.urlhelper.html#$_defaultConfig", "UrlHelper::$_helperMap": "class-cake.view.helper.urlhelper.html#$_helperMap", "UrlHelper::$_View": "class-cake.view.helper.urlhelper.html#$_View", "UrlHelper::$helpers": "class-cake.view.helper.urlhelper.html#$helpers", "UrlHelper::__call()()": "class-cake.view.helper.urlhelper.html#__call()", "UrlHelper::__construct()()": "class-cake.view.helper.urlhelper.html#__construct()", "UrlHelper::__debugInfo()()": "class-cake.view.helper.urlhelper.html#__debugInfo()", "UrlHelper::__get()()": "class-cake.view.helper.urlhelper.html#__get()", "UrlHelper::_configDelete()()": "class-cake.view.helper.urlhelper.html#_configDelete()", "UrlHelper::_configRead()()": "class-cake.view.helper.urlhelper.html#_configRead()", "UrlHelper::_configWrite()()": "class-cake.view.helper.urlhelper.html#_configWrite()", "UrlHelper::_confirm()()": "class-cake.view.helper.urlhelper.html#_confirm()", "UrlHelper::addClass()()": "class-cake.view.helper.urlhelper.html#addClass()", "UrlHelper::assetTimestamp()()": "class-cake.view.helper.urlhelper.html#assetTimestamp()", "UrlHelper::assetUrl()()": "class-cake.view.helper.urlhelper.html#assetUrl()", "UrlHelper::build()()": "class-cake.view.helper.urlhelper.html#build()", "UrlHelper::buildFromPath()()": "class-cake.view.helper.urlhelper.html#buildFromPath()", "UrlHelper::configShallow()()": "class-cake.view.helper.urlhelper.html#configShallow()", "UrlHelper::css()()": "class-cake.view.helper.urlhelper.html#css()", "UrlHelper::getConfig()()": "class-cake.view.helper.urlhelper.html#getConfig()", "UrlHelper::getConfigOrFail()()": "class-cake.view.helper.urlhelper.html#getConfigOrFail()", "UrlHelper::getView()()": "class-cake.view.helper.urlhelper.html#getView()", "UrlHelper::image()()": "class-cake.view.helper.urlhelper.html#image()", "UrlHelper::implementedEvents()()": "class-cake.view.helper.urlhelper.html#implementedEvents()", "UrlHelper::initialize()()": "class-cake.view.helper.urlhelper.html#initialize()", "UrlHelper::script()()": "class-cake.view.helper.urlhelper.html#script()", "UrlHelper::setConfig()()": "class-cake.view.helper.urlhelper.html#setConfig()", "UrlHelper::webroot()()": "class-cake.view.helper.urlhelper.html#webroot()", "Utility (namespace)": "namespace-cake.utility.html", "Utility\\Crypto (namespace)": "namespace-cake.utility.crypto.html", "Utility\\Exception (namespace)": "namespace-cake.utility.exception.html", "UuidType (class)": "class-cake.database.type.uuidtype.html", "UuidType::$_name": "class-cake.database.type.uuidtype.html#$_name", "UuidType::__construct()()": "class-cake.database.type.uuidtype.html#__construct()", "UuidType::getBaseType()()": "class-cake.database.type.uuidtype.html#getBaseType()", "UuidType::getName()()": "class-cake.database.type.uuidtype.html#getName()", "UuidType::marshal()()": "class-cake.database.type.uuidtype.html#marshal()", "UuidType::newId()()": "class-cake.database.type.uuidtype.html#newId()", "UuidType::requiresToPhpCast()()": "class-cake.database.type.uuidtype.html#requiresToPhpCast()", "UuidType::toDatabase()()": "class-cake.database.type.uuidtype.html#toDatabase()", "UuidType::toPHP()()": "class-cake.database.type.uuidtype.html#toPHP()", "UuidType::toStatement()()": "class-cake.database.type.uuidtype.html#toStatement()", "ValidatableInterface (interface)": "interface-cake.validation.validatableinterface.html", "Validation (class)": "class-cake.validation.validation.html", "Validation (namespace)": "namespace-cake.validation.html", "Validation::$_pattern": "class-cake.validation.validation.html#$_pattern", "Validation::$errors": "class-cake.validation.validation.html#$errors", "Validation::_check()()": "class-cake.validation.validation.html#_check()", "Validation::_getDateString()()": "class-cake.validation.validation.html#_getDateString()", "Validation::_populateIp()()": "class-cake.validation.validation.html#_populateIp()", "Validation::_reset()()": "class-cake.validation.validation.html#_reset()", "Validation::alphaNumeric()()": "class-cake.validation.validation.html#alphaNumeric()", "Validation::ascii()()": "class-cake.validation.validation.html#ascii()", "Validation::asciiAlphaNumeric()()": "class-cake.validation.validation.html#asciiAlphaNumeric()", "Validation::boolean()()": "class-cake.validation.validation.html#boolean()", "Validation::compareFields()()": "class-cake.validation.validation.html#compareFields()", "Validation::compareWith()()": "class-cake.validation.validation.html#compareWith()", "Validation::comparison()()": "class-cake.validation.validation.html#comparison()", "Validation::containsNonAlphaNumeric()()": "class-cake.validation.validation.html#containsNonAlphaNumeric()", "Validation::creditCard()()": "class-cake.validation.validation.html#creditCard()", "Validation::custom()()": "class-cake.validation.validation.html#custom()", "Validation::date()()": "class-cake.validation.validation.html#date()", "Validation::datetime()()": "class-cake.validation.validation.html#datetime()", "Validation::decimal()()": "class-cake.validation.validation.html#decimal()", "Validation::email()()": "class-cake.validation.validation.html#email()", "Validation::equalTo()()": "class-cake.validation.validation.html#equalTo()", "Validation::extension()()": "class-cake.validation.validation.html#extension()", "Validation::falsey()()": "class-cake.validation.validation.html#falsey()", "Validation::fileSize()()": "class-cake.validation.validation.html#fileSize()", "Validation::geoCoordinate()()": "class-cake.validation.validation.html#geoCoordinate()", "Validation::getFilename()()": "class-cake.validation.validation.html#getFilename()", "Validation::hexColor()()": "class-cake.validation.validation.html#hexColor()", "Validation::iban()()": "class-cake.validation.validation.html#iban()", "Validation::imageHeight()()": "class-cake.validation.validation.html#imageHeight()", "Validation::imageSize()()": "class-cake.validation.validation.html#imageSize()", "Validation::imageWidth()()": "class-cake.validation.validation.html#imageWidth()", "Validation::inList()()": "class-cake.validation.validation.html#inList()", "Validation::ip()()": "class-cake.validation.validation.html#ip()", "Validation::isArray()()": "class-cake.validation.validation.html#isArray()", "Validation::isInteger()()": "class-cake.validation.validation.html#isInteger()", "Validation::iso8601()()": "class-cake.validation.validation.html#iso8601()", "Validation::isScalar()()": "class-cake.validation.validation.html#isScalar()", "Validation::latitude()()": "class-cake.validation.validation.html#latitude()", "Validation::lengthBetween()()": "class-cake.validation.validation.html#lengthBetween()", "Validation::localizedTime()()": "class-cake.validation.validation.html#localizedTime()", "Validation::longitude()()": "class-cake.validation.validation.html#longitude()", "Validation::luhn()()": "class-cake.validation.validation.html#luhn()", "Validation::maxLength()()": "class-cake.validation.validation.html#maxLength()", "Validation::maxLengthBytes()()": "class-cake.validation.validation.html#maxLengthBytes()", "Validation::mimeType()()": "class-cake.validation.validation.html#mimeType()", "Validation::minLength()()": "class-cake.validation.validation.html#minLength()", "Validation::minLengthBytes()()": "class-cake.validation.validation.html#minLengthBytes()", "Validation::money()()": "class-cake.validation.validation.html#money()", "Validation::multiple()()": "class-cake.validation.validation.html#multiple()", "Validation::naturalNumber()()": "class-cake.validation.validation.html#naturalNumber()", "Validation::notAlphaNumeric()()": "class-cake.validation.validation.html#notAlphaNumeric()", "Validation::notAsciiAlphaNumeric()()": "class-cake.validation.validation.html#notAsciiAlphaNumeric()", "Validation::notBlank()()": "class-cake.validation.validation.html#notBlank()", "Validation::numElements()()": "class-cake.validation.validation.html#numElements()", "Validation::numeric()()": "class-cake.validation.validation.html#numeric()", "Validation::range()()": "class-cake.validation.validation.html#range()", "Validation::time()()": "class-cake.validation.validation.html#time()", "Validation::truthy()()": "class-cake.validation.validation.html#truthy()", "Validation::uploadedFile()()": "class-cake.validation.validation.html#uploadedFile()", "Validation::uploadError()()": "class-cake.validation.validation.html#uploadError()", "Validation::url()()": "class-cake.validation.validation.html#url()", "Validation::utf8()()": "class-cake.validation.validation.html#utf8()", "Validation::uuid()()": "class-cake.validation.validation.html#uuid()", "ValidationRule (class)": "class-cake.validation.validationrule.html", "ValidationRule::$_last": "class-cake.validation.validationrule.html#$_last", "ValidationRule::$_message": "class-cake.validation.validationrule.html#$_message", "ValidationRule::$_on": "class-cake.validation.validationrule.html#$_on", "ValidationRule::$_pass": "class-cake.validation.validationrule.html#$_pass", "ValidationRule::$_provider": "class-cake.validation.validationrule.html#$_provider", "ValidationRule::$_rule": "class-cake.validation.validationrule.html#$_rule", "ValidationRule::__construct()()": "class-cake.validation.validationrule.html#__construct()", "ValidationRule::_addValidatorProps()()": "class-cake.validation.validationrule.html#_addValidatorProps()", "ValidationRule::_skip()()": "class-cake.validation.validationrule.html#_skip()", "ValidationRule::get()()": "class-cake.validation.validationrule.html#get()", "ValidationRule::isLast()()": "class-cake.validation.validationrule.html#isLast()", "ValidationRule::process()()": "class-cake.validation.validationrule.html#process()", "ValidationSet (class)": "class-cake.validation.validationset.html", "ValidationSet::$_allowEmpty": "class-cake.validation.validationset.html#$_allowEmpty", "ValidationSet::$_rules": "class-cake.validation.validationset.html#$_rules", "ValidationSet::$_validatePresent": "class-cake.validation.validationset.html#$_validatePresent", "ValidationSet::add()()": "class-cake.validation.validationset.html#add()", "ValidationSet::allowEmpty()()": "class-cake.validation.validationset.html#allowEmpty()", "ValidationSet::count()()": "class-cake.validation.validationset.html#count()", "ValidationSet::getIterator()()": "class-cake.validation.validationset.html#getIterator()", "ValidationSet::isEmptyAllowed()()": "class-cake.validation.validationset.html#isEmptyAllowed()", "ValidationSet::isPresenceRequired()()": "class-cake.validation.validationset.html#isPresenceRequired()", "ValidationSet::offsetExists()()": "class-cake.validation.validationset.html#offsetExists()", "ValidationSet::offsetGet()()": "class-cake.validation.validationset.html#offsetGet()", "ValidationSet::offsetSet()()": "class-cake.validation.validationset.html#offsetSet()", "ValidationSet::offsetUnset()()": "class-cake.validation.validationset.html#offsetUnset()", "ValidationSet::remove()()": "class-cake.validation.validationset.html#remove()", "ValidationSet::requirePresence()()": "class-cake.validation.validationset.html#requirePresence()", "ValidationSet::rule()()": "class-cake.validation.validationset.html#rule()", "ValidationSet::rules()()": "class-cake.validation.validationset.html#rules()", "Validator (class)": "class-cake.validation.validator.html", "Validator::$_allowEmptyFlags": "class-cake.validation.validator.html#$_allowEmptyFlags", "Validator::$_allowEmptyMessages": "class-cake.validation.validator.html#$_allowEmptyMessages", "Validator::$_defaultProviders": "class-cake.validation.validator.html#$_defaultProviders", "Validator::$_fields": "class-cake.validation.validator.html#$_fields", "Validator::$_presenceMessages": "class-cake.validation.validator.html#$_presenceMessages", "Validator::$_providers": "class-cake.validation.validator.html#$_providers", "Validator::$_stopOnFailure": "class-cake.validation.validator.html#$_stopOnFailure", "Validator::$_useI18n": "class-cake.validation.validator.html#$_useI18n", "Validator::__construct()()": "class-cake.validation.validator.html#__construct()", "Validator::__debugInfo()()": "class-cake.validation.validator.html#__debugInfo()", "Validator::_canBeEmpty()()": "class-cake.validation.validator.html#_canBeEmpty()", "Validator::_checkPresence()()": "class-cake.validation.validator.html#_checkPresence()", "Validator::_convertValidatorToArray()()": "class-cake.validation.validator.html#_convertValidatorToArray()", "Validator::_fieldIsEmpty()()": "class-cake.validation.validator.html#_fieldIsEmpty()", "Validator::_processRules()()": "class-cake.validation.validator.html#_processRules()", "Validator::add()()": "class-cake.validation.validator.html#add()", "Validator::addDefaultProvider()()": "class-cake.validation.validator.html#addDefaultProvider()", "Validator::addNested()()": "class-cake.validation.validator.html#addNested()", "Validator::addNestedMany()()": "class-cake.validation.validator.html#addNestedMany()", "Validator::allowEmpty()()": "class-cake.validation.validator.html#allowEmpty()", "Validator::allowEmptyArray()()": "class-cake.validation.validator.html#allowEmptyArray()", "Validator::allowEmptyDate()()": "class-cake.validation.validator.html#allowEmptyDate()", "Validator::allowEmptyDateTime()()": "class-cake.validation.validator.html#allowEmptyDateTime()", "Validator::allowEmptyFile()()": "class-cake.validation.validator.html#allowEmptyFile()", "Validator::allowEmptyFor()()": "class-cake.validation.validator.html#allowEmptyFor()", "Validator::allowEmptyString()()": "class-cake.validation.validator.html#allowEmptyString()", "Validator::allowEmptyTime()()": "class-cake.validation.validator.html#allowEmptyTime()", "Validator::alphaNumeric()()": "class-cake.validation.validator.html#alphaNumeric()", "Validator::ascii()()": "class-cake.validation.validator.html#ascii()", "Validator::asciiAlphaNumeric()()": "class-cake.validation.validator.html#asciiAlphaNumeric()", "Validator::boolean()()": "class-cake.validation.validator.html#boolean()", "Validator::containsNonAlphaNumeric()()": "class-cake.validation.validator.html#containsNonAlphaNumeric()", "Validator::count()()": "class-cake.validation.validator.html#count()", "Validator::creditCard()()": "class-cake.validation.validator.html#creditCard()", "Validator::date()()": "class-cake.validation.validator.html#date()", "Validator::dateTime()()": "class-cake.validation.validator.html#dateTime()", "Validator::decimal()()": "class-cake.validation.validator.html#decimal()", "Validator::email()()": "class-cake.validation.validator.html#email()", "Validator::equals()()": "class-cake.validation.validator.html#equals()", "Validator::equalToField()()": "class-cake.validation.validator.html#equalToField()", "Validator::errors()()": "class-cake.validation.validator.html#errors()", "Validator::field()()": "class-cake.validation.validator.html#field()", "Validator::getDefaultProvider()()": "class-cake.validation.validator.html#getDefaultProvider()", "Validator::getDefaultProviders()()": "class-cake.validation.validator.html#getDefaultProviders()", "Validator::getIterator()()": "class-cake.validation.validator.html#getIterator()", "Validator::getNotEmptyMessage()()": "class-cake.validation.validator.html#getNotEmptyMessage()", "Validator::getProvider()()": "class-cake.validation.validator.html#getProvider()", "Validator::getRequiredMessage()()": "class-cake.validation.validator.html#getRequiredMessage()", "Validator::greaterThan()()": "class-cake.validation.validator.html#greaterThan()", "Validator::greaterThanField()()": "class-cake.validation.validator.html#greaterThanField()", "Validator::greaterThanOrEqual()()": "class-cake.validation.validator.html#greaterThanOrEqual()", "Validator::greaterThanOrEqualToField()()": "class-cake.validation.validator.html#greaterThanOrEqualToField()", "Validator::hasAtLeast()()": "class-cake.validation.validator.html#hasAtLeast()", "Validator::hasAtMost()()": "class-cake.validation.validator.html#hasAtMost()", "Validator::hasField()()": "class-cake.validation.validator.html#hasField()", "Validator::hexColor()()": "class-cake.validation.validator.html#hexColor()", "Validator::inList()()": "class-cake.validation.validator.html#inList()", "Validator::integer()()": "class-cake.validation.validator.html#integer()", "Validator::invertWhenClause()()": "class-cake.validation.validator.html#invertWhenClause()", "Validator::ip()()": "class-cake.validation.validator.html#ip()", "Validator::ipv4()()": "class-cake.validation.validator.html#ipv4()", "Validator::ipv6()()": "class-cake.validation.validator.html#ipv6()", "Validator::isArray()()": "class-cake.validation.validator.html#isArray()", "Validator::isEmpty()()": "class-cake.validation.validator.html#isEmpty()", "Validator::isEmptyAllowed()()": "class-cake.validation.validator.html#isEmptyAllowed()", "Validator::isPresenceRequired()()": "class-cake.validation.validator.html#isPresenceRequired()", "Validator::latitude()()": "class-cake.validation.validator.html#latitude()", "Validator::latLong()()": "class-cake.validation.validator.html#latLong()", "Validator::lengthBetween()()": "class-cake.validation.validator.html#lengthBetween()", "Validator::lessThan()()": "class-cake.validation.validator.html#lessThan()", "Validator::lessThanField()()": "class-cake.validation.validator.html#lessThanField()", "Validator::lessThanOrEqual()()": "class-cake.validation.validator.html#lessThanOrEqual()", "Validator::lessThanOrEqualToField()()": "class-cake.validation.validator.html#lessThanOrEqualToField()", "Validator::localizedTime()()": "class-cake.validation.validator.html#localizedTime()", "Validator::longitude()()": "class-cake.validation.validator.html#longitude()", "Validator::maxLength()()": "class-cake.validation.validator.html#maxLength()", "Validator::maxLengthBytes()()": "class-cake.validation.validator.html#maxLengthBytes()", "Validator::minLength()()": "class-cake.validation.validator.html#minLength()", "Validator::minLengthBytes()()": "class-cake.validation.validator.html#minLengthBytes()", "Validator::multipleOptions()()": "class-cake.validation.validator.html#multipleOptions()", "Validator::naturalNumber()()": "class-cake.validation.validator.html#naturalNumber()", "Validator::nonNegativeInteger()()": "class-cake.validation.validator.html#nonNegativeInteger()", "Validator::notAlphaNumeric()()": "class-cake.validation.validator.html#notAlphaNumeric()", "Validator::notAsciiAlphaNumeric()()": "class-cake.validation.validator.html#notAsciiAlphaNumeric()", "Validator::notBlank()()": "class-cake.validation.validator.html#notBlank()", "Validator::notEmpty()()": "class-cake.validation.validator.html#notEmpty()", "Validator::notEmptyArray()()": "class-cake.validation.validator.html#notEmptyArray()", "Validator::notEmptyDate()()": "class-cake.validation.validator.html#notEmptyDate()", "Validator::notEmptyDateTime()()": "class-cake.validation.validator.html#notEmptyDateTime()", "Validator::notEmptyFile()()": "class-cake.validation.validator.html#notEmptyFile()", "Validator::notEmptyString()()": "class-cake.validation.validator.html#notEmptyString()", "Validator::notEmptyTime()()": "class-cake.validation.validator.html#notEmptyTime()", "Validator::notEquals()()": "class-cake.validation.validator.html#notEquals()", "Validator::notEqualToField()()": "class-cake.validation.validator.html#notEqualToField()", "Validator::notSameAs()()": "class-cake.validation.validator.html#notSameAs()", "Validator::numeric()()": "class-cake.validation.validator.html#numeric()", "Validator::offsetExists()()": "class-cake.validation.validator.html#offsetExists()", "Validator::offsetGet()()": "class-cake.validation.validator.html#offsetGet()", "Validator::offsetSet()()": "class-cake.validation.validator.html#offsetSet()", "Validator::offsetUnset()()": "class-cake.validation.validator.html#offsetUnset()", "Validator::providers()()": "class-cake.validation.validator.html#providers()", "Validator::range()()": "class-cake.validation.validator.html#range()", "Validator::regex()()": "class-cake.validation.validator.html#regex()", "Validator::remove()()": "class-cake.validation.validator.html#remove()", "Validator::requirePresence()()": "class-cake.validation.validator.html#requirePresence()", "Validator::sameAs()()": "class-cake.validation.validator.html#sameAs()", "Validator::scalar()()": "class-cake.validation.validator.html#scalar()", "Validator::setProvider()()": "class-cake.validation.validator.html#setProvider()", "Validator::setStopOnFailure()()": "class-cake.validation.validator.html#setStopOnFailure()", "Validator::time()()": "class-cake.validation.validator.html#time()", "Validator::uploadedFile()()": "class-cake.validation.validator.html#uploadedFile()", "Validator::url()()": "class-cake.validation.validator.html#url()", "Validator::urlWithProtocol()()": "class-cake.validation.validator.html#urlWithProtocol()", "Validator::utf8()()": "class-cake.validation.validator.html#utf8()", "Validator::utf8Extended()()": "class-cake.validation.validator.html#utf8Extended()", "Validator::uuid()()": "class-cake.validation.validator.html#uuid()", "Validator::validate()()": "class-cake.validation.validator.html#validate()", "ValidatorAwareInterface (interface)": "interface-cake.validation.validatorawareinterface.html", "ValidatorAwareTrait (trait)": "trait-cake.validation.validatorawaretrait.html", "ValidCount (class)": "class-cake.orm.rule.validcount.html", "ValidCount::$_field": "class-cake.orm.rule.validcount.html#$_field", "ValidCount::__construct()()": "class-cake.orm.rule.validcount.html#__construct()", "ValidCount::__invoke()()": "class-cake.orm.rule.validcount.html#__invoke()", "ValueBinder (class)": "class-cake.database.valuebinder.html", "ValueBinder::$_bindings": "class-cake.database.valuebinder.html#$_bindings", "ValueBinder::$_bindingsCount": "class-cake.database.valuebinder.html#$_bindingsCount", "ValueBinder::attachTo()()": "class-cake.database.valuebinder.html#attachTo()", "ValueBinder::bind()()": "class-cake.database.valuebinder.html#bind()", "ValueBinder::bindings()()": "class-cake.database.valuebinder.html#bindings()", "ValueBinder::generateManyNamed()()": "class-cake.database.valuebinder.html#generateManyNamed()", "ValueBinder::placeholder()()": "class-cake.database.valuebinder.html#placeholder()", "ValueBinder::reset()()": "class-cake.database.valuebinder.html#reset()", "ValueBinder::resetCount()()": "class-cake.database.valuebinder.html#resetCount()", "ValuesExpression (class)": "class-cake.database.expression.valuesexpression.html", "ValuesExpression::$_castedExpressions": "class-cake.database.expression.valuesexpression.html#$_castedExpressions", "ValuesExpression::$_columns": "class-cake.database.expression.valuesexpression.html#$_columns", "ValuesExpression::$_query": "class-cake.database.expression.valuesexpression.html#$_query", "ValuesExpression::$_typeMap": "class-cake.database.expression.valuesexpression.html#$_typeMap", "ValuesExpression::$_values": "class-cake.database.expression.valuesexpression.html#$_values", "ValuesExpression::__construct()()": "class-cake.database.expression.valuesexpression.html#__construct()", "ValuesExpression::_castToExpression()()": "class-cake.database.expression.valuesexpression.html#_castToExpression()", "ValuesExpression::_columnNames()()": "class-cake.database.expression.valuesexpression.html#_columnNames()", "ValuesExpression::_processExpressions()()": "class-cake.database.expression.valuesexpression.html#_processExpressions()", "ValuesExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.valuesexpression.html#_requiresToExpressionCasting()", "ValuesExpression::add()()": "class-cake.database.expression.valuesexpression.html#add()", "ValuesExpression::getColumns()()": "class-cake.database.expression.valuesexpression.html#getColumns()", "ValuesExpression::getDefaultTypes()()": "class-cake.database.expression.valuesexpression.html#getDefaultTypes()", "ValuesExpression::getQuery()()": "class-cake.database.expression.valuesexpression.html#getQuery()", "ValuesExpression::getTypeMap()()": "class-cake.database.expression.valuesexpression.html#getTypeMap()", "ValuesExpression::getValues()()": "class-cake.database.expression.valuesexpression.html#getValues()", "ValuesExpression::setColumns()()": "class-cake.database.expression.valuesexpression.html#setColumns()", "ValuesExpression::setDefaultTypes()()": "class-cake.database.expression.valuesexpression.html#setDefaultTypes()", "ValuesExpression::setQuery()()": "class-cake.database.expression.valuesexpression.html#setQuery()", "ValuesExpression::setTypeMap()()": "class-cake.database.expression.valuesexpression.html#setTypeMap()", "ValuesExpression::setValues()()": "class-cake.database.expression.valuesexpression.html#setValues()", "ValuesExpression::sql()()": "class-cake.database.expression.valuesexpression.html#sql()", "ValuesExpression::traverse()()": "class-cake.database.expression.valuesexpression.html#traverse()", "VersionCommand (class)": "class-cake.command.versioncommand.html", "VersionCommand::$_modelFactories": "class-cake.command.versioncommand.html#$_modelFactories", "VersionCommand::$_modelType": "class-cake.command.versioncommand.html#$_modelType", "VersionCommand::$_tableLocator": "class-cake.command.versioncommand.html#$_tableLocator", "VersionCommand::$defaultTable": "class-cake.command.versioncommand.html#$defaultTable", "VersionCommand::$modelClass": "class-cake.command.versioncommand.html#$modelClass", "VersionCommand::$name": "class-cake.command.versioncommand.html#$name", "VersionCommand::__construct()()": "class-cake.command.versioncommand.html#__construct()", "VersionCommand::_setModelClass()()": "class-cake.command.versioncommand.html#_setModelClass()", "VersionCommand::abort()()": "class-cake.command.versioncommand.html#abort()", "VersionCommand::buildOptionParser()()": "class-cake.command.versioncommand.html#buildOptionParser()", "VersionCommand::defaultName()()": "class-cake.command.versioncommand.html#defaultName()", "VersionCommand::displayHelp()()": "class-cake.command.versioncommand.html#displayHelp()", "VersionCommand::execute()()": "class-cake.command.versioncommand.html#execute()", "VersionCommand::executeCommand()()": "class-cake.command.versioncommand.html#executeCommand()", "VersionCommand::fetchTable()()": "class-cake.command.versioncommand.html#fetchTable()", "VersionCommand::getDescription()()": "class-cake.command.versioncommand.html#getDescription()", "VersionCommand::getModelType()()": "class-cake.command.versioncommand.html#getModelType()", "VersionCommand::getName()()": "class-cake.command.versioncommand.html#getName()", "VersionCommand::getOptionParser()()": "class-cake.command.versioncommand.html#getOptionParser()", "VersionCommand::getRootName()()": "class-cake.command.versioncommand.html#getRootName()", "VersionCommand::getTableLocator()()": "class-cake.command.versioncommand.html#getTableLocator()", "VersionCommand::initialize()()": "class-cake.command.versioncommand.html#initialize()", "VersionCommand::loadModel()()": "class-cake.command.versioncommand.html#loadModel()", "VersionCommand::log()()": "class-cake.command.versioncommand.html#log()", "VersionCommand::modelFactory()()": "class-cake.command.versioncommand.html#modelFactory()", "VersionCommand::run()()": "class-cake.command.versioncommand.html#run()", "VersionCommand::setModelType()()": "class-cake.command.versioncommand.html#setModelType()", "VersionCommand::setName()()": "class-cake.command.versioncommand.html#setName()", "VersionCommand::setOutputLevel()()": "class-cake.command.versioncommand.html#setOutputLevel()", "VersionCommand::setTableLocator()()": "class-cake.command.versioncommand.html#setTableLocator()", "View (class)": "class-cake.view.view.html", "View (namespace)": "namespace-cake.view.html", "View::$_config": "class-cake.view.view.html#$_config", "View::$_configInitialized": "class-cake.view.view.html#$_configInitialized", "View::$_current": "class-cake.view.view.html#$_current", "View::$_currentType": "class-cake.view.view.html#$_currentType", "View::$_defaultConfig": "class-cake.view.view.html#$_defaultConfig", "View::$_eventClass": "class-cake.view.view.html#$_eventClass", "View::$_eventManager": "class-cake.view.view.html#$_eventManager", "View::$_ext": "class-cake.view.view.html#$_ext", "View::$_helpers": "class-cake.view.view.html#$_helpers", "View::$_parents": "class-cake.view.view.html#$_parents", "View::$_passedVars": "class-cake.view.view.html#$_passedVars", "View::$_paths": "class-cake.view.view.html#$_paths", "View::$_pathsForPlugin": "class-cake.view.view.html#$_pathsForPlugin", "View::$_stack": "class-cake.view.view.html#$_stack", "View::$_viewBlockClass": "class-cake.view.view.html#$_viewBlockClass", "View::$autoLayout": "class-cake.view.view.html#$autoLayout", "View::$Blocks": "class-cake.view.view.html#$Blocks", "View::$Breadcrumbs": "class-cake.view.view.html#$Breadcrumbs", "View::$elementCache": "class-cake.view.view.html#$elementCache", "View::$Flash": "class-cake.view.view.html#$Flash", "View::$Form": "class-cake.view.view.html#$Form", "View::$helpers": "class-cake.view.view.html#$helpers", "View::$Html": "class-cake.view.view.html#$Html", "View::$layout": "class-cake.view.view.html#$layout", "View::$layoutPath": "class-cake.view.view.html#$layoutPath", "View::$name": "class-cake.view.view.html#$name", "View::$Number": "class-cake.view.view.html#$Number", "View::$Paginator": "class-cake.view.view.html#$Paginator", "View::$plugin": "class-cake.view.view.html#$plugin", "View::$request": "class-cake.view.view.html#$request", "View::$response": "class-cake.view.view.html#$response", "View::$subDir": "class-cake.view.view.html#$subDir", "View::$template": "class-cake.view.view.html#$template", "View::$templatePath": "class-cake.view.view.html#$templatePath", "View::$Text": "class-cake.view.view.html#$Text", "View::$theme": "class-cake.view.view.html#$theme", "View::$Time": "class-cake.view.view.html#$Time", "View::$Url": "class-cake.view.view.html#$Url", "View::$viewVars": "class-cake.view.view.html#$viewVars", "View::__construct()()": "class-cake.view.view.html#__construct()", "View::__get()()": "class-cake.view.view.html#__get()", "View::_checkFilePath()()": "class-cake.view.view.html#_checkFilePath()", "View::_configDelete()()": "class-cake.view.view.html#_configDelete()", "View::_configRead()()": "class-cake.view.view.html#_configRead()", "View::_configWrite()()": "class-cake.view.view.html#_configWrite()", "View::_createCell()()": "class-cake.view.view.html#_createCell()", "View::_elementCache()()": "class-cake.view.view.html#_elementCache()", "View::_evaluate()()": "class-cake.view.view.html#_evaluate()", "View::_getElementFileName()()": "class-cake.view.view.html#_getElementFileName()", "View::_getLayoutFileName()()": "class-cake.view.view.html#_getLayoutFileName()", "View::_getSubPaths()()": "class-cake.view.view.html#_getSubPaths()", "View::_getTemplateFileName()()": "class-cake.view.view.html#_getTemplateFileName()", "View::_inflectTemplateFileName()()": "class-cake.view.view.html#_inflectTemplateFileName()", "View::_paths()()": "class-cake.view.view.html#_paths()", "View::_render()()": "class-cake.view.view.html#_render()", "View::_renderElement()()": "class-cake.view.view.html#_renderElement()", "View::append()()": "class-cake.view.view.html#append()", "View::assign()()": "class-cake.view.view.html#assign()", "View::blocks()()": "class-cake.view.view.html#blocks()", "View::cache()()": "class-cake.view.view.html#cache()", "View::cell()()": "class-cake.view.view.html#cell()", "View::configShallow()()": "class-cake.view.view.html#configShallow()", "View::contentType()()": "class-cake.view.view.html#contentType()", "View::disableAutoLayout()()": "class-cake.view.view.html#disableAutoLayout()", "View::dispatchEvent()()": "class-cake.view.view.html#dispatchEvent()", "View::element()()": "class-cake.view.view.html#element()", "View::elementExists()()": "class-cake.view.view.html#elementExists()", "View::enableAutoLayout()()": "class-cake.view.view.html#enableAutoLayout()", "View::end()()": "class-cake.view.view.html#end()", "View::exists()()": "class-cake.view.view.html#exists()", "View::extend()()": "class-cake.view.view.html#extend()", "View::fetch()()": "class-cake.view.view.html#fetch()", "View::get()()": "class-cake.view.view.html#get()", "View::getConfig()()": "class-cake.view.view.html#getConfig()", "View::getConfigOrFail()()": "class-cake.view.view.html#getConfigOrFail()", "View::getCurrentType()()": "class-cake.view.view.html#getCurrentType()", "View::getElementPaths()()": "class-cake.view.view.html#getElementPaths()", "View::getEventManager()()": "class-cake.view.view.html#getEventManager()", "View::getLayout()()": "class-cake.view.view.html#getLayout()", "View::getLayoutPath()()": "class-cake.view.view.html#getLayoutPath()", "View::getLayoutPaths()()": "class-cake.view.view.html#getLayoutPaths()", "View::getName()()": "class-cake.view.view.html#getName()", "View::getPlugin()()": "class-cake.view.view.html#getPlugin()", "View::getRequest()()": "class-cake.view.view.html#getRequest()", "View::getResponse()()": "class-cake.view.view.html#getResponse()", "View::getSubDir()()": "class-cake.view.view.html#getSubDir()", "View::getTemplate()()": "class-cake.view.view.html#getTemplate()", "View::getTemplatePath()()": "class-cake.view.view.html#getTemplatePath()", "View::getTheme()()": "class-cake.view.view.html#getTheme()", "View::getVars()()": "class-cake.view.view.html#getVars()", "View::helpers()()": "class-cake.view.view.html#helpers()", "View::initialize()()": "class-cake.view.view.html#initialize()", "View::isAutoLayoutEnabled()()": "class-cake.view.view.html#isAutoLayoutEnabled()", "View::loadHelper()()": "class-cake.view.view.html#loadHelper()", "View::loadHelpers()()": "class-cake.view.view.html#loadHelpers()", "View::log()()": "class-cake.view.view.html#log()", "View::pluginSplit()()": "class-cake.view.view.html#pluginSplit()", "View::prepend()()": "class-cake.view.view.html#prepend()", "View::render()()": "class-cake.view.view.html#render()", "View::renderLayout()()": "class-cake.view.view.html#renderLayout()", "View::reset()()": "class-cake.view.view.html#reset()", "View::set()()": "class-cake.view.view.html#set()", "View::setConfig()()": "class-cake.view.view.html#setConfig()", "View::setContentType()()": "class-cake.view.view.html#setContentType()", "View::setElementCache()()": "class-cake.view.view.html#setElementCache()", "View::setEventManager()()": "class-cake.view.view.html#setEventManager()", "View::setLayout()()": "class-cake.view.view.html#setLayout()", "View::setLayoutPath()()": "class-cake.view.view.html#setLayoutPath()", "View::setPlugin()()": "class-cake.view.view.html#setPlugin()", "View::setRequest()()": "class-cake.view.view.html#setRequest()", "View::setResponse()()": "class-cake.view.view.html#setResponse()", "View::setSubDir()()": "class-cake.view.view.html#setSubDir()", "View::setTemplate()()": "class-cake.view.view.html#setTemplate()", "View::setTemplatePath()()": "class-cake.view.view.html#setTemplatePath()", "View::setTheme()()": "class-cake.view.view.html#setTheme()", "View::start()()": "class-cake.view.view.html#start()", "View\\Exception (namespace)": "namespace-cake.view.exception.html", "View\\Form (namespace)": "namespace-cake.view.form.html", "View\\Helper (namespace)": "namespace-cake.view.helper.html", "View\\Widget (namespace)": "namespace-cake.view.widget.html", "ViewBlock (class)": "class-cake.view.viewblock.html", "ViewBlock::$_active": "class-cake.view.viewblock.html#$_active", "ViewBlock::$_blocks": "class-cake.view.viewblock.html#$_blocks", "ViewBlock::$_discardActiveBufferOnEnd": "class-cake.view.viewblock.html#$_discardActiveBufferOnEnd", "ViewBlock::active()()": "class-cake.view.viewblock.html#active()", "ViewBlock::concat()()": "class-cake.view.viewblock.html#concat()", "ViewBlock::end()()": "class-cake.view.viewblock.html#end()", "ViewBlock::exists()()": "class-cake.view.viewblock.html#exists()", "ViewBlock::get()()": "class-cake.view.viewblock.html#get()", "ViewBlock::keys()()": "class-cake.view.viewblock.html#keys()", "ViewBlock::set()()": "class-cake.view.viewblock.html#set()", "ViewBlock::start()()": "class-cake.view.viewblock.html#start()", "ViewBlock::unclosed()()": "class-cake.view.viewblock.html#unclosed()", "ViewBuilder (class)": "class-cake.view.viewbuilder.html", "ViewBuilder::$_autoLayout": "class-cake.view.viewbuilder.html#$_autoLayout", "ViewBuilder::$_className": "class-cake.view.viewbuilder.html#$_className", "ViewBuilder::$_helpers": "class-cake.view.viewbuilder.html#$_helpers", "ViewBuilder::$_layout": "class-cake.view.viewbuilder.html#$_layout", "ViewBuilder::$_layoutPath": "class-cake.view.viewbuilder.html#$_layoutPath", "ViewBuilder::$_name": "class-cake.view.viewbuilder.html#$_name", "ViewBuilder::$_options": "class-cake.view.viewbuilder.html#$_options", "ViewBuilder::$_plugin": "class-cake.view.viewbuilder.html#$_plugin", "ViewBuilder::$_template": "class-cake.view.viewbuilder.html#$_template", "ViewBuilder::$_templatePath": "class-cake.view.viewbuilder.html#$_templatePath", "ViewBuilder::$_theme": "class-cake.view.viewbuilder.html#$_theme", "ViewBuilder::$_vars": "class-cake.view.viewbuilder.html#$_vars", "ViewBuilder::__serialize()()": "class-cake.view.viewbuilder.html#__serialize()", "ViewBuilder::__unserialize()()": "class-cake.view.viewbuilder.html#__unserialize()", "ViewBuilder::_checkViewVars()()": "class-cake.view.viewbuilder.html#_checkViewVars()", "ViewBuilder::addHelper()()": "class-cake.view.viewbuilder.html#addHelper()", "ViewBuilder::addHelpers()()": "class-cake.view.viewbuilder.html#addHelpers()", "ViewBuilder::build()()": "class-cake.view.viewbuilder.html#build()", "ViewBuilder::createFromArray()()": "class-cake.view.viewbuilder.html#createFromArray()", "ViewBuilder::disableAutoLayout()()": "class-cake.view.viewbuilder.html#disableAutoLayout()", "ViewBuilder::enableAutoLayout()()": "class-cake.view.viewbuilder.html#enableAutoLayout()", "ViewBuilder::getClassName()()": "class-cake.view.viewbuilder.html#getClassName()", "ViewBuilder::getHelpers()()": "class-cake.view.viewbuilder.html#getHelpers()", "ViewBuilder::getLayout()()": "class-cake.view.viewbuilder.html#getLayout()", "ViewBuilder::getLayoutPath()()": "class-cake.view.viewbuilder.html#getLayoutPath()", "ViewBuilder::getName()()": "class-cake.view.viewbuilder.html#getName()", "ViewBuilder::getOption()()": "class-cake.view.viewbuilder.html#getOption()", "ViewBuilder::getOptions()()": "class-cake.view.viewbuilder.html#getOptions()", "ViewBuilder::getPlugin()()": "class-cake.view.viewbuilder.html#getPlugin()", "ViewBuilder::getTemplate()()": "class-cake.view.viewbuilder.html#getTemplate()", "ViewBuilder::getTemplatePath()()": "class-cake.view.viewbuilder.html#getTemplatePath()", "ViewBuilder::getTheme()()": "class-cake.view.viewbuilder.html#getTheme()", "ViewBuilder::getVar()()": "class-cake.view.viewbuilder.html#getVar()", "ViewBuilder::getVars()()": "class-cake.view.viewbuilder.html#getVars()", "ViewBuilder::hasVar()()": "class-cake.view.viewbuilder.html#hasVar()", "ViewBuilder::isAutoLayoutEnabled()()": "class-cake.view.viewbuilder.html#isAutoLayoutEnabled()", "ViewBuilder::jsonSerialize()()": "class-cake.view.viewbuilder.html#jsonSerialize()", "ViewBuilder::serialize()()": "class-cake.view.viewbuilder.html#serialize()", "ViewBuilder::setClassName()()": "class-cake.view.viewbuilder.html#setClassName()", "ViewBuilder::setHelpers()()": "class-cake.view.viewbuilder.html#setHelpers()", "ViewBuilder::setLayout()()": "class-cake.view.viewbuilder.html#setLayout()", "ViewBuilder::setLayoutPath()()": "class-cake.view.viewbuilder.html#setLayoutPath()", "ViewBuilder::setName()()": "class-cake.view.viewbuilder.html#setName()", "ViewBuilder::setOption()()": "class-cake.view.viewbuilder.html#setOption()", "ViewBuilder::setOptions()()": "class-cake.view.viewbuilder.html#setOptions()", "ViewBuilder::setPlugin()()": "class-cake.view.viewbuilder.html#setPlugin()", "ViewBuilder::setTemplate()()": "class-cake.view.viewbuilder.html#setTemplate()", "ViewBuilder::setTemplatePath()()": "class-cake.view.viewbuilder.html#setTemplatePath()", "ViewBuilder::setTheme()()": "class-cake.view.viewbuilder.html#setTheme()", "ViewBuilder::setVar()()": "class-cake.view.viewbuilder.html#setVar()", "ViewBuilder::setVars()()": "class-cake.view.viewbuilder.html#setVars()", "ViewBuilder::unserialize()()": "class-cake.view.viewbuilder.html#unserialize()", "ViewVarsTrait (trait)": "trait-cake.view.viewvarstrait.html", "WeakPasswordHasher (class)": "class-cake.auth.weakpasswordhasher.html", "WeakPasswordHasher::$_config": "class-cake.auth.weakpasswordhasher.html#$_config", "WeakPasswordHasher::$_configInitialized": "class-cake.auth.weakpasswordhasher.html#$_configInitialized", "WeakPasswordHasher::$_defaultConfig": "class-cake.auth.weakpasswordhasher.html#$_defaultConfig", "WeakPasswordHasher::__construct()()": "class-cake.auth.weakpasswordhasher.html#__construct()", "WeakPasswordHasher::_configDelete()()": "class-cake.auth.weakpasswordhasher.html#_configDelete()", "WeakPasswordHasher::_configRead()()": "class-cake.auth.weakpasswordhasher.html#_configRead()", "WeakPasswordHasher::_configWrite()()": "class-cake.auth.weakpasswordhasher.html#_configWrite()", "WeakPasswordHasher::check()()": "class-cake.auth.weakpasswordhasher.html#check()", "WeakPasswordHasher::configShallow()()": "class-cake.auth.weakpasswordhasher.html#configShallow()", "WeakPasswordHasher::getConfig()()": "class-cake.auth.weakpasswordhasher.html#getConfig()", "WeakPasswordHasher::getConfigOrFail()()": "class-cake.auth.weakpasswordhasher.html#getConfigOrFail()", "WeakPasswordHasher::hash()()": "class-cake.auth.weakpasswordhasher.html#hash()", "WeakPasswordHasher::needsRehash()()": "class-cake.auth.weakpasswordhasher.html#needsRehash()", "WeakPasswordHasher::setConfig()()": "class-cake.auth.weakpasswordhasher.html#setConfig()", "WebExceptionRenderer (class)": "class-cake.error.renderer.webexceptionrenderer.html", "WebExceptionRenderer::$controller": "class-cake.error.renderer.webexceptionrenderer.html#$controller", "WebExceptionRenderer::$error": "class-cake.error.renderer.webexceptionrenderer.html#$error", "WebExceptionRenderer::$exceptionHttpCodes": "class-cake.error.renderer.webexceptionrenderer.html#$exceptionHttpCodes", "WebExceptionRenderer::$method": "class-cake.error.renderer.webexceptionrenderer.html#$method", "WebExceptionRenderer::$request": "class-cake.error.renderer.webexceptionrenderer.html#$request", "WebExceptionRenderer::$template": "class-cake.error.renderer.webexceptionrenderer.html#$template", "WebExceptionRenderer::__construct()()": "class-cake.error.renderer.webexceptionrenderer.html#__construct()", "WebExceptionRenderer::__debugInfo()()": "class-cake.error.renderer.webexceptionrenderer.html#__debugInfo()", "WebExceptionRenderer::_customMethod()()": "class-cake.error.renderer.webexceptionrenderer.html#_customMethod()", "WebExceptionRenderer::_getController()()": "class-cake.error.renderer.webexceptionrenderer.html#_getController()", "WebExceptionRenderer::_message()()": "class-cake.error.renderer.webexceptionrenderer.html#_message()", "WebExceptionRenderer::_method()()": "class-cake.error.renderer.webexceptionrenderer.html#_method()", "WebExceptionRenderer::_outputMessage()()": "class-cake.error.renderer.webexceptionrenderer.html#_outputMessage()", "WebExceptionRenderer::_outputMessageSafe()()": "class-cake.error.renderer.webexceptionrenderer.html#_outputMessageSafe()", "WebExceptionRenderer::_shutdown()()": "class-cake.error.renderer.webexceptionrenderer.html#_shutdown()", "WebExceptionRenderer::_template()()": "class-cake.error.renderer.webexceptionrenderer.html#_template()", "WebExceptionRenderer::clearOutput()()": "class-cake.error.renderer.webexceptionrenderer.html#clearOutput()", "WebExceptionRenderer::getHttpCode()()": "class-cake.error.renderer.webexceptionrenderer.html#getHttpCode()", "WebExceptionRenderer::render()()": "class-cake.error.renderer.webexceptionrenderer.html#render()", "WebExceptionRenderer::write()()": "class-cake.error.renderer.webexceptionrenderer.html#write()", "WhenThenExpression (class)": "class-cake.database.expression.whenthenexpression.html", "WhenThenExpression::$_typeMap": "class-cake.database.expression.whenthenexpression.html#$_typeMap", "WhenThenExpression::$hasThenBeenDefined": "class-cake.database.expression.whenthenexpression.html#$hasThenBeenDefined", "WhenThenExpression::$then": "class-cake.database.expression.whenthenexpression.html#$then", "WhenThenExpression::$thenType": "class-cake.database.expression.whenthenexpression.html#$thenType", "WhenThenExpression::$validClauseNames": "class-cake.database.expression.whenthenexpression.html#$validClauseNames", "WhenThenExpression::$when": "class-cake.database.expression.whenthenexpression.html#$when", "WhenThenExpression::$whenType": "class-cake.database.expression.whenthenexpression.html#$whenType", "WhenThenExpression::__clone()()": "class-cake.database.expression.whenthenexpression.html#__clone()", "WhenThenExpression::__construct()()": "class-cake.database.expression.whenthenexpression.html#__construct()", "WhenThenExpression::_castToExpression()()": "class-cake.database.expression.whenthenexpression.html#_castToExpression()", "WhenThenExpression::_requiresToExpressionCasting()()": "class-cake.database.expression.whenthenexpression.html#_requiresToExpressionCasting()", "WhenThenExpression::clause()()": "class-cake.database.expression.whenthenexpression.html#clause()", "WhenThenExpression::compileNullableValue()()": "class-cake.database.expression.whenthenexpression.html#compileNullableValue()", "WhenThenExpression::getResultType()()": "class-cake.database.expression.whenthenexpression.html#getResultType()", "WhenThenExpression::inferType()()": "class-cake.database.expression.whenthenexpression.html#inferType()", "WhenThenExpression::sql()()": "class-cake.database.expression.whenthenexpression.html#sql()", "WhenThenExpression::then()()": "class-cake.database.expression.whenthenexpression.html#then()", "WhenThenExpression::traverse()()": "class-cake.database.expression.whenthenexpression.html#traverse()", "WhenThenExpression::when()()": "class-cake.database.expression.whenthenexpression.html#when()", "WidgetInterface (interface)": "interface-cake.view.widget.widgetinterface.html", "WidgetLocator (class)": "class-cake.view.widget.widgetlocator.html", "WidgetLocator::$_templates": "class-cake.view.widget.widgetlocator.html#$_templates", "WidgetLocator::$_view": "class-cake.view.widget.widgetlocator.html#$_view", "WidgetLocator::$_widgets": "class-cake.view.widget.widgetlocator.html#$_widgets", "WidgetLocator::__construct()()": "class-cake.view.widget.widgetlocator.html#__construct()", "WidgetLocator::_resolveWidget()()": "class-cake.view.widget.widgetlocator.html#_resolveWidget()", "WidgetLocator::add()()": "class-cake.view.widget.widgetlocator.html#add()", "WidgetLocator::clear()()": "class-cake.view.widget.widgetlocator.html#clear()", "WidgetLocator::get()()": "class-cake.view.widget.widgetlocator.html#get()", "WidgetLocator::load()()": "class-cake.view.widget.widgetlocator.html#load()", "WincacheEngine (class)": "class-cake.cache.engine.wincacheengine.html", "WincacheEngine::$_compiledGroupNames": "class-cake.cache.engine.wincacheengine.html#$_compiledGroupNames", "WincacheEngine::$_config": "class-cake.cache.engine.wincacheengine.html#$_config", "WincacheEngine::$_configInitialized": "class-cake.cache.engine.wincacheengine.html#$_configInitialized", "WincacheEngine::$_defaultConfig": "class-cake.cache.engine.wincacheengine.html#$_defaultConfig", "WincacheEngine::$_groupPrefix": "class-cake.cache.engine.wincacheengine.html#$_groupPrefix", "WincacheEngine::_configDelete()()": "class-cake.cache.engine.wincacheengine.html#_configDelete()", "WincacheEngine::_configRead()()": "class-cake.cache.engine.wincacheengine.html#_configRead()", "WincacheEngine::_configWrite()()": "class-cake.cache.engine.wincacheengine.html#_configWrite()", "WincacheEngine::_key()()": "class-cake.cache.engine.wincacheengine.html#_key()", "WincacheEngine::add()()": "class-cake.cache.engine.wincacheengine.html#add()", "WincacheEngine::clear()()": "class-cake.cache.engine.wincacheengine.html#clear()", "WincacheEngine::clearGroup()()": "class-cake.cache.engine.wincacheengine.html#clearGroup()", "WincacheEngine::configShallow()()": "class-cake.cache.engine.wincacheengine.html#configShallow()", "WincacheEngine::decrement()()": "class-cake.cache.engine.wincacheengine.html#decrement()", "WincacheEngine::delete()()": "class-cake.cache.engine.wincacheengine.html#delete()", "WincacheEngine::deleteMultiple()()": "class-cake.cache.engine.wincacheengine.html#deleteMultiple()", "WincacheEngine::duration()()": "class-cake.cache.engine.wincacheengine.html#duration()", "WincacheEngine::ensureValidKey()()": "class-cake.cache.engine.wincacheengine.html#ensureValidKey()", "WincacheEngine::ensureValidType()()": "class-cake.cache.engine.wincacheengine.html#ensureValidType()", "WincacheEngine::get()()": "class-cake.cache.engine.wincacheengine.html#get()", "WincacheEngine::getConfig()()": "class-cake.cache.engine.wincacheengine.html#getConfig()", "WincacheEngine::getConfigOrFail()()": "class-cake.cache.engine.wincacheengine.html#getConfigOrFail()", "WincacheEngine::getMultiple()()": "class-cake.cache.engine.wincacheengine.html#getMultiple()", "WincacheEngine::groups()()": "class-cake.cache.engine.wincacheengine.html#groups()", "WincacheEngine::has()()": "class-cake.cache.engine.wincacheengine.html#has()", "WincacheEngine::increment()()": "class-cake.cache.engine.wincacheengine.html#increment()", "WincacheEngine::init()()": "class-cake.cache.engine.wincacheengine.html#init()", "WincacheEngine::set()()": "class-cake.cache.engine.wincacheengine.html#set()", "WincacheEngine::setConfig()()": "class-cake.cache.engine.wincacheengine.html#setConfig()", "WincacheEngine::setMultiple()()": "class-cake.cache.engine.wincacheengine.html#setMultiple()", "WincacheEngine::warning()()": "class-cake.cache.engine.wincacheengine.html#warning()", "WindowExpression (class)": "class-cake.database.expression.windowexpression.html", "WindowExpression::$exclusion": "class-cake.database.expression.windowexpression.html#$exclusion", "WindowExpression::$frame": "class-cake.database.expression.windowexpression.html#$frame", "WindowExpression::$name": "class-cake.database.expression.windowexpression.html#$name", "WindowExpression::$order": "class-cake.database.expression.windowexpression.html#$order", "WindowExpression::$partitions": "class-cake.database.expression.windowexpression.html#$partitions", "WindowExpression::__clone()()": "class-cake.database.expression.windowexpression.html#__clone()", "WindowExpression::__construct()()": "class-cake.database.expression.windowexpression.html#__construct()", "WindowExpression::buildOffsetSql()()": "class-cake.database.expression.windowexpression.html#buildOffsetSql()", "WindowExpression::excludeCurrent()()": "class-cake.database.expression.windowexpression.html#excludeCurrent()", "WindowExpression::excludeGroup()()": "class-cake.database.expression.windowexpression.html#excludeGroup()", "WindowExpression::excludeTies()()": "class-cake.database.expression.windowexpression.html#excludeTies()", "WindowExpression::frame()()": "class-cake.database.expression.windowexpression.html#frame()", "WindowExpression::groups()()": "class-cake.database.expression.windowexpression.html#groups()", "WindowExpression::isNamedOnly()()": "class-cake.database.expression.windowexpression.html#isNamedOnly()", "WindowExpression::name()()": "class-cake.database.expression.windowexpression.html#name()", "WindowExpression::order()()": "class-cake.database.expression.windowexpression.html#order()", "WindowExpression::partition()()": "class-cake.database.expression.windowexpression.html#partition()", "WindowExpression::range()()": "class-cake.database.expression.windowexpression.html#range()", "WindowExpression::rows()()": "class-cake.database.expression.windowexpression.html#rows()", "WindowExpression::sql()()": "class-cake.database.expression.windowexpression.html#sql()", "WindowExpression::traverse()()": "class-cake.database.expression.windowexpression.html#traverse()", "WindowInterface (interface)": "interface-cake.database.expression.windowinterface.html", "Xml (class)": "class-cake.utility.xml.html", "Xml::_createChild()()": "class-cake.utility.xml.html#_createChild()", "Xml::_fromArray()()": "class-cake.utility.xml.html#_fromArray()", "Xml::_loadXml()()": "class-cake.utility.xml.html#_loadXml()", "Xml::_toArray()()": "class-cake.utility.xml.html#_toArray()", "Xml::build()()": "class-cake.utility.xml.html#build()", "Xml::fromArray()()": "class-cake.utility.xml.html#fromArray()", "Xml::load()()": "class-cake.utility.xml.html#load()", "Xml::loadHtml()()": "class-cake.utility.xml.html#loadHtml()", "Xml::toArray()()": "class-cake.utility.xml.html#toArray()", "XmlException (class)": "class-cake.utility.exception.xmlexception.html", "XmlView (class)": "class-cake.view.xmlview.html", "XmlView::$_config": "class-cake.view.xmlview.html#$_config", "XmlView::$_configInitialized": "class-cake.view.xmlview.html#$_configInitialized", "XmlView::$_current": "class-cake.view.xmlview.html#$_current", "XmlView::$_currentType": "class-cake.view.xmlview.html#$_currentType", "XmlView::$_defaultConfig": "class-cake.view.xmlview.html#$_defaultConfig", "XmlView::$_eventClass": "class-cake.view.xmlview.html#$_eventClass", "XmlView::$_eventManager": "class-cake.view.xmlview.html#$_eventManager", "XmlView::$_ext": "class-cake.view.xmlview.html#$_ext", "XmlView::$_helpers": "class-cake.view.xmlview.html#$_helpers", "XmlView::$_parents": "class-cake.view.xmlview.html#$_parents", "XmlView::$_passedVars": "class-cake.view.xmlview.html#$_passedVars", "XmlView::$_paths": "class-cake.view.xmlview.html#$_paths", "XmlView::$_pathsForPlugin": "class-cake.view.xmlview.html#$_pathsForPlugin", "XmlView::$_responseType": "class-cake.view.xmlview.html#$_responseType", "XmlView::$_stack": "class-cake.view.xmlview.html#$_stack", "XmlView::$_viewBlockClass": "class-cake.view.xmlview.html#$_viewBlockClass", "XmlView::$autoLayout": "class-cake.view.xmlview.html#$autoLayout", "XmlView::$Blocks": "class-cake.view.xmlview.html#$Blocks", "XmlView::$Breadcrumbs": "class-cake.view.xmlview.html#$Breadcrumbs", "XmlView::$elementCache": "class-cake.view.xmlview.html#$elementCache", "XmlView::$Flash": "class-cake.view.xmlview.html#$Flash", "XmlView::$Form": "class-cake.view.xmlview.html#$Form", "XmlView::$helpers": "class-cake.view.xmlview.html#$helpers", "XmlView::$Html": "class-cake.view.xmlview.html#$Html", "XmlView::$layout": "class-cake.view.xmlview.html#$layout", "XmlView::$layoutPath": "class-cake.view.xmlview.html#$layoutPath", "XmlView::$name": "class-cake.view.xmlview.html#$name", "XmlView::$Number": "class-cake.view.xmlview.html#$Number", "XmlView::$Paginator": "class-cake.view.xmlview.html#$Paginator", "XmlView::$plugin": "class-cake.view.xmlview.html#$plugin", "XmlView::$request": "class-cake.view.xmlview.html#$request", "XmlView::$response": "class-cake.view.xmlview.html#$response", "XmlView::$subDir": "class-cake.view.xmlview.html#$subDir", "XmlView::$template": "class-cake.view.xmlview.html#$template", "XmlView::$templatePath": "class-cake.view.xmlview.html#$templatePath", "XmlView::$Text": "class-cake.view.xmlview.html#$Text", "XmlView::$theme": "class-cake.view.xmlview.html#$theme", "XmlView::$Time": "class-cake.view.xmlview.html#$Time", "XmlView::$Url": "class-cake.view.xmlview.html#$Url", "XmlView::$viewVars": "class-cake.view.xmlview.html#$viewVars", "XmlView::__construct()()": "class-cake.view.xmlview.html#__construct()", "XmlView::__get()()": "class-cake.view.xmlview.html#__get()", "XmlView::_checkFilePath()()": "class-cake.view.xmlview.html#_checkFilePath()", "XmlView::_configDelete()()": "class-cake.view.xmlview.html#_configDelete()", "XmlView::_configRead()()": "class-cake.view.xmlview.html#_configRead()", "XmlView::_configWrite()()": "class-cake.view.xmlview.html#_configWrite()", "XmlView::_createCell()()": "class-cake.view.xmlview.html#_createCell()", "XmlView::_elementCache()()": "class-cake.view.xmlview.html#_elementCache()", "XmlView::_evaluate()()": "class-cake.view.xmlview.html#_evaluate()", "XmlView::_getElementFileName()()": "class-cake.view.xmlview.html#_getElementFileName()", "XmlView::_getLayoutFileName()()": "class-cake.view.xmlview.html#_getLayoutFileName()", "XmlView::_getSubPaths()()": "class-cake.view.xmlview.html#_getSubPaths()", "XmlView::_getTemplateFileName()()": "class-cake.view.xmlview.html#_getTemplateFileName()", "XmlView::_inflectTemplateFileName()()": "class-cake.view.xmlview.html#_inflectTemplateFileName()", "XmlView::_paths()()": "class-cake.view.xmlview.html#_paths()", "XmlView::_render()()": "class-cake.view.xmlview.html#_render()", "XmlView::_renderElement()()": "class-cake.view.xmlview.html#_renderElement()", "XmlView::_serialize()()": "class-cake.view.xmlview.html#_serialize()", "XmlView::append()()": "class-cake.view.xmlview.html#append()", "XmlView::assign()()": "class-cake.view.xmlview.html#assign()", "XmlView::blocks()()": "class-cake.view.xmlview.html#blocks()", "XmlView::cache()()": "class-cake.view.xmlview.html#cache()", "XmlView::cell()()": "class-cake.view.xmlview.html#cell()", "XmlView::configShallow()()": "class-cake.view.xmlview.html#configShallow()", "XmlView::contentType()()": "class-cake.view.xmlview.html#contentType()", "XmlView::disableAutoLayout()()": "class-cake.view.xmlview.html#disableAutoLayout()", "XmlView::dispatchEvent()()": "class-cake.view.xmlview.html#dispatchEvent()", "XmlView::element()()": "class-cake.view.xmlview.html#element()", "XmlView::elementExists()()": "class-cake.view.xmlview.html#elementExists()", "XmlView::enableAutoLayout()()": "class-cake.view.xmlview.html#enableAutoLayout()", "XmlView::end()()": "class-cake.view.xmlview.html#end()", "XmlView::exists()()": "class-cake.view.xmlview.html#exists()", "XmlView::extend()()": "class-cake.view.xmlview.html#extend()", "XmlView::fetch()()": "class-cake.view.xmlview.html#fetch()", "XmlView::get()()": "class-cake.view.xmlview.html#get()", "XmlView::getConfig()()": "class-cake.view.xmlview.html#getConfig()", "XmlView::getConfigOrFail()()": "class-cake.view.xmlview.html#getConfigOrFail()", "XmlView::getCurrentType()()": "class-cake.view.xmlview.html#getCurrentType()", "XmlView::getElementPaths()()": "class-cake.view.xmlview.html#getElementPaths()", "XmlView::getEventManager()()": "class-cake.view.xmlview.html#getEventManager()", "XmlView::getLayout()()": "class-cake.view.xmlview.html#getLayout()", "XmlView::getLayoutPath()()": "class-cake.view.xmlview.html#getLayoutPath()", "XmlView::getLayoutPaths()()": "class-cake.view.xmlview.html#getLayoutPaths()", "XmlView::getName()()": "class-cake.view.xmlview.html#getName()", "XmlView::getPlugin()()": "class-cake.view.xmlview.html#getPlugin()", "XmlView::getRequest()()": "class-cake.view.xmlview.html#getRequest()", "XmlView::getResponse()()": "class-cake.view.xmlview.html#getResponse()", "XmlView::getSubDir()()": "class-cake.view.xmlview.html#getSubDir()", "XmlView::getTemplate()()": "class-cake.view.xmlview.html#getTemplate()", "XmlView::getTemplatePath()()": "class-cake.view.xmlview.html#getTemplatePath()", "XmlView::getTheme()()": "class-cake.view.xmlview.html#getTheme()", "XmlView::getVars()()": "class-cake.view.xmlview.html#getVars()", "XmlView::helpers()()": "class-cake.view.xmlview.html#helpers()", "XmlView::initialize()()": "class-cake.view.xmlview.html#initialize()", "XmlView::isAutoLayoutEnabled()()": "class-cake.view.xmlview.html#isAutoLayoutEnabled()", "XmlView::loadHelper()()": "class-cake.view.xmlview.html#loadHelper()", "XmlView::loadHelpers()()": "class-cake.view.xmlview.html#loadHelpers()", "XmlView::log()()": "class-cake.view.xmlview.html#log()", "XmlView::pluginSplit()()": "class-cake.view.xmlview.html#pluginSplit()", "XmlView::prepend()()": "class-cake.view.xmlview.html#prepend()", "XmlView::render()()": "class-cake.view.xmlview.html#render()", "XmlView::renderLayout()()": "class-cake.view.xmlview.html#renderLayout()", "XmlView::reset()()": "class-cake.view.xmlview.html#reset()", "XmlView::set()()": "class-cake.view.xmlview.html#set()", "XmlView::setConfig()()": "class-cake.view.xmlview.html#setConfig()", "XmlView::setContentType()()": "class-cake.view.xmlview.html#setContentType()", "XmlView::setElementCache()()": "class-cake.view.xmlview.html#setElementCache()", "XmlView::setEventManager()()": "class-cake.view.xmlview.html#setEventManager()", "XmlView::setLayout()()": "class-cake.view.xmlview.html#setLayout()", "XmlView::setLayoutPath()()": "class-cake.view.xmlview.html#setLayoutPath()", "XmlView::setPlugin()()": "class-cake.view.xmlview.html#setPlugin()", "XmlView::setRequest()()": "class-cake.view.xmlview.html#setRequest()", "XmlView::setResponse()()": "class-cake.view.xmlview.html#setResponse()", "XmlView::setSubDir()()": "class-cake.view.xmlview.html#setSubDir()", "XmlView::setTemplate()()": "class-cake.view.xmlview.html#setTemplate()", "XmlView::setTemplatePath()()": "class-cake.view.xmlview.html#setTemplatePath()", "XmlView::setTheme()()": "class-cake.view.xmlview.html#setTheme()", "XmlView::start()()": "class-cake.view.xmlview.html#start()", "YearWidget (class)": "class-cake.view.widget.yearwidget.html", "YearWidget::$_select": "class-cake.view.widget.yearwidget.html#$_select", "YearWidget::$_templates": "class-cake.view.widget.yearwidget.html#$_templates", "YearWidget::$defaults": "class-cake.view.widget.yearwidget.html#$defaults", "YearWidget::__construct()()": "class-cake.view.widget.yearwidget.html#__construct()", "YearWidget::mergeDefaults()()": "class-cake.view.widget.yearwidget.html#mergeDefaults()", "YearWidget::render()()": "class-cake.view.widget.yearwidget.html#render()", "YearWidget::secureFields()()": "class-cake.view.widget.yearwidget.html#secureFields()", "YearWidget::setMaxLength()()": "class-cake.view.widget.yearwidget.html#setMaxLength()", "YearWidget::setRequired()()": "class-cake.view.widget.yearwidget.html#setRequired()", "YearWidget::setStep()()": "class-cake.view.widget.yearwidget.html#setStep()", "ZipIterator (class)": "class-cake.collection.iterator.zipiterator.html", "ZipIterator::$_callback": "class-cake.collection.iterator.zipiterator.html#$_callback", "ZipIterator::$_iterators": "class-cake.collection.iterator.zipiterator.html#$_iterators", "ZipIterator::__construct()()": "class-cake.collection.iterator.zipiterator.html#__construct()", "ZipIterator::__serialize()()": "class-cake.collection.iterator.zipiterator.html#__serialize()", "ZipIterator::__unserialize()()": "class-cake.collection.iterator.zipiterator.html#__unserialize()", "ZipIterator::_createMatcherFilter()()": "class-cake.collection.iterator.zipiterator.html#_createMatcherFilter()", "ZipIterator::_extract()()": "class-cake.collection.iterator.zipiterator.html#_extract()", "ZipIterator::_propertyExtractor()()": "class-cake.collection.iterator.zipiterator.html#_propertyExtractor()", "ZipIterator::_simpleExtract()()": "class-cake.collection.iterator.zipiterator.html#_simpleExtract()", "ZipIterator::append()()": "class-cake.collection.iterator.zipiterator.html#append()", "ZipIterator::appendItem()()": "class-cake.collection.iterator.zipiterator.html#appendItem()", "ZipIterator::avg()()": "class-cake.collection.iterator.zipiterator.html#avg()", "ZipIterator::buffered()()": "class-cake.collection.iterator.zipiterator.html#buffered()", "ZipIterator::cartesianProduct()()": "class-cake.collection.iterator.zipiterator.html#cartesianProduct()", "ZipIterator::chunk()()": "class-cake.collection.iterator.zipiterator.html#chunk()", "ZipIterator::chunkWithKeys()()": "class-cake.collection.iterator.zipiterator.html#chunkWithKeys()", "ZipIterator::combine()()": "class-cake.collection.iterator.zipiterator.html#combine()", "ZipIterator::compile()()": "class-cake.collection.iterator.zipiterator.html#compile()", "ZipIterator::contains()()": "class-cake.collection.iterator.zipiterator.html#contains()", "ZipIterator::count()()": "class-cake.collection.iterator.zipiterator.html#count()", "ZipIterator::countBy()()": "class-cake.collection.iterator.zipiterator.html#countBy()", "ZipIterator::countKeys()()": "class-cake.collection.iterator.zipiterator.html#countKeys()", "ZipIterator::current()()": "class-cake.collection.iterator.zipiterator.html#current()", "ZipIterator::each()()": "class-cake.collection.iterator.zipiterator.html#each()", "ZipIterator::every()()": "class-cake.collection.iterator.zipiterator.html#every()", "ZipIterator::extract()()": "class-cake.collection.iterator.zipiterator.html#extract()", "ZipIterator::filter()()": "class-cake.collection.iterator.zipiterator.html#filter()", "ZipIterator::first()()": "class-cake.collection.iterator.zipiterator.html#first()", "ZipIterator::firstMatch()()": "class-cake.collection.iterator.zipiterator.html#firstMatch()", "ZipIterator::groupBy()()": "class-cake.collection.iterator.zipiterator.html#groupBy()", "ZipIterator::indexBy()()": "class-cake.collection.iterator.zipiterator.html#indexBy()", "ZipIterator::insert()()": "class-cake.collection.iterator.zipiterator.html#insert()", "ZipIterator::isEmpty()()": "class-cake.collection.iterator.zipiterator.html#isEmpty()", "ZipIterator::jsonSerialize()()": "class-cake.collection.iterator.zipiterator.html#jsonSerialize()", "ZipIterator::last()()": "class-cake.collection.iterator.zipiterator.html#last()", "ZipIterator::lazy()()": "class-cake.collection.iterator.zipiterator.html#lazy()", "ZipIterator::listNested()()": "class-cake.collection.iterator.zipiterator.html#listNested()", "ZipIterator::map()()": "class-cake.collection.iterator.zipiterator.html#map()", "ZipIterator::match()()": "class-cake.collection.iterator.zipiterator.html#match()", "ZipIterator::max()()": "class-cake.collection.iterator.zipiterator.html#max()", "ZipIterator::median()()": "class-cake.collection.iterator.zipiterator.html#median()", "ZipIterator::min()()": "class-cake.collection.iterator.zipiterator.html#min()", "ZipIterator::nest()()": "class-cake.collection.iterator.zipiterator.html#nest()", "ZipIterator::newCollection()()": "class-cake.collection.iterator.zipiterator.html#newCollection()", "ZipIterator::optimizeUnwrap()()": "class-cake.collection.iterator.zipiterator.html#optimizeUnwrap()", "ZipIterator::prepend()()": "class-cake.collection.iterator.zipiterator.html#prepend()", "ZipIterator::prependItem()()": "class-cake.collection.iterator.zipiterator.html#prependItem()", "ZipIterator::reduce()()": "class-cake.collection.iterator.zipiterator.html#reduce()", "ZipIterator::reject()()": "class-cake.collection.iterator.zipiterator.html#reject()", "ZipIterator::sample()()": "class-cake.collection.iterator.zipiterator.html#sample()", "ZipIterator::serialize()()": "class-cake.collection.iterator.zipiterator.html#serialize()", "ZipIterator::shuffle()()": "class-cake.collection.iterator.zipiterator.html#shuffle()", "ZipIterator::skip()()": "class-cake.collection.iterator.zipiterator.html#skip()", "ZipIterator::some()()": "class-cake.collection.iterator.zipiterator.html#some()", "ZipIterator::sortBy()()": "class-cake.collection.iterator.zipiterator.html#sortBy()", "ZipIterator::stopWhen()()": "class-cake.collection.iterator.zipiterator.html#stopWhen()", "ZipIterator::sumOf()()": "class-cake.collection.iterator.zipiterator.html#sumOf()", "ZipIterator::take()()": "class-cake.collection.iterator.zipiterator.html#take()", "ZipIterator::takeLast()()": "class-cake.collection.iterator.zipiterator.html#takeLast()", "ZipIterator::through()()": "class-cake.collection.iterator.zipiterator.html#through()", "ZipIterator::toArray()()": "class-cake.collection.iterator.zipiterator.html#toArray()", "ZipIterator::toList()()": "class-cake.collection.iterator.zipiterator.html#toList()", "ZipIterator::transpose()()": "class-cake.collection.iterator.zipiterator.html#transpose()", "ZipIterator::unfold()()": "class-cake.collection.iterator.zipiterator.html#unfold()", "ZipIterator::unserialize()()": "class-cake.collection.iterator.zipiterator.html#unserialize()", "ZipIterator::unwrap()()": "class-cake.collection.iterator.zipiterator.html#unwrap()", "ZipIterator::zip()()": "class-cake.collection.iterator.zipiterator.html#zip()", "ZipIterator::zipWith()()": "class-cake.collection.iterator.zipiterator.html#zipWith()"}