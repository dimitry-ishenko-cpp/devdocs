#!/usr/bin/env python3

from json import load
from pathlib import Path
from subprocess import call, check_output
from sys import argv

pgm = argv[0]
sep = " â€¢ "

root_path = Path("@DEVDOCS_INSTALL_DATADIR@")
html_path = root_path / "html"

index = sorted([ path.name for path in html_path.iterdir() ])

def get_item(items, query):
    input = "\n".join(items)
    try: return check_output([ "fzf", "--query=" + query ], input=input, encoding="utf8").rstrip()
    except: return None

def open_url(url):
    call([ "w3m", url ])

def find_doc(name):
    for doc in index:
        if doc.startswith(name): return doc
    return None

def grep_doc(name):
    if doc := find_doc(name): grep_item(doc, "")
    else: grep_item_all(name)

def get_items(doc, mark=""):
    doc_path = html_path / doc
    with open(doc_path / "index.json") as fp: doc_index = load(fp)
    return { (mark + item): (doc_path / path) for item, path in doc_index.items() }

def open_item(items, query):
    item = get_item(items.keys(), query)
    if item: open_url(items[item])

def grep_item_all(query):
    items = { }
    for doc in index:
        items.update(get_items(doc, doc + sep))
    open_item(items, query)

def grep_item(name, query):
    if doc := find_doc(name):
        items = get_items(doc)
        open_item(items, query)

def usage():
    b = "\033[1m"
    n = "\033[0m"
    print("""
Usage: {b}{pgm}{n} [{b}topic{n}] [{b}pattern{n}]
   or: {b}{pgm}{n} -h|--help
   or: {b}{pgm}{n} -v|--version

If {b}topic{n} is omitted or set to {b}?{n}, the pattern will be searched in
all available topics.

If {b}pattern{n} is omitted, all entries for the given topic will be searched.

Examples:

(1) {b}{pgm}{n} - show interactive search list of all entries in all available
topics sorted alphabetically (see {b}fzf(1){n} on how to search and navigate
the list).

(2) {b}{pgm} typescript{n} - limit list to the {b}typescript{n} topic only.

(3) {b}{pgm} type{n} - same as above (topic name can be abbreviated).

(4) {b}{pgm} cpp string{n} - show list for {b}cpp{n} and set initial search
query to {b}string{n}.

(5) {b}{pgm} pe glob{n} - show list for {b}perl{n} (abbreviated) with {b}glob{n}
as the initial search query.

(6) {b}{pgm} glob{n} - search list for all topics with {b}glob{n} as the
initial query.

(7) {b}{pgm} ? type{n} - search list for all topics with {b}type{n} as the
initial query.

(8) {b}{pgm} ? -h{n} - search list with {b}-h{n} initial query (or {b}?{n}, {b}-v{n}, etc).

Share and enjoy.
""")

####################
if len(argv) == 1: grep_item_all("")

elif len(argv) == 2:
    if argv[1] in [ "-h", "--help" ]: usage()

    elif argv[1] in [ "-v", "--version" ]:
        print(pgm + " version @PROJECT_VERSION@")

    else:
        _, name = argv
        grep_doc(name)

elif len(argv) == 3:
    _, name, query = argv
    grep_item_all(query) if name == "?" else grep_item(name, query)

else: usage()
