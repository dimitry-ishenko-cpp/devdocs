#!/usr/bin/env python3

from json import load
from pathlib import Path
from subprocess import call, check_output
from sys import argv

root_path = Path("@DEVDOCS_INSTALL_DATADIR@")
html_path = root_path / "html"

index = sorted([ path.name for path in html_path.iterdir() ])

def find_doc(name):
    if name in index: return name
    for doc in index:
        if doc.startswith(name): return doc
    return None

def grep_doc(name):
    doc = find_doc(name)
    if doc:
        grep_item(doc, "")
    else: grep_item_all(name)

def get_items(doc, mark=""):
    doc_path = html_path / doc
    with open(doc_path / "index.json") as fp:
        doc_index = load(fp)
    return { (mark + item): (doc_path / path) for item, path in doc_index.items() }

def open_item(find, item):
    try:
        input = "\n".join(find.keys())
        item = check_output(["fzf", "-q", item], input=input, encoding="utf8").rstrip()
        call(["w3m", find[item]])
    except:
        pass

def grep_item_all(item):
    find = { }
    for doc in index:
        find.update(get_items(doc, doc + " â€¢ "))
    open_item(find, item)

def grep_item(name, item):
    doc = find_doc(name)
    if doc:
        find = get_items(doc)
        open_item(find, item)

def usage():
    print("""
Usage: {b}{app}{n} [{b}topic{n}] [{b}pattern{n}]
   or: {b}{app}{n} -h|--help
   or: {b}{app}{n} -v|--version

If {b}topic{n} is omitted or set to {b}?{n}, the pattern will be searched in
all available topics.

If {b}pattern{n} is omitted, all entries for the given topic will be searched.

Examples:

(1) {b}{app}{n} - show interactive search list of all entries in all available
topics sorted alphabetically (see {b}fzf(1){n} on how to search and navigate
the list).

(2) {b}{app} typescript{n} - limit list to the {b}typescript{n} topic only.

(3) {b}{app} type{n} - same as above (topic name can be abbreviated).

(4) {b}{app} cpp string{n} - show list for {b}cpp{n} and set initial search
query to {b}string{n}.

(5) {b}{app} pe glob{n} - show list for {b}perl{n} (abbreviated) with {b}glob{n}
as the initial search query.

(6) {b}{app} glob{n} - search list for all topics with {b}glob{n} as the
initial query.

(7) {b}{app} ? type{n} - search list for all topics with {b}type{n} as the
initial query.

(8) {b}{app} ? -h{n} - search list with {b}-h{n} initial query (or {b}?{n}, {b}-v{n}, etc).

Share and enjoy.
""".format(app = argv[0], b = "\033[1m", n = "\033[0m"))

####################
if len(argv) == 1:
    grep_item_all("")

elif len(argv) == 2:
    if argv[1] in [ "-h", "--help" ]:
        usage()

    elif argv[1] in [ "-v", "--version" ]:
        print(argv[0] + " version @PROJECT_VERSION@")

    else:
        _, name = argv
        grep_doc(name)

elif len(argv) == 3:
    _, name, item = argv
    grep_item_all(item) if name == "?" else grep_item(name, item)

else: usage()
