#!/usr/bin/env python3

from json import load
from pathlib import Path
from subprocess import call, check_output
from sys import argv

root_path = Path("@DEVDOCS_INSTALL_DATADIR@")
html_path = root_path / "html"

index = sorted([ path.name for path in html_path.iterdir() ])

def find_doc(name):
    if name in index: return name
    for doc in index:
        if doc.startswith(name): return doc
    return None

def open_index_all():
    try:
        input = "\n".join(index)
        doc = check_output(["fzf", "+s"], input=input, encoding="utf8").rstrip()
        open_index(doc)
    except:
        pass

def open_index(name):
    doc = find_doc(name)
    if doc:
        path = html_path / doc / "index.html"
        if path.exists(): call(["w3m", path])
    else: open_item_all(name)

def get_path(doc, item):
    doc_path = html_path / doc
    with open(doc_path / "index.json") as fp:
        doc_index = load(fp)
    return doc_path, doc_index.get(item)

def open_item(name, item):
    doc = find_doc(name)
    if doc:
        doc_path, item_path = get_path(doc, item)
        if item_path: call(["w3m", doc_path / item_path])

def open_item_all(item):
    find = { }
    for doc in index:
        doc_path, item_path = get_path(doc, item)
        if item_path: find[f"{doc} â€¢ {item}"] = doc_path / item_path

    if len(find) > 1:
        try:
            input = "\n".join(find.keys())
            item = check_output(["fzf", "+s"], input=input, encoding="utf8").rstrip()
            call(["w3m", find[item]])
        except:
            pass

    elif len(find) == 1:
        call([ "w3m", next(iter(find.values())) ])

def usage():
    print("""
Usage: {b}{app}{n} [{b}topic{n}] [{b}entry{n}]
   or: {b}{app}{n} -h|--help
   or: {b}{app}{n} -v|--version

If {b}topic{n} is omitted or set to {b}?{n}, the entry will be searched in all
available topics.

If {b}entry{n} is omitted, index page for the given topic will be shown.

Examples:

(1) {b}{app}{n} - show interactive list of available topics and open index page
for the selected one (see {b}fzf(1){n} on how to navigate the list).

(2) {b}{app} typescript{n} - open index page for {b}typescript{n}.

(3) {b}{app} type{n} - same as above (topic name can be abbreviated).

(4) {b}{app} cpp string{n} - open entry page for {b}string{n} in the {b}cpp{n} topic.

(5) {b}{app} pe glob{n} - open entry page for {b}glob{n} in {b}perl{n} (abbreviated).

(6) {b}{app} glob{n} - search all topics for the {b}glob{n} entry; if {b}glob{n}
exists in more than one topic, show interactive list.

(7) {b}{app} ? type{n} - search all topics for the {b}type{n} entry.

(8) {b}{app} ? -h{n} - search all topics for the {b}-h{n} entry (or {b}?{n}, {b}-v{n}, etc).

Share and enjoy.
""".format(app = argv[0], b = "\033[1m", n = "\033[0m"))

####################
if len(argv) == 1:
    open_index_all()

elif len(argv) == 2:
    if argv[1] in [ "-h", "--help" ]:
        usage()

    elif argv[1] in [ "-v", "--version" ]:
        print(argv[0] + " version @PROJECT_VERSION@")

    else:
        _, name = argv
        open_index(name)

elif len(argv) == 3:
    _, name, item = argv
    open_item_all(item) if name == "?" else open_item(name, item)

else: usage()
