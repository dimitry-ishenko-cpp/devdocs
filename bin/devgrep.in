#!/usr/bin/env python3

import argparse
from json import load
from pathlib import Path
from subprocess import call, check_output
from sys import argv

pgm = Path(argv[0]).name
sep = " â€¢ "
fzf = [ "fzf" ]
devopen = argv[0].replace("grep", "open")

root_path = Path("@DEVDOCS_INSTALL_DATADIR@")
html_path = root_path / "html"

local = sorted([ path.name for path in html_path.iterdir() ])

def get_item(items, query):
    input = "\n".join(items)
    try: return check_output(fzf + [ "--query=" + query ], input=input, encoding="utf8").rstrip()
    except: return None

def open_url(url):
    call([ "w3m", url ])

def find_doc(name):
    for doc in local:
        if doc.startswith(name): return doc
    return None

def grep_docs(docs, query=""):
    items = { }
    for doc in docs:
        doc_path = html_path / doc
        with open(doc_path / "index.json") as fp: index = load(fp)
        for item, item_path in index.items():
            items[doc + sep + item] = doc_path / item_path

    if item := get_item(items.keys(), query): open_url(items[item])

def grep_doc(name, query):
    if doc := find_doc(name): grep_docs([doc], query)

def grep_check(name):
    if doc := find_doc(name): grep_docs([doc])
    else: grep_docs(local, name)

def usage():
    b = "\033[1m"
    n = "\033[0m"
    print(f"""
Usage: {b}{pgm}{n} [-p|--preview] [{b}topic{n}] [{b}pattern{n}]
   or: {b}{pgm}{n}  -h|--help
   or: {b}{pgm}{n}  -v|--version

If {b}topic{n} is omitted or set to {b}?{n}, the pattern will be searched in
all available topics.

If {b}pattern{n} is omitted, all entries for the given topic will be searched.

Examples:

(1) {b}{pgm}{n} - show interactive search list of all entries in all available
topics sorted alphabetically (see {b}fzf(1){n} on how to search and navigate
the list).

(2) {b}{pgm} typescript{n} - limit list to the {b}typescript{n} topic only.

(3) {b}{pgm} type{n} - same as above (topic name can be abbreviated).

(4) {b}{pgm} cpp string{n} - show list for {b}cpp{n} and set initial search
query to {b}string{n}.

(5) {b}{pgm} pe glob{n} - show list for {b}perl{n} (abbreviated) with {b}glob{n}
as the initial search query.

(6) {b}{pgm} glob{n} - search list for all topics with {b}glob{n} as the
initial query.

(7) {b}{pgm} ? type{n} - search list for all topics with {b}type{n} as the
initial query.

(8) {b}{pgm} -- -h{n} - search list with {b}-h{n} initial query (or {b}-v{n}, etc).

Share and enjoy.
""")

####################
class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        super().__init__(add_help=False)
        self.add_argument("-h", "--help"   , action="store_true")
        self.add_argument("-v", "--version", action="store_true")
        self.add_argument("-p", "--preview", action="store_true")
        self.add_argument("topic", nargs="?")
        self.add_argument("pattern" , nargs="?")

    def error(self, message):
        print("Error:", message)
        usage()
        exit(1)

parser = ArgumentParser()
args = parser.parse_args()

if args.preview:
    fzf += [ "--preview="+devopen+" {}", "--preview-window=,66%" ]

if args.help:
    usage()

elif args.version:
    print(pgm + " version @PROJECT_VERSION@")

elif args.pattern:
    if args.topic == "?":
        grep_docs(local, args.pattern)
    else: grep_doc(args.topic, args.pattern)

elif args.topic:
    grep_check(args.topic)

else: grep_docs(local)
