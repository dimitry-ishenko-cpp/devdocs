#!/usr/bin/env python3

import argparse
import json
from pathlib import Path
import re
import shutil
from sys import argv, stderr
from tempfile import TemporaryDirectory as tempdir
import urllib.request as request

pgm = Path(argv[0]).name

root_path = Path("@DEVDOCS_INSTALL_DATADIR@")
html_path = root_path / "html"

docs_url = "https://devdocs.io/docs.json"
doc_templ_url = "https://documents.devdocs.io/{}/{}"

opener = request.build_opener()
opener.addheaders = [("User-agent", "Mozilla/5.0")]
request.install_opener(opener)

def download(url, banner):
    def spin():
        while True:
            for c in "||//--\\\\": yield c
    spinner = spin()

    def reporthook(*args):
        print(next(spinner) + "\b", end="", flush=True)

    with tempdir() as dirname:
        path = Path(dirname) / "file.json"

        print(f"{banner:.<40s} ", end="")
        request.urlretrieve(url, path, reporthook)
        with open(path) as fp: content = json.load(fp)
        print("OK")

    return content

def purge(path, rmdir=False):
    for child in path.iterdir():
        shutil.rmtree(child) if child.is_dir() else child.unlink()
    if rmdir: path.rmdir()

def save_db(path, db):
    for item, content in db.items():
        item_path = path / (item + ".html")
        item_path.parent.mkdir(parents=True, exist_ok=True)

        content = re.sub('((href=")(?!http)[^"#]+)', "\\1.html", content)
        item_path.write_text(content)

def save_index(path, old_index):
    index = { }
    for e in old_index["entries"]:
        index[e["name"]] = re.sub("^([^#]+)", "\\1.html", e["path"])

    index_path = path / "index.json"
    with open(index_path, "w") as fp: json.dump(index, fp)

def get_online():
    return download(docs_url, "Document index")

def get_local():
    loc = { }
    for path in html_path.iterdir():
        if path.is_dir():
            name = path.name
            slug_path = path / "slug"
            slug = slug_path.read_text() if slug_path.exists() else name
            loc[slug] = name
    # sort by name
    return dict(sorted(loc.items(), key=lambda item: item[1]))

def install_update(loc, force):
    for doc in get_online():
        slug = doc["slug"]

        if name := loc.get(slug):
            path = html_path / name
            slug_path = path / "slug"

            mtime_path = path / "mtime"
            old_mtime = mtime_path.read_text() if mtime_path.exists() else ""

            mtime = str(doc["mtime"])
            if mtime != old_mtime or force:
                index = download(doc_templ_url.format(slug, "index.json"), slug + "-index")
                db = download(doc_templ_url.format(slug, "db.json"), slug + "-db")

                purge(path) if path.exists() else path.mkdir()

                save_db(path, db)
                save_index(path, index)

                slug_path.write_text(slug)
                mtime_path.write_text(mtime)

def show_online():
    for doc in get_online(): print(doc["slug"])

def show_local():
    print("Local topics:")
    for slug, name in get_local().items():
        print(name + ("" if name == slug else " [" + slug + "]"))

def update():
    install_update(get_local(), force=False)

def install(docs):
    loc = { }
    for doc in docs:
        name, _, slug = doc.partition("=")
        if not slug:
            slug_path = html_path / name / "slug"
            slug = slug_path.read_text() if slug_path.exists() else name
        loc[slug] = name

    install_update(loc, force=True)

def remove(names):
    print("Removing topics:")
    loc = get_local()

    for name in names:
        path = html_path / name
        if path.exists():
            print(name)
            purge(path, rmdir=True)

        else:
            slug = name
            if name := loc.get(slug):
                path = html_path / name
                if path.exists():
                    print(slug)
                    purge(path, rmdir=True)

def usage():
    b = "\033[1m"
    n = "\033[0m"
    print(f"""
Usage: {b}{pgm}{n} -a|--all
   or: {b}{pgm}{n} -l|--local
   or: {b}{pgm}{n} -u|--update
   or: {b}{pgm}{n} -i|--install {b}topic{n} [{b}topic{n}] ...
   or: {b}{pgm}{n} -r|--remove  {b}topic{n} [{b}topic{n}] ...
   or: {b}{pgm}{n} -h|--help
   or: {b}{pgm}{n} -v|--version

Where:
    -a|--all        Show all topics available online.
    -l|--local      Show locally cached topics.
    -u|--update     Update all local topics.

    -i|--install    Cache one or more topics locally.
    -r|--remove     Remove local topic(s).

Share and enjoy.
""")

####################
class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        super().__init__(add_help=False)
        self.add_argument( "-h", "--help"   , action="store_true")
        self.add_argument( "-v", "--version", action="store_true")

        group = self.add_mutually_exclusive_group()
        group.add_argument("-a", "--all"    , action="store_true")
        group.add_argument("-l", "--local"  , action="store_true")
        group.add_argument("-u", "--update" , action="store_true")
        group.add_argument("-i", "--install", metavar="topic", nargs="+")
        group.add_argument("-r", "--remove" , metavar="topic", nargs="+")

    def error(self, message):
        print("Error:", message, file=stderr)
        exit(1)

try:
    parser = ArgumentParser()
    args = parser.parse_args()

    if args.version:
        print(pgm + " version @PROJECT_VERSION@")

    elif args.all:
        show_online()

    elif args.local:
        show_local()

    elif args.update:
        update()

    elif args.install:
        install(args.install)

    elif args.remove:
        remove(args.remove)

    else: usage()

except Exception as error:
    print("\nError:", error, file=stderr)
    exit(1)
